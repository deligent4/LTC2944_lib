
ltc2944_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  08007df0  08007df0  00017df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e4  080089e4  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  080089e4  080089e4  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089e4  080089e4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089e4  080089e4  000189e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080089ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  20000204  08008bf0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  08008bf0  00020944  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dab4  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002734  00000000  00000000  0002dd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00030458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097f  00000000  00000000  000310c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cbc7  00000000  00000000  00031a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115ef  00000000  00000000  0004e60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cd93  00000000  00000000  0005fbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043f0  00000000  00000000  000ec990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000f0d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	08007dd4 	.word	0x08007dd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	08007dd4 	.word	0x08007dd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_ADC1_Init+0x74>)
 8000ff6:	4a19      	ldr	r2, [pc, #100]	; (800105c <MX_ADC1_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_ADC1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_ADC1_Init+0x74>)
 8001002:	2201      	movs	r2, #1
 8001004:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_ADC1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_ADC1_Init+0x74>)
 800100e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_ADC1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_ADC1_Init+0x74>)
 800101c:	2201      	movs	r2, #1
 800101e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC1_Init+0x74>)
 8001022:	f001 f98f 	bl	8002344 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800102c:	f000 fd0e 	bl	8001a4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001030:	2308      	movs	r3, #8
 8001032:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001034:	2301      	movs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001038:	2303      	movs	r3, #3
 800103a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_ADC1_Init+0x74>)
 8001042:	f001 fc17 	bl	8002874 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800104c:	f000 fcfe 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000220 	.word	0x20000220
 800105c:	40012400 	.word	0x40012400

08001060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <HAL_ADC_MspInit+0x6c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d121      	bne.n	80010c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_ADC_MspInit+0x74>)
 80010c0:	f001 fe50 	bl	8002d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40012400 	.word	0x40012400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010c00 	.word	0x40010c00

080010d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <MX_GPIO_Init+0xa8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a23      	ldr	r2, [pc, #140]	; (8001180 <MX_GPIO_Init+0xa8>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_GPIO_Init+0xa8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_GPIO_Init+0xa8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <MX_GPIO_Init+0xa8>)
 800110a:	f043 0320 	orr.w	r3, r3, #32
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_GPIO_Init+0xa8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_GPIO_Init+0xa8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a17      	ldr	r2, [pc, #92]	; (8001180 <MX_GPIO_Init+0xa8>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_GPIO_Init+0xa8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_GPIO_Init+0xa8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a11      	ldr	r2, [pc, #68]	; (8001180 <MX_GPIO_Init+0xa8>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_GPIO_Init+0xa8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <MX_GPIO_Init+0xac>)
 8001154:	f001 ff8a 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLU_Pin;
 8001158:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2302      	movs	r3, #2
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	4619      	mov	r1, r3
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_GPIO_Init+0xac>)
 8001172:	f001 fdf7 	bl	8002d64 <HAL_GPIO_Init>

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	40011000 	.word	0x40011000

08001188 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_I2C1_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <MX_I2C1_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_I2C1_Init+0x50>)
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_I2C1_Init+0x58>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011c6:	f001 ff83 	bl	80030d0 <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d0:	f000 fc3c 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000250 	.word	0x20000250
 80011dc:	40005400 	.word	0x40005400
 80011e0:	000186a0 	.word	0x000186a0

080011e4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C2_Init+0x50>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_I2C2_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C2_Init+0x50>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_I2C2_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C2_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_I2C2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_I2C2_Init+0x50>)
 8001202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001206:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_I2C2_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_I2C2_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_I2C2_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_I2C2_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_I2C2_Init+0x50>)
 8001222:	f001 ff55 	bl	80030d0 <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800122c:	f000 fc0e 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200002a4 	.word	0x200002a4
 8001238:	40005800 	.word	0x40005800
 800123c:	00061a80 	.word	0x00061a80

08001240 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <HAL_I2C_MspInit+0xc8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d124      	bne.n	80012aa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_I2C_MspInit+0xcc>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a29      	ldr	r2, [pc, #164]	; (800130c <HAL_I2C_MspInit+0xcc>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_I2C_MspInit+0xcc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001278:	23c0      	movs	r3, #192	; 0xc0
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127c:	2312      	movs	r3, #18
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	4619      	mov	r1, r3
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <HAL_I2C_MspInit+0xd0>)
 800128c:	f001 fd6a 	bl	8002d64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_I2C_MspInit+0xcc>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_I2C_MspInit+0xcc>)
 8001296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129a:	61d3      	str	r3, [r2, #28]
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_I2C_MspInit+0xcc>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012a8:	e029      	b.n	80012fe <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a19      	ldr	r2, [pc, #100]	; (8001314 <HAL_I2C_MspInit+0xd4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d124      	bne.n	80012fe <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_I2C_MspInit+0xcc>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_I2C_MspInit+0xcc>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_I2C_MspInit+0xcc>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d2:	2312      	movs	r3, #18
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	4619      	mov	r1, r3
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <HAL_I2C_MspInit+0xd0>)
 80012e2:	f001 fd3f 	bl	8002d64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_I2C_MspInit+0xcc>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_I2C_MspInit+0xcc>)
 80012ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_I2C_MspInit+0xcc>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40005400 	.word	0x40005400
 800130c:	40021000 	.word	0x40021000
 8001310:	40010c00 	.word	0x40010c00
 8001314:	40005800 	.word	0x40005800

08001318 <LTC2944_Init>:
#include "i2c.h"

ltc2944_data_t ltc2944_data;
float Perscaler_Table[] = {1.0, 4.0, 16.0, 64.0, 256.0, 1024.0, 4096.0};
//
void LTC2944_Init(ltc2944_configuration_t ltc2944){
 8001318:	b084      	sub	sp, #16
 800131a:	b5b0      	push	{r4, r5, r7, lr}
 800131c:	b088      	sub	sp, #32
 800131e:	af04      	add	r7, sp, #16
 8001320:	f107 0420 	add.w	r4, r7, #32
 8001324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ctrl_reg = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	71fb      	strb	r3, [r7, #7]
	float prescalar_value;
	uint8_t status;

	ctrl_reg |= ltc2944.adc_mode << 6;
 800132c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001330:	019b      	lsls	r3, r3, #6
 8001332:	b25a      	sxtb	r2, r3
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b25b      	sxtb	r3, r3
 800133c:	b2db      	uxtb	r3, r3
 800133e:	71fb      	strb	r3, [r7, #7]
	ctrl_reg |= ltc2944.prescalar_mode << 3;
 8001340:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	b25a      	sxtb	r2, r3
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b25b      	sxtb	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	71fb      	strb	r3, [r7, #7]
	ctrl_reg |= ltc2944.alcc_mode << 1;
 8001354:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	b25a      	sxtb	r2, r3
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	b25b      	sxtb	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b25b      	sxtb	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	71fb      	strb	r3, [r7, #7]

	status = HAL_I2C_Mem_Write(&(ltc2944.i2c_handle), LTC2944_ADDRESS,
 8001368:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	2201      	movs	r2, #1
 800137e:	21c8      	movs	r1, #200	; 0xc8
 8001380:	f001 ffea 	bl	8003358 <HAL_I2C_Mem_Write>
 8001384:	4603      	mov	r3, r0
 8001386:	73fb      	strb	r3, [r7, #15]
			CONTROL_REGISTER, 1, &ctrl_reg, 1, HAL_MAX_DELAY);

	if(status == HAL_OK){
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d135      	bne.n	80013fa <LTC2944_Init+0xe2>
		prescalar_value = Perscaler_Table[ltc2944.prescalar_mode];
 800138e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001392:	461a      	mov	r2, r3
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <LTC2944_Init+0x100>)
 8001396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139a:	60bb      	str	r3, [r7, #8]
		ltc2944_data.qLSB = FACTOR_CHARGE_QLSB * (0.05 / ltc2944.sense_resistor)
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f842 	bl	8000428 <__aeabi_f2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	a117      	add	r1, pc, #92	; (adr r1, 8001408 <LTC2944_Init+0xf0>)
 80013aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013ae:	f7ff f9bd 	bl	800072c <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	a315      	add	r3, pc, #84	; (adr r3, 8001410 <LTC2944_Init+0xf8>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f88a 	bl	80004d8 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4614      	mov	r4, r2
 80013ca:	461d      	mov	r5, r3
							* (prescalar_value / 4096.0);
 80013cc:	68b8      	ldr	r0, [r7, #8]
 80013ce:	f7ff f82b 	bl	8000428 <__aeabi_f2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <LTC2944_Init+0x104>)
 80013d8:	f7ff f9a8 	bl	800072c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7ff f878 	bl	80004d8 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fb4a 	bl	8000a88 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
		ltc2944_data.qLSB = FACTOR_CHARGE_QLSB * (0.05 / ltc2944.sense_resistor)
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <LTC2944_Init+0x108>)
 80013f8:	6113      	str	r3, [r2, #16]
	}
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001404:	b004      	add	sp, #16
 8001406:	4770      	bx	lr
 8001408:	9999999a 	.word	0x9999999a
 800140c:	3fa99999 	.word	0x3fa99999
 8001410:	e0000000 	.word	0xe0000000
 8001414:	3f364840 	.word	0x3f364840
 8001418:	20000000 	.word	0x20000000
 800141c:	40b00000 	.word	0x40b00000
 8001420:	200002f8 	.word	0x200002f8
 8001424:	00000000 	.word	0x00000000

08001428 <LTC2944_Get_Battery_Data>:

uint8_t LTC2944_Get_Battery_Data(ltc2944_configuration_t *ltc2944){
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af04      	add	r7, sp, #16
 800142e:	6078      	str	r0, [r7, #4]
	uint16_t temp;
	uint8_t status;
	uint8_t data_buffer[NUMBER_OF_REGISTERS];

	status = HAL_I2C_Mem_Read(&(ltc2944->i2c_handle), LTC2944_ADDRESS, STATUS_REGISTER,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f103 0008 	add.w	r0, r3, #8
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2317      	movs	r3, #23
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	2200      	movs	r2, #0
 800144a:	21c8      	movs	r1, #200	; 0xc8
 800144c:	f002 f87e 	bl	800354c <HAL_I2C_Mem_Read>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			1 , data_buffer, NUMBER_OF_REGISTERS, HAL_MAX_DELAY);

	if(status == HAL_OK){
 8001456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800145a:	2b00      	cmp	r3, #0
 800145c:	f040 809a 	bne.w	8001594 <LTC2944_Get_Battery_Data+0x16c>

		temp = (data_buffer[ACCUMULATED_CHARGE_MSB]) << 8 | (data_buffer[ACCUMULATED_CHARGE_LSB]);
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b21b      	sxth	r3, r3
 800146e:	84bb      	strh	r3, [r7, #36]	; 0x24
		ltc2944_data.acc_charge = ltc2944_data.qLSB * temp;
 8001470:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <LTC2944_Get_Battery_Data+0x198>)
 8001472:	691c      	ldr	r4, [r3, #16]
 8001474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fc10 	bl	8000c9c <__aeabi_i2f>
 800147c:	4603      	mov	r3, r0
 800147e:	4619      	mov	r1, r3
 8001480:	4620      	mov	r0, r4
 8001482:	f7ff fc5f 	bl	8000d44 <__aeabi_fmul>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <LTC2944_Get_Battery_Data+0x198>)
 800148c:	601a      	str	r2, [r3, #0]

		temp = (data_buffer[VOLTAGE_MSB] << 8) | (data_buffer[VOLTAGE_LSB]);
 800148e:	7d3b      	ldrb	r3, [r7, #20]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21a      	sxth	r2, r3
 8001494:	7d7b      	ldrb	r3, [r7, #21]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	84bb      	strh	r3, [r7, #36]	; 0x24
		ltc2944_data.voltage = 70.8 * (float)(temp/65535.0);
 800149e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe ffaf 	bl	8000404 <__aeabi_i2d>
 80014a6:	a33e      	add	r3, pc, #248	; (adr r3, 80015a0 <LTC2944_Get_Battery_Data+0x178>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f93e 	bl	800072c <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fae6 	bl	8000a88 <__aeabi_d2f>
 80014bc:	4603      	mov	r3, r0
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ffb2 	bl	8000428 <__aeabi_f2d>
 80014c4:	a338      	add	r3, pc, #224	; (adr r3, 80015a8 <LTC2944_Get_Battery_Data+0x180>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f805 	bl	80004d8 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fad7 	bl	8000a88 <__aeabi_d2f>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <LTC2944_Get_Battery_Data+0x198>)
 80014de:	6053      	str	r3, [r2, #4]

		temp = (data_buffer[CURRENT_MSB] << 8) | (data_buffer)[CURRENT_LSB];
 80014e0:	7ebb      	ldrb	r3, [r7, #26]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	7efb      	ldrb	r3, [r7, #27]
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		ltc2944_data.current = (0.064 / ltc2944->sense_resistor) * ((temp - 32767.0) / 32767.0);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ff97 	bl	8000428 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	a12c      	add	r1, pc, #176	; (adr r1, 80015b0 <LTC2944_Get_Battery_Data+0x188>)
 8001500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001504:	f7ff f912 	bl	800072c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ff76 	bl	8000404 <__aeabi_i2d>
 8001518:	a327      	add	r3, pc, #156	; (adr r3, 80015b8 <LTC2944_Get_Battery_Data+0x190>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7fe fe23 	bl	8000168 <__aeabi_dsub>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	a323      	add	r3, pc, #140	; (adr r3, 80015b8 <LTC2944_Get_Battery_Data+0x190>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f8fc 	bl	800072c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe ffcc 	bl	80004d8 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fa9e 	bl	8000a88 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <LTC2944_Get_Battery_Data+0x198>)
 8001550:	6093      	str	r3, [r2, #8]

		temp = (data_buffer[TEMPERATURE_MSB] << 8) | (data_buffer[TEMPERATURE_LSB]);
 8001552:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21b      	sxth	r3, r3
 8001564:	84bb      	strh	r3, [r7, #36]	; 0x24
		ltc2944_data.temperature = (501 * (float)(temp / 65535)) - 273;
 8001566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001568:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <LTC2944_Get_Battery_Data+0x19c>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0bdb      	lsrs	r3, r3, #15
 8001570:	b29b      	uxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fb92 	bl	8000c9c <__aeabi_i2f>
 8001578:	4603      	mov	r3, r0
 800157a:	4913      	ldr	r1, [pc, #76]	; (80015c8 <LTC2944_Get_Battery_Data+0x1a0>)
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fbe1 	bl	8000d44 <__aeabi_fmul>
 8001582:	4603      	mov	r3, r0
 8001584:	4911      	ldr	r1, [pc, #68]	; (80015cc <LTC2944_Get_Battery_Data+0x1a4>)
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fad2 	bl	8000b30 <__aeabi_fsub>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <LTC2944_Get_Battery_Data+0x198>)
 8001592:	60da      	str	r2, [r3, #12]
	}

	return status;
 8001594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001598:	4618      	mov	r0, r3
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bdb0      	pop	{r4, r5, r7, pc}
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40efffe0 	.word	0x40efffe0
 80015a8:	33333333 	.word	0x33333333
 80015ac:	4051b333 	.word	0x4051b333
 80015b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015b4:	3fb0624d 	.word	0x3fb0624d
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40dfffc0 	.word	0x40dfffc0
 80015c0:	200002f8 	.word	0x200002f8
 80015c4:	80008001 	.word	0x80008001
 80015c8:	43fa8000 	.word	0x43fa8000
 80015cc:	43888000 	.word	0x43888000

080015d0 <LTC2944_Get_Voltage>:


float LTC2944_Get_Voltage(ltc2944_configuration_t *ltc2944){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	uint8_t status = LTC2944_Get_Battery_Data(ltc2944);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff25 	bl	8001428 <LTC2944_Get_Battery_Data>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d104      	bne.n	80015f2 <LTC2944_Get_Voltage+0x22>
		float data = ltc2944_data.voltage;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <LTC2944_Get_Voltage+0x30>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	60bb      	str	r3, [r7, #8]
		return data;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	e001      	b.n	80015f6 <LTC2944_Get_Voltage+0x26>
	}else{
		return 0;
 80015f2:	f04f 0300 	mov.w	r3, #0
	}
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200002f8 	.word	0x200002f8

08001604 <LTC2944_Get_Current>:

float LTC2944_Get_Current(ltc2944_configuration_t *ltc2944){
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	uint8_t status = LTC2944_Get_Battery_Data(ltc2944);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff0b 	bl	8001428 <LTC2944_Get_Battery_Data>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d104      	bne.n	8001626 <LTC2944_Get_Current+0x22>
		float data = ltc2944_data.current;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <LTC2944_Get_Current+0x30>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	60bb      	str	r3, [r7, #8]
		return data;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	e001      	b.n	800162a <LTC2944_Get_Current+0x26>
	}else{
		return 0;
 8001626:	f04f 0300 	mov.w	r3, #0
	}
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002f8 	.word	0x200002f8

08001638 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001640:	1d39      	adds	r1, r7, #4
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	2201      	movs	r2, #1
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <__io_putchar+0x20>)
 800164a:	f003 fb67 	bl	8004d1c <HAL_UART_Transmit>
  return ch;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200007ac 	.word	0x200007ac
 800165c:	00000000 	.word	0x00000000

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001666:	f000 fde7 	bl	8002238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166a:	f000 f965 	bl	8001938 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemClock_Config();
 800166e:	f000 f963 	bl	8001938 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001672:	f7ff fd31 	bl	80010d8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001676:	f7ff fdb5 	bl	80011e4 <MX_I2C2_Init>
  MX_I2C1_Init();
 800167a:	f7ff fd85 	bl	8001188 <MX_I2C1_Init>
  MX_ADC1_Init();
 800167e:	f7ff fcb1 	bl	8000fe4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001682:	f000 fd3f 	bl	8002104 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001686:	f000 fa1f 	bl	8001ac8 <ssd1306_Init>
  HAL_ADC_Start(&hadc1);
 800168a:	488b      	ldr	r0, [pc, #556]	; (80018b8 <main+0x258>)
 800168c:	f000 ff32 	bl	80024f4 <HAL_ADC_Start>
  state_t state = IDLE;
 8001690:	2300      	movs	r3, #0
 8001692:	71fb      	strb	r3, [r7, #7]

  printf("Characters: %c %c\n", 'a', 65);
 8001694:	2241      	movs	r2, #65	; 0x41
 8001696:	2161      	movs	r1, #97	; 0x61
 8001698:	4888      	ldr	r0, [pc, #544]	; (80018bc <main+0x25c>)
 800169a:	f004 f9df 	bl	8005a5c <iprintf>
  printf("Decimals: %d %ld\n", 1977, 650000L);
 800169e:	4a88      	ldr	r2, [pc, #544]	; (80018c0 <main+0x260>)
 80016a0:	f240 71b9 	movw	r1, #1977	; 0x7b9
 80016a4:	4887      	ldr	r0, [pc, #540]	; (80018c4 <main+0x264>)
 80016a6:	f004 f9d9 	bl	8005a5c <iprintf>
  printf("Preceding with blanks: %10d\n", 1977);
 80016aa:	f240 71b9 	movw	r1, #1977	; 0x7b9
 80016ae:	4886      	ldr	r0, [pc, #536]	; (80018c8 <main+0x268>)
 80016b0:	f004 f9d4 	bl	8005a5c <iprintf>
  printf("Preceding with zeros: %010d\n", 1977);
 80016b4:	f240 71b9 	movw	r1, #1977	; 0x7b9
 80016b8:	4884      	ldr	r0, [pc, #528]	; (80018cc <main+0x26c>)
 80016ba:	f004 f9cf 	bl	8005a5c <iprintf>
  printf("Some different radices: %d %x %o %#x %#o\n", 100, 100, 100, 100, 100);
 80016be:	2364      	movs	r3, #100	; 0x64
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	2364      	movs	r3, #100	; 0x64
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2364      	movs	r3, #100	; 0x64
 80016c8:	2264      	movs	r2, #100	; 0x64
 80016ca:	2164      	movs	r1, #100	; 0x64
 80016cc:	4880      	ldr	r0, [pc, #512]	; (80018d0 <main+0x270>)
 80016ce:	f004 f9c5 	bl	8005a5c <iprintf>
  printf("floats: %4.2f %+.0e %E\n", 3.1416, 3.1416, 3.1416);
 80016d2:	a377      	add	r3, pc, #476	; (adr r3, 80018b0 <main+0x250>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016dc:	a374      	add	r3, pc, #464	; (adr r3, 80018b0 <main+0x250>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	e9cd 2300 	strd	r2, r3, [sp]
 80016e6:	a372      	add	r3, pc, #456	; (adr r3, 80018b0 <main+0x250>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	4879      	ldr	r0, [pc, #484]	; (80018d4 <main+0x274>)
 80016ee:	f004 f9b5 	bl	8005a5c <iprintf>
  printf("Width trick: %*d\n", 5, 10);
 80016f2:	220a      	movs	r2, #10
 80016f4:	2105      	movs	r1, #5
 80016f6:	4878      	ldr	r0, [pc, #480]	; (80018d8 <main+0x278>)
 80016f8:	f004 f9b0 	bl	8005a5c <iprintf>
  printf("%s\n", "A string");
 80016fc:	4877      	ldr	r0, [pc, #476]	; (80018dc <main+0x27c>)
 80016fe:	f004 fa13 	bl	8005b28 <puts>




  temp = temp * qbat / 1000;			// divide by 1000, as we want to input qbat in mAh
 8001702:	4b77      	ldr	r3, [pc, #476]	; (80018e0 <main+0x280>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <main+0x284>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fb02 f303 	mul.w	r3, r2, r3
 8001710:	4a75      	ldr	r2, [pc, #468]	; (80018e8 <main+0x288>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	4a72      	ldr	r2, [pc, #456]	; (80018e4 <main+0x284>)
 800171a:	6013      	str	r3, [r2, #0]

  temp = temp * rsns / 1000000;			// divide by 1000000 (10^6), as we want to input
 800171c:	4b73      	ldr	r3, [pc, #460]	; (80018ec <main+0x28c>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <main+0x284>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <main+0x290>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	0c9b      	lsrs	r3, r3, #18
 8001732:	4a6c      	ldr	r2, [pc, #432]	; (80018e4 <main+0x284>)
 8001734:	6013      	str	r3, [r2, #0]
  	  	  	  	  	  	  	  	  		// sense resistor value in micro ohms for more precision.



  voltage_ = temp * (5123 / 50000);
 8001736:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <main+0x294>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  tick = HAL_GetTick();
 800173c:	f000 fdd4 	bl	80022e8 <HAL_GetTick>
 8001740:	4603      	mov	r3, r0
 8001742:	4a6d      	ldr	r2, [pc, #436]	; (80018f8 <main+0x298>)
 8001744:	6013      	str	r3, [r2, #0]
	  printf(string_current);
 8001746:	486d      	ldr	r0, [pc, #436]	; (80018fc <main+0x29c>)
 8001748:	f004 f988 	bl	8005a5c <iprintf>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_PollForConversion(&hadc1, 10);
 800174c:	210a      	movs	r1, #10
 800174e:	485a      	ldr	r0, [pc, #360]	; (80018b8 <main+0x258>)
 8001750:	f000 ff7e 	bl	8002650 <HAL_ADC_PollForConversion>
  	  battery_detect = HAL_ADC_GetValue(&hadc1);
 8001754:	4858      	ldr	r0, [pc, #352]	; (80018b8 <main+0x258>)
 8001756:	f001 f881 	bl	800285c <HAL_ADC_GetValue>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b68      	ldr	r3, [pc, #416]	; (8001900 <main+0x2a0>)
 8001760:	801a      	strh	r2, [r3, #0]

	  switch(state){
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d021      	beq.n	80017ac <main+0x14c>
 8001768:	2b03      	cmp	r3, #3
 800176a:	dc2c      	bgt.n	80017c6 <main+0x166>
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <main+0x116>
 8001770:	2b01      	cmp	r3, #1
 8001772:	d016      	beq.n	80017a2 <main+0x142>
 8001774:	e027      	b.n	80017c6 <main+0x166>
	  case IDLE:
		  if(battery_detect >= 200){
 8001776:	4b62      	ldr	r3, [pc, #392]	; (8001900 <main+0x2a0>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	2bc7      	cmp	r3, #199	; 0xc7
 800177c:	d902      	bls.n	8001784 <main+0x124>
			  state = BATT_CONN;
 800177e:	2301      	movs	r3, #1
 8001780:	71fb      	strb	r3, [r7, #7]
		  }else{
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
			  voltage = 0.0;
			  current = 0.0;
		  }
		  break;
 8001782:	e020      	b.n	80017c6 <main+0x166>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178a:	485e      	ldr	r0, [pc, #376]	; (8001904 <main+0x2a4>)
 800178c:	f001 fc6e 	bl	800306c <HAL_GPIO_WritePin>
			  voltage = 0.0;
 8001790:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <main+0x2a8>)
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
			  current = 0.0;
 8001798:	4b5c      	ldr	r3, [pc, #368]	; (800190c <main+0x2ac>)
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
		  break;
 80017a0:	e011      	b.n	80017c6 <main+0x166>

	  case BATT_CONN:
		  Device_Config();
 80017a2:	f000 f925 	bl	80019f0 <Device_Config>
		  state = RUN;
 80017a6:	2303      	movs	r3, #3
 80017a8:	71fb      	strb	r3, [r7, #7]
		  break;
 80017aa:	e00c      	b.n	80017c6 <main+0x166>

	  case RUN:
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b2:	4854      	ldr	r0, [pc, #336]	; (8001904 <main+0x2a4>)
 80017b4:	f001 fc5a 	bl	800306c <HAL_GPIO_WritePin>
		  if(battery_detect < 200){
 80017b8:	4b51      	ldr	r3, [pc, #324]	; (8001900 <main+0x2a0>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	2bc7      	cmp	r3, #199	; 0xc7
 80017be:	d801      	bhi.n	80017c4 <main+0x164>
			  state = IDLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	71fb      	strb	r3, [r7, #7]
		  }
		  break;
 80017c4:	bf00      	nop
//	  sprintf(string_voltage, "%ld", volt);
//	  ssd1306_SetCursor(10, 20);
//	  ssd1306_WriteString(string_voltage, Font_7x10, Black);

//	  sprintf(string_voltage, "%c",v);
	  if(tick - prev_tick >= blink_delay){
 80017c6:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <main+0x298>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b51      	ldr	r3, [pc, #324]	; (8001910 <main+0x2b0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4a50      	ldr	r2, [pc, #320]	; (8001914 <main+0x2b4>)
 80017d2:	7812      	ldrb	r2, [r2, #0]
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d3b1      	bcc.n	800173c <main+0xdc>
		  prev_tick = tick;
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <main+0x298>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a4c      	ldr	r2, [pc, #304]	; (8001910 <main+0x2b0>)
 80017de:	6013      	str	r3, [r2, #0]
		  voltage = LTC2944_Get_Voltage(&ltc2944_struct);
 80017e0:	484d      	ldr	r0, [pc, #308]	; (8001918 <main+0x2b8>)
 80017e2:	f7ff fef5 	bl	80015d0 <LTC2944_Get_Voltage>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a47      	ldr	r2, [pc, #284]	; (8001908 <main+0x2a8>)
 80017ea:	6013      	str	r3, [r2, #0]
		  current = LTC2944_Get_Current(&ltc2944_struct);
 80017ec:	484a      	ldr	r0, [pc, #296]	; (8001918 <main+0x2b8>)
 80017ee:	f7ff ff09 	bl	8001604 <LTC2944_Get_Current>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a45      	ldr	r2, [pc, #276]	; (800190c <main+0x2ac>)
 80017f6:	6013      	str	r3, [r2, #0]

		  sprintf(stringValue, "%ld", tick);
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <main+0x298>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4947      	ldr	r1, [pc, #284]	; (800191c <main+0x2bc>)
 8001800:	4847      	ldr	r0, [pc, #284]	; (8001920 <main+0x2c0>)
 8001802:	f004 f999 	bl	8005b38 <siprintf>
		  ssd1306_SetCursor(10, 10);
 8001806:	210a      	movs	r1, #10
 8001808:	200a      	movs	r0, #10
 800180a:	f000 fb11 	bl	8001e30 <ssd1306_SetCursor>
		  ssd1306_WriteString(stringValue, Font_7x10, Black);
 800180e:	4a45      	ldr	r2, [pc, #276]	; (8001924 <main+0x2c4>)
 8001810:	2300      	movs	r3, #0
 8001812:	ca06      	ldmia	r2, {r1, r2}
 8001814:	4842      	ldr	r0, [pc, #264]	; (8001920 <main+0x2c0>)
 8001816:	f000 fae5 	bl	8001de4 <ssd1306_WriteString>

		  ssd1306_SetCursor(5, 20);
 800181a:	2114      	movs	r1, #20
 800181c:	2005      	movs	r0, #5
 800181e:	f000 fb07 	bl	8001e30 <ssd1306_SetCursor>
		  ssd1306_WriteString("V=", Font_7x10, Black);
 8001822:	4a40      	ldr	r2, [pc, #256]	; (8001924 <main+0x2c4>)
 8001824:	2300      	movs	r3, #0
 8001826:	ca06      	ldmia	r2, {r1, r2}
 8001828:	483f      	ldr	r0, [pc, #252]	; (8001928 <main+0x2c8>)
 800182a:	f000 fadb 	bl	8001de4 <ssd1306_WriteString>
		  sprintf(string_voltage, "%f", voltage);
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <main+0x2a8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fdf8 	bl	8000428 <__aeabi_f2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	493b      	ldr	r1, [pc, #236]	; (800192c <main+0x2cc>)
 800183e:	483c      	ldr	r0, [pc, #240]	; (8001930 <main+0x2d0>)
 8001840:	f004 f97a 	bl	8005b38 <siprintf>
		  ssd1306_SetCursor(20, 20);
 8001844:	2114      	movs	r1, #20
 8001846:	2014      	movs	r0, #20
 8001848:	f000 faf2 	bl	8001e30 <ssd1306_SetCursor>
		  ssd1306_WriteString(string_voltage, Font_7x10, Black);
 800184c:	4a35      	ldr	r2, [pc, #212]	; (8001924 <main+0x2c4>)
 800184e:	2300      	movs	r3, #0
 8001850:	ca06      	ldmia	r2, {r1, r2}
 8001852:	4837      	ldr	r0, [pc, #220]	; (8001930 <main+0x2d0>)
 8001854:	f000 fac6 	bl	8001de4 <ssd1306_WriteString>

		  ssd1306_SetCursor(5, 30);
 8001858:	211e      	movs	r1, #30
 800185a:	2005      	movs	r0, #5
 800185c:	f000 fae8 	bl	8001e30 <ssd1306_SetCursor>
		  ssd1306_WriteString("I=", Font_7x10, Black);
 8001860:	4a30      	ldr	r2, [pc, #192]	; (8001924 <main+0x2c4>)
 8001862:	2300      	movs	r3, #0
 8001864:	ca06      	ldmia	r2, {r1, r2}
 8001866:	4833      	ldr	r0, [pc, #204]	; (8001934 <main+0x2d4>)
 8001868:	f000 fabc 	bl	8001de4 <ssd1306_WriteString>
		  sprintf(string_current, "%f", current);
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <main+0x2ac>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fdd9 	bl	8000428 <__aeabi_f2d>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	492c      	ldr	r1, [pc, #176]	; (800192c <main+0x2cc>)
 800187c:	481f      	ldr	r0, [pc, #124]	; (80018fc <main+0x29c>)
 800187e:	f004 f95b 	bl	8005b38 <siprintf>
		  ssd1306_SetCursor(20, 30);
 8001882:	211e      	movs	r1, #30
 8001884:	2014      	movs	r0, #20
 8001886:	f000 fad3 	bl	8001e30 <ssd1306_SetCursor>
		  ssd1306_WriteString(string_current, Font_7x10, Black);
 800188a:	4a26      	ldr	r2, [pc, #152]	; (8001924 <main+0x2c4>)
 800188c:	2300      	movs	r3, #0
 800188e:	ca06      	ldmia	r2, {r1, r2}
 8001890:	481a      	ldr	r0, [pc, #104]	; (80018fc <main+0x29c>)
 8001892:	f000 faa7 	bl	8001de4 <ssd1306_WriteString>

		  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 8001896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189a:	481a      	ldr	r0, [pc, #104]	; (8001904 <main+0x2a4>)
 800189c:	f001 fbfe 	bl	800309c <HAL_GPIO_TogglePin>
		  ssd1306_UpdateScreen();
 80018a0:	f000 f99e 	bl	8001be0 <ssd1306_UpdateScreen>
		  ssd1306_Fill(White);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f000 f979 	bl	8001b9c <ssd1306_Fill>
	  tick = HAL_GetTick();
 80018aa:	e747      	b.n	800173c <main+0xdc>
 80018ac:	f3af 8000 	nop.w
 80018b0:	2e48e8a7 	.word	0x2e48e8a7
 80018b4:	400921ff 	.word	0x400921ff
 80018b8:	20000220 	.word	0x20000220
 80018bc:	08007df0 	.word	0x08007df0
 80018c0:	0009eb10 	.word	0x0009eb10
 80018c4:	08007e04 	.word	0x08007e04
 80018c8:	08007e18 	.word	0x08007e18
 80018cc:	08007e38 	.word	0x08007e38
 80018d0:	08007e58 	.word	0x08007e58
 80018d4:	08007e84 	.word	0x08007e84
 80018d8:	08007e9c 	.word	0x08007e9c
 80018dc:	08007eb0 	.word	0x08007eb0
 80018e0:	20000024 	.word	0x20000024
 80018e4:	20000020 	.word	0x20000020
 80018e8:	10624dd3 	.word	0x10624dd3
 80018ec:	20000026 	.word	0x20000026
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	20000378 	.word	0x20000378
 80018f8:	2000030c 	.word	0x2000030c
 80018fc:	20000394 	.word	0x20000394
 8001900:	2000039e 	.word	0x2000039e
 8001904:	40011000 	.word	0x40011000
 8001908:	20000370 	.word	0x20000370
 800190c:	20000374 	.word	0x20000374
 8001910:	20000310 	.word	0x20000310
 8001914:	2000001c 	.word	0x2000001c
 8001918:	20000314 	.word	0x20000314
 800191c:	08007ebc 	.word	0x08007ebc
 8001920:	2000037c 	.word	0x2000037c
 8001924:	20000028 	.word	0x20000028
 8001928:	08007ec0 	.word	0x08007ec0
 800192c:	08007ec4 	.word	0x08007ec4
 8001930:	20000388 	.word	0x20000388
 8001934:	08007ec8 	.word	0x08007ec8

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b094      	sub	sp, #80	; 0x50
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001942:	2228      	movs	r2, #40	; 0x28
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f004 fa08 	bl	8005d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001968:	2301      	movs	r3, #1
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800196c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001976:	2301      	movs	r3, #1
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197a:	2302      	movs	r3, #2
 800197c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001984:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001988:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198e:	4618      	mov	r0, r3
 8001990:	f002 fbf8 	bl	8004184 <HAL_RCC_OscConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800199a:	f000 f857 	bl	8001a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199e:	230f      	movs	r3, #15
 80019a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2102      	movs	r1, #2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 fe64 	bl	8004688 <HAL_RCC_ClockConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019c6:	f000 f841 	bl	8001a4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019ca:	2302      	movs	r3, #2
 80019cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 ffe4 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019e2:	f000 f833 	bl	8001a4c <Error_Handler>
  }
}
 80019e6:	bf00      	nop
 80019e8:	3750      	adds	r7, #80	; 0x50
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <Device_Config>:

/* USER CODE BEGIN 4 */
void Device_Config(void){
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b095      	sub	sp, #84	; 0x54
 80019f4:	af14      	add	r7, sp, #80	; 0x50
	ltc2944_struct.adc_mode = 			Automatic_Mode;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <Device_Config+0x50>)
 80019f8:	2203      	movs	r2, #3
 80019fa:	701a      	strb	r2, [r3, #0]
	ltc2944_struct.prescalar_mode = 	Factor_256;
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <Device_Config+0x50>)
 80019fe:	2204      	movs	r2, #4
 8001a00:	705a      	strb	r2, [r3, #1]
	ltc2944_struct.alcc_mode = 			ALCC_Disable;
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <Device_Config+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	709a      	strb	r2, [r3, #2]
	ltc2944_struct.sense_resistor = 	0.0051;
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <Device_Config+0x50>)
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <Device_Config+0x54>)
 8001a0c:	605a      	str	r2, [r3, #4]
	ltc2944_struct.i2c_handle = 		hi2c2;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <Device_Config+0x50>)
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <Device_Config+0x58>)
 8001a12:	3308      	adds	r3, #8
 8001a14:	4611      	mov	r1, r2
 8001a16:	2254      	movs	r2, #84	; 0x54
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 fa2c 	bl	8005e76 <memcpy>

	LTC2944_Init(ltc2944_struct);
 8001a1e:	4c08      	ldr	r4, [pc, #32]	; (8001a40 <Device_Config+0x50>)
 8001a20:	4668      	mov	r0, sp
 8001a22:	f104 0310 	add.w	r3, r4, #16
 8001a26:	224c      	movs	r2, #76	; 0x4c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f004 fa24 	bl	8005e76 <memcpy>
 8001a2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a32:	f7ff fc71 	bl	8001318 <LTC2944_Init>
}
 8001a36:	bf00      	nop
 8001a38:	3704      	adds	r7, #4
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000314 	.word	0x20000314
 8001a44:	3ba71de7 	.word	0x3ba71de7
 8001a48:	200002a4 	.word	0x200002a4

08001a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
}
 8001a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <Error_Handler+0x8>

08001a56 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
	...

08001a64 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af04      	add	r7, sp, #16
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2301      	movs	r3, #1
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2178      	movs	r1, #120	; 0x78
 8001a82:	4803      	ldr	r0, [pc, #12]	; (8001a90 <ssd1306_WriteCommand+0x2c>)
 8001a84:	f001 fc68 	bl	8003358 <HAL_I2C_Mem_Write>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000250 	.word	0x20000250

08001a94 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af04      	add	r7, sp, #16
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa6:	9202      	str	r2, [sp, #8]
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	2240      	movs	r2, #64	; 0x40
 8001ab2:	2178      	movs	r1, #120	; 0x78
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <ssd1306_WriteData+0x30>)
 8001ab6:	f001 fc4f 	bl	8003358 <HAL_I2C_Mem_Write>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000250 	.word	0x20000250

08001ac8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001acc:	f7ff ffc3 	bl	8001a56 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001ad0:	2064      	movs	r0, #100	; 0x64
 8001ad2:	f000 fc13 	bl	80022fc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 f9d6 	bl	8001e88 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001adc:	2020      	movs	r0, #32
 8001ade:	f7ff ffc1 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff ffbe 	bl	8001a64 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ae8:	20b0      	movs	r0, #176	; 0xb0
 8001aea:	f7ff ffbb 	bl	8001a64 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001aee:	20c8      	movs	r0, #200	; 0xc8
 8001af0:	f7ff ffb8 	bl	8001a64 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff ffb5 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001afa:	2010      	movs	r0, #16
 8001afc:	f7ff ffb2 	bl	8001a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b00:	2040      	movs	r0, #64	; 0x40
 8001b02:	f7ff ffaf 	bl	8001a64 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001b06:	20ff      	movs	r0, #255	; 0xff
 8001b08:	f000 f9aa 	bl	8001e60 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b0c:	20a1      	movs	r0, #161	; 0xa1
 8001b0e:	f7ff ffa9 	bl	8001a64 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b12:	20a6      	movs	r0, #166	; 0xa6
 8001b14:	f7ff ffa6 	bl	8001a64 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b18:	20a8      	movs	r0, #168	; 0xa8
 8001b1a:	f7ff ffa3 	bl	8001a64 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001b1e:	203f      	movs	r0, #63	; 0x3f
 8001b20:	f7ff ffa0 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b24:	20a4      	movs	r0, #164	; 0xa4
 8001b26:	f7ff ff9d 	bl	8001a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b2a:	20d3      	movs	r0, #211	; 0xd3
 8001b2c:	f7ff ff9a 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff ff97 	bl	8001a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b36:	20d5      	movs	r0, #213	; 0xd5
 8001b38:	f7ff ff94 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b3c:	20f0      	movs	r0, #240	; 0xf0
 8001b3e:	f7ff ff91 	bl	8001a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b42:	20d9      	movs	r0, #217	; 0xd9
 8001b44:	f7ff ff8e 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b48:	2022      	movs	r0, #34	; 0x22
 8001b4a:	f7ff ff8b 	bl	8001a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b4e:	20da      	movs	r0, #218	; 0xda
 8001b50:	f7ff ff88 	bl	8001a64 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001b54:	2012      	movs	r0, #18
 8001b56:	f7ff ff85 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b5a:	20db      	movs	r0, #219	; 0xdb
 8001b5c:	f7ff ff82 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001b60:	2020      	movs	r0, #32
 8001b62:	f7ff ff7f 	bl	8001a64 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001b66:	208d      	movs	r0, #141	; 0x8d
 8001b68:	f7ff ff7c 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001b6c:	2014      	movs	r0, #20
 8001b6e:	f7ff ff79 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001b72:	2001      	movs	r0, #1
 8001b74:	f000 f988 	bl	8001e88 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f000 f80f 	bl	8001b9c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001b7e:	f000 f82f 	bl	8001be0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <ssd1306_Init+0xd0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <ssd1306_Init+0xd0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001b8e:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <ssd1306_Init+0xd0>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	711a      	strb	r2, [r3, #4]
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200007a0 	.word	0x200007a0

08001b9c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e00d      	b.n	8001bc8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <ssd1306_Fill+0x1a>
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	e000      	b.n	8001bb8 <ssd1306_Fill+0x1c>
 8001bb6:	21ff      	movs	r1, #255	; 0xff
 8001bb8:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <ssd1306_Fill+0x40>)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	460a      	mov	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bce:	d3ed      	bcc.n	8001bac <ssd1306_Fill+0x10>
    }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	200003a0 	.word	0x200003a0

08001be0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	71fb      	strb	r3, [r7, #7]
 8001bea:	e016      	b.n	8001c1a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	3b50      	subs	r3, #80	; 0x50
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff36 	bl	8001a64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff ff33 	bl	8001a64 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001bfe:	2010      	movs	r0, #16
 8001c00:	f7ff ff30 	bl	8001a64 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	01db      	lsls	r3, r3, #7
 8001c08:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <ssd1306_UpdateScreen+0x4c>)
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff40 	bl	8001a94 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	3301      	adds	r3, #1
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	d9e5      	bls.n	8001bec <ssd1306_UpdateScreen+0xc>
    }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200003a0 	.word	0x200003a0

08001c30 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	71bb      	strb	r3, [r7, #6]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db3d      	blt.n	8001cc6 <ssd1306_DrawPixel+0x96>
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	2b3f      	cmp	r3, #63	; 0x3f
 8001c4e:	d83a      	bhi.n	8001cc6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001c50:	797b      	ldrb	r3, [r7, #5]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d11a      	bne.n	8001c8c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	79bb      	ldrb	r3, [r7, #6]
 8001c5a:	08db      	lsrs	r3, r3, #3
 8001c5c:	b2d8      	uxtb	r0, r3
 8001c5e:	4603      	mov	r3, r0
 8001c60:	01db      	lsls	r3, r3, #7
 8001c62:	4413      	add	r3, r2
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <ssd1306_DrawPixel+0xa0>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	b25a      	sxtb	r2, r3
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b259      	sxtb	r1, r3
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	4603      	mov	r3, r0
 8001c80:	01db      	lsls	r3, r3, #7
 8001c82:	4413      	add	r3, r2
 8001c84:	b2c9      	uxtb	r1, r1
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <ssd1306_DrawPixel+0xa0>)
 8001c88:	54d1      	strb	r1, [r2, r3]
 8001c8a:	e01d      	b.n	8001cc8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	b2d8      	uxtb	r0, r3
 8001c94:	4603      	mov	r3, r0
 8001c96:	01db      	lsls	r3, r3, #7
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <ssd1306_DrawPixel+0xa0>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	b25a      	sxtb	r2, r3
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	b25b      	sxtb	r3, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	b25b      	sxtb	r3, r3
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	b259      	sxtb	r1, r3
 8001cb6:	79fa      	ldrb	r2, [r7, #7]
 8001cb8:	4603      	mov	r3, r0
 8001cba:	01db      	lsls	r3, r3, #7
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b2c9      	uxtb	r1, r1
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <ssd1306_DrawPixel+0xa0>)
 8001cc2:	54d1      	strb	r1, [r2, r3]
 8001cc4:	e000      	b.n	8001cc8 <ssd1306_DrawPixel+0x98>
        return;
 8001cc6:	bf00      	nop
    }
}
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	200003a0 	.word	0x200003a0

08001cd4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4604      	mov	r4, r0
 8001cdc:	1d38      	adds	r0, r7, #4
 8001cde:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	2b1f      	cmp	r3, #31
 8001cf0:	d902      	bls.n	8001cf8 <ssd1306_WriteChar+0x24>
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b7e      	cmp	r3, #126	; 0x7e
 8001cf6:	d901      	bls.n	8001cfc <ssd1306_WriteChar+0x28>
        return 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e06d      	b.n	8001dd8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <ssd1306_WriteChar+0x10c>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	793b      	ldrb	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	dc06      	bgt.n	8001d18 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001d0a:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <ssd1306_WriteChar+0x10c>)
 8001d0c:	885b      	ldrh	r3, [r3, #2]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	797b      	ldrb	r3, [r7, #5]
 8001d12:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	dd01      	ble.n	8001d1c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e05d      	b.n	8001dd8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	e04c      	b.n	8001dbc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	3b20      	subs	r3, #32
 8001d28:	7979      	ldrb	r1, [r7, #5]
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	440b      	add	r3, r1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	e034      	b.n	8001dac <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d012      	beq.n	8001d78 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <ssd1306_WriteChar+0x10c>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b2d8      	uxtb	r0, r3
 8001d60:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <ssd1306_WriteChar+0x10c>)
 8001d62:	885b      	ldrh	r3, [r3, #2]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	7bba      	ldrb	r2, [r7, #14]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7ff ff5d 	bl	8001c30 <ssd1306_DrawPixel>
 8001d76:	e016      	b.n	8001da6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <ssd1306_WriteChar+0x10c>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	b2d8      	uxtb	r0, r3
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <ssd1306_WriteChar+0x10c>)
 8001d88:	885b      	ldrh	r3, [r3, #2]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	b2d9      	uxtb	r1, r3
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bf0c      	ite	eq
 8001d9a:	2301      	moveq	r3, #1
 8001d9c:	2300      	movne	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	f7ff ff45 	bl	8001c30 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	3301      	adds	r3, #1
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	793b      	ldrb	r3, [r7, #4]
 8001dae:	461a      	mov	r2, r3
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d3c5      	bcc.n	8001d42 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	797b      	ldrb	r3, [r7, #5]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d3ad      	bcc.n	8001d22 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <ssd1306_WriteChar+0x10c>)
 8001dc8:	881a      	ldrh	r2, [r3, #0]
 8001dca:	793b      	ldrb	r3, [r7, #4]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <ssd1306_WriteChar+0x10c>)
 8001dd4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3724      	adds	r7, #36	; 0x24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	200007a0 	.word	0x200007a0

08001de4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	1d38      	adds	r0, r7, #4
 8001dee:	e880 0006 	stmia.w	r0, {r1, r2}
 8001df2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001df4:	e012      	b.n	8001e1c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	7818      	ldrb	r0, [r3, #0]
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	1d3a      	adds	r2, r7, #4
 8001dfe:	ca06      	ldmia	r2, {r1, r2}
 8001e00:	f7ff ff68 	bl	8001cd4 <ssd1306_WriteChar>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d002      	beq.n	8001e16 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	e008      	b.n	8001e28 <ssd1306_WriteString+0x44>
        }
        str++;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e8      	bne.n	8001df6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	781b      	ldrb	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	460a      	mov	r2, r1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <ssd1306_SetCursor+0x2c>)
 8001e46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e48:	79bb      	ldrb	r3, [r7, #6]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <ssd1306_SetCursor+0x2c>)
 8001e4e:	805a      	strh	r2, [r3, #2]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	200007a0 	.word	0x200007a0

08001e60 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e6a:	2381      	movs	r3, #129	; 0x81
 8001e6c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fdf7 	bl	8001a64 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fdf3 	bl	8001a64 <ssd1306_WriteCommand>
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e98:	23af      	movs	r3, #175	; 0xaf
 8001e9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <ssd1306_SetDisplayOn+0x38>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	715a      	strb	r2, [r3, #5]
 8001ea2:	e004      	b.n	8001eae <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ea4:	23ae      	movs	r3, #174	; 0xae
 8001ea6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <ssd1306_SetDisplayOn+0x38>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fdd7 	bl	8001a64 <ssd1306_WriteCommand>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200007a0 	.word	0x200007a0

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_MspInit+0x5c>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <HAL_MspInit+0x5c>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6193      	str	r3, [r2, #24]
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_MspInit+0x5c>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_MspInit+0x5c>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_MspInit+0x5c>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_MspInit+0x5c>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_MspInit+0x60>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_MspInit+0x60>)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000

08001f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f2c:	e7fe      	b.n	8001f2c <NMI_Handler+0x4>

08001f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler+0x4>

08001f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <MemManage_Handler+0x4>

08001f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6e:	f000 f9a9 	bl	80022c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  return 1;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <_kill>:

int _kill(int pid, int sig)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f8e:	f003 ff37 	bl	8005e00 <__errno>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2216      	movs	r2, #22
 8001f96:	601a      	str	r2, [r3, #0]
  return -1;
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_exit>:

void _exit (int status)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ffe7 	bl	8001f84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fb6:	e7fe      	b.n	8001fb6 <_exit+0x12>

08001fb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e00a      	b.n	8001fe0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fca:	f3af 8000 	nop.w
 8001fce:	4601      	mov	r1, r0
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	60ba      	str	r2, [r7, #8]
 8001fd6:	b2ca      	uxtb	r2, r1
 8001fd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbf0      	blt.n	8001fca <_read+0x12>
  }

  return len;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e009      	b.n	8002018 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	60ba      	str	r2, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fb13 	bl	8001638 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbf1      	blt.n	8002004 <_write+0x12>
  }
  return len;
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_close>:

int _close(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002050:	605a      	str	r2, [r3, #4]
  return 0;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <_isatty>:

int _isatty(int file)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002072:	b480      	push	{r7}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f003 fea0 	bl	8005e00 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20005000 	.word	0x20005000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	200007a8 	.word	0x200007a8
 80020f4:	20000948 	.word	0x20000948

080020f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <MX_USART2_UART_Init+0x50>)
 800210c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002110:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 800212a:	220c      	movs	r2, #12
 800212c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 800213c:	f002 fd9e 	bl	8004c7c <HAL_UART_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002146:	f7ff fc81 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200007ac 	.word	0x200007ac
 8002154:	40004400 	.word	0x40004400

08002158 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_UART_MspInit+0x88>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d12f      	bne.n	80021d8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_UART_MspInit+0x8c>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_UART_MspInit+0x8c>)
 800217e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002182:	61d3      	str	r3, [r2, #28]
 8002184:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_UART_MspInit+0x8c>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_UART_MspInit+0x8c>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <HAL_UART_MspInit+0x8c>)
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_UART_MspInit+0x8c>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021a8:	2304      	movs	r3, #4
 80021aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	4619      	mov	r1, r3
 80021ba:	480b      	ldr	r0, [pc, #44]	; (80021e8 <HAL_UART_MspInit+0x90>)
 80021bc:	f000 fdd2 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021c0:	2308      	movs	r3, #8
 80021c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	4619      	mov	r1, r3
 80021d2:	4805      	ldr	r0, [pc, #20]	; (80021e8 <HAL_UART_MspInit+0x90>)
 80021d4:	f000 fdc6 	bl	8002d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021d8:	bf00      	nop
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40004400 	.word	0x40004400
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010800 	.word	0x40010800

080021ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021ec:	f7ff ff84 	bl	80020f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021f2:	490c      	ldr	r1, [pc, #48]	; (8002224 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f8:	e002      	b.n	8002200 <LoopCopyDataInit>

080021fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fe:	3304      	adds	r3, #4

08002200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002204:	d3f9      	bcc.n	80021fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002208:	4c09      	ldr	r4, [pc, #36]	; (8002230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800220c:	e001      	b.n	8002212 <LoopFillZerobss>

0800220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002210:	3204      	adds	r2, #4

08002212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002214:	d3fb      	bcc.n	800220e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002216:	f003 fdf9 	bl	8005e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800221a:	f7ff fa21 	bl	8001660 <main>
  bx lr
 800221e:	4770      	bx	lr
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002228:	080089ec 	.word	0x080089ec
  ldr r2, =_sbss
 800222c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002230:	20000944 	.word	0x20000944

08002234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC1_2_IRQHandler>
	...

08002238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_Init+0x28>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_Init+0x28>)
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002248:	2003      	movs	r0, #3
 800224a:	f000 fd57 	bl	8002cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224e:	200f      	movs	r0, #15
 8002250:	f000 f808 	bl	8002264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002254:	f7ff fe36 	bl	8001ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x54>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x58>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	fbb3 f3f1 	udiv	r3, r3, r1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fd61 	bl	8002d4a <HAL_SYSTICK_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00e      	b.n	80022b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d80a      	bhi.n	80022ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002298:	2200      	movs	r2, #0
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f000 fd37 	bl	8002d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <HAL_InitTick+0x5c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000030 	.word	0x20000030
 80022bc:	20000038 	.word	0x20000038
 80022c0:	20000034 	.word	0x20000034

080022c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_IncTick+0x1c>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_IncTick+0x20>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <HAL_IncTick+0x20>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	20000038 	.word	0x20000038
 80022e4:	200007f4 	.word	0x200007f4

080022e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;
 80022ec:	4b02      	ldr	r3, [pc, #8]	; (80022f8 <HAL_GetTick+0x10>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	200007f4 	.word	0x200007f4

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fff0 	bl	80022e8 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d005      	beq.n	8002322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_Delay+0x44>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002322:	bf00      	nop
 8002324:	f7ff ffe0 	bl	80022e8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d8f7      	bhi.n	8002324 <HAL_Delay+0x28>
  {
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000038 	.word	0x20000038

08002344 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0be      	b.n	80024e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fe6c 	bl	8001060 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fbc5 	bl	8002b18 <ADC_ConversionStop_Disable>
 800238e:	4603      	mov	r3, r0
 8002390:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 8099 	bne.w	80024d2 <HAL_ADC_Init+0x18e>
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f040 8095 	bne.w	80024d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023b0:	f023 0302 	bic.w	r3, r3, #2
 80023b4:	f043 0202 	orr.w	r2, r3, #2
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7b1b      	ldrb	r3, [r3, #12]
 80023ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023dc:	d003      	beq.n	80023e6 <HAL_ADC_Init+0xa2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_ADC_Init+0xa8>
 80023e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ea:	e000      	b.n	80023ee <HAL_ADC_Init+0xaa>
 80023ec:	2300      	movs	r3, #0
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7d1b      	ldrb	r3, [r3, #20]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d119      	bne.n	8002430 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7b1b      	ldrb	r3, [r3, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	3b01      	subs	r3, #1
 800240a:	035a      	lsls	r2, r3, #13
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	e00b      	b.n	8002430 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	430a      	orrs	r2, r1
 8002442:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_ADC_Init+0x1a8>)
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	430b      	orrs	r3, r1
 8002456:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002460:	d003      	beq.n	800246a <HAL_ADC_Init+0x126>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d104      	bne.n	8002474 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	3b01      	subs	r3, #1
 8002470:	051b      	lsls	r3, r3, #20
 8002472:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	430a      	orrs	r2, r1
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <HAL_ADC_Init+0x1ac>)
 8002490:	4013      	ands	r3, r2
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	429a      	cmp	r2, r3
 8002496:	d10b      	bne.n	80024b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024ae:	e018      	b.n	80024e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	f023 0312 	bic.w	r3, r3, #18
 80024b8:	f043 0210 	orr.w	r2, r3, #16
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024d0:	e007      	b.n	80024e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	ffe1f7fd 	.word	0xffe1f7fd
 80024f0:	ff1f0efe 	.word	0xff1f0efe

080024f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_ADC_Start+0x1a>
 800250a:	2302      	movs	r3, #2
 800250c:	e098      	b.n	8002640 <HAL_ADC_Start+0x14c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 faa4 	bl	8002a64 <ADC_Enable>
 800251c:	4603      	mov	r3, r0
 800251e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 8087 	bne.w	8002636 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a41      	ldr	r2, [pc, #260]	; (8002648 <HAL_ADC_Start+0x154>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d105      	bne.n	8002552 <HAL_ADC_Start+0x5e>
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_ADC_Start+0x158>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d115      	bne.n	800257e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d026      	beq.n	80025ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002574:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800257c:	e01d      	b.n	80025ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2f      	ldr	r2, [pc, #188]	; (800264c <HAL_ADC_Start+0x158>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d004      	beq.n	800259e <HAL_ADC_Start+0xaa>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <HAL_ADC_Start+0x154>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10d      	bne.n	80025ba <HAL_ADC_Start+0xc6>
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_ADC_Start+0x158>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d007      	beq.n	80025ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f023 0206 	bic.w	r2, r3, #6
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025d2:	e002      	b.n	80025da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f06f 0202 	mvn.w	r2, #2
 80025ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025fa:	d113      	bne.n	8002624 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002600:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_ADC_Start+0x154>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d105      	bne.n	8002612 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_ADC_Start+0x158>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	e00c      	b.n	800263e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e003      	b.n	800263e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40012800 	.word	0x40012800
 800264c:	40012400 	.word	0x40012400

08002650 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002666:	f7ff fe3f 	bl	80022e8 <HAL_GetTick>
 800266a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	f043 0220 	orr.w	r2, r3, #32
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0d3      	b.n	800283a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d131      	bne.n	8002704 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d12a      	bne.n	8002704 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026ae:	e021      	b.n	80026f4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d01d      	beq.n	80026f4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_ADC_PollForConversion+0x7e>
 80026be:	f7ff fe13 	bl	80022e8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d212      	bcs.n	80026f4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	f043 0204 	orr.w	r2, r3, #4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0a2      	b.n	800283a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0d6      	beq.n	80026b0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002702:	e070      	b.n	80027e6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <HAL_ADC_PollForConversion+0x1f4>)
 8002706:	681c      	ldr	r4, [r3, #0]
 8002708:	2002      	movs	r0, #2
 800270a:	f002 fa01 	bl	8004b10 <HAL_RCCEx_GetPeriphCLKFreq>
 800270e:	4603      	mov	r3, r0
 8002710:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6919      	ldr	r1, [r3, #16]
 800271a:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <HAL_ADC_PollForConversion+0x1f8>)
 800271c:	400b      	ands	r3, r1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_ADC_PollForConversion+0x104>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68d9      	ldr	r1, [r3, #12]
 8002728:	4b48      	ldr	r3, [pc, #288]	; (800284c <HAL_ADC_PollForConversion+0x1fc>)
 800272a:	400b      	ands	r3, r1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d111      	bne.n	8002754 <HAL_ADC_PollForConversion+0x104>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6919      	ldr	r1, [r3, #16]
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_ADC_PollForConversion+0x200>)
 8002738:	400b      	ands	r3, r1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <HAL_ADC_PollForConversion+0x100>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68d9      	ldr	r1, [r3, #12]
 8002744:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_ADC_PollForConversion+0x204>)
 8002746:	400b      	ands	r3, r1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_PollForConversion+0x100>
 800274c:	2314      	movs	r3, #20
 800274e:	e020      	b.n	8002792 <HAL_ADC_PollForConversion+0x142>
 8002750:	2329      	movs	r3, #41	; 0x29
 8002752:	e01e      	b.n	8002792 <HAL_ADC_PollForConversion+0x142>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6919      	ldr	r1, [r3, #16]
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_ADC_PollForConversion+0x200>)
 800275c:	400b      	ands	r3, r1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_ADC_PollForConversion+0x120>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68d9      	ldr	r1, [r3, #12]
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_ADC_PollForConversion+0x204>)
 800276a:	400b      	ands	r3, r1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00d      	beq.n	800278c <HAL_ADC_PollForConversion+0x13c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6919      	ldr	r1, [r3, #16]
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_ADC_PollForConversion+0x208>)
 8002778:	400b      	ands	r3, r1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d108      	bne.n	8002790 <HAL_ADC_PollForConversion+0x140>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68d9      	ldr	r1, [r3, #12]
 8002784:	4b34      	ldr	r3, [pc, #208]	; (8002858 <HAL_ADC_PollForConversion+0x208>)
 8002786:	400b      	ands	r3, r1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_PollForConversion+0x140>
 800278c:	2354      	movs	r3, #84	; 0x54
 800278e:	e000      	b.n	8002792 <HAL_ADC_PollForConversion+0x142>
 8002790:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002798:	e021      	b.n	80027de <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d01a      	beq.n	80027d8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <HAL_ADC_PollForConversion+0x168>
 80027a8:	f7ff fd9e 	bl	80022e8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d20f      	bcs.n	80027d8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d90b      	bls.n	80027d8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	f043 0204 	orr.w	r2, r3, #4
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e030      	b.n	800283a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3301      	adds	r3, #1
 80027dc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d8d9      	bhi.n	800279a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f06f 0212 	mvn.w	r2, #18
 80027ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002806:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800280a:	d115      	bne.n	8002838 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002810:	2b00      	cmp	r3, #0
 8002812:	d111      	bne.n	8002838 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd90      	pop	{r4, r7, pc}
 8002842:	bf00      	nop
 8002844:	20000030 	.word	0x20000030
 8002848:	24924924 	.word	0x24924924
 800284c:	00924924 	.word	0x00924924
 8002850:	12492492 	.word	0x12492492
 8002854:	00492492 	.word	0x00492492
 8002858:	00249249 	.word	0x00249249

0800285c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x20>
 8002890:	2302      	movs	r3, #2
 8002892:	e0dc      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x1da>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d81c      	bhi.n	80028de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b05      	subs	r3, #5
 80028b6:	221f      	movs	r2, #31
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	4019      	ands	r1, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3b05      	subs	r3, #5
 80028d0:	fa00 f203 	lsl.w	r2, r0, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34
 80028dc:	e03c      	b.n	8002958 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d81c      	bhi.n	8002920 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	3b23      	subs	r3, #35	; 0x23
 80028f8:	221f      	movs	r2, #31
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	4019      	ands	r1, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3b23      	subs	r3, #35	; 0x23
 8002912:	fa00 f203 	lsl.w	r2, r0, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
 800291e:	e01b      	b.n	8002958 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b41      	subs	r3, #65	; 0x41
 8002932:	221f      	movs	r2, #31
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	4019      	ands	r1, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b41      	subs	r3, #65	; 0x41
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b09      	cmp	r3, #9
 800295e:	d91c      	bls.n	800299a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68d9      	ldr	r1, [r3, #12]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	3b1e      	subs	r3, #30
 8002972:	2207      	movs	r2, #7
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	4019      	ands	r1, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6898      	ldr	r0, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	3b1e      	subs	r3, #30
 800298c:	fa00 f203 	lsl.w	r2, r0, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	e019      	b.n	80029ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6919      	ldr	r1, [r3, #16]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	2207      	movs	r2, #7
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	4019      	ands	r1, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6898      	ldr	r0, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	fa00 f203 	lsl.w	r2, r0, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b10      	cmp	r3, #16
 80029d4:	d003      	beq.n	80029de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029da:	2b11      	cmp	r3, #17
 80029dc:	d132      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <HAL_ADC_ConfigChannel+0x1e4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d125      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d126      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	d11a      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_ADC_ConfigChannel+0x1e8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	0c9a      	lsrs	r2, r3, #18
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a24:	e002      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f9      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x1b2>
 8002a32:	e007      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	40012400 	.word	0x40012400
 8002a5c:	20000030 	.word	0x20000030
 8002a60:	431bde83 	.word	0x431bde83

08002a64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d040      	beq.n	8002b04 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a92:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <ADC_Enable+0xac>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <ADC_Enable+0xb0>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	0c9b      	lsrs	r3, r3, #18
 8002a9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aa0:	e002      	b.n	8002aa8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aae:	f7ff fc1b 	bl	80022e8 <HAL_GetTick>
 8002ab2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ab4:	e01f      	b.n	8002af6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ab6:	f7ff fc17 	bl	80022e8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d918      	bls.n	8002af6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d011      	beq.n	8002af6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e007      	b.n	8002b06 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d1d8      	bne.n	8002ab6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000030 	.word	0x20000030
 8002b14:	431bde83 	.word	0x431bde83

08002b18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d12e      	bne.n	8002b90 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b42:	f7ff fbd1 	bl	80022e8 <HAL_GetTick>
 8002b46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b48:	e01b      	b.n	8002b82 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b4a:	f7ff fbcd 	bl	80022e8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d914      	bls.n	8002b82 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d10d      	bne.n	8002b82 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	f043 0210 	orr.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e007      	b.n	8002b92 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d0dc      	beq.n	8002b4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bce:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	60d3      	str	r3, [r2, #12]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <__NVIC_GetPriorityGrouping+0x18>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	f003 0307 	and.w	r3, r3, #7
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	db0a      	blt.n	8002c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <__NVIC_SetPriority+0x4c>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	440b      	add	r3, r1
 8002c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c28:	e00a      	b.n	8002c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <__NVIC_SetPriority+0x50>)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f1c3 0307 	rsb	r3, r3, #7
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	bf28      	it	cs
 8002c72:	2304      	movcs	r3, #4
 8002c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d902      	bls.n	8002c84 <NVIC_EncodePriority+0x30>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3b03      	subs	r3, #3
 8002c82:	e000      	b.n	8002c86 <NVIC_EncodePriority+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	401a      	ands	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	4313      	orrs	r3, r2
         );
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	d301      	bcc.n	8002cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00f      	b.n	8002cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <SysTick_Config+0x40>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cdc:	f7ff ff90 	bl	8002c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff49 	bl	8002b9c <__NVIC_SetPriorityGrouping>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d24:	f7ff ff5e 	bl	8002be4 <__NVIC_GetPriorityGrouping>
 8002d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f7ff ff90 	bl	8002c54 <NVIC_EncodePriority>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff5f 	bl	8002c00 <__NVIC_SetPriority>
}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ffb0 	bl	8002cb8 <SysTick_Config>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b08b      	sub	sp, #44	; 0x2c
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d76:	e169      	b.n	800304c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	f040 8158 	bne.w	8003046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a9a      	ldr	r2, [pc, #616]	; (8003004 <HAL_GPIO_Init+0x2a0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d05e      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002da0:	4a98      	ldr	r2, [pc, #608]	; (8003004 <HAL_GPIO_Init+0x2a0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d875      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002da6:	4a98      	ldr	r2, [pc, #608]	; (8003008 <HAL_GPIO_Init+0x2a4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d058      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002dac:	4a96      	ldr	r2, [pc, #600]	; (8003008 <HAL_GPIO_Init+0x2a4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d86f      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002db2:	4a96      	ldr	r2, [pc, #600]	; (800300c <HAL_GPIO_Init+0x2a8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d052      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002db8:	4a94      	ldr	r2, [pc, #592]	; (800300c <HAL_GPIO_Init+0x2a8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d869      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002dbe:	4a94      	ldr	r2, [pc, #592]	; (8003010 <HAL_GPIO_Init+0x2ac>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d04c      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002dc4:	4a92      	ldr	r2, [pc, #584]	; (8003010 <HAL_GPIO_Init+0x2ac>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d863      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002dca:	4a92      	ldr	r2, [pc, #584]	; (8003014 <HAL_GPIO_Init+0x2b0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d046      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002dd0:	4a90      	ldr	r2, [pc, #576]	; (8003014 <HAL_GPIO_Init+0x2b0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d85d      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002dd6:	2b12      	cmp	r3, #18
 8002dd8:	d82a      	bhi.n	8002e30 <HAL_GPIO_Init+0xcc>
 8002dda:	2b12      	cmp	r3, #18
 8002ddc:	d859      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_GPIO_Init+0x80>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e5f 	.word	0x08002e5f
 8002de8:	08002e39 	.word	0x08002e39
 8002dec:	08002e4b 	.word	0x08002e4b
 8002df0:	08002e8d 	.word	0x08002e8d
 8002df4:	08002e93 	.word	0x08002e93
 8002df8:	08002e93 	.word	0x08002e93
 8002dfc:	08002e93 	.word	0x08002e93
 8002e00:	08002e93 	.word	0x08002e93
 8002e04:	08002e93 	.word	0x08002e93
 8002e08:	08002e93 	.word	0x08002e93
 8002e0c:	08002e93 	.word	0x08002e93
 8002e10:	08002e93 	.word	0x08002e93
 8002e14:	08002e93 	.word	0x08002e93
 8002e18:	08002e93 	.word	0x08002e93
 8002e1c:	08002e93 	.word	0x08002e93
 8002e20:	08002e93 	.word	0x08002e93
 8002e24:	08002e93 	.word	0x08002e93
 8002e28:	08002e41 	.word	0x08002e41
 8002e2c:	08002e55 	.word	0x08002e55
 8002e30:	4a79      	ldr	r2, [pc, #484]	; (8003018 <HAL_GPIO_Init+0x2b4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e36:	e02c      	b.n	8002e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	623b      	str	r3, [r7, #32]
          break;
 8002e3e:	e029      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	3304      	adds	r3, #4
 8002e46:	623b      	str	r3, [r7, #32]
          break;
 8002e48:	e024      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	623b      	str	r3, [r7, #32]
          break;
 8002e52:	e01f      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	623b      	str	r3, [r7, #32]
          break;
 8002e5c:	e01a      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e66:	2304      	movs	r3, #4
 8002e68:	623b      	str	r3, [r7, #32]
          break;
 8002e6a:	e013      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e74:	2308      	movs	r3, #8
 8002e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	611a      	str	r2, [r3, #16]
          break;
 8002e7e:	e009      	b.n	8002e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e80:	2308      	movs	r3, #8
 8002e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	615a      	str	r2, [r3, #20]
          break;
 8002e8a:	e003      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	623b      	str	r3, [r7, #32]
          break;
 8002e90:	e000      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          break;
 8002e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2bff      	cmp	r3, #255	; 0xff
 8002e98:	d801      	bhi.n	8002e9e <HAL_GPIO_Init+0x13a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	e001      	b.n	8002ea2 <HAL_GPIO_Init+0x13e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2bff      	cmp	r3, #255	; 0xff
 8002ea8:	d802      	bhi.n	8002eb0 <HAL_GPIO_Init+0x14c>
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	e002      	b.n	8002eb6 <HAL_GPIO_Init+0x152>
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	3b08      	subs	r3, #8
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	6a39      	ldr	r1, [r7, #32]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80b1 	beq.w	8003046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4a4c      	ldr	r2, [pc, #304]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6193      	str	r3, [r2, #24]
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002efc:	4a48      	ldr	r2, [pc, #288]	; (8003020 <HAL_GPIO_Init+0x2bc>)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	3302      	adds	r3, #2
 8002f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	220f      	movs	r2, #15
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a40      	ldr	r2, [pc, #256]	; (8003024 <HAL_GPIO_Init+0x2c0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d013      	beq.n	8002f50 <HAL_GPIO_Init+0x1ec>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3f      	ldr	r2, [pc, #252]	; (8003028 <HAL_GPIO_Init+0x2c4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00d      	beq.n	8002f4c <HAL_GPIO_Init+0x1e8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a3e      	ldr	r2, [pc, #248]	; (800302c <HAL_GPIO_Init+0x2c8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d007      	beq.n	8002f48 <HAL_GPIO_Init+0x1e4>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a3d      	ldr	r2, [pc, #244]	; (8003030 <HAL_GPIO_Init+0x2cc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <HAL_GPIO_Init+0x1e0>
 8002f40:	2303      	movs	r3, #3
 8002f42:	e006      	b.n	8002f52 <HAL_GPIO_Init+0x1ee>
 8002f44:	2304      	movs	r3, #4
 8002f46:	e004      	b.n	8002f52 <HAL_GPIO_Init+0x1ee>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e002      	b.n	8002f52 <HAL_GPIO_Init+0x1ee>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_GPIO_Init+0x1ee>
 8002f50:	2300      	movs	r3, #0
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	f002 0203 	and.w	r2, r2, #3
 8002f58:	0092      	lsls	r2, r2, #2
 8002f5a:	4093      	lsls	r3, r2
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f62:	492f      	ldr	r1, [pc, #188]	; (8003020 <HAL_GPIO_Init+0x2bc>)
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	492c      	ldr	r1, [pc, #176]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	4928      	ldr	r1, [pc, #160]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fa4:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	4922      	ldr	r1, [pc, #136]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60cb      	str	r3, [r1, #12]
 8002fb0:	e006      	b.n	8002fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	491e      	ldr	r1, [pc, #120]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	4918      	ldr	r1, [pc, #96]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	4914      	ldr	r1, [pc, #80]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d021      	beq.n	8003038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	490e      	ldr	r1, [pc, #56]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e021      	b.n	8003046 <HAL_GPIO_Init+0x2e2>
 8003002:	bf00      	nop
 8003004:	10320000 	.word	0x10320000
 8003008:	10310000 	.word	0x10310000
 800300c:	10220000 	.word	0x10220000
 8003010:	10210000 	.word	0x10210000
 8003014:	10120000 	.word	0x10120000
 8003018:	10110000 	.word	0x10110000
 800301c:	40021000 	.word	0x40021000
 8003020:	40010000 	.word	0x40010000
 8003024:	40010800 	.word	0x40010800
 8003028:	40010c00 	.word	0x40010c00
 800302c:	40011000 	.word	0x40011000
 8003030:	40011400 	.word	0x40011400
 8003034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_GPIO_Init+0x304>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	43db      	mvns	r3, r3
 8003040:	4909      	ldr	r1, [pc, #36]	; (8003068 <HAL_GPIO_Init+0x304>)
 8003042:	4013      	ands	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	3301      	adds	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	f47f ae8e 	bne.w	8002d78 <HAL_GPIO_Init+0x14>
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	372c      	adds	r7, #44	; 0x2c
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003088:	e003      	b.n	8003092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	041a      	lsls	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	611a      	str	r2, [r3, #16]
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	041a      	lsls	r2, r3, #16
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43d9      	mvns	r1, r3
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	400b      	ands	r3, r1
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	611a      	str	r2, [r3, #16]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e12b      	b.n	800333a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe f8a2 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003134:	f001 fbf0 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a81      	ldr	r2, [pc, #516]	; (8003344 <HAL_I2C_Init+0x274>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d807      	bhi.n	8003154 <HAL_I2C_Init+0x84>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a80      	ldr	r2, [pc, #512]	; (8003348 <HAL_I2C_Init+0x278>)
 8003148:	4293      	cmp	r3, r2
 800314a:	bf94      	ite	ls
 800314c:	2301      	movls	r3, #1
 800314e:	2300      	movhi	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e006      	b.n	8003162 <HAL_I2C_Init+0x92>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a7d      	ldr	r2, [pc, #500]	; (800334c <HAL_I2C_Init+0x27c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0e7      	b.n	800333a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a78      	ldr	r2, [pc, #480]	; (8003350 <HAL_I2C_Init+0x280>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0c9b      	lsrs	r3, r3, #18
 8003174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_I2C_Init+0x274>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d802      	bhi.n	80031a4 <HAL_I2C_Init+0xd4>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3301      	adds	r3, #1
 80031a2:	e009      	b.n	80031b8 <HAL_I2C_Init+0xe8>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	4a69      	ldr	r2, [pc, #420]	; (8003354 <HAL_I2C_Init+0x284>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	3301      	adds	r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	430b      	orrs	r3, r1
 80031be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	495c      	ldr	r1, [pc, #368]	; (8003344 <HAL_I2C_Init+0x274>)
 80031d4:	428b      	cmp	r3, r1
 80031d6:	d819      	bhi.n	800320c <HAL_I2C_Init+0x13c>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e59      	subs	r1, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e6:	1c59      	adds	r1, r3, #1
 80031e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031ec:	400b      	ands	r3, r1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_I2C_Init+0x138>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e59      	subs	r1, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	e051      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003208:	2304      	movs	r3, #4
 800320a:	e04f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d111      	bne.n	8003238 <HAL_I2C_Init+0x168>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e58      	subs	r0, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	440b      	add	r3, r1
 8003222:	fbb0 f3f3 	udiv	r3, r0, r3
 8003226:	3301      	adds	r3, #1
 8003228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e012      	b.n	800325e <HAL_I2C_Init+0x18e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Init+0x196>
 8003262:	2301      	movs	r3, #1
 8003264:	e022      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_I2C_Init+0x1bc>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1e58      	subs	r0, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	440b      	add	r3, r1
 800327c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	e00f      	b.n	80032ac <HAL_I2C_Init+0x1dc>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6911      	ldr	r1, [r2, #16]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	000186a0 	.word	0x000186a0
 8003348:	001e847f 	.word	0x001e847f
 800334c:	003d08ff 	.word	0x003d08ff
 8003350:	431bde83 	.word	0x431bde83
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4603      	mov	r3, r0
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	460b      	mov	r3, r1
 800336c:	813b      	strh	r3, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003372:	f7fe ffb9 	bl	80022e8 <HAL_GetTick>
 8003376:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b20      	cmp	r3, #32
 8003382:	f040 80d9 	bne.w	8003538 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	2319      	movs	r3, #25
 800338c:	2201      	movs	r2, #1
 800338e:	496d      	ldr	r1, [pc, #436]	; (8003544 <HAL_I2C_Mem_Write+0x1ec>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fcc1 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
 800339e:	e0cc      	b.n	800353a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Mem_Write+0x56>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e0c5      	b.n	800353a <HAL_I2C_Mem_Write+0x1e2>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d007      	beq.n	80033d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2221      	movs	r2, #33	; 0x21
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a3a      	ldr	r2, [r7, #32]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4a4d      	ldr	r2, [pc, #308]	; (8003548 <HAL_I2C_Mem_Write+0x1f0>)
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003416:	88f8      	ldrh	r0, [r7, #6]
 8003418:	893a      	ldrh	r2, [r7, #8]
 800341a:	8979      	ldrh	r1, [r7, #10]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	4603      	mov	r3, r0
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 faf8 	bl	8003a1c <I2C_RequestMemoryWrite>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d052      	beq.n	80034d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e081      	b.n	800353a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fd86 	bl	8003f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b04      	cmp	r3, #4
 800344c:	d107      	bne.n	800345e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e06b      	b.n	800353a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b04      	cmp	r3, #4
 800349e:	d11b      	bne.n	80034d8 <HAL_I2C_Mem_Write+0x180>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d017      	beq.n	80034d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1aa      	bne.n	8003436 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fd79 	bl	8003fdc <I2C_WaitOnBTFFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d107      	bne.n	8003508 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e016      	b.n	800353a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	00100002 	.word	0x00100002
 8003548:	ffff0000 	.word	0xffff0000

0800354c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	; 0x30
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	4608      	mov	r0, r1
 8003556:	4611      	mov	r1, r2
 8003558:	461a      	mov	r2, r3
 800355a:	4603      	mov	r3, r0
 800355c:	817b      	strh	r3, [r7, #10]
 800355e:	460b      	mov	r3, r1
 8003560:	813b      	strh	r3, [r7, #8]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356a:	f7fe febd 	bl	80022e8 <HAL_GetTick>
 800356e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	f040 8244 	bne.w	8003a06 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2319      	movs	r3, #25
 8003584:	2201      	movs	r2, #1
 8003586:	4982      	ldr	r1, [pc, #520]	; (8003790 <HAL_I2C_Mem_Read+0x244>)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fbc5 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	e237      	b.n	8003a08 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Mem_Read+0x5a>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e230      	b.n	8003a08 <HAL_I2C_Mem_Read+0x4bc>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d007      	beq.n	80035cc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2222      	movs	r2, #34	; 0x22
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a62      	ldr	r2, [pc, #392]	; (8003794 <HAL_I2C_Mem_Read+0x248>)
 800360c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800360e:	88f8      	ldrh	r0, [r7, #6]
 8003610:	893a      	ldrh	r2, [r7, #8]
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4603      	mov	r3, r0
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fa92 	bl	8003b48 <I2C_RequestMemoryRead>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1ec      	b.n	8003a08 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d113      	bne.n	800365e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e1c0      	b.n	80039e0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003662:	2b01      	cmp	r3, #1
 8003664:	d11e      	bne.n	80036a4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003674:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003676:	b672      	cpsid	i
}
 8003678:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036a0:	b662      	cpsie	i
}
 80036a2:	e035      	b.n	8003710 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d11e      	bne.n	80036ea <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036bc:	b672      	cpsid	i
}
 80036be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036e6:	b662      	cpsie	i
}
 80036e8:	e012      	b.n	8003710 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003710:	e166      	b.n	80039e0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	2b03      	cmp	r3, #3
 8003718:	f200 811f 	bhi.w	800395a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	2b01      	cmp	r3, #1
 8003722:	d123      	bne.n	800376c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fc9f 	bl	800406c <I2C_WaitOnRXNEFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e167      	b.n	8003a08 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a
 800376a:	e139      	b.n	80039e0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	2b02      	cmp	r3, #2
 8003772:	d152      	bne.n	800381a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377a:	2200      	movs	r2, #0
 800377c:	4906      	ldr	r1, [pc, #24]	; (8003798 <HAL_I2C_Mem_Read+0x24c>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 faca 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e13c      	b.n	8003a08 <HAL_I2C_Mem_Read+0x4bc>
 800378e:	bf00      	nop
 8003790:	00100002 	.word	0x00100002
 8003794:	ffff0000 	.word	0xffff0000
 8003798:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800379c:	b672      	cpsid	i
}
 800379e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037e2:	b662      	cpsie	i
}
 80037e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003818:	e0e2      	b.n	80039e0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	2200      	movs	r2, #0
 8003822:	497b      	ldr	r1, [pc, #492]	; (8003a10 <HAL_I2C_Mem_Read+0x4c4>)
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fa77 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0e9      	b.n	8003a08 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003842:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003844:	b672      	cpsid	i
}
 8003846:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800387a:	4b66      	ldr	r3, [pc, #408]	; (8003a14 <HAL_I2C_Mem_Read+0x4c8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	08db      	lsrs	r3, r3, #3
 8003880:	4a65      	ldr	r2, [pc, #404]	; (8003a18 <HAL_I2C_Mem_Read+0x4cc>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0a1a      	lsrs	r2, r3, #8
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	00da      	lsls	r2, r3, #3
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	3b01      	subs	r3, #1
 8003898:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d118      	bne.n	80038d2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f043 0220 	orr.w	r2, r3, #32
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038c2:	b662      	cpsie	i
}
 80038c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e09a      	b.n	8003a08 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d1d9      	bne.n	8003894 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003922:	b662      	cpsie	i
}
 8003924:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003958:	e042      	b.n	80039e0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fb84 	bl	800406c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e04c      	b.n	8003a08 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d118      	bne.n	80039e0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f47f ae94 	bne.w	8003712 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3728      	adds	r7, #40	; 0x28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	00010004 	.word	0x00010004
 8003a14:	20000030 	.word	0x20000030
 8003a18:	14f8b589 	.word	0x14f8b589

08003a1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	4608      	mov	r0, r1
 8003a26:	4611      	mov	r1, r2
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	817b      	strh	r3, [r7, #10]
 8003a2e:	460b      	mov	r3, r1
 8003a30:	813b      	strh	r3, [r7, #8]
 8003a32:	4613      	mov	r3, r2
 8003a34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f960 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6c:	d103      	bne.n	8003a76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e05f      	b.n	8003b3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a7a:	897b      	ldrh	r3, [r7, #10]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	6a3a      	ldr	r2, [r7, #32]
 8003a8e:	492d      	ldr	r1, [pc, #180]	; (8003b44 <I2C_RequestMemoryWrite+0x128>)
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f9bb 	bl	8003e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e04c      	b.n	8003b3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	6a39      	ldr	r1, [r7, #32]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fa46 	bl	8003f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d107      	bne.n	8003ade <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e02b      	b.n	8003b3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d105      	bne.n	8003af4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae8:	893b      	ldrh	r3, [r7, #8]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	611a      	str	r2, [r3, #16]
 8003af2:	e021      	b.n	8003b38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003af4:	893b      	ldrh	r3, [r7, #8]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	6a39      	ldr	r1, [r7, #32]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa20 	bl	8003f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d107      	bne.n	8003b2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e005      	b.n	8003b3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b2e:	893b      	ldrh	r3, [r7, #8]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	00010002 	.word	0x00010002

08003b48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	4608      	mov	r0, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	817b      	strh	r3, [r7, #10]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	813b      	strh	r3, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f8c2 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00d      	beq.n	8003bb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba8:	d103      	bne.n	8003bb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e0aa      	b.n	8003d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bb6:	897b      	ldrh	r3, [r7, #10]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	6a3a      	ldr	r2, [r7, #32]
 8003bca:	4952      	ldr	r1, [pc, #328]	; (8003d14 <I2C_RequestMemoryRead+0x1cc>)
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f91d 	bl	8003e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e097      	b.n	8003d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	6a39      	ldr	r1, [r7, #32]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f9a8 	bl	8003f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d107      	bne.n	8003c1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e076      	b.n	8003d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d105      	bne.n	8003c30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c24:	893b      	ldrh	r3, [r7, #8]
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	611a      	str	r2, [r3, #16]
 8003c2e:	e021      	b.n	8003c74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c40:	6a39      	ldr	r1, [r7, #32]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f982 	bl	8003f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d107      	bne.n	8003c66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e050      	b.n	8003d0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c6a:	893b      	ldrh	r3, [r7, #8]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c76:	6a39      	ldr	r1, [r7, #32]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f967 	bl	8003f4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d107      	bne.n	8003c9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e035      	b.n	8003d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f82b 	bl	8003d18 <I2C_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd6:	d103      	bne.n	8003ce0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e013      	b.n	8003d0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ce4:	897b      	ldrh	r3, [r7, #10]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	6a3a      	ldr	r2, [r7, #32]
 8003cf8:	4906      	ldr	r1, [pc, #24]	; (8003d14 <I2C_RequestMemoryRead+0x1cc>)
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f886 	bl	8003e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	00010002 	.word	0x00010002

08003d18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d28:	e048      	b.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d044      	beq.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fe fad9 	bl	80022e8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d139      	bne.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	0c1b      	lsrs	r3, r3, #16
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d10d      	bne.n	8003d6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	43da      	mvns	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	e00c      	b.n	8003d88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	43da      	mvns	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d116      	bne.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e023      	b.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	0c1b      	lsrs	r3, r3, #16
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10d      	bne.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	e00c      	b.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	43da      	mvns	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4013      	ands	r3, r2
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d093      	beq.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e1a:	e071      	b.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2a:	d123      	bne.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f043 0204 	orr.w	r2, r3, #4
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e067      	b.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d041      	beq.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7c:	f7fe fa34 	bl	80022e8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d136      	bne.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	0c1b      	lsrs	r3, r3, #16
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10c      	bne.n	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bf14      	ite	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	2300      	moveq	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	e00b      	b.n	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d016      	beq.n	8003f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e021      	b.n	8003f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10c      	bne.n	8003f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	43da      	mvns	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e00b      	b.n	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f af6d 	bne.w	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f58:	e034      	b.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f8e3 	bl	8004126 <I2C_IsAcknowledgeFailed>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e034      	b.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d028      	beq.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fe f9b9 	bl	80022e8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11d      	bne.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d016      	beq.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e007      	b.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d1c3      	bne.n	8003f5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fe8:	e034      	b.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f89b 	bl	8004126 <I2C_IsAcknowledgeFailed>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e034      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d028      	beq.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004002:	f7fe f971 	bl	80022e8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	d302      	bcc.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d11d      	bne.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b04      	cmp	r3, #4
 8004024:	d016      	beq.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e007      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b04      	cmp	r3, #4
 8004060:	d1c3      	bne.n	8003fea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004078:	e049      	b.n	800410e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b10      	cmp	r3, #16
 8004086:	d119      	bne.n	80040bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0210 	mvn.w	r2, #16
 8004090:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e030      	b.n	800411e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7fe f914 	bl	80022e8 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11d      	bne.n	800410e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d016      	beq.n	800410e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e007      	b.n	800411e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d1ae      	bne.n	800407a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d11b      	bne.n	8004176 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004146:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
	...

08004184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e272      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8087 	beq.w	80042b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041a4:	4b92      	ldr	r3, [pc, #584]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d00c      	beq.n	80041ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041b0:	4b8f      	ldr	r3, [pc, #572]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d112      	bne.n	80041e2 <HAL_RCC_OscConfig+0x5e>
 80041bc:	4b8c      	ldr	r3, [pc, #560]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c8:	d10b      	bne.n	80041e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ca:	4b89      	ldr	r3, [pc, #548]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d06c      	beq.n	80042b0 <HAL_RCC_OscConfig+0x12c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d168      	bne.n	80042b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e24c      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x76>
 80041ec:	4b80      	ldr	r3, [pc, #512]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a7f      	ldr	r2, [pc, #508]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	e02e      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x98>
 8004202:	4b7b      	ldr	r3, [pc, #492]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7a      	ldr	r2, [pc, #488]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b78      	ldr	r3, [pc, #480]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01d      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0xbc>
 8004226:	4b72      	ldr	r3, [pc, #456]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a71      	ldr	r2, [pc, #452]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b6f      	ldr	r3, [pc, #444]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6e      	ldr	r2, [pc, #440]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 8004240:	4b6b      	ldr	r3, [pc, #428]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6a      	ldr	r2, [pc, #424]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b68      	ldr	r3, [pc, #416]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a67      	ldr	r2, [pc, #412]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe f842 	bl	80022e8 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004268:	f7fe f83e 	bl	80022e8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e200      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b5d      	ldr	r3, [pc, #372]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0xe4>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fe f82e 	bl	80022e8 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004290:	f7fe f82a 	bl	80022e8 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e1ec      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x10c>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d063      	beq.n	8004386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042be:	4b4c      	ldr	r3, [pc, #304]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d11c      	bne.n	8004310 <HAL_RCC_OscConfig+0x18c>
 80042d6:	4b46      	ldr	r3, [pc, #280]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e2:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x176>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1c0      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4939      	ldr	r1, [pc, #228]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	e03a      	b.n	8004386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004318:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_RCC_OscConfig+0x270>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431e:	f7fd ffe3 	bl	80022e8 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004326:	f7fd ffdf 	bl	80022e8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e1a1      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004338:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4927      	ldr	r1, [pc, #156]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	e015      	b.n	8004386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_RCC_OscConfig+0x270>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fd ffc2 	bl	80022e8 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004368:	f7fd ffbe 	bl	80022e8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e180      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03a      	beq.n	8004408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d019      	beq.n	80043ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a0:	f7fd ffa2 	bl	80022e8 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a8:	f7fd ff9e 	bl	80022e8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e160      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043c6:	2001      	movs	r0, #1
 80043c8:	f000 face 	bl	8004968 <RCC_Delay>
 80043cc:	e01c      	b.n	8004408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <HAL_RCC_OscConfig+0x274>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d4:	f7fd ff88 	bl	80022e8 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043da:	e00f      	b.n	80043fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043dc:	f7fd ff84 	bl	80022e8 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d908      	bls.n	80043fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e146      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	42420000 	.word	0x42420000
 80043f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fc:	4b92      	ldr	r3, [pc, #584]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e9      	bne.n	80043dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80a6 	beq.w	8004562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441a:	4b8b      	ldr	r3, [pc, #556]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004426:	4b88      	ldr	r3, [pc, #544]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	4a87      	ldr	r2, [pc, #540]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800442c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004430:	61d3      	str	r3, [r2, #28]
 8004432:	4b85      	ldr	r3, [pc, #532]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004442:	4b82      	ldr	r3, [pc, #520]	; (800464c <HAL_RCC_OscConfig+0x4c8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d118      	bne.n	8004480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444e:	4b7f      	ldr	r3, [pc, #508]	; (800464c <HAL_RCC_OscConfig+0x4c8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a7e      	ldr	r2, [pc, #504]	; (800464c <HAL_RCC_OscConfig+0x4c8>)
 8004454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445a:	f7fd ff45 	bl	80022e8 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004462:	f7fd ff41 	bl	80022e8 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b64      	cmp	r3, #100	; 0x64
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e103      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	4b75      	ldr	r3, [pc, #468]	; (800464c <HAL_RCC_OscConfig+0x4c8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d106      	bne.n	8004496 <HAL_RCC_OscConfig+0x312>
 8004488:	4b6f      	ldr	r3, [pc, #444]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a6e      	ldr	r2, [pc, #440]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6213      	str	r3, [r2, #32]
 8004494:	e02d      	b.n	80044f2 <HAL_RCC_OscConfig+0x36e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <HAL_RCC_OscConfig+0x334>
 800449e:	4b6a      	ldr	r3, [pc, #424]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a69      	ldr	r2, [pc, #420]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	6213      	str	r3, [r2, #32]
 80044aa:	4b67      	ldr	r3, [pc, #412]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	4a66      	ldr	r2, [pc, #408]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	f023 0304 	bic.w	r3, r3, #4
 80044b4:	6213      	str	r3, [r2, #32]
 80044b6:	e01c      	b.n	80044f2 <HAL_RCC_OscConfig+0x36e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b05      	cmp	r3, #5
 80044be:	d10c      	bne.n	80044da <HAL_RCC_OscConfig+0x356>
 80044c0:	4b61      	ldr	r3, [pc, #388]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4a60      	ldr	r2, [pc, #384]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	f043 0304 	orr.w	r3, r3, #4
 80044ca:	6213      	str	r3, [r2, #32]
 80044cc:	4b5e      	ldr	r3, [pc, #376]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4a5d      	ldr	r2, [pc, #372]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6213      	str	r3, [r2, #32]
 80044d8:	e00b      	b.n	80044f2 <HAL_RCC_OscConfig+0x36e>
 80044da:	4b5b      	ldr	r3, [pc, #364]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4a5a      	ldr	r2, [pc, #360]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	6213      	str	r3, [r2, #32]
 80044e6:	4b58      	ldr	r3, [pc, #352]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4a57      	ldr	r2, [pc, #348]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d015      	beq.n	8004526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fa:	f7fd fef5 	bl	80022e8 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fd fef1 	bl	80022e8 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0b1      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	4b4b      	ldr	r3, [pc, #300]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ee      	beq.n	8004502 <HAL_RCC_OscConfig+0x37e>
 8004524:	e014      	b.n	8004550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004526:	f7fd fedf 	bl	80022e8 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452c:	e00a      	b.n	8004544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fd fedb 	bl	80022e8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e09b      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004544:	4b40      	ldr	r3, [pc, #256]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1ee      	bne.n	800452e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d105      	bne.n	8004562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004556:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4a3b      	ldr	r2, [pc, #236]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8087 	beq.w	800467a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800456c:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 030c 	and.w	r3, r3, #12
 8004574:	2b08      	cmp	r3, #8
 8004576:	d061      	beq.n	800463c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d146      	bne.n	800460e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004580:	4b33      	ldr	r3, [pc, #204]	; (8004650 <HAL_RCC_OscConfig+0x4cc>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fd feaf 	bl	80022e8 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458e:	f7fd feab 	bl	80022e8 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e06d      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a0:	4b29      	ldr	r3, [pc, #164]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d108      	bne.n	80045c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	4921      	ldr	r1, [pc, #132]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c8:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a19      	ldr	r1, [r3, #32]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	430b      	orrs	r3, r1
 80045da:	491b      	ldr	r1, [pc, #108]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_OscConfig+0x4cc>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fd fe7f 	bl	80022e8 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd fe7b 	bl	80022e8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e03d      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x46a>
 800460c:	e035      	b.n	800467a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <HAL_RCC_OscConfig+0x4cc>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fd fe68 	bl	80022e8 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fd fe64 	bl	80022e8 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e026      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x498>
 800463a:	e01e      	b.n	800467a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e019      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
 8004650:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_OscConfig+0x500>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	429a      	cmp	r2, r3
 8004666:	d106      	bne.n	8004676 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000

08004688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0d0      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800469c:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d910      	bls.n	80046cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b67      	ldr	r3, [pc, #412]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 0207 	bic.w	r2, r3, #7
 80046b2:	4965      	ldr	r1, [pc, #404]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b63      	ldr	r3, [pc, #396]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0b8      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d020      	beq.n	800471a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e4:	4b59      	ldr	r3, [pc, #356]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a58      	ldr	r2, [pc, #352]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046fc:	4b53      	ldr	r3, [pc, #332]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a52      	ldr	r2, [pc, #328]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b50      	ldr	r3, [pc, #320]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	494d      	ldr	r1, [pc, #308]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d040      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	4b47      	ldr	r3, [pc, #284]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d115      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07f      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4b41      	ldr	r3, [pc, #260]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e073      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004756:	4b3d      	ldr	r3, [pc, #244]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e06b      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004766:	4b39      	ldr	r3, [pc, #228]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4936      	ldr	r1, [pc, #216]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004778:	f7fd fdb6 	bl	80022e8 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004780:	f7fd fdb2 	bl	80022e8 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e053      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	4b2d      	ldr	r3, [pc, #180]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 020c 	and.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1eb      	bne.n	8004780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d210      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b24      	ldr	r3, [pc, #144]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 0207 	bic.w	r2, r3, #7
 80047be:	4922      	ldr	r1, [pc, #136]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e032      	b.n	800483e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4916      	ldr	r1, [pc, #88]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	490e      	ldr	r1, [pc, #56]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004816:	f000 f821 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800481a:	4602      	mov	r2, r0
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	490a      	ldr	r1, [pc, #40]	; (8004850 <HAL_RCC_ClockConfig+0x1c8>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1cc>)
 8004830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1d0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fd fd14 	bl	8002264 <HAL_InitTick>

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40022000 	.word	0x40022000
 800484c:	40021000 	.word	0x40021000
 8004850:	08008638 	.word	0x08008638
 8004854:	20000030 	.word	0x20000030
 8004858:	20000034 	.word	0x20000034

0800485c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	2300      	movs	r3, #0
 8004870:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004876:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b04      	cmp	r3, #4
 8004884:	d002      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0x30>
 8004886:	2b08      	cmp	r3, #8
 8004888:	d003      	beq.n	8004892 <HAL_RCC_GetSysClockFreq+0x36>
 800488a:	e027      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800488c:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800488e:	613b      	str	r3, [r7, #16]
      break;
 8004890:	e027      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0c9b      	lsrs	r3, r3, #18
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800489c:	5cd3      	ldrb	r3, [r2, r3]
 800489e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048aa:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	0c5b      	lsrs	r3, r3, #17
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	4a11      	ldr	r2, [pc, #68]	; (80048fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80048b6:	5cd3      	ldrb	r3, [r2, r3]
 80048b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80048be:	fb03 f202 	mul.w	r2, r3, r2
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	e004      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a0c      	ldr	r2, [pc, #48]	; (8004900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048d0:	fb02 f303 	mul.w	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	613b      	str	r3, [r7, #16]
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80048de:	613b      	str	r3, [r7, #16]
      break;
 80048e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e2:	693b      	ldr	r3, [r7, #16]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	007a1200 	.word	0x007a1200
 80048f8:	08008650 	.word	0x08008650
 80048fc:	08008660 	.word	0x08008660
 8004900:	003d0900 	.word	0x003d0900

08004904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004908:	4b02      	ldr	r3, [pc, #8]	; (8004914 <HAL_RCC_GetHCLKFreq+0x10>)
 800490a:	681b      	ldr	r3, [r3, #0]
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr
 8004914:	20000030 	.word	0x20000030

08004918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800491c:	f7ff fff2 	bl	8004904 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4903      	ldr	r1, [pc, #12]	; (800493c <HAL_RCC_GetPCLK1Freq+0x24>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40021000 	.word	0x40021000
 800493c:	08008648 	.word	0x08008648

08004940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004944:	f7ff ffde 	bl	8004904 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	0adb      	lsrs	r3, r3, #11
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4903      	ldr	r1, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	08008648 	.word	0x08008648

08004968 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <RCC_Delay+0x34>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a0a      	ldr	r2, [pc, #40]	; (80049a0 <RCC_Delay+0x38>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	0a5b      	lsrs	r3, r3, #9
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004984:	bf00      	nop
  }
  while (Delay --);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1e5a      	subs	r2, r3, #1
 800498a:	60fa      	str	r2, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f9      	bne.n	8004984 <RCC_Delay+0x1c>
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	20000030 	.word	0x20000030
 80049a0:	10624dd3 	.word	0x10624dd3

080049a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d07d      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80049c0:	2300      	movs	r3, #0
 80049c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c4:	4b4f      	ldr	r3, [pc, #316]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10d      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d0:	4b4c      	ldr	r3, [pc, #304]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	4a4b      	ldr	r2, [pc, #300]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049da:	61d3      	str	r3, [r2, #28]
 80049dc:	4b49      	ldr	r3, [pc, #292]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ec:	4b46      	ldr	r3, [pc, #280]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d118      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f8:	4b43      	ldr	r3, [pc, #268]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a42      	ldr	r2, [pc, #264]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a04:	f7fd fc70 	bl	80022e8 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0a:	e008      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0c:	f7fd fc6c 	bl	80022e8 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e06d      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1e:	4b3a      	ldr	r3, [pc, #232]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a2a:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d02e      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d027      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a48:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a52:	4b2e      	ldr	r3, [pc, #184]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a58:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a5e:	4a29      	ldr	r2, [pc, #164]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d014      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6e:	f7fd fc3b 	bl	80022e8 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fd fc37 	bl	80022e8 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e036      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0ee      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4917      	ldr	r1, [pc, #92]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab0:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	490b      	ldr	r1, [pc, #44]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4904      	ldr	r1, [pc, #16]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	42420440 	.word	0x42420440

08004b10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	f200 808a 	bhi.w	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d045      	beq.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d075      	beq.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004b46:	e082      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004b48:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004b4e:	4b45      	ldr	r3, [pc, #276]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d07b      	beq.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	0c9b      	lsrs	r3, r3, #18
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	4a41      	ldr	r2, [pc, #260]	; (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004b64:	5cd3      	ldrb	r3, [r2, r3]
 8004b66:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d015      	beq.n	8004b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b72:	4b3c      	ldr	r3, [pc, #240]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	0c5b      	lsrs	r3, r3, #17
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	4a3b      	ldr	r2, [pc, #236]	; (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004b7e:	5cd3      	ldrb	r3, [r2, r3]
 8004b80:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004b8c:	4a38      	ldr	r2, [pc, #224]	; (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	e004      	b.n	8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4a34      	ldr	r2, [pc, #208]	; (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ba8:	4b2e      	ldr	r3, [pc, #184]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb4:	d102      	bne.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	61bb      	str	r3, [r7, #24]
      break;
 8004bba:	e04a      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	4a2d      	ldr	r2, [pc, #180]	; (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
      break;
 8004bca:	e042      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004bcc:	4b25      	ldr	r3, [pc, #148]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bdc:	d108      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	e01f      	b.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfa:	d109      	bne.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004bfc:	4b19      	ldr	r3, [pc, #100]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004c08:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e00f      	b.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1a:	d11c      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d016      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004c28:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004c2c:	61bb      	str	r3, [r7, #24]
      break;
 8004c2e:	e012      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c30:	e011      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004c32:	f7ff fe85 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 8004c36:	4602      	mov	r2, r0
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0b9b      	lsrs	r3, r3, #14
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	61bb      	str	r3, [r7, #24]
      break;
 8004c4c:	e004      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c56:	bf00      	nop
    }
  }
  return (frequency);
 8004c58:	69bb      	ldr	r3, [r7, #24]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000
 8004c68:	08008664 	.word	0x08008664
 8004c6c:	08008674 	.word	0x08008674
 8004c70:	007a1200 	.word	0x007a1200
 8004c74:	003d0900 	.word	0x003d0900
 8004c78:	aaaaaaab 	.word	0xaaaaaaab

08004c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e042      	b.n	8004d14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd fa58 	bl	8002158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	; 0x24
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f91d 	bl	8004f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d16d      	bne.n	8004e18 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_UART_Transmit+0x2c>
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e066      	b.n	8004e1a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2221      	movs	r2, #33	; 0x21
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d5a:	f7fd fac5 	bl	80022e8 <HAL_GetTick>
 8004d5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	88fa      	ldrh	r2, [r7, #6]
 8004d64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	88fa      	ldrh	r2, [r7, #6]
 8004d6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	d108      	bne.n	8004d88 <HAL_UART_Transmit+0x6c>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e003      	b.n	8004d90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d90:	e02a      	b.n	8004de8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2180      	movs	r1, #128	; 0x80
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f840 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e036      	b.n	8004e1a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	3302      	adds	r3, #2
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	e007      	b.n	8004dda <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	781a      	ldrb	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1cf      	bne.n	8004d92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2140      	movs	r1, #64	; 0x40
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f810 	bl	8004e22 <UART_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e006      	b.n	8004e1a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3720      	adds	r7, #32
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b090      	sub	sp, #64	; 0x40
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e32:	e050      	b.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3a:	d04c      	beq.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e42:	f7fd fa51 	bl	80022e8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d241      	bcs.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	330c      	adds	r3, #12
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e72:	637a      	str	r2, [r7, #52]	; 0x34
 8004e74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	613b      	str	r3, [r7, #16]
   return(result);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea6:	623a      	str	r2, [r7, #32]
 8004ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	69f9      	ldr	r1, [r7, #28]
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e5      	bne.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e00f      	b.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	2300      	movne	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d09f      	beq.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3740      	adds	r7, #64	; 0x40
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f3a:	f023 030c 	bic.w	r3, r3, #12
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <UART_SetConfig+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d103      	bne.n	8004f70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7ff fcea 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	e002      	b.n	8004f76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f70:	f7ff fcd2 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8004f74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009a      	lsls	r2, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	4a22      	ldr	r2, [pc, #136]	; (8005018 <UART_SetConfig+0x118>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	0119      	lsls	r1, r3, #4
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009a      	lsls	r2, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <UART_SetConfig+0x118>)
 8004fae:	fba3 0302 	umull	r0, r3, r3, r2
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2064      	movs	r0, #100	; 0x64
 8004fb6:	fb00 f303 	mul.w	r3, r0, r3
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	; 0x32
 8004fc0:	4a15      	ldr	r2, [pc, #84]	; (8005018 <UART_SetConfig+0x118>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fcc:	4419      	add	r1, r3
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009a      	lsls	r2, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <UART_SetConfig+0x118>)
 8004fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2064      	movs	r0, #100	; 0x64
 8004fee:	fb00 f303 	mul.w	r3, r0, r3
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	3332      	adds	r3, #50	; 0x32
 8004ff8:	4a07      	ldr	r2, [pc, #28]	; (8005018 <UART_SetConfig+0x118>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f003 020f 	and.w	r2, r3, #15
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	440a      	add	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40013800 	.word	0x40013800
 8005018:	51eb851f 	.word	0x51eb851f

0800501c <__cvt>:
 800501c:	2b00      	cmp	r3, #0
 800501e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005022:	461f      	mov	r7, r3
 8005024:	bfbb      	ittet	lt
 8005026:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800502a:	461f      	movlt	r7, r3
 800502c:	2300      	movge	r3, #0
 800502e:	232d      	movlt	r3, #45	; 0x2d
 8005030:	b088      	sub	sp, #32
 8005032:	4614      	mov	r4, r2
 8005034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005036:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005038:	7013      	strb	r3, [r2, #0]
 800503a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800503c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005040:	f023 0820 	bic.w	r8, r3, #32
 8005044:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005048:	d005      	beq.n	8005056 <__cvt+0x3a>
 800504a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800504e:	d100      	bne.n	8005052 <__cvt+0x36>
 8005050:	3501      	adds	r5, #1
 8005052:	2302      	movs	r3, #2
 8005054:	e000      	b.n	8005058 <__cvt+0x3c>
 8005056:	2303      	movs	r3, #3
 8005058:	aa07      	add	r2, sp, #28
 800505a:	9204      	str	r2, [sp, #16]
 800505c:	aa06      	add	r2, sp, #24
 800505e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005062:	e9cd 3500 	strd	r3, r5, [sp]
 8005066:	4622      	mov	r2, r4
 8005068:	463b      	mov	r3, r7
 800506a:	f000 ff9d 	bl	8005fa8 <_dtoa_r>
 800506e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005072:	4606      	mov	r6, r0
 8005074:	d102      	bne.n	800507c <__cvt+0x60>
 8005076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005078:	07db      	lsls	r3, r3, #31
 800507a:	d522      	bpl.n	80050c2 <__cvt+0xa6>
 800507c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005080:	eb06 0905 	add.w	r9, r6, r5
 8005084:	d110      	bne.n	80050a8 <__cvt+0x8c>
 8005086:	7833      	ldrb	r3, [r6, #0]
 8005088:	2b30      	cmp	r3, #48	; 0x30
 800508a:	d10a      	bne.n	80050a2 <__cvt+0x86>
 800508c:	2200      	movs	r2, #0
 800508e:	2300      	movs	r3, #0
 8005090:	4620      	mov	r0, r4
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8005098:	b918      	cbnz	r0, 80050a2 <__cvt+0x86>
 800509a:	f1c5 0501 	rsb	r5, r5, #1
 800509e:	f8ca 5000 	str.w	r5, [sl]
 80050a2:	f8da 3000 	ldr.w	r3, [sl]
 80050a6:	4499      	add	r9, r3
 80050a8:	2200      	movs	r2, #0
 80050aa:	2300      	movs	r3, #0
 80050ac:	4620      	mov	r0, r4
 80050ae:	4639      	mov	r1, r7
 80050b0:	f7fb fc7a 	bl	80009a8 <__aeabi_dcmpeq>
 80050b4:	b108      	cbz	r0, 80050ba <__cvt+0x9e>
 80050b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80050ba:	2230      	movs	r2, #48	; 0x30
 80050bc:	9b07      	ldr	r3, [sp, #28]
 80050be:	454b      	cmp	r3, r9
 80050c0:	d307      	bcc.n	80050d2 <__cvt+0xb6>
 80050c2:	4630      	mov	r0, r6
 80050c4:	9b07      	ldr	r3, [sp, #28]
 80050c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80050c8:	1b9b      	subs	r3, r3, r6
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	b008      	add	sp, #32
 80050ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d2:	1c59      	adds	r1, r3, #1
 80050d4:	9107      	str	r1, [sp, #28]
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	e7f0      	b.n	80050bc <__cvt+0xa0>

080050da <__exponent>:
 80050da:	4603      	mov	r3, r0
 80050dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050de:	2900      	cmp	r1, #0
 80050e0:	f803 2b02 	strb.w	r2, [r3], #2
 80050e4:	bfb6      	itet	lt
 80050e6:	222d      	movlt	r2, #45	; 0x2d
 80050e8:	222b      	movge	r2, #43	; 0x2b
 80050ea:	4249      	neglt	r1, r1
 80050ec:	2909      	cmp	r1, #9
 80050ee:	7042      	strb	r2, [r0, #1]
 80050f0:	dd2a      	ble.n	8005148 <__exponent+0x6e>
 80050f2:	f10d 0207 	add.w	r2, sp, #7
 80050f6:	4617      	mov	r7, r2
 80050f8:	260a      	movs	r6, #10
 80050fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80050fe:	4694      	mov	ip, r2
 8005100:	fb06 1415 	mls	r4, r6, r5, r1
 8005104:	3430      	adds	r4, #48	; 0x30
 8005106:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800510a:	460c      	mov	r4, r1
 800510c:	2c63      	cmp	r4, #99	; 0x63
 800510e:	4629      	mov	r1, r5
 8005110:	f102 32ff 	add.w	r2, r2, #4294967295
 8005114:	dcf1      	bgt.n	80050fa <__exponent+0x20>
 8005116:	3130      	adds	r1, #48	; 0x30
 8005118:	f1ac 0402 	sub.w	r4, ip, #2
 800511c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005120:	4622      	mov	r2, r4
 8005122:	1c41      	adds	r1, r0, #1
 8005124:	42ba      	cmp	r2, r7
 8005126:	d30a      	bcc.n	800513e <__exponent+0x64>
 8005128:	f10d 0209 	add.w	r2, sp, #9
 800512c:	eba2 020c 	sub.w	r2, r2, ip
 8005130:	42bc      	cmp	r4, r7
 8005132:	bf88      	it	hi
 8005134:	2200      	movhi	r2, #0
 8005136:	4413      	add	r3, r2
 8005138:	1a18      	subs	r0, r3, r0
 800513a:	b003      	add	sp, #12
 800513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005142:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005146:	e7ed      	b.n	8005124 <__exponent+0x4a>
 8005148:	2330      	movs	r3, #48	; 0x30
 800514a:	3130      	adds	r1, #48	; 0x30
 800514c:	7083      	strb	r3, [r0, #2]
 800514e:	70c1      	strb	r1, [r0, #3]
 8005150:	1d03      	adds	r3, r0, #4
 8005152:	e7f1      	b.n	8005138 <__exponent+0x5e>

08005154 <_printf_float>:
 8005154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005158:	b091      	sub	sp, #68	; 0x44
 800515a:	460c      	mov	r4, r1
 800515c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005160:	4616      	mov	r6, r2
 8005162:	461f      	mov	r7, r3
 8005164:	4605      	mov	r5, r0
 8005166:	f000 fe01 	bl	8005d6c <_localeconv_r>
 800516a:	6803      	ldr	r3, [r0, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	9309      	str	r3, [sp, #36]	; 0x24
 8005170:	f7fa ffee 	bl	8000150 <strlen>
 8005174:	2300      	movs	r3, #0
 8005176:	930e      	str	r3, [sp, #56]	; 0x38
 8005178:	f8d8 3000 	ldr.w	r3, [r8]
 800517c:	900a      	str	r0, [sp, #40]	; 0x28
 800517e:	3307      	adds	r3, #7
 8005180:	f023 0307 	bic.w	r3, r3, #7
 8005184:	f103 0208 	add.w	r2, r3, #8
 8005188:	f894 9018 	ldrb.w	r9, [r4, #24]
 800518c:	f8d4 b000 	ldr.w	fp, [r4]
 8005190:	f8c8 2000 	str.w	r2, [r8]
 8005194:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005198:	4652      	mov	r2, sl
 800519a:	4643      	mov	r3, r8
 800519c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051a0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80051a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80051a6:	f04f 32ff 	mov.w	r2, #4294967295
 80051aa:	4650      	mov	r0, sl
 80051ac:	4b9c      	ldr	r3, [pc, #624]	; (8005420 <_printf_float+0x2cc>)
 80051ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051b0:	f7fb fc2c 	bl	8000a0c <__aeabi_dcmpun>
 80051b4:	bb70      	cbnz	r0, 8005214 <_printf_float+0xc0>
 80051b6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ba:	4650      	mov	r0, sl
 80051bc:	4b98      	ldr	r3, [pc, #608]	; (8005420 <_printf_float+0x2cc>)
 80051be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c0:	f7fb fc06 	bl	80009d0 <__aeabi_dcmple>
 80051c4:	bb30      	cbnz	r0, 8005214 <_printf_float+0xc0>
 80051c6:	2200      	movs	r2, #0
 80051c8:	2300      	movs	r3, #0
 80051ca:	4650      	mov	r0, sl
 80051cc:	4641      	mov	r1, r8
 80051ce:	f7fb fbf5 	bl	80009bc <__aeabi_dcmplt>
 80051d2:	b110      	cbz	r0, 80051da <_printf_float+0x86>
 80051d4:	232d      	movs	r3, #45	; 0x2d
 80051d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051da:	4a92      	ldr	r2, [pc, #584]	; (8005424 <_printf_float+0x2d0>)
 80051dc:	4b92      	ldr	r3, [pc, #584]	; (8005428 <_printf_float+0x2d4>)
 80051de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80051e2:	bf94      	ite	ls
 80051e4:	4690      	movls	r8, r2
 80051e6:	4698      	movhi	r8, r3
 80051e8:	2303      	movs	r3, #3
 80051ea:	f04f 0a00 	mov.w	sl, #0
 80051ee:	6123      	str	r3, [r4, #16]
 80051f0:	f02b 0304 	bic.w	r3, fp, #4
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	4633      	mov	r3, r6
 80051f8:	4621      	mov	r1, r4
 80051fa:	4628      	mov	r0, r5
 80051fc:	9700      	str	r7, [sp, #0]
 80051fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8005200:	f000 f9d6 	bl	80055b0 <_printf_common>
 8005204:	3001      	adds	r0, #1
 8005206:	f040 8090 	bne.w	800532a <_printf_float+0x1d6>
 800520a:	f04f 30ff 	mov.w	r0, #4294967295
 800520e:	b011      	add	sp, #68	; 0x44
 8005210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005214:	4652      	mov	r2, sl
 8005216:	4643      	mov	r3, r8
 8005218:	4650      	mov	r0, sl
 800521a:	4641      	mov	r1, r8
 800521c:	f7fb fbf6 	bl	8000a0c <__aeabi_dcmpun>
 8005220:	b148      	cbz	r0, 8005236 <_printf_float+0xe2>
 8005222:	f1b8 0f00 	cmp.w	r8, #0
 8005226:	bfb8      	it	lt
 8005228:	232d      	movlt	r3, #45	; 0x2d
 800522a:	4a80      	ldr	r2, [pc, #512]	; (800542c <_printf_float+0x2d8>)
 800522c:	bfb8      	it	lt
 800522e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005232:	4b7f      	ldr	r3, [pc, #508]	; (8005430 <_printf_float+0x2dc>)
 8005234:	e7d3      	b.n	80051de <_printf_float+0x8a>
 8005236:	6863      	ldr	r3, [r4, #4]
 8005238:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	d142      	bne.n	80052c6 <_printf_float+0x172>
 8005240:	2306      	movs	r3, #6
 8005242:	6063      	str	r3, [r4, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	9206      	str	r2, [sp, #24]
 8005248:	aa0e      	add	r2, sp, #56	; 0x38
 800524a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800524e:	aa0d      	add	r2, sp, #52	; 0x34
 8005250:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005254:	9203      	str	r2, [sp, #12]
 8005256:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800525a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800525e:	6023      	str	r3, [r4, #0]
 8005260:	6863      	ldr	r3, [r4, #4]
 8005262:	4652      	mov	r2, sl
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	4628      	mov	r0, r5
 8005268:	4643      	mov	r3, r8
 800526a:	910b      	str	r1, [sp, #44]	; 0x2c
 800526c:	f7ff fed6 	bl	800501c <__cvt>
 8005270:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005272:	4680      	mov	r8, r0
 8005274:	2947      	cmp	r1, #71	; 0x47
 8005276:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005278:	d108      	bne.n	800528c <_printf_float+0x138>
 800527a:	1cc8      	adds	r0, r1, #3
 800527c:	db02      	blt.n	8005284 <_printf_float+0x130>
 800527e:	6863      	ldr	r3, [r4, #4]
 8005280:	4299      	cmp	r1, r3
 8005282:	dd40      	ble.n	8005306 <_printf_float+0x1b2>
 8005284:	f1a9 0902 	sub.w	r9, r9, #2
 8005288:	fa5f f989 	uxtb.w	r9, r9
 800528c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005290:	d81f      	bhi.n	80052d2 <_printf_float+0x17e>
 8005292:	464a      	mov	r2, r9
 8005294:	3901      	subs	r1, #1
 8005296:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800529a:	910d      	str	r1, [sp, #52]	; 0x34
 800529c:	f7ff ff1d 	bl	80050da <__exponent>
 80052a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052a2:	4682      	mov	sl, r0
 80052a4:	1813      	adds	r3, r2, r0
 80052a6:	2a01      	cmp	r2, #1
 80052a8:	6123      	str	r3, [r4, #16]
 80052aa:	dc02      	bgt.n	80052b2 <_printf_float+0x15e>
 80052ac:	6822      	ldr	r2, [r4, #0]
 80052ae:	07d2      	lsls	r2, r2, #31
 80052b0:	d501      	bpl.n	80052b6 <_printf_float+0x162>
 80052b2:	3301      	adds	r3, #1
 80052b4:	6123      	str	r3, [r4, #16]
 80052b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d09b      	beq.n	80051f6 <_printf_float+0xa2>
 80052be:	232d      	movs	r3, #45	; 0x2d
 80052c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c4:	e797      	b.n	80051f6 <_printf_float+0xa2>
 80052c6:	2947      	cmp	r1, #71	; 0x47
 80052c8:	d1bc      	bne.n	8005244 <_printf_float+0xf0>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1ba      	bne.n	8005244 <_printf_float+0xf0>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e7b7      	b.n	8005242 <_printf_float+0xee>
 80052d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80052d6:	d118      	bne.n	800530a <_printf_float+0x1b6>
 80052d8:	2900      	cmp	r1, #0
 80052da:	6863      	ldr	r3, [r4, #4]
 80052dc:	dd0b      	ble.n	80052f6 <_printf_float+0x1a2>
 80052de:	6121      	str	r1, [r4, #16]
 80052e0:	b913      	cbnz	r3, 80052e8 <_printf_float+0x194>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	07d0      	lsls	r0, r2, #31
 80052e6:	d502      	bpl.n	80052ee <_printf_float+0x19a>
 80052e8:	3301      	adds	r3, #1
 80052ea:	440b      	add	r3, r1
 80052ec:	6123      	str	r3, [r4, #16]
 80052ee:	f04f 0a00 	mov.w	sl, #0
 80052f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80052f4:	e7df      	b.n	80052b6 <_printf_float+0x162>
 80052f6:	b913      	cbnz	r3, 80052fe <_printf_float+0x1aa>
 80052f8:	6822      	ldr	r2, [r4, #0]
 80052fa:	07d2      	lsls	r2, r2, #31
 80052fc:	d501      	bpl.n	8005302 <_printf_float+0x1ae>
 80052fe:	3302      	adds	r3, #2
 8005300:	e7f4      	b.n	80052ec <_printf_float+0x198>
 8005302:	2301      	movs	r3, #1
 8005304:	e7f2      	b.n	80052ec <_printf_float+0x198>
 8005306:	f04f 0967 	mov.w	r9, #103	; 0x67
 800530a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800530c:	4299      	cmp	r1, r3
 800530e:	db05      	blt.n	800531c <_printf_float+0x1c8>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	6121      	str	r1, [r4, #16]
 8005314:	07d8      	lsls	r0, r3, #31
 8005316:	d5ea      	bpl.n	80052ee <_printf_float+0x19a>
 8005318:	1c4b      	adds	r3, r1, #1
 800531a:	e7e7      	b.n	80052ec <_printf_float+0x198>
 800531c:	2900      	cmp	r1, #0
 800531e:	bfcc      	ite	gt
 8005320:	2201      	movgt	r2, #1
 8005322:	f1c1 0202 	rsble	r2, r1, #2
 8005326:	4413      	add	r3, r2
 8005328:	e7e0      	b.n	80052ec <_printf_float+0x198>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	055a      	lsls	r2, r3, #21
 800532e:	d407      	bmi.n	8005340 <_printf_float+0x1ec>
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	4642      	mov	r2, r8
 8005334:	4631      	mov	r1, r6
 8005336:	4628      	mov	r0, r5
 8005338:	47b8      	blx	r7
 800533a:	3001      	adds	r0, #1
 800533c:	d12b      	bne.n	8005396 <_printf_float+0x242>
 800533e:	e764      	b.n	800520a <_printf_float+0xb6>
 8005340:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005344:	f240 80dd 	bls.w	8005502 <_printf_float+0x3ae>
 8005348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800534c:	2200      	movs	r2, #0
 800534e:	2300      	movs	r3, #0
 8005350:	f7fb fb2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005354:	2800      	cmp	r0, #0
 8005356:	d033      	beq.n	80053c0 <_printf_float+0x26c>
 8005358:	2301      	movs	r3, #1
 800535a:	4631      	mov	r1, r6
 800535c:	4628      	mov	r0, r5
 800535e:	4a35      	ldr	r2, [pc, #212]	; (8005434 <_printf_float+0x2e0>)
 8005360:	47b8      	blx	r7
 8005362:	3001      	adds	r0, #1
 8005364:	f43f af51 	beq.w	800520a <_printf_float+0xb6>
 8005368:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800536c:	429a      	cmp	r2, r3
 800536e:	db02      	blt.n	8005376 <_printf_float+0x222>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	07d8      	lsls	r0, r3, #31
 8005374:	d50f      	bpl.n	8005396 <_printf_float+0x242>
 8005376:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800537a:	4631      	mov	r1, r6
 800537c:	4628      	mov	r0, r5
 800537e:	47b8      	blx	r7
 8005380:	3001      	adds	r0, #1
 8005382:	f43f af42 	beq.w	800520a <_printf_float+0xb6>
 8005386:	f04f 0800 	mov.w	r8, #0
 800538a:	f104 091a 	add.w	r9, r4, #26
 800538e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005390:	3b01      	subs	r3, #1
 8005392:	4543      	cmp	r3, r8
 8005394:	dc09      	bgt.n	80053aa <_printf_float+0x256>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	079b      	lsls	r3, r3, #30
 800539a:	f100 8104 	bmi.w	80055a6 <_printf_float+0x452>
 800539e:	68e0      	ldr	r0, [r4, #12]
 80053a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053a2:	4298      	cmp	r0, r3
 80053a4:	bfb8      	it	lt
 80053a6:	4618      	movlt	r0, r3
 80053a8:	e731      	b.n	800520e <_printf_float+0xba>
 80053aa:	2301      	movs	r3, #1
 80053ac:	464a      	mov	r2, r9
 80053ae:	4631      	mov	r1, r6
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b8      	blx	r7
 80053b4:	3001      	adds	r0, #1
 80053b6:	f43f af28 	beq.w	800520a <_printf_float+0xb6>
 80053ba:	f108 0801 	add.w	r8, r8, #1
 80053be:	e7e6      	b.n	800538e <_printf_float+0x23a>
 80053c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	dc38      	bgt.n	8005438 <_printf_float+0x2e4>
 80053c6:	2301      	movs	r3, #1
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	4a19      	ldr	r2, [pc, #100]	; (8005434 <_printf_float+0x2e0>)
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f af1a 	beq.w	800520a <_printf_float+0xb6>
 80053d6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80053da:	4313      	orrs	r3, r2
 80053dc:	d102      	bne.n	80053e4 <_printf_float+0x290>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	07d9      	lsls	r1, r3, #31
 80053e2:	d5d8      	bpl.n	8005396 <_printf_float+0x242>
 80053e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053e8:	4631      	mov	r1, r6
 80053ea:	4628      	mov	r0, r5
 80053ec:	47b8      	blx	r7
 80053ee:	3001      	adds	r0, #1
 80053f0:	f43f af0b 	beq.w	800520a <_printf_float+0xb6>
 80053f4:	f04f 0900 	mov.w	r9, #0
 80053f8:	f104 0a1a 	add.w	sl, r4, #26
 80053fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053fe:	425b      	negs	r3, r3
 8005400:	454b      	cmp	r3, r9
 8005402:	dc01      	bgt.n	8005408 <_printf_float+0x2b4>
 8005404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005406:	e794      	b.n	8005332 <_printf_float+0x1de>
 8005408:	2301      	movs	r3, #1
 800540a:	4652      	mov	r2, sl
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	f43f aef9 	beq.w	800520a <_printf_float+0xb6>
 8005418:	f109 0901 	add.w	r9, r9, #1
 800541c:	e7ee      	b.n	80053fc <_printf_float+0x2a8>
 800541e:	bf00      	nop
 8005420:	7fefffff 	.word	0x7fefffff
 8005424:	08008676 	.word	0x08008676
 8005428:	0800867a 	.word	0x0800867a
 800542c:	0800867e 	.word	0x0800867e
 8005430:	08008682 	.word	0x08008682
 8005434:	08008686 	.word	0x08008686
 8005438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800543a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800543c:	429a      	cmp	r2, r3
 800543e:	bfa8      	it	ge
 8005440:	461a      	movge	r2, r3
 8005442:	2a00      	cmp	r2, #0
 8005444:	4691      	mov	r9, r2
 8005446:	dc37      	bgt.n	80054b8 <_printf_float+0x364>
 8005448:	f04f 0b00 	mov.w	fp, #0
 800544c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005450:	f104 021a 	add.w	r2, r4, #26
 8005454:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005458:	ebaa 0309 	sub.w	r3, sl, r9
 800545c:	455b      	cmp	r3, fp
 800545e:	dc33      	bgt.n	80054c8 <_printf_float+0x374>
 8005460:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005464:	429a      	cmp	r2, r3
 8005466:	db3b      	blt.n	80054e0 <_printf_float+0x38c>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	07da      	lsls	r2, r3, #31
 800546c:	d438      	bmi.n	80054e0 <_printf_float+0x38c>
 800546e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005472:	eba2 0903 	sub.w	r9, r2, r3
 8005476:	eba2 020a 	sub.w	r2, r2, sl
 800547a:	4591      	cmp	r9, r2
 800547c:	bfa8      	it	ge
 800547e:	4691      	movge	r9, r2
 8005480:	f1b9 0f00 	cmp.w	r9, #0
 8005484:	dc34      	bgt.n	80054f0 <_printf_float+0x39c>
 8005486:	f04f 0800 	mov.w	r8, #0
 800548a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800548e:	f104 0a1a 	add.w	sl, r4, #26
 8005492:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	eba3 0309 	sub.w	r3, r3, r9
 800549c:	4543      	cmp	r3, r8
 800549e:	f77f af7a 	ble.w	8005396 <_printf_float+0x242>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4652      	mov	r2, sl
 80054a6:	4631      	mov	r1, r6
 80054a8:	4628      	mov	r0, r5
 80054aa:	47b8      	blx	r7
 80054ac:	3001      	adds	r0, #1
 80054ae:	f43f aeac 	beq.w	800520a <_printf_float+0xb6>
 80054b2:	f108 0801 	add.w	r8, r8, #1
 80054b6:	e7ec      	b.n	8005492 <_printf_float+0x33e>
 80054b8:	4613      	mov	r3, r2
 80054ba:	4631      	mov	r1, r6
 80054bc:	4642      	mov	r2, r8
 80054be:	4628      	mov	r0, r5
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	d1c0      	bne.n	8005448 <_printf_float+0x2f4>
 80054c6:	e6a0      	b.n	800520a <_printf_float+0xb6>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80054d0:	47b8      	blx	r7
 80054d2:	3001      	adds	r0, #1
 80054d4:	f43f ae99 	beq.w	800520a <_printf_float+0xb6>
 80054d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054da:	f10b 0b01 	add.w	fp, fp, #1
 80054de:	e7b9      	b.n	8005454 <_printf_float+0x300>
 80054e0:	4631      	mov	r1, r6
 80054e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054e6:	4628      	mov	r0, r5
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	d1bf      	bne.n	800546e <_printf_float+0x31a>
 80054ee:	e68c      	b.n	800520a <_printf_float+0xb6>
 80054f0:	464b      	mov	r3, r9
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	eb08 020a 	add.w	r2, r8, sl
 80054fa:	47b8      	blx	r7
 80054fc:	3001      	adds	r0, #1
 80054fe:	d1c2      	bne.n	8005486 <_printf_float+0x332>
 8005500:	e683      	b.n	800520a <_printf_float+0xb6>
 8005502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005504:	2a01      	cmp	r2, #1
 8005506:	dc01      	bgt.n	800550c <_printf_float+0x3b8>
 8005508:	07db      	lsls	r3, r3, #31
 800550a:	d539      	bpl.n	8005580 <_printf_float+0x42c>
 800550c:	2301      	movs	r3, #1
 800550e:	4642      	mov	r2, r8
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	f43f ae77 	beq.w	800520a <_printf_float+0xb6>
 800551c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005520:	4631      	mov	r1, r6
 8005522:	4628      	mov	r0, r5
 8005524:	47b8      	blx	r7
 8005526:	3001      	adds	r0, #1
 8005528:	f43f ae6f 	beq.w	800520a <_printf_float+0xb6>
 800552c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005530:	2200      	movs	r2, #0
 8005532:	2300      	movs	r3, #0
 8005534:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005538:	f7fb fa36 	bl	80009a8 <__aeabi_dcmpeq>
 800553c:	b9d8      	cbnz	r0, 8005576 <_printf_float+0x422>
 800553e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005542:	f108 0201 	add.w	r2, r8, #1
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	d10e      	bne.n	800556e <_printf_float+0x41a>
 8005550:	e65b      	b.n	800520a <_printf_float+0xb6>
 8005552:	2301      	movs	r3, #1
 8005554:	464a      	mov	r2, r9
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f ae54 	beq.w	800520a <_printf_float+0xb6>
 8005562:	f108 0801 	add.w	r8, r8, #1
 8005566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005568:	3b01      	subs	r3, #1
 800556a:	4543      	cmp	r3, r8
 800556c:	dcf1      	bgt.n	8005552 <_printf_float+0x3fe>
 800556e:	4653      	mov	r3, sl
 8005570:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005574:	e6de      	b.n	8005334 <_printf_float+0x1e0>
 8005576:	f04f 0800 	mov.w	r8, #0
 800557a:	f104 091a 	add.w	r9, r4, #26
 800557e:	e7f2      	b.n	8005566 <_printf_float+0x412>
 8005580:	2301      	movs	r3, #1
 8005582:	4642      	mov	r2, r8
 8005584:	e7df      	b.n	8005546 <_printf_float+0x3f2>
 8005586:	2301      	movs	r3, #1
 8005588:	464a      	mov	r2, r9
 800558a:	4631      	mov	r1, r6
 800558c:	4628      	mov	r0, r5
 800558e:	47b8      	blx	r7
 8005590:	3001      	adds	r0, #1
 8005592:	f43f ae3a 	beq.w	800520a <_printf_float+0xb6>
 8005596:	f108 0801 	add.w	r8, r8, #1
 800559a:	68e3      	ldr	r3, [r4, #12]
 800559c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800559e:	1a5b      	subs	r3, r3, r1
 80055a0:	4543      	cmp	r3, r8
 80055a2:	dcf0      	bgt.n	8005586 <_printf_float+0x432>
 80055a4:	e6fb      	b.n	800539e <_printf_float+0x24a>
 80055a6:	f04f 0800 	mov.w	r8, #0
 80055aa:	f104 0919 	add.w	r9, r4, #25
 80055ae:	e7f4      	b.n	800559a <_printf_float+0x446>

080055b0 <_printf_common>:
 80055b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b4:	4616      	mov	r6, r2
 80055b6:	4699      	mov	r9, r3
 80055b8:	688a      	ldr	r2, [r1, #8]
 80055ba:	690b      	ldr	r3, [r1, #16]
 80055bc:	4607      	mov	r7, r0
 80055be:	4293      	cmp	r3, r2
 80055c0:	bfb8      	it	lt
 80055c2:	4613      	movlt	r3, r2
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055ca:	460c      	mov	r4, r1
 80055cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055d0:	b10a      	cbz	r2, 80055d6 <_printf_common+0x26>
 80055d2:	3301      	adds	r3, #1
 80055d4:	6033      	str	r3, [r6, #0]
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	0699      	lsls	r1, r3, #26
 80055da:	bf42      	ittt	mi
 80055dc:	6833      	ldrmi	r3, [r6, #0]
 80055de:	3302      	addmi	r3, #2
 80055e0:	6033      	strmi	r3, [r6, #0]
 80055e2:	6825      	ldr	r5, [r4, #0]
 80055e4:	f015 0506 	ands.w	r5, r5, #6
 80055e8:	d106      	bne.n	80055f8 <_printf_common+0x48>
 80055ea:	f104 0a19 	add.w	sl, r4, #25
 80055ee:	68e3      	ldr	r3, [r4, #12]
 80055f0:	6832      	ldr	r2, [r6, #0]
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	42ab      	cmp	r3, r5
 80055f6:	dc2b      	bgt.n	8005650 <_printf_common+0xa0>
 80055f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055fc:	1e13      	subs	r3, r2, #0
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	bf18      	it	ne
 8005602:	2301      	movne	r3, #1
 8005604:	0692      	lsls	r2, r2, #26
 8005606:	d430      	bmi.n	800566a <_printf_common+0xba>
 8005608:	4649      	mov	r1, r9
 800560a:	4638      	mov	r0, r7
 800560c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005610:	47c0      	blx	r8
 8005612:	3001      	adds	r0, #1
 8005614:	d023      	beq.n	800565e <_printf_common+0xae>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	6922      	ldr	r2, [r4, #16]
 800561a:	f003 0306 	and.w	r3, r3, #6
 800561e:	2b04      	cmp	r3, #4
 8005620:	bf14      	ite	ne
 8005622:	2500      	movne	r5, #0
 8005624:	6833      	ldreq	r3, [r6, #0]
 8005626:	f04f 0600 	mov.w	r6, #0
 800562a:	bf08      	it	eq
 800562c:	68e5      	ldreq	r5, [r4, #12]
 800562e:	f104 041a 	add.w	r4, r4, #26
 8005632:	bf08      	it	eq
 8005634:	1aed      	subeq	r5, r5, r3
 8005636:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800563a:	bf08      	it	eq
 800563c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005640:	4293      	cmp	r3, r2
 8005642:	bfc4      	itt	gt
 8005644:	1a9b      	subgt	r3, r3, r2
 8005646:	18ed      	addgt	r5, r5, r3
 8005648:	42b5      	cmp	r5, r6
 800564a:	d11a      	bne.n	8005682 <_printf_common+0xd2>
 800564c:	2000      	movs	r0, #0
 800564e:	e008      	b.n	8005662 <_printf_common+0xb2>
 8005650:	2301      	movs	r3, #1
 8005652:	4652      	mov	r2, sl
 8005654:	4649      	mov	r1, r9
 8005656:	4638      	mov	r0, r7
 8005658:	47c0      	blx	r8
 800565a:	3001      	adds	r0, #1
 800565c:	d103      	bne.n	8005666 <_printf_common+0xb6>
 800565e:	f04f 30ff 	mov.w	r0, #4294967295
 8005662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005666:	3501      	adds	r5, #1
 8005668:	e7c1      	b.n	80055ee <_printf_common+0x3e>
 800566a:	2030      	movs	r0, #48	; 0x30
 800566c:	18e1      	adds	r1, r4, r3
 800566e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005678:	4422      	add	r2, r4
 800567a:	3302      	adds	r3, #2
 800567c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005680:	e7c2      	b.n	8005608 <_printf_common+0x58>
 8005682:	2301      	movs	r3, #1
 8005684:	4622      	mov	r2, r4
 8005686:	4649      	mov	r1, r9
 8005688:	4638      	mov	r0, r7
 800568a:	47c0      	blx	r8
 800568c:	3001      	adds	r0, #1
 800568e:	d0e6      	beq.n	800565e <_printf_common+0xae>
 8005690:	3601      	adds	r6, #1
 8005692:	e7d9      	b.n	8005648 <_printf_common+0x98>

08005694 <_printf_i>:
 8005694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	7e0f      	ldrb	r7, [r1, #24]
 800569a:	4691      	mov	r9, r2
 800569c:	2f78      	cmp	r7, #120	; 0x78
 800569e:	4680      	mov	r8, r0
 80056a0:	460c      	mov	r4, r1
 80056a2:	469a      	mov	sl, r3
 80056a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056aa:	d807      	bhi.n	80056bc <_printf_i+0x28>
 80056ac:	2f62      	cmp	r7, #98	; 0x62
 80056ae:	d80a      	bhi.n	80056c6 <_printf_i+0x32>
 80056b0:	2f00      	cmp	r7, #0
 80056b2:	f000 80d5 	beq.w	8005860 <_printf_i+0x1cc>
 80056b6:	2f58      	cmp	r7, #88	; 0x58
 80056b8:	f000 80c1 	beq.w	800583e <_printf_i+0x1aa>
 80056bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056c4:	e03a      	b.n	800573c <_printf_i+0xa8>
 80056c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056ca:	2b15      	cmp	r3, #21
 80056cc:	d8f6      	bhi.n	80056bc <_printf_i+0x28>
 80056ce:	a101      	add	r1, pc, #4	; (adr r1, 80056d4 <_printf_i+0x40>)
 80056d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056d4:	0800572d 	.word	0x0800572d
 80056d8:	08005741 	.word	0x08005741
 80056dc:	080056bd 	.word	0x080056bd
 80056e0:	080056bd 	.word	0x080056bd
 80056e4:	080056bd 	.word	0x080056bd
 80056e8:	080056bd 	.word	0x080056bd
 80056ec:	08005741 	.word	0x08005741
 80056f0:	080056bd 	.word	0x080056bd
 80056f4:	080056bd 	.word	0x080056bd
 80056f8:	080056bd 	.word	0x080056bd
 80056fc:	080056bd 	.word	0x080056bd
 8005700:	08005847 	.word	0x08005847
 8005704:	0800576d 	.word	0x0800576d
 8005708:	08005801 	.word	0x08005801
 800570c:	080056bd 	.word	0x080056bd
 8005710:	080056bd 	.word	0x080056bd
 8005714:	08005869 	.word	0x08005869
 8005718:	080056bd 	.word	0x080056bd
 800571c:	0800576d 	.word	0x0800576d
 8005720:	080056bd 	.word	0x080056bd
 8005724:	080056bd 	.word	0x080056bd
 8005728:	08005809 	.word	0x08005809
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	1d1a      	adds	r2, r3, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	602a      	str	r2, [r5, #0]
 8005734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800573c:	2301      	movs	r3, #1
 800573e:	e0a0      	b.n	8005882 <_printf_i+0x1ee>
 8005740:	6820      	ldr	r0, [r4, #0]
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	0607      	lsls	r7, r0, #24
 8005746:	f103 0104 	add.w	r1, r3, #4
 800574a:	6029      	str	r1, [r5, #0]
 800574c:	d501      	bpl.n	8005752 <_printf_i+0xbe>
 800574e:	681e      	ldr	r6, [r3, #0]
 8005750:	e003      	b.n	800575a <_printf_i+0xc6>
 8005752:	0646      	lsls	r6, r0, #25
 8005754:	d5fb      	bpl.n	800574e <_printf_i+0xba>
 8005756:	f9b3 6000 	ldrsh.w	r6, [r3]
 800575a:	2e00      	cmp	r6, #0
 800575c:	da03      	bge.n	8005766 <_printf_i+0xd2>
 800575e:	232d      	movs	r3, #45	; 0x2d
 8005760:	4276      	negs	r6, r6
 8005762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005766:	230a      	movs	r3, #10
 8005768:	4859      	ldr	r0, [pc, #356]	; (80058d0 <_printf_i+0x23c>)
 800576a:	e012      	b.n	8005792 <_printf_i+0xfe>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	6820      	ldr	r0, [r4, #0]
 8005770:	1d19      	adds	r1, r3, #4
 8005772:	6029      	str	r1, [r5, #0]
 8005774:	0605      	lsls	r5, r0, #24
 8005776:	d501      	bpl.n	800577c <_printf_i+0xe8>
 8005778:	681e      	ldr	r6, [r3, #0]
 800577a:	e002      	b.n	8005782 <_printf_i+0xee>
 800577c:	0641      	lsls	r1, r0, #25
 800577e:	d5fb      	bpl.n	8005778 <_printf_i+0xe4>
 8005780:	881e      	ldrh	r6, [r3, #0]
 8005782:	2f6f      	cmp	r7, #111	; 0x6f
 8005784:	bf0c      	ite	eq
 8005786:	2308      	moveq	r3, #8
 8005788:	230a      	movne	r3, #10
 800578a:	4851      	ldr	r0, [pc, #324]	; (80058d0 <_printf_i+0x23c>)
 800578c:	2100      	movs	r1, #0
 800578e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005792:	6865      	ldr	r5, [r4, #4]
 8005794:	2d00      	cmp	r5, #0
 8005796:	bfa8      	it	ge
 8005798:	6821      	ldrge	r1, [r4, #0]
 800579a:	60a5      	str	r5, [r4, #8]
 800579c:	bfa4      	itt	ge
 800579e:	f021 0104 	bicge.w	r1, r1, #4
 80057a2:	6021      	strge	r1, [r4, #0]
 80057a4:	b90e      	cbnz	r6, 80057aa <_printf_i+0x116>
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	d04b      	beq.n	8005842 <_printf_i+0x1ae>
 80057aa:	4615      	mov	r5, r2
 80057ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80057b0:	fb03 6711 	mls	r7, r3, r1, r6
 80057b4:	5dc7      	ldrb	r7, [r0, r7]
 80057b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057ba:	4637      	mov	r7, r6
 80057bc:	42bb      	cmp	r3, r7
 80057be:	460e      	mov	r6, r1
 80057c0:	d9f4      	bls.n	80057ac <_printf_i+0x118>
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d10b      	bne.n	80057de <_printf_i+0x14a>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	07de      	lsls	r6, r3, #31
 80057ca:	d508      	bpl.n	80057de <_printf_i+0x14a>
 80057cc:	6923      	ldr	r3, [r4, #16]
 80057ce:	6861      	ldr	r1, [r4, #4]
 80057d0:	4299      	cmp	r1, r3
 80057d2:	bfde      	ittt	le
 80057d4:	2330      	movle	r3, #48	; 0x30
 80057d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057de:	1b52      	subs	r2, r2, r5
 80057e0:	6122      	str	r2, [r4, #16]
 80057e2:	464b      	mov	r3, r9
 80057e4:	4621      	mov	r1, r4
 80057e6:	4640      	mov	r0, r8
 80057e8:	f8cd a000 	str.w	sl, [sp]
 80057ec:	aa03      	add	r2, sp, #12
 80057ee:	f7ff fedf 	bl	80055b0 <_printf_common>
 80057f2:	3001      	adds	r0, #1
 80057f4:	d14a      	bne.n	800588c <_printf_i+0x1f8>
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295
 80057fa:	b004      	add	sp, #16
 80057fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	f043 0320 	orr.w	r3, r3, #32
 8005806:	6023      	str	r3, [r4, #0]
 8005808:	2778      	movs	r7, #120	; 0x78
 800580a:	4832      	ldr	r0, [pc, #200]	; (80058d4 <_printf_i+0x240>)
 800580c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	6829      	ldr	r1, [r5, #0]
 8005814:	061f      	lsls	r7, r3, #24
 8005816:	f851 6b04 	ldr.w	r6, [r1], #4
 800581a:	d402      	bmi.n	8005822 <_printf_i+0x18e>
 800581c:	065f      	lsls	r7, r3, #25
 800581e:	bf48      	it	mi
 8005820:	b2b6      	uxthmi	r6, r6
 8005822:	07df      	lsls	r7, r3, #31
 8005824:	bf48      	it	mi
 8005826:	f043 0320 	orrmi.w	r3, r3, #32
 800582a:	6029      	str	r1, [r5, #0]
 800582c:	bf48      	it	mi
 800582e:	6023      	strmi	r3, [r4, #0]
 8005830:	b91e      	cbnz	r6, 800583a <_printf_i+0x1a6>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	f023 0320 	bic.w	r3, r3, #32
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	2310      	movs	r3, #16
 800583c:	e7a6      	b.n	800578c <_printf_i+0xf8>
 800583e:	4824      	ldr	r0, [pc, #144]	; (80058d0 <_printf_i+0x23c>)
 8005840:	e7e4      	b.n	800580c <_printf_i+0x178>
 8005842:	4615      	mov	r5, r2
 8005844:	e7bd      	b.n	80057c2 <_printf_i+0x12e>
 8005846:	682b      	ldr	r3, [r5, #0]
 8005848:	6826      	ldr	r6, [r4, #0]
 800584a:	1d18      	adds	r0, r3, #4
 800584c:	6961      	ldr	r1, [r4, #20]
 800584e:	6028      	str	r0, [r5, #0]
 8005850:	0635      	lsls	r5, r6, #24
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	d501      	bpl.n	800585a <_printf_i+0x1c6>
 8005856:	6019      	str	r1, [r3, #0]
 8005858:	e002      	b.n	8005860 <_printf_i+0x1cc>
 800585a:	0670      	lsls	r0, r6, #25
 800585c:	d5fb      	bpl.n	8005856 <_printf_i+0x1c2>
 800585e:	8019      	strh	r1, [r3, #0]
 8005860:	2300      	movs	r3, #0
 8005862:	4615      	mov	r5, r2
 8005864:	6123      	str	r3, [r4, #16]
 8005866:	e7bc      	b.n	80057e2 <_printf_i+0x14e>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	2100      	movs	r1, #0
 800586c:	1d1a      	adds	r2, r3, #4
 800586e:	602a      	str	r2, [r5, #0]
 8005870:	681d      	ldr	r5, [r3, #0]
 8005872:	6862      	ldr	r2, [r4, #4]
 8005874:	4628      	mov	r0, r5
 8005876:	f000 faf0 	bl	8005e5a <memchr>
 800587a:	b108      	cbz	r0, 8005880 <_printf_i+0x1ec>
 800587c:	1b40      	subs	r0, r0, r5
 800587e:	6060      	str	r0, [r4, #4]
 8005880:	6863      	ldr	r3, [r4, #4]
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	2300      	movs	r3, #0
 8005886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588a:	e7aa      	b.n	80057e2 <_printf_i+0x14e>
 800588c:	462a      	mov	r2, r5
 800588e:	4649      	mov	r1, r9
 8005890:	4640      	mov	r0, r8
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	47d0      	blx	sl
 8005896:	3001      	adds	r0, #1
 8005898:	d0ad      	beq.n	80057f6 <_printf_i+0x162>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	079b      	lsls	r3, r3, #30
 800589e:	d413      	bmi.n	80058c8 <_printf_i+0x234>
 80058a0:	68e0      	ldr	r0, [r4, #12]
 80058a2:	9b03      	ldr	r3, [sp, #12]
 80058a4:	4298      	cmp	r0, r3
 80058a6:	bfb8      	it	lt
 80058a8:	4618      	movlt	r0, r3
 80058aa:	e7a6      	b.n	80057fa <_printf_i+0x166>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4632      	mov	r2, r6
 80058b0:	4649      	mov	r1, r9
 80058b2:	4640      	mov	r0, r8
 80058b4:	47d0      	blx	sl
 80058b6:	3001      	adds	r0, #1
 80058b8:	d09d      	beq.n	80057f6 <_printf_i+0x162>
 80058ba:	3501      	adds	r5, #1
 80058bc:	68e3      	ldr	r3, [r4, #12]
 80058be:	9903      	ldr	r1, [sp, #12]
 80058c0:	1a5b      	subs	r3, r3, r1
 80058c2:	42ab      	cmp	r3, r5
 80058c4:	dcf2      	bgt.n	80058ac <_printf_i+0x218>
 80058c6:	e7eb      	b.n	80058a0 <_printf_i+0x20c>
 80058c8:	2500      	movs	r5, #0
 80058ca:	f104 0619 	add.w	r6, r4, #25
 80058ce:	e7f5      	b.n	80058bc <_printf_i+0x228>
 80058d0:	08008688 	.word	0x08008688
 80058d4:	08008699 	.word	0x08008699

080058d8 <std>:
 80058d8:	2300      	movs	r3, #0
 80058da:	b510      	push	{r4, lr}
 80058dc:	4604      	mov	r4, r0
 80058de:	e9c0 3300 	strd	r3, r3, [r0]
 80058e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058e6:	6083      	str	r3, [r0, #8]
 80058e8:	8181      	strh	r1, [r0, #12]
 80058ea:	6643      	str	r3, [r0, #100]	; 0x64
 80058ec:	81c2      	strh	r2, [r0, #14]
 80058ee:	6183      	str	r3, [r0, #24]
 80058f0:	4619      	mov	r1, r3
 80058f2:	2208      	movs	r2, #8
 80058f4:	305c      	adds	r0, #92	; 0x5c
 80058f6:	f000 fa31 	bl	8005d5c <memset>
 80058fa:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <std+0x58>)
 80058fc:	6224      	str	r4, [r4, #32]
 80058fe:	6263      	str	r3, [r4, #36]	; 0x24
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <std+0x5c>)
 8005902:	62a3      	str	r3, [r4, #40]	; 0x28
 8005904:	4b0c      	ldr	r3, [pc, #48]	; (8005938 <std+0x60>)
 8005906:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <std+0x64>)
 800590a:	6323      	str	r3, [r4, #48]	; 0x30
 800590c:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <std+0x68>)
 800590e:	429c      	cmp	r4, r3
 8005910:	d006      	beq.n	8005920 <std+0x48>
 8005912:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005916:	4294      	cmp	r4, r2
 8005918:	d002      	beq.n	8005920 <std+0x48>
 800591a:	33d0      	adds	r3, #208	; 0xd0
 800591c:	429c      	cmp	r4, r3
 800591e:	d105      	bne.n	800592c <std+0x54>
 8005920:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005928:	f000 ba94 	b.w	8005e54 <__retarget_lock_init_recursive>
 800592c:	bd10      	pop	{r4, pc}
 800592e:	bf00      	nop
 8005930:	08005b79 	.word	0x08005b79
 8005934:	08005b9b 	.word	0x08005b9b
 8005938:	08005bd3 	.word	0x08005bd3
 800593c:	08005bf7 	.word	0x08005bf7
 8005940:	200007f8 	.word	0x200007f8

08005944 <stdio_exit_handler>:
 8005944:	4a02      	ldr	r2, [pc, #8]	; (8005950 <stdio_exit_handler+0xc>)
 8005946:	4903      	ldr	r1, [pc, #12]	; (8005954 <stdio_exit_handler+0x10>)
 8005948:	4803      	ldr	r0, [pc, #12]	; (8005958 <stdio_exit_handler+0x14>)
 800594a:	f000 b869 	b.w	8005a20 <_fwalk_sglue>
 800594e:	bf00      	nop
 8005950:	2000003c 	.word	0x2000003c
 8005954:	08007a91 	.word	0x08007a91
 8005958:	20000048 	.word	0x20000048

0800595c <cleanup_stdio>:
 800595c:	6841      	ldr	r1, [r0, #4]
 800595e:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <cleanup_stdio+0x34>)
 8005960:	b510      	push	{r4, lr}
 8005962:	4299      	cmp	r1, r3
 8005964:	4604      	mov	r4, r0
 8005966:	d001      	beq.n	800596c <cleanup_stdio+0x10>
 8005968:	f002 f892 	bl	8007a90 <_fflush_r>
 800596c:	68a1      	ldr	r1, [r4, #8]
 800596e:	4b09      	ldr	r3, [pc, #36]	; (8005994 <cleanup_stdio+0x38>)
 8005970:	4299      	cmp	r1, r3
 8005972:	d002      	beq.n	800597a <cleanup_stdio+0x1e>
 8005974:	4620      	mov	r0, r4
 8005976:	f002 f88b 	bl	8007a90 <_fflush_r>
 800597a:	68e1      	ldr	r1, [r4, #12]
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <cleanup_stdio+0x3c>)
 800597e:	4299      	cmp	r1, r3
 8005980:	d004      	beq.n	800598c <cleanup_stdio+0x30>
 8005982:	4620      	mov	r0, r4
 8005984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005988:	f002 b882 	b.w	8007a90 <_fflush_r>
 800598c:	bd10      	pop	{r4, pc}
 800598e:	bf00      	nop
 8005990:	200007f8 	.word	0x200007f8
 8005994:	20000860 	.word	0x20000860
 8005998:	200008c8 	.word	0x200008c8

0800599c <global_stdio_init.part.0>:
 800599c:	b510      	push	{r4, lr}
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <global_stdio_init.part.0+0x30>)
 80059a0:	4c0b      	ldr	r4, [pc, #44]	; (80059d0 <global_stdio_init.part.0+0x34>)
 80059a2:	4a0c      	ldr	r2, [pc, #48]	; (80059d4 <global_stdio_init.part.0+0x38>)
 80059a4:	4620      	mov	r0, r4
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	2104      	movs	r1, #4
 80059aa:	2200      	movs	r2, #0
 80059ac:	f7ff ff94 	bl	80058d8 <std>
 80059b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80059b4:	2201      	movs	r2, #1
 80059b6:	2109      	movs	r1, #9
 80059b8:	f7ff ff8e 	bl	80058d8 <std>
 80059bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80059c0:	2202      	movs	r2, #2
 80059c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c6:	2112      	movs	r1, #18
 80059c8:	f7ff bf86 	b.w	80058d8 <std>
 80059cc:	20000930 	.word	0x20000930
 80059d0:	200007f8 	.word	0x200007f8
 80059d4:	08005945 	.word	0x08005945

080059d8 <__sfp_lock_acquire>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__sfp_lock_acquire+0x8>)
 80059da:	f000 ba3c 	b.w	8005e56 <__retarget_lock_acquire_recursive>
 80059de:	bf00      	nop
 80059e0:	20000939 	.word	0x20000939

080059e4 <__sfp_lock_release>:
 80059e4:	4801      	ldr	r0, [pc, #4]	; (80059ec <__sfp_lock_release+0x8>)
 80059e6:	f000 ba37 	b.w	8005e58 <__retarget_lock_release_recursive>
 80059ea:	bf00      	nop
 80059ec:	20000939 	.word	0x20000939

080059f0 <__sinit>:
 80059f0:	b510      	push	{r4, lr}
 80059f2:	4604      	mov	r4, r0
 80059f4:	f7ff fff0 	bl	80059d8 <__sfp_lock_acquire>
 80059f8:	6a23      	ldr	r3, [r4, #32]
 80059fa:	b11b      	cbz	r3, 8005a04 <__sinit+0x14>
 80059fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a00:	f7ff bff0 	b.w	80059e4 <__sfp_lock_release>
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <__sinit+0x28>)
 8005a06:	6223      	str	r3, [r4, #32]
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <__sinit+0x2c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f5      	bne.n	80059fc <__sinit+0xc>
 8005a10:	f7ff ffc4 	bl	800599c <global_stdio_init.part.0>
 8005a14:	e7f2      	b.n	80059fc <__sinit+0xc>
 8005a16:	bf00      	nop
 8005a18:	0800595d 	.word	0x0800595d
 8005a1c:	20000930 	.word	0x20000930

08005a20 <_fwalk_sglue>:
 8005a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a24:	4607      	mov	r7, r0
 8005a26:	4688      	mov	r8, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	2600      	movs	r6, #0
 8005a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a30:	f1b9 0901 	subs.w	r9, r9, #1
 8005a34:	d505      	bpl.n	8005a42 <_fwalk_sglue+0x22>
 8005a36:	6824      	ldr	r4, [r4, #0]
 8005a38:	2c00      	cmp	r4, #0
 8005a3a:	d1f7      	bne.n	8005a2c <_fwalk_sglue+0xc>
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a42:	89ab      	ldrh	r3, [r5, #12]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d907      	bls.n	8005a58 <_fwalk_sglue+0x38>
 8005a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	d003      	beq.n	8005a58 <_fwalk_sglue+0x38>
 8005a50:	4629      	mov	r1, r5
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c0      	blx	r8
 8005a56:	4306      	orrs	r6, r0
 8005a58:	3568      	adds	r5, #104	; 0x68
 8005a5a:	e7e9      	b.n	8005a30 <_fwalk_sglue+0x10>

08005a5c <iprintf>:
 8005a5c:	b40f      	push	{r0, r1, r2, r3}
 8005a5e:	b507      	push	{r0, r1, r2, lr}
 8005a60:	4906      	ldr	r1, [pc, #24]	; (8005a7c <iprintf+0x20>)
 8005a62:	ab04      	add	r3, sp, #16
 8005a64:	6808      	ldr	r0, [r1, #0]
 8005a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a6a:	6881      	ldr	r1, [r0, #8]
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	f001 fe73 	bl	8007758 <_vfiprintf_r>
 8005a72:	b003      	add	sp, #12
 8005a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a78:	b004      	add	sp, #16
 8005a7a:	4770      	bx	lr
 8005a7c:	20000094 	.word	0x20000094

08005a80 <_puts_r>:
 8005a80:	6a03      	ldr	r3, [r0, #32]
 8005a82:	b570      	push	{r4, r5, r6, lr}
 8005a84:	4605      	mov	r5, r0
 8005a86:	460e      	mov	r6, r1
 8005a88:	6884      	ldr	r4, [r0, #8]
 8005a8a:	b90b      	cbnz	r3, 8005a90 <_puts_r+0x10>
 8005a8c:	f7ff ffb0 	bl	80059f0 <__sinit>
 8005a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a92:	07db      	lsls	r3, r3, #31
 8005a94:	d405      	bmi.n	8005aa2 <_puts_r+0x22>
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	0598      	lsls	r0, r3, #22
 8005a9a:	d402      	bmi.n	8005aa2 <_puts_r+0x22>
 8005a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a9e:	f000 f9da 	bl	8005e56 <__retarget_lock_acquire_recursive>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	0719      	lsls	r1, r3, #28
 8005aa6:	d513      	bpl.n	8005ad0 <_puts_r+0x50>
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	b18b      	cbz	r3, 8005ad0 <_puts_r+0x50>
 8005aac:	3e01      	subs	r6, #1
 8005aae:	68a3      	ldr	r3, [r4, #8]
 8005ab0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	60a3      	str	r3, [r4, #8]
 8005ab8:	b9e9      	cbnz	r1, 8005af6 <_puts_r+0x76>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	da2e      	bge.n	8005b1c <_puts_r+0x9c>
 8005abe:	4622      	mov	r2, r4
 8005ac0:	210a      	movs	r1, #10
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f000 f89b 	bl	8005bfe <__swbuf_r>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d007      	beq.n	8005adc <_puts_r+0x5c>
 8005acc:	250a      	movs	r5, #10
 8005ace:	e007      	b.n	8005ae0 <_puts_r+0x60>
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	f000 f8d0 	bl	8005c78 <__swsetup_r>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d0e7      	beq.n	8005aac <_puts_r+0x2c>
 8005adc:	f04f 35ff 	mov.w	r5, #4294967295
 8005ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ae2:	07da      	lsls	r2, r3, #31
 8005ae4:	d405      	bmi.n	8005af2 <_puts_r+0x72>
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	059b      	lsls	r3, r3, #22
 8005aea:	d402      	bmi.n	8005af2 <_puts_r+0x72>
 8005aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aee:	f000 f9b3 	bl	8005e58 <__retarget_lock_release_recursive>
 8005af2:	4628      	mov	r0, r5
 8005af4:	bd70      	pop	{r4, r5, r6, pc}
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	da04      	bge.n	8005b04 <_puts_r+0x84>
 8005afa:	69a2      	ldr	r2, [r4, #24]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	dc06      	bgt.n	8005b0e <_puts_r+0x8e>
 8005b00:	290a      	cmp	r1, #10
 8005b02:	d004      	beq.n	8005b0e <_puts_r+0x8e>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	6022      	str	r2, [r4, #0]
 8005b0a:	7019      	strb	r1, [r3, #0]
 8005b0c:	e7cf      	b.n	8005aae <_puts_r+0x2e>
 8005b0e:	4622      	mov	r2, r4
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 f874 	bl	8005bfe <__swbuf_r>
 8005b16:	3001      	adds	r0, #1
 8005b18:	d1c9      	bne.n	8005aae <_puts_r+0x2e>
 8005b1a:	e7df      	b.n	8005adc <_puts_r+0x5c>
 8005b1c:	250a      	movs	r5, #10
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	6022      	str	r2, [r4, #0]
 8005b24:	701d      	strb	r5, [r3, #0]
 8005b26:	e7db      	b.n	8005ae0 <_puts_r+0x60>

08005b28 <puts>:
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <puts+0xc>)
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	f7ff bfa7 	b.w	8005a80 <_puts_r>
 8005b32:	bf00      	nop
 8005b34:	20000094 	.word	0x20000094

08005b38 <siprintf>:
 8005b38:	b40e      	push	{r1, r2, r3}
 8005b3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b3e:	b500      	push	{lr}
 8005b40:	b09c      	sub	sp, #112	; 0x70
 8005b42:	ab1d      	add	r3, sp, #116	; 0x74
 8005b44:	9002      	str	r0, [sp, #8]
 8005b46:	9006      	str	r0, [sp, #24]
 8005b48:	9107      	str	r1, [sp, #28]
 8005b4a:	9104      	str	r1, [sp, #16]
 8005b4c:	4808      	ldr	r0, [pc, #32]	; (8005b70 <siprintf+0x38>)
 8005b4e:	4909      	ldr	r1, [pc, #36]	; (8005b74 <siprintf+0x3c>)
 8005b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b54:	9105      	str	r1, [sp, #20]
 8005b56:	6800      	ldr	r0, [r0, #0]
 8005b58:	a902      	add	r1, sp, #8
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	f001 fcd6 	bl	800750c <_svfiprintf_r>
 8005b60:	2200      	movs	r2, #0
 8005b62:	9b02      	ldr	r3, [sp, #8]
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	b01c      	add	sp, #112	; 0x70
 8005b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b6c:	b003      	add	sp, #12
 8005b6e:	4770      	bx	lr
 8005b70:	20000094 	.word	0x20000094
 8005b74:	ffff0208 	.word	0xffff0208

08005b78 <__sread>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b80:	f000 f91a 	bl	8005db8 <_read_r>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	bfab      	itete	ge
 8005b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b8c:	181b      	addge	r3, r3, r0
 8005b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b92:	bfac      	ite	ge
 8005b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b96:	81a3      	strhlt	r3, [r4, #12]
 8005b98:	bd10      	pop	{r4, pc}

08005b9a <__swrite>:
 8005b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9e:	461f      	mov	r7, r3
 8005ba0:	898b      	ldrh	r3, [r1, #12]
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	05db      	lsls	r3, r3, #23
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	4616      	mov	r6, r2
 8005baa:	d505      	bpl.n	8005bb8 <__swrite+0x1e>
 8005bac:	2302      	movs	r3, #2
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb4:	f000 f8ee 	bl	8005d94 <_lseek_r>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	4632      	mov	r2, r6
 8005bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bce:	f000 b905 	b.w	8005ddc <_write_r>

08005bd2 <__sseek>:
 8005bd2:	b510      	push	{r4, lr}
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bda:	f000 f8db 	bl	8005d94 <_lseek_r>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	bf15      	itete	ne
 8005be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bee:	81a3      	strheq	r3, [r4, #12]
 8005bf0:	bf18      	it	ne
 8005bf2:	81a3      	strhne	r3, [r4, #12]
 8005bf4:	bd10      	pop	{r4, pc}

08005bf6 <__sclose>:
 8005bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bfa:	f000 b8bb 	b.w	8005d74 <_close_r>

08005bfe <__swbuf_r>:
 8005bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c00:	460e      	mov	r6, r1
 8005c02:	4614      	mov	r4, r2
 8005c04:	4605      	mov	r5, r0
 8005c06:	b118      	cbz	r0, 8005c10 <__swbuf_r+0x12>
 8005c08:	6a03      	ldr	r3, [r0, #32]
 8005c0a:	b90b      	cbnz	r3, 8005c10 <__swbuf_r+0x12>
 8005c0c:	f7ff fef0 	bl	80059f0 <__sinit>
 8005c10:	69a3      	ldr	r3, [r4, #24]
 8005c12:	60a3      	str	r3, [r4, #8]
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	071a      	lsls	r2, r3, #28
 8005c18:	d525      	bpl.n	8005c66 <__swbuf_r+0x68>
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	b31b      	cbz	r3, 8005c66 <__swbuf_r+0x68>
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	6922      	ldr	r2, [r4, #16]
 8005c22:	b2f6      	uxtb	r6, r6
 8005c24:	1a98      	subs	r0, r3, r2
 8005c26:	6963      	ldr	r3, [r4, #20]
 8005c28:	4637      	mov	r7, r6
 8005c2a:	4283      	cmp	r3, r0
 8005c2c:	dc04      	bgt.n	8005c38 <__swbuf_r+0x3a>
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	f001 ff2d 	bl	8007a90 <_fflush_r>
 8005c36:	b9e0      	cbnz	r0, 8005c72 <__swbuf_r+0x74>
 8005c38:	68a3      	ldr	r3, [r4, #8]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	60a3      	str	r3, [r4, #8]
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	6022      	str	r2, [r4, #0]
 8005c44:	701e      	strb	r6, [r3, #0]
 8005c46:	6962      	ldr	r2, [r4, #20]
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d004      	beq.n	8005c58 <__swbuf_r+0x5a>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	07db      	lsls	r3, r3, #31
 8005c52:	d506      	bpl.n	8005c62 <__swbuf_r+0x64>
 8005c54:	2e0a      	cmp	r6, #10
 8005c56:	d104      	bne.n	8005c62 <__swbuf_r+0x64>
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	f001 ff18 	bl	8007a90 <_fflush_r>
 8005c60:	b938      	cbnz	r0, 8005c72 <__swbuf_r+0x74>
 8005c62:	4638      	mov	r0, r7
 8005c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c66:	4621      	mov	r1, r4
 8005c68:	4628      	mov	r0, r5
 8005c6a:	f000 f805 	bl	8005c78 <__swsetup_r>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d0d5      	beq.n	8005c1e <__swbuf_r+0x20>
 8005c72:	f04f 37ff 	mov.w	r7, #4294967295
 8005c76:	e7f4      	b.n	8005c62 <__swbuf_r+0x64>

08005c78 <__swsetup_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4b2a      	ldr	r3, [pc, #168]	; (8005d24 <__swsetup_r+0xac>)
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	460c      	mov	r4, r1
 8005c82:	b118      	cbz	r0, 8005c8c <__swsetup_r+0x14>
 8005c84:	6a03      	ldr	r3, [r0, #32]
 8005c86:	b90b      	cbnz	r3, 8005c8c <__swsetup_r+0x14>
 8005c88:	f7ff feb2 	bl	80059f0 <__sinit>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c92:	0718      	lsls	r0, r3, #28
 8005c94:	d422      	bmi.n	8005cdc <__swsetup_r+0x64>
 8005c96:	06d9      	lsls	r1, r3, #27
 8005c98:	d407      	bmi.n	8005caa <__swsetup_r+0x32>
 8005c9a:	2309      	movs	r3, #9
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	e034      	b.n	8005d14 <__swsetup_r+0x9c>
 8005caa:	0758      	lsls	r0, r3, #29
 8005cac:	d512      	bpl.n	8005cd4 <__swsetup_r+0x5c>
 8005cae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cb0:	b141      	cbz	r1, 8005cc4 <__swsetup_r+0x4c>
 8005cb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	d002      	beq.n	8005cc0 <__swsetup_r+0x48>
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f000 ff58 	bl	8006b70 <_free_r>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	6363      	str	r3, [r4, #52]	; 0x34
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	6063      	str	r3, [r4, #4]
 8005cd0:	6923      	ldr	r3, [r4, #16]
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	f043 0308 	orr.w	r3, r3, #8
 8005cda:	81a3      	strh	r3, [r4, #12]
 8005cdc:	6923      	ldr	r3, [r4, #16]
 8005cde:	b94b      	cbnz	r3, 8005cf4 <__swsetup_r+0x7c>
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cea:	d003      	beq.n	8005cf4 <__swsetup_r+0x7c>
 8005cec:	4621      	mov	r1, r4
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f001 ff1b 	bl	8007b2a <__smakebuf_r>
 8005cf4:	89a0      	ldrh	r0, [r4, #12]
 8005cf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cfa:	f010 0301 	ands.w	r3, r0, #1
 8005cfe:	d00a      	beq.n	8005d16 <__swsetup_r+0x9e>
 8005d00:	2300      	movs	r3, #0
 8005d02:	60a3      	str	r3, [r4, #8]
 8005d04:	6963      	ldr	r3, [r4, #20]
 8005d06:	425b      	negs	r3, r3
 8005d08:	61a3      	str	r3, [r4, #24]
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	b943      	cbnz	r3, 8005d20 <__swsetup_r+0xa8>
 8005d0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d12:	d1c4      	bne.n	8005c9e <__swsetup_r+0x26>
 8005d14:	bd38      	pop	{r3, r4, r5, pc}
 8005d16:	0781      	lsls	r1, r0, #30
 8005d18:	bf58      	it	pl
 8005d1a:	6963      	ldrpl	r3, [r4, #20]
 8005d1c:	60a3      	str	r3, [r4, #8]
 8005d1e:	e7f4      	b.n	8005d0a <__swsetup_r+0x92>
 8005d20:	2000      	movs	r0, #0
 8005d22:	e7f7      	b.n	8005d14 <__swsetup_r+0x9c>
 8005d24:	20000094 	.word	0x20000094

08005d28 <memmove>:
 8005d28:	4288      	cmp	r0, r1
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	eb01 0402 	add.w	r4, r1, r2
 8005d30:	d902      	bls.n	8005d38 <memmove+0x10>
 8005d32:	4284      	cmp	r4, r0
 8005d34:	4623      	mov	r3, r4
 8005d36:	d807      	bhi.n	8005d48 <memmove+0x20>
 8005d38:	1e43      	subs	r3, r0, #1
 8005d3a:	42a1      	cmp	r1, r4
 8005d3c:	d008      	beq.n	8005d50 <memmove+0x28>
 8005d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d46:	e7f8      	b.n	8005d3a <memmove+0x12>
 8005d48:	4601      	mov	r1, r0
 8005d4a:	4402      	add	r2, r0
 8005d4c:	428a      	cmp	r2, r1
 8005d4e:	d100      	bne.n	8005d52 <memmove+0x2a>
 8005d50:	bd10      	pop	{r4, pc}
 8005d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d5a:	e7f7      	b.n	8005d4c <memmove+0x24>

08005d5c <memset>:
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4402      	add	r2, r0
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d100      	bne.n	8005d66 <memset+0xa>
 8005d64:	4770      	bx	lr
 8005d66:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6a:	e7f9      	b.n	8005d60 <memset+0x4>

08005d6c <_localeconv_r>:
 8005d6c:	4800      	ldr	r0, [pc, #0]	; (8005d70 <_localeconv_r+0x4>)
 8005d6e:	4770      	bx	lr
 8005d70:	20000188 	.word	0x20000188

08005d74 <_close_r>:
 8005d74:	b538      	push	{r3, r4, r5, lr}
 8005d76:	2300      	movs	r3, #0
 8005d78:	4d05      	ldr	r5, [pc, #20]	; (8005d90 <_close_r+0x1c>)
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	f7fc f953 	bl	800202a <_close>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_close_r+0x1a>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_close_r+0x1a>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	20000934 	.word	0x20000934

08005d94 <_lseek_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4d05      	ldr	r5, [pc, #20]	; (8005db4 <_lseek_r+0x20>)
 8005da0:	602a      	str	r2, [r5, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f7fc f965 	bl	8002072 <_lseek>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_lseek_r+0x1e>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_lseek_r+0x1e>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20000934 	.word	0x20000934

08005db8 <_read_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4d05      	ldr	r5, [pc, #20]	; (8005dd8 <_read_r+0x20>)
 8005dc4:	602a      	str	r2, [r5, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7fc f8f6 	bl	8001fb8 <_read>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_read_r+0x1e>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_read_r+0x1e>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	20000934 	.word	0x20000934

08005ddc <_write_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	2200      	movs	r2, #0
 8005de6:	4d05      	ldr	r5, [pc, #20]	; (8005dfc <_write_r+0x20>)
 8005de8:	602a      	str	r2, [r5, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	f7fc f901 	bl	8001ff2 <_write>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_write_r+0x1e>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_write_r+0x1e>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20000934 	.word	0x20000934

08005e00 <__errno>:
 8005e00:	4b01      	ldr	r3, [pc, #4]	; (8005e08 <__errno+0x8>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000094 	.word	0x20000094

08005e0c <__libc_init_array>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	2600      	movs	r6, #0
 8005e10:	4d0c      	ldr	r5, [pc, #48]	; (8005e44 <__libc_init_array+0x38>)
 8005e12:	4c0d      	ldr	r4, [pc, #52]	; (8005e48 <__libc_init_array+0x3c>)
 8005e14:	1b64      	subs	r4, r4, r5
 8005e16:	10a4      	asrs	r4, r4, #2
 8005e18:	42a6      	cmp	r6, r4
 8005e1a:	d109      	bne.n	8005e30 <__libc_init_array+0x24>
 8005e1c:	f001 ffda 	bl	8007dd4 <_init>
 8005e20:	2600      	movs	r6, #0
 8005e22:	4d0a      	ldr	r5, [pc, #40]	; (8005e4c <__libc_init_array+0x40>)
 8005e24:	4c0a      	ldr	r4, [pc, #40]	; (8005e50 <__libc_init_array+0x44>)
 8005e26:	1b64      	subs	r4, r4, r5
 8005e28:	10a4      	asrs	r4, r4, #2
 8005e2a:	42a6      	cmp	r6, r4
 8005e2c:	d105      	bne.n	8005e3a <__libc_init_array+0x2e>
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e34:	4798      	blx	r3
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7ee      	b.n	8005e18 <__libc_init_array+0xc>
 8005e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3e:	4798      	blx	r3
 8005e40:	3601      	adds	r6, #1
 8005e42:	e7f2      	b.n	8005e2a <__libc_init_array+0x1e>
 8005e44:	080089e4 	.word	0x080089e4
 8005e48:	080089e4 	.word	0x080089e4
 8005e4c:	080089e4 	.word	0x080089e4
 8005e50:	080089e8 	.word	0x080089e8

08005e54 <__retarget_lock_init_recursive>:
 8005e54:	4770      	bx	lr

08005e56 <__retarget_lock_acquire_recursive>:
 8005e56:	4770      	bx	lr

08005e58 <__retarget_lock_release_recursive>:
 8005e58:	4770      	bx	lr

08005e5a <memchr>:
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	b2c9      	uxtb	r1, r1
 8005e60:	4402      	add	r2, r0
 8005e62:	4293      	cmp	r3, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	d101      	bne.n	8005e6c <memchr+0x12>
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e003      	b.n	8005e74 <memchr+0x1a>
 8005e6c:	7804      	ldrb	r4, [r0, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	428c      	cmp	r4, r1
 8005e72:	d1f6      	bne.n	8005e62 <memchr+0x8>
 8005e74:	bd10      	pop	{r4, pc}

08005e76 <memcpy>:
 8005e76:	440a      	add	r2, r1
 8005e78:	4291      	cmp	r1, r2
 8005e7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e7e:	d100      	bne.n	8005e82 <memcpy+0xc>
 8005e80:	4770      	bx	lr
 8005e82:	b510      	push	{r4, lr}
 8005e84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e88:	4291      	cmp	r1, r2
 8005e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e8e:	d1f9      	bne.n	8005e84 <memcpy+0xe>
 8005e90:	bd10      	pop	{r4, pc}

08005e92 <quorem>:
 8005e92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e96:	6903      	ldr	r3, [r0, #16]
 8005e98:	690c      	ldr	r4, [r1, #16]
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	42a3      	cmp	r3, r4
 8005e9e:	db7f      	blt.n	8005fa0 <quorem+0x10e>
 8005ea0:	3c01      	subs	r4, #1
 8005ea2:	f100 0514 	add.w	r5, r0, #20
 8005ea6:	f101 0814 	add.w	r8, r1, #20
 8005eaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005eb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ec0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ec8:	d331      	bcc.n	8005f2e <quorem+0x9c>
 8005eca:	f04f 0e00 	mov.w	lr, #0
 8005ece:	4640      	mov	r0, r8
 8005ed0:	46ac      	mov	ip, r5
 8005ed2:	46f2      	mov	sl, lr
 8005ed4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ed8:	b293      	uxth	r3, r2
 8005eda:	fb06 e303 	mla	r3, r6, r3, lr
 8005ede:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ee2:	0c1a      	lsrs	r2, r3, #16
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	fb06 220e 	mla	r2, r6, lr, r2
 8005eea:	ebaa 0303 	sub.w	r3, sl, r3
 8005eee:	f8dc a000 	ldr.w	sl, [ip]
 8005ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ef6:	fa1f fa8a 	uxth.w	sl, sl
 8005efa:	4453      	add	r3, sl
 8005efc:	f8dc a000 	ldr.w	sl, [ip]
 8005f00:	b292      	uxth	r2, r2
 8005f02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f10:	4581      	cmp	r9, r0
 8005f12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f16:	f84c 3b04 	str.w	r3, [ip], #4
 8005f1a:	d2db      	bcs.n	8005ed4 <quorem+0x42>
 8005f1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f20:	b92b      	cbnz	r3, 8005f2e <quorem+0x9c>
 8005f22:	9b01      	ldr	r3, [sp, #4]
 8005f24:	3b04      	subs	r3, #4
 8005f26:	429d      	cmp	r5, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	d32d      	bcc.n	8005f88 <quorem+0xf6>
 8005f2c:	613c      	str	r4, [r7, #16]
 8005f2e:	4638      	mov	r0, r7
 8005f30:	f001 f994 	bl	800725c <__mcmp>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	db23      	blt.n	8005f80 <quorem+0xee>
 8005f38:	4629      	mov	r1, r5
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	3601      	adds	r6, #1
 8005f3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f42:	f8d1 c000 	ldr.w	ip, [r1]
 8005f46:	b293      	uxth	r3, r2
 8005f48:	1ac3      	subs	r3, r0, r3
 8005f4a:	0c12      	lsrs	r2, r2, #16
 8005f4c:	fa1f f08c 	uxth.w	r0, ip
 8005f50:	4403      	add	r3, r0
 8005f52:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f60:	45c1      	cmp	r9, r8
 8005f62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f66:	f841 3b04 	str.w	r3, [r1], #4
 8005f6a:	d2e8      	bcs.n	8005f3e <quorem+0xac>
 8005f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f74:	b922      	cbnz	r2, 8005f80 <quorem+0xee>
 8005f76:	3b04      	subs	r3, #4
 8005f78:	429d      	cmp	r5, r3
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	d30a      	bcc.n	8005f94 <quorem+0x102>
 8005f7e:	613c      	str	r4, [r7, #16]
 8005f80:	4630      	mov	r0, r6
 8005f82:	b003      	add	sp, #12
 8005f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	3b04      	subs	r3, #4
 8005f8c:	2a00      	cmp	r2, #0
 8005f8e:	d1cd      	bne.n	8005f2c <quorem+0x9a>
 8005f90:	3c01      	subs	r4, #1
 8005f92:	e7c8      	b.n	8005f26 <quorem+0x94>
 8005f94:	6812      	ldr	r2, [r2, #0]
 8005f96:	3b04      	subs	r3, #4
 8005f98:	2a00      	cmp	r2, #0
 8005f9a:	d1f0      	bne.n	8005f7e <quorem+0xec>
 8005f9c:	3c01      	subs	r4, #1
 8005f9e:	e7eb      	b.n	8005f78 <quorem+0xe6>
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e7ee      	b.n	8005f82 <quorem+0xf0>
 8005fa4:	0000      	movs	r0, r0
	...

08005fa8 <_dtoa_r>:
 8005fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fac:	4616      	mov	r6, r2
 8005fae:	461f      	mov	r7, r3
 8005fb0:	69c4      	ldr	r4, [r0, #28]
 8005fb2:	b099      	sub	sp, #100	; 0x64
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005fba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005fbe:	b974      	cbnz	r4, 8005fde <_dtoa_r+0x36>
 8005fc0:	2010      	movs	r0, #16
 8005fc2:	f000 fe1d 	bl	8006c00 <malloc>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	61e8      	str	r0, [r5, #28]
 8005fca:	b920      	cbnz	r0, 8005fd6 <_dtoa_r+0x2e>
 8005fcc:	21ef      	movs	r1, #239	; 0xef
 8005fce:	4bac      	ldr	r3, [pc, #688]	; (8006280 <_dtoa_r+0x2d8>)
 8005fd0:	48ac      	ldr	r0, [pc, #688]	; (8006284 <_dtoa_r+0x2dc>)
 8005fd2:	f001 fe19 	bl	8007c08 <__assert_func>
 8005fd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fda:	6004      	str	r4, [r0, #0]
 8005fdc:	60c4      	str	r4, [r0, #12]
 8005fde:	69eb      	ldr	r3, [r5, #28]
 8005fe0:	6819      	ldr	r1, [r3, #0]
 8005fe2:	b151      	cbz	r1, 8005ffa <_dtoa_r+0x52>
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4093      	lsls	r3, r2
 8005fea:	604a      	str	r2, [r1, #4]
 8005fec:	608b      	str	r3, [r1, #8]
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 fefa 	bl	8006de8 <_Bfree>
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	69eb      	ldr	r3, [r5, #28]
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	1e3b      	subs	r3, r7, #0
 8005ffc:	bfaf      	iteee	ge
 8005ffe:	2300      	movge	r3, #0
 8006000:	2201      	movlt	r2, #1
 8006002:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006006:	9305      	strlt	r3, [sp, #20]
 8006008:	bfa8      	it	ge
 800600a:	f8c8 3000 	strge.w	r3, [r8]
 800600e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006012:	4b9d      	ldr	r3, [pc, #628]	; (8006288 <_dtoa_r+0x2e0>)
 8006014:	bfb8      	it	lt
 8006016:	f8c8 2000 	strlt.w	r2, [r8]
 800601a:	ea33 0309 	bics.w	r3, r3, r9
 800601e:	d119      	bne.n	8006054 <_dtoa_r+0xac>
 8006020:	f242 730f 	movw	r3, #9999	; 0x270f
 8006024:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800602c:	4333      	orrs	r3, r6
 800602e:	f000 8589 	beq.w	8006b44 <_dtoa_r+0xb9c>
 8006032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006034:	b953      	cbnz	r3, 800604c <_dtoa_r+0xa4>
 8006036:	4b95      	ldr	r3, [pc, #596]	; (800628c <_dtoa_r+0x2e4>)
 8006038:	e023      	b.n	8006082 <_dtoa_r+0xda>
 800603a:	4b95      	ldr	r3, [pc, #596]	; (8006290 <_dtoa_r+0x2e8>)
 800603c:	9303      	str	r3, [sp, #12]
 800603e:	3308      	adds	r3, #8
 8006040:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	9803      	ldr	r0, [sp, #12]
 8006046:	b019      	add	sp, #100	; 0x64
 8006048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604c:	4b8f      	ldr	r3, [pc, #572]	; (800628c <_dtoa_r+0x2e4>)
 800604e:	9303      	str	r3, [sp, #12]
 8006050:	3303      	adds	r3, #3
 8006052:	e7f5      	b.n	8006040 <_dtoa_r+0x98>
 8006054:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006058:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800605c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	f7fa fca0 	bl	80009a8 <__aeabi_dcmpeq>
 8006068:	4680      	mov	r8, r0
 800606a:	b160      	cbz	r0, 8006086 <_dtoa_r+0xde>
 800606c:	2301      	movs	r3, #1
 800606e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8562 	beq.w	8006b3e <_dtoa_r+0xb96>
 800607a:	4b86      	ldr	r3, [pc, #536]	; (8006294 <_dtoa_r+0x2ec>)
 800607c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	3b01      	subs	r3, #1
 8006082:	9303      	str	r3, [sp, #12]
 8006084:	e7de      	b.n	8006044 <_dtoa_r+0x9c>
 8006086:	ab16      	add	r3, sp, #88	; 0x58
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	ab17      	add	r3, sp, #92	; 0x5c
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4628      	mov	r0, r5
 8006090:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006094:	f001 f98a 	bl	80073ac <__d2b>
 8006098:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800609c:	4682      	mov	sl, r0
 800609e:	2c00      	cmp	r4, #0
 80060a0:	d07e      	beq.n	80061a0 <_dtoa_r+0x1f8>
 80060a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80060ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80060bc:	4619      	mov	r1, r3
 80060be:	2200      	movs	r2, #0
 80060c0:	4b75      	ldr	r3, [pc, #468]	; (8006298 <_dtoa_r+0x2f0>)
 80060c2:	f7fa f851 	bl	8000168 <__aeabi_dsub>
 80060c6:	a368      	add	r3, pc, #416	; (adr r3, 8006268 <_dtoa_r+0x2c0>)
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f7fa fa04 	bl	80004d8 <__aeabi_dmul>
 80060d0:	a367      	add	r3, pc, #412	; (adr r3, 8006270 <_dtoa_r+0x2c8>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f7fa f849 	bl	800016c <__adddf3>
 80060da:	4606      	mov	r6, r0
 80060dc:	4620      	mov	r0, r4
 80060de:	460f      	mov	r7, r1
 80060e0:	f7fa f990 	bl	8000404 <__aeabi_i2d>
 80060e4:	a364      	add	r3, pc, #400	; (adr r3, 8006278 <_dtoa_r+0x2d0>)
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f7fa f9f5 	bl	80004d8 <__aeabi_dmul>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa f839 	bl	800016c <__adddf3>
 80060fa:	4606      	mov	r6, r0
 80060fc:	460f      	mov	r7, r1
 80060fe:	f7fa fc9b 	bl	8000a38 <__aeabi_d2iz>
 8006102:	2200      	movs	r2, #0
 8006104:	4683      	mov	fp, r0
 8006106:	2300      	movs	r3, #0
 8006108:	4630      	mov	r0, r6
 800610a:	4639      	mov	r1, r7
 800610c:	f7fa fc56 	bl	80009bc <__aeabi_dcmplt>
 8006110:	b148      	cbz	r0, 8006126 <_dtoa_r+0x17e>
 8006112:	4658      	mov	r0, fp
 8006114:	f7fa f976 	bl	8000404 <__aeabi_i2d>
 8006118:	4632      	mov	r2, r6
 800611a:	463b      	mov	r3, r7
 800611c:	f7fa fc44 	bl	80009a8 <__aeabi_dcmpeq>
 8006120:	b908      	cbnz	r0, 8006126 <_dtoa_r+0x17e>
 8006122:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006126:	f1bb 0f16 	cmp.w	fp, #22
 800612a:	d857      	bhi.n	80061dc <_dtoa_r+0x234>
 800612c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006130:	4b5a      	ldr	r3, [pc, #360]	; (800629c <_dtoa_r+0x2f4>)
 8006132:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa fc3f 	bl	80009bc <__aeabi_dcmplt>
 800613e:	2800      	cmp	r0, #0
 8006140:	d04e      	beq.n	80061e0 <_dtoa_r+0x238>
 8006142:	2300      	movs	r3, #0
 8006144:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006148:	930f      	str	r3, [sp, #60]	; 0x3c
 800614a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800614c:	1b1b      	subs	r3, r3, r4
 800614e:	1e5a      	subs	r2, r3, #1
 8006150:	bf46      	itte	mi
 8006152:	f1c3 0901 	rsbmi	r9, r3, #1
 8006156:	2300      	movmi	r3, #0
 8006158:	f04f 0900 	movpl.w	r9, #0
 800615c:	9209      	str	r2, [sp, #36]	; 0x24
 800615e:	bf48      	it	mi
 8006160:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006162:	f1bb 0f00 	cmp.w	fp, #0
 8006166:	db3d      	blt.n	80061e4 <_dtoa_r+0x23c>
 8006168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800616e:	445b      	add	r3, fp
 8006170:	9309      	str	r3, [sp, #36]	; 0x24
 8006172:	2300      	movs	r3, #0
 8006174:	930a      	str	r3, [sp, #40]	; 0x28
 8006176:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006178:	2b09      	cmp	r3, #9
 800617a:	d867      	bhi.n	800624c <_dtoa_r+0x2a4>
 800617c:	2b05      	cmp	r3, #5
 800617e:	bfc4      	itt	gt
 8006180:	3b04      	subgt	r3, #4
 8006182:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006186:	bfc8      	it	gt
 8006188:	2400      	movgt	r4, #0
 800618a:	f1a3 0302 	sub.w	r3, r3, #2
 800618e:	bfd8      	it	le
 8006190:	2401      	movle	r4, #1
 8006192:	2b03      	cmp	r3, #3
 8006194:	f200 8086 	bhi.w	80062a4 <_dtoa_r+0x2fc>
 8006198:	e8df f003 	tbb	[pc, r3]
 800619c:	5637392c 	.word	0x5637392c
 80061a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80061a4:	441c      	add	r4, r3
 80061a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	bfc1      	itttt	gt
 80061ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061b2:	fa09 f903 	lslgt.w	r9, r9, r3
 80061b6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80061ba:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061be:	bfd6      	itet	le
 80061c0:	f1c3 0320 	rsble	r3, r3, #32
 80061c4:	ea49 0003 	orrgt.w	r0, r9, r3
 80061c8:	fa06 f003 	lslle.w	r0, r6, r3
 80061cc:	f7fa f90a 	bl	80003e4 <__aeabi_ui2d>
 80061d0:	2201      	movs	r2, #1
 80061d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061d6:	3c01      	subs	r4, #1
 80061d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80061da:	e76f      	b.n	80060bc <_dtoa_r+0x114>
 80061dc:	2301      	movs	r3, #1
 80061de:	e7b3      	b.n	8006148 <_dtoa_r+0x1a0>
 80061e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80061e2:	e7b2      	b.n	800614a <_dtoa_r+0x1a2>
 80061e4:	f1cb 0300 	rsb	r3, fp, #0
 80061e8:	930a      	str	r3, [sp, #40]	; 0x28
 80061ea:	2300      	movs	r3, #0
 80061ec:	eba9 090b 	sub.w	r9, r9, fp
 80061f0:	930e      	str	r3, [sp, #56]	; 0x38
 80061f2:	e7c0      	b.n	8006176 <_dtoa_r+0x1ce>
 80061f4:	2300      	movs	r3, #0
 80061f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dc55      	bgt.n	80062aa <_dtoa_r+0x302>
 80061fe:	2301      	movs	r3, #1
 8006200:	461a      	mov	r2, r3
 8006202:	9306      	str	r3, [sp, #24]
 8006204:	9308      	str	r3, [sp, #32]
 8006206:	9223      	str	r2, [sp, #140]	; 0x8c
 8006208:	e00b      	b.n	8006222 <_dtoa_r+0x27a>
 800620a:	2301      	movs	r3, #1
 800620c:	e7f3      	b.n	80061f6 <_dtoa_r+0x24e>
 800620e:	2300      	movs	r3, #0
 8006210:	930b      	str	r3, [sp, #44]	; 0x2c
 8006212:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006214:	445b      	add	r3, fp
 8006216:	9306      	str	r3, [sp, #24]
 8006218:	3301      	adds	r3, #1
 800621a:	2b01      	cmp	r3, #1
 800621c:	9308      	str	r3, [sp, #32]
 800621e:	bfb8      	it	lt
 8006220:	2301      	movlt	r3, #1
 8006222:	2100      	movs	r1, #0
 8006224:	2204      	movs	r2, #4
 8006226:	69e8      	ldr	r0, [r5, #28]
 8006228:	f102 0614 	add.w	r6, r2, #20
 800622c:	429e      	cmp	r6, r3
 800622e:	d940      	bls.n	80062b2 <_dtoa_r+0x30a>
 8006230:	6041      	str	r1, [r0, #4]
 8006232:	4628      	mov	r0, r5
 8006234:	f000 fd98 	bl	8006d68 <_Balloc>
 8006238:	9003      	str	r0, [sp, #12]
 800623a:	2800      	cmp	r0, #0
 800623c:	d13c      	bne.n	80062b8 <_dtoa_r+0x310>
 800623e:	4602      	mov	r2, r0
 8006240:	f240 11af 	movw	r1, #431	; 0x1af
 8006244:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <_dtoa_r+0x2f8>)
 8006246:	e6c3      	b.n	8005fd0 <_dtoa_r+0x28>
 8006248:	2301      	movs	r3, #1
 800624a:	e7e1      	b.n	8006210 <_dtoa_r+0x268>
 800624c:	2401      	movs	r4, #1
 800624e:	2300      	movs	r3, #0
 8006250:	940b      	str	r4, [sp, #44]	; 0x2c
 8006252:	9322      	str	r3, [sp, #136]	; 0x88
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	2200      	movs	r2, #0
 800625a:	9306      	str	r3, [sp, #24]
 800625c:	9308      	str	r3, [sp, #32]
 800625e:	2312      	movs	r3, #18
 8006260:	e7d1      	b.n	8006206 <_dtoa_r+0x25e>
 8006262:	bf00      	nop
 8006264:	f3af 8000 	nop.w
 8006268:	636f4361 	.word	0x636f4361
 800626c:	3fd287a7 	.word	0x3fd287a7
 8006270:	8b60c8b3 	.word	0x8b60c8b3
 8006274:	3fc68a28 	.word	0x3fc68a28
 8006278:	509f79fb 	.word	0x509f79fb
 800627c:	3fd34413 	.word	0x3fd34413
 8006280:	080086b7 	.word	0x080086b7
 8006284:	080086ce 	.word	0x080086ce
 8006288:	7ff00000 	.word	0x7ff00000
 800628c:	080086b3 	.word	0x080086b3
 8006290:	080086aa 	.word	0x080086aa
 8006294:	08008687 	.word	0x08008687
 8006298:	3ff80000 	.word	0x3ff80000
 800629c:	080087b8 	.word	0x080087b8
 80062a0:	08008726 	.word	0x08008726
 80062a4:	2301      	movs	r3, #1
 80062a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062a8:	e7d4      	b.n	8006254 <_dtoa_r+0x2ac>
 80062aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062ac:	9306      	str	r3, [sp, #24]
 80062ae:	9308      	str	r3, [sp, #32]
 80062b0:	e7b7      	b.n	8006222 <_dtoa_r+0x27a>
 80062b2:	3101      	adds	r1, #1
 80062b4:	0052      	lsls	r2, r2, #1
 80062b6:	e7b7      	b.n	8006228 <_dtoa_r+0x280>
 80062b8:	69eb      	ldr	r3, [r5, #28]
 80062ba:	9a03      	ldr	r2, [sp, #12]
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	9b08      	ldr	r3, [sp, #32]
 80062c0:	2b0e      	cmp	r3, #14
 80062c2:	f200 80a8 	bhi.w	8006416 <_dtoa_r+0x46e>
 80062c6:	2c00      	cmp	r4, #0
 80062c8:	f000 80a5 	beq.w	8006416 <_dtoa_r+0x46e>
 80062cc:	f1bb 0f00 	cmp.w	fp, #0
 80062d0:	dd34      	ble.n	800633c <_dtoa_r+0x394>
 80062d2:	4b9a      	ldr	r3, [pc, #616]	; (800653c <_dtoa_r+0x594>)
 80062d4:	f00b 020f 	and.w	r2, fp, #15
 80062d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062e8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80062ec:	d016      	beq.n	800631c <_dtoa_r+0x374>
 80062ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062f2:	4b93      	ldr	r3, [pc, #588]	; (8006540 <_dtoa_r+0x598>)
 80062f4:	2703      	movs	r7, #3
 80062f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062fa:	f7fa fa17 	bl	800072c <__aeabi_ddiv>
 80062fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006302:	f004 040f 	and.w	r4, r4, #15
 8006306:	4e8e      	ldr	r6, [pc, #568]	; (8006540 <_dtoa_r+0x598>)
 8006308:	b954      	cbnz	r4, 8006320 <_dtoa_r+0x378>
 800630a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800630e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006312:	f7fa fa0b 	bl	800072c <__aeabi_ddiv>
 8006316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800631a:	e029      	b.n	8006370 <_dtoa_r+0x3c8>
 800631c:	2702      	movs	r7, #2
 800631e:	e7f2      	b.n	8006306 <_dtoa_r+0x35e>
 8006320:	07e1      	lsls	r1, r4, #31
 8006322:	d508      	bpl.n	8006336 <_dtoa_r+0x38e>
 8006324:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006328:	e9d6 2300 	ldrd	r2, r3, [r6]
 800632c:	f7fa f8d4 	bl	80004d8 <__aeabi_dmul>
 8006330:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006334:	3701      	adds	r7, #1
 8006336:	1064      	asrs	r4, r4, #1
 8006338:	3608      	adds	r6, #8
 800633a:	e7e5      	b.n	8006308 <_dtoa_r+0x360>
 800633c:	f000 80a5 	beq.w	800648a <_dtoa_r+0x4e2>
 8006340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006344:	f1cb 0400 	rsb	r4, fp, #0
 8006348:	4b7c      	ldr	r3, [pc, #496]	; (800653c <_dtoa_r+0x594>)
 800634a:	f004 020f 	and.w	r2, r4, #15
 800634e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7fa f8bf 	bl	80004d8 <__aeabi_dmul>
 800635a:	2702      	movs	r7, #2
 800635c:	2300      	movs	r3, #0
 800635e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006362:	4e77      	ldr	r6, [pc, #476]	; (8006540 <_dtoa_r+0x598>)
 8006364:	1124      	asrs	r4, r4, #4
 8006366:	2c00      	cmp	r4, #0
 8006368:	f040 8084 	bne.w	8006474 <_dtoa_r+0x4cc>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1d2      	bne.n	8006316 <_dtoa_r+0x36e>
 8006370:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006374:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8087 	beq.w	800648e <_dtoa_r+0x4e6>
 8006380:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006384:	2200      	movs	r2, #0
 8006386:	4b6f      	ldr	r3, [pc, #444]	; (8006544 <_dtoa_r+0x59c>)
 8006388:	f7fa fb18 	bl	80009bc <__aeabi_dcmplt>
 800638c:	2800      	cmp	r0, #0
 800638e:	d07e      	beq.n	800648e <_dtoa_r+0x4e6>
 8006390:	9b08      	ldr	r3, [sp, #32]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d07b      	beq.n	800648e <_dtoa_r+0x4e6>
 8006396:	9b06      	ldr	r3, [sp, #24]
 8006398:	2b00      	cmp	r3, #0
 800639a:	dd38      	ble.n	800640e <_dtoa_r+0x466>
 800639c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063a0:	2200      	movs	r2, #0
 80063a2:	4b69      	ldr	r3, [pc, #420]	; (8006548 <_dtoa_r+0x5a0>)
 80063a4:	f7fa f898 	bl	80004d8 <__aeabi_dmul>
 80063a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063ac:	9c06      	ldr	r4, [sp, #24]
 80063ae:	f10b 38ff 	add.w	r8, fp, #4294967295
 80063b2:	3701      	adds	r7, #1
 80063b4:	4638      	mov	r0, r7
 80063b6:	f7fa f825 	bl	8000404 <__aeabi_i2d>
 80063ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063be:	f7fa f88b 	bl	80004d8 <__aeabi_dmul>
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b61      	ldr	r3, [pc, #388]	; (800654c <_dtoa_r+0x5a4>)
 80063c6:	f7f9 fed1 	bl	800016c <__adddf3>
 80063ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80063ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063d2:	9611      	str	r6, [sp, #68]	; 0x44
 80063d4:	2c00      	cmp	r4, #0
 80063d6:	d15d      	bne.n	8006494 <_dtoa_r+0x4ec>
 80063d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063dc:	2200      	movs	r2, #0
 80063de:	4b5c      	ldr	r3, [pc, #368]	; (8006550 <_dtoa_r+0x5a8>)
 80063e0:	f7f9 fec2 	bl	8000168 <__aeabi_dsub>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063ec:	4633      	mov	r3, r6
 80063ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063f0:	f7fa fb02 	bl	80009f8 <__aeabi_dcmpgt>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f040 8295 	bne.w	8006924 <_dtoa_r+0x97c>
 80063fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006400:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006404:	f7fa fada 	bl	80009bc <__aeabi_dcmplt>
 8006408:	2800      	cmp	r0, #0
 800640a:	f040 8289 	bne.w	8006920 <_dtoa_r+0x978>
 800640e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006412:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006418:	2b00      	cmp	r3, #0
 800641a:	f2c0 8151 	blt.w	80066c0 <_dtoa_r+0x718>
 800641e:	f1bb 0f0e 	cmp.w	fp, #14
 8006422:	f300 814d 	bgt.w	80066c0 <_dtoa_r+0x718>
 8006426:	4b45      	ldr	r3, [pc, #276]	; (800653c <_dtoa_r+0x594>)
 8006428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800642c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006430:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006434:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006436:	2b00      	cmp	r3, #0
 8006438:	f280 80da 	bge.w	80065f0 <_dtoa_r+0x648>
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f300 80d6 	bgt.w	80065f0 <_dtoa_r+0x648>
 8006444:	f040 826b 	bne.w	800691e <_dtoa_r+0x976>
 8006448:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800644c:	2200      	movs	r2, #0
 800644e:	4b40      	ldr	r3, [pc, #256]	; (8006550 <_dtoa_r+0x5a8>)
 8006450:	f7fa f842 	bl	80004d8 <__aeabi_dmul>
 8006454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006458:	f7fa fac4 	bl	80009e4 <__aeabi_dcmpge>
 800645c:	9c08      	ldr	r4, [sp, #32]
 800645e:	4626      	mov	r6, r4
 8006460:	2800      	cmp	r0, #0
 8006462:	f040 8241 	bne.w	80068e8 <_dtoa_r+0x940>
 8006466:	2331      	movs	r3, #49	; 0x31
 8006468:	9f03      	ldr	r7, [sp, #12]
 800646a:	f10b 0b01 	add.w	fp, fp, #1
 800646e:	f807 3b01 	strb.w	r3, [r7], #1
 8006472:	e23d      	b.n	80068f0 <_dtoa_r+0x948>
 8006474:	07e2      	lsls	r2, r4, #31
 8006476:	d505      	bpl.n	8006484 <_dtoa_r+0x4dc>
 8006478:	e9d6 2300 	ldrd	r2, r3, [r6]
 800647c:	f7fa f82c 	bl	80004d8 <__aeabi_dmul>
 8006480:	2301      	movs	r3, #1
 8006482:	3701      	adds	r7, #1
 8006484:	1064      	asrs	r4, r4, #1
 8006486:	3608      	adds	r6, #8
 8006488:	e76d      	b.n	8006366 <_dtoa_r+0x3be>
 800648a:	2702      	movs	r7, #2
 800648c:	e770      	b.n	8006370 <_dtoa_r+0x3c8>
 800648e:	46d8      	mov	r8, fp
 8006490:	9c08      	ldr	r4, [sp, #32]
 8006492:	e78f      	b.n	80063b4 <_dtoa_r+0x40c>
 8006494:	9903      	ldr	r1, [sp, #12]
 8006496:	4b29      	ldr	r3, [pc, #164]	; (800653c <_dtoa_r+0x594>)
 8006498:	4421      	add	r1, r4
 800649a:	9112      	str	r1, [sp, #72]	; 0x48
 800649c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800649e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064a2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064aa:	2900      	cmp	r1, #0
 80064ac:	d054      	beq.n	8006558 <_dtoa_r+0x5b0>
 80064ae:	2000      	movs	r0, #0
 80064b0:	4928      	ldr	r1, [pc, #160]	; (8006554 <_dtoa_r+0x5ac>)
 80064b2:	f7fa f93b 	bl	800072c <__aeabi_ddiv>
 80064b6:	463b      	mov	r3, r7
 80064b8:	4632      	mov	r2, r6
 80064ba:	f7f9 fe55 	bl	8000168 <__aeabi_dsub>
 80064be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064c2:	9f03      	ldr	r7, [sp, #12]
 80064c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064c8:	f7fa fab6 	bl	8000a38 <__aeabi_d2iz>
 80064cc:	4604      	mov	r4, r0
 80064ce:	f7f9 ff99 	bl	8000404 <__aeabi_i2d>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064da:	f7f9 fe45 	bl	8000168 <__aeabi_dsub>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	3430      	adds	r4, #48	; 0x30
 80064e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064ec:	f807 4b01 	strb.w	r4, [r7], #1
 80064f0:	f7fa fa64 	bl	80009bc <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d173      	bne.n	80065e0 <_dtoa_r+0x638>
 80064f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064fc:	2000      	movs	r0, #0
 80064fe:	4911      	ldr	r1, [pc, #68]	; (8006544 <_dtoa_r+0x59c>)
 8006500:	f7f9 fe32 	bl	8000168 <__aeabi_dsub>
 8006504:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006508:	f7fa fa58 	bl	80009bc <__aeabi_dcmplt>
 800650c:	2800      	cmp	r0, #0
 800650e:	f040 80b6 	bne.w	800667e <_dtoa_r+0x6d6>
 8006512:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006514:	429f      	cmp	r7, r3
 8006516:	f43f af7a 	beq.w	800640e <_dtoa_r+0x466>
 800651a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800651e:	2200      	movs	r2, #0
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <_dtoa_r+0x5a0>)
 8006522:	f7f9 ffd9 	bl	80004d8 <__aeabi_dmul>
 8006526:	2200      	movs	r2, #0
 8006528:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800652c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <_dtoa_r+0x5a0>)
 8006532:	f7f9 ffd1 	bl	80004d8 <__aeabi_dmul>
 8006536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800653a:	e7c3      	b.n	80064c4 <_dtoa_r+0x51c>
 800653c:	080087b8 	.word	0x080087b8
 8006540:	08008790 	.word	0x08008790
 8006544:	3ff00000 	.word	0x3ff00000
 8006548:	40240000 	.word	0x40240000
 800654c:	401c0000 	.word	0x401c0000
 8006550:	40140000 	.word	0x40140000
 8006554:	3fe00000 	.word	0x3fe00000
 8006558:	4630      	mov	r0, r6
 800655a:	4639      	mov	r1, r7
 800655c:	f7f9 ffbc 	bl	80004d8 <__aeabi_dmul>
 8006560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006562:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006566:	9c03      	ldr	r4, [sp, #12]
 8006568:	9314      	str	r3, [sp, #80]	; 0x50
 800656a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800656e:	f7fa fa63 	bl	8000a38 <__aeabi_d2iz>
 8006572:	9015      	str	r0, [sp, #84]	; 0x54
 8006574:	f7f9 ff46 	bl	8000404 <__aeabi_i2d>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006580:	f7f9 fdf2 	bl	8000168 <__aeabi_dsub>
 8006584:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006586:	4606      	mov	r6, r0
 8006588:	3330      	adds	r3, #48	; 0x30
 800658a:	f804 3b01 	strb.w	r3, [r4], #1
 800658e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006590:	460f      	mov	r7, r1
 8006592:	429c      	cmp	r4, r3
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	d124      	bne.n	80065e4 <_dtoa_r+0x63c>
 800659a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800659e:	4baf      	ldr	r3, [pc, #700]	; (800685c <_dtoa_r+0x8b4>)
 80065a0:	f7f9 fde4 	bl	800016c <__adddf3>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4630      	mov	r0, r6
 80065aa:	4639      	mov	r1, r7
 80065ac:	f7fa fa24 	bl	80009f8 <__aeabi_dcmpgt>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d163      	bne.n	800667c <_dtoa_r+0x6d4>
 80065b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065b8:	2000      	movs	r0, #0
 80065ba:	49a8      	ldr	r1, [pc, #672]	; (800685c <_dtoa_r+0x8b4>)
 80065bc:	f7f9 fdd4 	bl	8000168 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4630      	mov	r0, r6
 80065c6:	4639      	mov	r1, r7
 80065c8:	f7fa f9f8 	bl	80009bc <__aeabi_dcmplt>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f43f af1e 	beq.w	800640e <_dtoa_r+0x466>
 80065d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065d4:	1e7b      	subs	r3, r7, #1
 80065d6:	9314      	str	r3, [sp, #80]	; 0x50
 80065d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80065dc:	2b30      	cmp	r3, #48	; 0x30
 80065de:	d0f8      	beq.n	80065d2 <_dtoa_r+0x62a>
 80065e0:	46c3      	mov	fp, r8
 80065e2:	e03b      	b.n	800665c <_dtoa_r+0x6b4>
 80065e4:	4b9e      	ldr	r3, [pc, #632]	; (8006860 <_dtoa_r+0x8b8>)
 80065e6:	f7f9 ff77 	bl	80004d8 <__aeabi_dmul>
 80065ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065ee:	e7bc      	b.n	800656a <_dtoa_r+0x5c2>
 80065f0:	9f03      	ldr	r7, [sp, #12]
 80065f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80065f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065fa:	4640      	mov	r0, r8
 80065fc:	4649      	mov	r1, r9
 80065fe:	f7fa f895 	bl	800072c <__aeabi_ddiv>
 8006602:	f7fa fa19 	bl	8000a38 <__aeabi_d2iz>
 8006606:	4604      	mov	r4, r0
 8006608:	f7f9 fefc 	bl	8000404 <__aeabi_i2d>
 800660c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006610:	f7f9 ff62 	bl	80004d8 <__aeabi_dmul>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4640      	mov	r0, r8
 800661a:	4649      	mov	r1, r9
 800661c:	f7f9 fda4 	bl	8000168 <__aeabi_dsub>
 8006620:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006624:	f807 6b01 	strb.w	r6, [r7], #1
 8006628:	9e03      	ldr	r6, [sp, #12]
 800662a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800662e:	1bbe      	subs	r6, r7, r6
 8006630:	45b4      	cmp	ip, r6
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	d136      	bne.n	80066a6 <_dtoa_r+0x6fe>
 8006638:	f7f9 fd98 	bl	800016c <__adddf3>
 800663c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006640:	4680      	mov	r8, r0
 8006642:	4689      	mov	r9, r1
 8006644:	f7fa f9d8 	bl	80009f8 <__aeabi_dcmpgt>
 8006648:	bb58      	cbnz	r0, 80066a2 <_dtoa_r+0x6fa>
 800664a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800664e:	4640      	mov	r0, r8
 8006650:	4649      	mov	r1, r9
 8006652:	f7fa f9a9 	bl	80009a8 <__aeabi_dcmpeq>
 8006656:	b108      	cbz	r0, 800665c <_dtoa_r+0x6b4>
 8006658:	07e3      	lsls	r3, r4, #31
 800665a:	d422      	bmi.n	80066a2 <_dtoa_r+0x6fa>
 800665c:	4651      	mov	r1, sl
 800665e:	4628      	mov	r0, r5
 8006660:	f000 fbc2 	bl	8006de8 <_Bfree>
 8006664:	2300      	movs	r3, #0
 8006666:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006668:	703b      	strb	r3, [r7, #0]
 800666a:	f10b 0301 	add.w	r3, fp, #1
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006672:	2b00      	cmp	r3, #0
 8006674:	f43f ace6 	beq.w	8006044 <_dtoa_r+0x9c>
 8006678:	601f      	str	r7, [r3, #0]
 800667a:	e4e3      	b.n	8006044 <_dtoa_r+0x9c>
 800667c:	4627      	mov	r7, r4
 800667e:	463b      	mov	r3, r7
 8006680:	461f      	mov	r7, r3
 8006682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006686:	2a39      	cmp	r2, #57	; 0x39
 8006688:	d107      	bne.n	800669a <_dtoa_r+0x6f2>
 800668a:	9a03      	ldr	r2, [sp, #12]
 800668c:	429a      	cmp	r2, r3
 800668e:	d1f7      	bne.n	8006680 <_dtoa_r+0x6d8>
 8006690:	2230      	movs	r2, #48	; 0x30
 8006692:	9903      	ldr	r1, [sp, #12]
 8006694:	f108 0801 	add.w	r8, r8, #1
 8006698:	700a      	strb	r2, [r1, #0]
 800669a:	781a      	ldrb	r2, [r3, #0]
 800669c:	3201      	adds	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e79e      	b.n	80065e0 <_dtoa_r+0x638>
 80066a2:	46d8      	mov	r8, fp
 80066a4:	e7eb      	b.n	800667e <_dtoa_r+0x6d6>
 80066a6:	2200      	movs	r2, #0
 80066a8:	4b6d      	ldr	r3, [pc, #436]	; (8006860 <_dtoa_r+0x8b8>)
 80066aa:	f7f9 ff15 	bl	80004d8 <__aeabi_dmul>
 80066ae:	2200      	movs	r2, #0
 80066b0:	2300      	movs	r3, #0
 80066b2:	4680      	mov	r8, r0
 80066b4:	4689      	mov	r9, r1
 80066b6:	f7fa f977 	bl	80009a8 <__aeabi_dcmpeq>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d09b      	beq.n	80065f6 <_dtoa_r+0x64e>
 80066be:	e7cd      	b.n	800665c <_dtoa_r+0x6b4>
 80066c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	f000 80c4 	beq.w	8006850 <_dtoa_r+0x8a8>
 80066c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066ca:	2a01      	cmp	r2, #1
 80066cc:	f300 80a8 	bgt.w	8006820 <_dtoa_r+0x878>
 80066d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	f000 80a0 	beq.w	8006818 <_dtoa_r+0x870>
 80066d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066dc:	464f      	mov	r7, r9
 80066de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e2:	2101      	movs	r1, #1
 80066e4:	441a      	add	r2, r3
 80066e6:	4628      	mov	r0, r5
 80066e8:	4499      	add	r9, r3
 80066ea:	9209      	str	r2, [sp, #36]	; 0x24
 80066ec:	f000 fc32 	bl	8006f54 <__i2b>
 80066f0:	4606      	mov	r6, r0
 80066f2:	b15f      	cbz	r7, 800670c <_dtoa_r+0x764>
 80066f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dd08      	ble.n	800670c <_dtoa_r+0x764>
 80066fa:	42bb      	cmp	r3, r7
 80066fc:	bfa8      	it	ge
 80066fe:	463b      	movge	r3, r7
 8006700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006702:	eba9 0903 	sub.w	r9, r9, r3
 8006706:	1aff      	subs	r7, r7, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	9309      	str	r3, [sp, #36]	; 0x24
 800670c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670e:	b1f3      	cbz	r3, 800674e <_dtoa_r+0x7a6>
 8006710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 80a0 	beq.w	8006858 <_dtoa_r+0x8b0>
 8006718:	2c00      	cmp	r4, #0
 800671a:	dd10      	ble.n	800673e <_dtoa_r+0x796>
 800671c:	4631      	mov	r1, r6
 800671e:	4622      	mov	r2, r4
 8006720:	4628      	mov	r0, r5
 8006722:	f000 fcd5 	bl	80070d0 <__pow5mult>
 8006726:	4652      	mov	r2, sl
 8006728:	4601      	mov	r1, r0
 800672a:	4606      	mov	r6, r0
 800672c:	4628      	mov	r0, r5
 800672e:	f000 fc27 	bl	8006f80 <__multiply>
 8006732:	4680      	mov	r8, r0
 8006734:	4651      	mov	r1, sl
 8006736:	4628      	mov	r0, r5
 8006738:	f000 fb56 	bl	8006de8 <_Bfree>
 800673c:	46c2      	mov	sl, r8
 800673e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006740:	1b1a      	subs	r2, r3, r4
 8006742:	d004      	beq.n	800674e <_dtoa_r+0x7a6>
 8006744:	4651      	mov	r1, sl
 8006746:	4628      	mov	r0, r5
 8006748:	f000 fcc2 	bl	80070d0 <__pow5mult>
 800674c:	4682      	mov	sl, r0
 800674e:	2101      	movs	r1, #1
 8006750:	4628      	mov	r0, r5
 8006752:	f000 fbff 	bl	8006f54 <__i2b>
 8006756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006758:	4604      	mov	r4, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	f340 8082 	ble.w	8006864 <_dtoa_r+0x8bc>
 8006760:	461a      	mov	r2, r3
 8006762:	4601      	mov	r1, r0
 8006764:	4628      	mov	r0, r5
 8006766:	f000 fcb3 	bl	80070d0 <__pow5mult>
 800676a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800676c:	4604      	mov	r4, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	dd7b      	ble.n	800686a <_dtoa_r+0x8c2>
 8006772:	f04f 0800 	mov.w	r8, #0
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800677c:	6918      	ldr	r0, [r3, #16]
 800677e:	f000 fb9b 	bl	8006eb8 <__hi0bits>
 8006782:	f1c0 0020 	rsb	r0, r0, #32
 8006786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006788:	4418      	add	r0, r3
 800678a:	f010 001f 	ands.w	r0, r0, #31
 800678e:	f000 8092 	beq.w	80068b6 <_dtoa_r+0x90e>
 8006792:	f1c0 0320 	rsb	r3, r0, #32
 8006796:	2b04      	cmp	r3, #4
 8006798:	f340 8085 	ble.w	80068a6 <_dtoa_r+0x8fe>
 800679c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679e:	f1c0 001c 	rsb	r0, r0, #28
 80067a2:	4403      	add	r3, r0
 80067a4:	4481      	add	r9, r0
 80067a6:	4407      	add	r7, r0
 80067a8:	9309      	str	r3, [sp, #36]	; 0x24
 80067aa:	f1b9 0f00 	cmp.w	r9, #0
 80067ae:	dd05      	ble.n	80067bc <_dtoa_r+0x814>
 80067b0:	4651      	mov	r1, sl
 80067b2:	464a      	mov	r2, r9
 80067b4:	4628      	mov	r0, r5
 80067b6:	f000 fce5 	bl	8007184 <__lshift>
 80067ba:	4682      	mov	sl, r0
 80067bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	dd05      	ble.n	80067ce <_dtoa_r+0x826>
 80067c2:	4621      	mov	r1, r4
 80067c4:	461a      	mov	r2, r3
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 fcdc 	bl	8007184 <__lshift>
 80067cc:	4604      	mov	r4, r0
 80067ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d072      	beq.n	80068ba <_dtoa_r+0x912>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4650      	mov	r0, sl
 80067d8:	f000 fd40 	bl	800725c <__mcmp>
 80067dc:	2800      	cmp	r0, #0
 80067de:	da6c      	bge.n	80068ba <_dtoa_r+0x912>
 80067e0:	2300      	movs	r3, #0
 80067e2:	4651      	mov	r1, sl
 80067e4:	220a      	movs	r2, #10
 80067e6:	4628      	mov	r0, r5
 80067e8:	f000 fb20 	bl	8006e2c <__multadd>
 80067ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067ee:	4682      	mov	sl, r0
 80067f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 81ac 	beq.w	8006b52 <_dtoa_r+0xbaa>
 80067fa:	2300      	movs	r3, #0
 80067fc:	4631      	mov	r1, r6
 80067fe:	220a      	movs	r2, #10
 8006800:	4628      	mov	r0, r5
 8006802:	f000 fb13 	bl	8006e2c <__multadd>
 8006806:	9b06      	ldr	r3, [sp, #24]
 8006808:	4606      	mov	r6, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	f300 8093 	bgt.w	8006936 <_dtoa_r+0x98e>
 8006810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006812:	2b02      	cmp	r3, #2
 8006814:	dc59      	bgt.n	80068ca <_dtoa_r+0x922>
 8006816:	e08e      	b.n	8006936 <_dtoa_r+0x98e>
 8006818:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800681a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800681e:	e75d      	b.n	80066dc <_dtoa_r+0x734>
 8006820:	9b08      	ldr	r3, [sp, #32]
 8006822:	1e5c      	subs	r4, r3, #1
 8006824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006826:	42a3      	cmp	r3, r4
 8006828:	bfbf      	itttt	lt
 800682a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800682c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800682e:	1ae3      	sublt	r3, r4, r3
 8006830:	18d2      	addlt	r2, r2, r3
 8006832:	bfa8      	it	ge
 8006834:	1b1c      	subge	r4, r3, r4
 8006836:	9b08      	ldr	r3, [sp, #32]
 8006838:	bfbe      	ittt	lt
 800683a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800683c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800683e:	2400      	movlt	r4, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	bfb5      	itete	lt
 8006844:	eba9 0703 	sublt.w	r7, r9, r3
 8006848:	464f      	movge	r7, r9
 800684a:	2300      	movlt	r3, #0
 800684c:	9b08      	ldrge	r3, [sp, #32]
 800684e:	e747      	b.n	80066e0 <_dtoa_r+0x738>
 8006850:	464f      	mov	r7, r9
 8006852:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006854:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006856:	e74c      	b.n	80066f2 <_dtoa_r+0x74a>
 8006858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800685a:	e773      	b.n	8006744 <_dtoa_r+0x79c>
 800685c:	3fe00000 	.word	0x3fe00000
 8006860:	40240000 	.word	0x40240000
 8006864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006866:	2b01      	cmp	r3, #1
 8006868:	dc18      	bgt.n	800689c <_dtoa_r+0x8f4>
 800686a:	9b04      	ldr	r3, [sp, #16]
 800686c:	b9b3      	cbnz	r3, 800689c <_dtoa_r+0x8f4>
 800686e:	9b05      	ldr	r3, [sp, #20]
 8006870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006874:	b993      	cbnz	r3, 800689c <_dtoa_r+0x8f4>
 8006876:	9b05      	ldr	r3, [sp, #20]
 8006878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800687c:	0d1b      	lsrs	r3, r3, #20
 800687e:	051b      	lsls	r3, r3, #20
 8006880:	b17b      	cbz	r3, 80068a2 <_dtoa_r+0x8fa>
 8006882:	f04f 0801 	mov.w	r8, #1
 8006886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006888:	f109 0901 	add.w	r9, r9, #1
 800688c:	3301      	adds	r3, #1
 800688e:	9309      	str	r3, [sp, #36]	; 0x24
 8006890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006892:	2b00      	cmp	r3, #0
 8006894:	f47f af6f 	bne.w	8006776 <_dtoa_r+0x7ce>
 8006898:	2001      	movs	r0, #1
 800689a:	e774      	b.n	8006786 <_dtoa_r+0x7de>
 800689c:	f04f 0800 	mov.w	r8, #0
 80068a0:	e7f6      	b.n	8006890 <_dtoa_r+0x8e8>
 80068a2:	4698      	mov	r8, r3
 80068a4:	e7f4      	b.n	8006890 <_dtoa_r+0x8e8>
 80068a6:	d080      	beq.n	80067aa <_dtoa_r+0x802>
 80068a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068aa:	331c      	adds	r3, #28
 80068ac:	441a      	add	r2, r3
 80068ae:	4499      	add	r9, r3
 80068b0:	441f      	add	r7, r3
 80068b2:	9209      	str	r2, [sp, #36]	; 0x24
 80068b4:	e779      	b.n	80067aa <_dtoa_r+0x802>
 80068b6:	4603      	mov	r3, r0
 80068b8:	e7f6      	b.n	80068a8 <_dtoa_r+0x900>
 80068ba:	9b08      	ldr	r3, [sp, #32]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	dc34      	bgt.n	800692a <_dtoa_r+0x982>
 80068c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	dd31      	ble.n	800692a <_dtoa_r+0x982>
 80068c6:	9b08      	ldr	r3, [sp, #32]
 80068c8:	9306      	str	r3, [sp, #24]
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	b963      	cbnz	r3, 80068e8 <_dtoa_r+0x940>
 80068ce:	4621      	mov	r1, r4
 80068d0:	2205      	movs	r2, #5
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 faaa 	bl	8006e2c <__multadd>
 80068d8:	4601      	mov	r1, r0
 80068da:	4604      	mov	r4, r0
 80068dc:	4650      	mov	r0, sl
 80068de:	f000 fcbd 	bl	800725c <__mcmp>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	f73f adbf 	bgt.w	8006466 <_dtoa_r+0x4be>
 80068e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068ea:	9f03      	ldr	r7, [sp, #12]
 80068ec:	ea6f 0b03 	mvn.w	fp, r3
 80068f0:	f04f 0800 	mov.w	r8, #0
 80068f4:	4621      	mov	r1, r4
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 fa76 	bl	8006de8 <_Bfree>
 80068fc:	2e00      	cmp	r6, #0
 80068fe:	f43f aead 	beq.w	800665c <_dtoa_r+0x6b4>
 8006902:	f1b8 0f00 	cmp.w	r8, #0
 8006906:	d005      	beq.n	8006914 <_dtoa_r+0x96c>
 8006908:	45b0      	cmp	r8, r6
 800690a:	d003      	beq.n	8006914 <_dtoa_r+0x96c>
 800690c:	4641      	mov	r1, r8
 800690e:	4628      	mov	r0, r5
 8006910:	f000 fa6a 	bl	8006de8 <_Bfree>
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	f000 fa66 	bl	8006de8 <_Bfree>
 800691c:	e69e      	b.n	800665c <_dtoa_r+0x6b4>
 800691e:	2400      	movs	r4, #0
 8006920:	4626      	mov	r6, r4
 8006922:	e7e1      	b.n	80068e8 <_dtoa_r+0x940>
 8006924:	46c3      	mov	fp, r8
 8006926:	4626      	mov	r6, r4
 8006928:	e59d      	b.n	8006466 <_dtoa_r+0x4be>
 800692a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80c8 	beq.w	8006ac2 <_dtoa_r+0xb1a>
 8006932:	9b08      	ldr	r3, [sp, #32]
 8006934:	9306      	str	r3, [sp, #24]
 8006936:	2f00      	cmp	r7, #0
 8006938:	dd05      	ble.n	8006946 <_dtoa_r+0x99e>
 800693a:	4631      	mov	r1, r6
 800693c:	463a      	mov	r2, r7
 800693e:	4628      	mov	r0, r5
 8006940:	f000 fc20 	bl	8007184 <__lshift>
 8006944:	4606      	mov	r6, r0
 8006946:	f1b8 0f00 	cmp.w	r8, #0
 800694a:	d05b      	beq.n	8006a04 <_dtoa_r+0xa5c>
 800694c:	4628      	mov	r0, r5
 800694e:	6871      	ldr	r1, [r6, #4]
 8006950:	f000 fa0a 	bl	8006d68 <_Balloc>
 8006954:	4607      	mov	r7, r0
 8006956:	b928      	cbnz	r0, 8006964 <_dtoa_r+0x9bc>
 8006958:	4602      	mov	r2, r0
 800695a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800695e:	4b81      	ldr	r3, [pc, #516]	; (8006b64 <_dtoa_r+0xbbc>)
 8006960:	f7ff bb36 	b.w	8005fd0 <_dtoa_r+0x28>
 8006964:	6932      	ldr	r2, [r6, #16]
 8006966:	f106 010c 	add.w	r1, r6, #12
 800696a:	3202      	adds	r2, #2
 800696c:	0092      	lsls	r2, r2, #2
 800696e:	300c      	adds	r0, #12
 8006970:	f7ff fa81 	bl	8005e76 <memcpy>
 8006974:	2201      	movs	r2, #1
 8006976:	4639      	mov	r1, r7
 8006978:	4628      	mov	r0, r5
 800697a:	f000 fc03 	bl	8007184 <__lshift>
 800697e:	46b0      	mov	r8, r6
 8006980:	4606      	mov	r6, r0
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	9a03      	ldr	r2, [sp, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	9308      	str	r3, [sp, #32]
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	4413      	add	r3, r2
 800698e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006990:	9b04      	ldr	r3, [sp, #16]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	930a      	str	r3, [sp, #40]	; 0x28
 8006998:	9b08      	ldr	r3, [sp, #32]
 800699a:	4621      	mov	r1, r4
 800699c:	3b01      	subs	r3, #1
 800699e:	4650      	mov	r0, sl
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	f7ff fa76 	bl	8005e92 <quorem>
 80069a6:	4641      	mov	r1, r8
 80069a8:	9006      	str	r0, [sp, #24]
 80069aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069ae:	4650      	mov	r0, sl
 80069b0:	f000 fc54 	bl	800725c <__mcmp>
 80069b4:	4632      	mov	r2, r6
 80069b6:	9009      	str	r0, [sp, #36]	; 0x24
 80069b8:	4621      	mov	r1, r4
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 fc6a 	bl	8007294 <__mdiff>
 80069c0:	68c2      	ldr	r2, [r0, #12]
 80069c2:	4607      	mov	r7, r0
 80069c4:	bb02      	cbnz	r2, 8006a08 <_dtoa_r+0xa60>
 80069c6:	4601      	mov	r1, r0
 80069c8:	4650      	mov	r0, sl
 80069ca:	f000 fc47 	bl	800725c <__mcmp>
 80069ce:	4602      	mov	r2, r0
 80069d0:	4639      	mov	r1, r7
 80069d2:	4628      	mov	r0, r5
 80069d4:	920c      	str	r2, [sp, #48]	; 0x30
 80069d6:	f000 fa07 	bl	8006de8 <_Bfree>
 80069da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069de:	9f08      	ldr	r7, [sp, #32]
 80069e0:	ea43 0102 	orr.w	r1, r3, r2
 80069e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e6:	4319      	orrs	r1, r3
 80069e8:	d110      	bne.n	8006a0c <_dtoa_r+0xa64>
 80069ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069ee:	d029      	beq.n	8006a44 <_dtoa_r+0xa9c>
 80069f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dd02      	ble.n	80069fc <_dtoa_r+0xa54>
 80069f6:	9b06      	ldr	r3, [sp, #24]
 80069f8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80069fc:	9b04      	ldr	r3, [sp, #16]
 80069fe:	f883 9000 	strb.w	r9, [r3]
 8006a02:	e777      	b.n	80068f4 <_dtoa_r+0x94c>
 8006a04:	4630      	mov	r0, r6
 8006a06:	e7ba      	b.n	800697e <_dtoa_r+0x9d6>
 8006a08:	2201      	movs	r2, #1
 8006a0a:	e7e1      	b.n	80069d0 <_dtoa_r+0xa28>
 8006a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	db04      	blt.n	8006a1c <_dtoa_r+0xa74>
 8006a12:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a14:	430b      	orrs	r3, r1
 8006a16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	d120      	bne.n	8006a5e <_dtoa_r+0xab6>
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	dded      	ble.n	80069fc <_dtoa_r+0xa54>
 8006a20:	4651      	mov	r1, sl
 8006a22:	2201      	movs	r2, #1
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 fbad 	bl	8007184 <__lshift>
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4682      	mov	sl, r0
 8006a2e:	f000 fc15 	bl	800725c <__mcmp>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	dc03      	bgt.n	8006a3e <_dtoa_r+0xa96>
 8006a36:	d1e1      	bne.n	80069fc <_dtoa_r+0xa54>
 8006a38:	f019 0f01 	tst.w	r9, #1
 8006a3c:	d0de      	beq.n	80069fc <_dtoa_r+0xa54>
 8006a3e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a42:	d1d8      	bne.n	80069f6 <_dtoa_r+0xa4e>
 8006a44:	2339      	movs	r3, #57	; 0x39
 8006a46:	9a04      	ldr	r2, [sp, #16]
 8006a48:	7013      	strb	r3, [r2, #0]
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	461f      	mov	r7, r3
 8006a4e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	2a39      	cmp	r2, #57	; 0x39
 8006a56:	d06b      	beq.n	8006b30 <_dtoa_r+0xb88>
 8006a58:	3201      	adds	r2, #1
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	e74a      	b.n	80068f4 <_dtoa_r+0x94c>
 8006a5e:	2a00      	cmp	r2, #0
 8006a60:	dd07      	ble.n	8006a72 <_dtoa_r+0xaca>
 8006a62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a66:	d0ed      	beq.n	8006a44 <_dtoa_r+0xa9c>
 8006a68:	9a04      	ldr	r2, [sp, #16]
 8006a6a:	f109 0301 	add.w	r3, r9, #1
 8006a6e:	7013      	strb	r3, [r2, #0]
 8006a70:	e740      	b.n	80068f4 <_dtoa_r+0x94c>
 8006a72:	9b08      	ldr	r3, [sp, #32]
 8006a74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a76:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d042      	beq.n	8006b04 <_dtoa_r+0xb5c>
 8006a7e:	4651      	mov	r1, sl
 8006a80:	2300      	movs	r3, #0
 8006a82:	220a      	movs	r2, #10
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 f9d1 	bl	8006e2c <__multadd>
 8006a8a:	45b0      	cmp	r8, r6
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	f04f 020a 	mov.w	r2, #10
 8006a96:	4641      	mov	r1, r8
 8006a98:	4628      	mov	r0, r5
 8006a9a:	d107      	bne.n	8006aac <_dtoa_r+0xb04>
 8006a9c:	f000 f9c6 	bl	8006e2c <__multadd>
 8006aa0:	4680      	mov	r8, r0
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	9b08      	ldr	r3, [sp, #32]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	9308      	str	r3, [sp, #32]
 8006aaa:	e775      	b.n	8006998 <_dtoa_r+0x9f0>
 8006aac:	f000 f9be 	bl	8006e2c <__multadd>
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	220a      	movs	r2, #10
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 f9b7 	bl	8006e2c <__multadd>
 8006abe:	4606      	mov	r6, r0
 8006ac0:	e7f0      	b.n	8006aa4 <_dtoa_r+0xafc>
 8006ac2:	9b08      	ldr	r3, [sp, #32]
 8006ac4:	9306      	str	r3, [sp, #24]
 8006ac6:	9f03      	ldr	r7, [sp, #12]
 8006ac8:	4621      	mov	r1, r4
 8006aca:	4650      	mov	r0, sl
 8006acc:	f7ff f9e1 	bl	8005e92 <quorem>
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ad6:	f807 9b01 	strb.w	r9, [r7], #1
 8006ada:	1afa      	subs	r2, r7, r3
 8006adc:	9b06      	ldr	r3, [sp, #24]
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	dd07      	ble.n	8006af2 <_dtoa_r+0xb4a>
 8006ae2:	4651      	mov	r1, sl
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	220a      	movs	r2, #10
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 f99f 	bl	8006e2c <__multadd>
 8006aee:	4682      	mov	sl, r0
 8006af0:	e7ea      	b.n	8006ac8 <_dtoa_r+0xb20>
 8006af2:	9b06      	ldr	r3, [sp, #24]
 8006af4:	f04f 0800 	mov.w	r8, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bfcc      	ite	gt
 8006afc:	461f      	movgt	r7, r3
 8006afe:	2701      	movle	r7, #1
 8006b00:	9b03      	ldr	r3, [sp, #12]
 8006b02:	441f      	add	r7, r3
 8006b04:	4651      	mov	r1, sl
 8006b06:	2201      	movs	r2, #1
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f000 fb3b 	bl	8007184 <__lshift>
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4682      	mov	sl, r0
 8006b12:	f000 fba3 	bl	800725c <__mcmp>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	dc97      	bgt.n	8006a4a <_dtoa_r+0xaa2>
 8006b1a:	d102      	bne.n	8006b22 <_dtoa_r+0xb7a>
 8006b1c:	f019 0f01 	tst.w	r9, #1
 8006b20:	d193      	bne.n	8006a4a <_dtoa_r+0xaa2>
 8006b22:	463b      	mov	r3, r7
 8006b24:	461f      	mov	r7, r3
 8006b26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b2a:	2a30      	cmp	r2, #48	; 0x30
 8006b2c:	d0fa      	beq.n	8006b24 <_dtoa_r+0xb7c>
 8006b2e:	e6e1      	b.n	80068f4 <_dtoa_r+0x94c>
 8006b30:	9a03      	ldr	r2, [sp, #12]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d18a      	bne.n	8006a4c <_dtoa_r+0xaa4>
 8006b36:	2331      	movs	r3, #49	; 0x31
 8006b38:	f10b 0b01 	add.w	fp, fp, #1
 8006b3c:	e797      	b.n	8006a6e <_dtoa_r+0xac6>
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <_dtoa_r+0xbc0>)
 8006b40:	f7ff ba9f 	b.w	8006082 <_dtoa_r+0xda>
 8006b44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f47f aa77 	bne.w	800603a <_dtoa_r+0x92>
 8006b4c:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <_dtoa_r+0xbc4>)
 8006b4e:	f7ff ba98 	b.w	8006082 <_dtoa_r+0xda>
 8006b52:	9b06      	ldr	r3, [sp, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dcb6      	bgt.n	8006ac6 <_dtoa_r+0xb1e>
 8006b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	f73f aeb5 	bgt.w	80068ca <_dtoa_r+0x922>
 8006b60:	e7b1      	b.n	8006ac6 <_dtoa_r+0xb1e>
 8006b62:	bf00      	nop
 8006b64:	08008726 	.word	0x08008726
 8006b68:	08008686 	.word	0x08008686
 8006b6c:	080086aa 	.word	0x080086aa

08006b70 <_free_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4605      	mov	r5, r0
 8006b74:	2900      	cmp	r1, #0
 8006b76:	d040      	beq.n	8006bfa <_free_r+0x8a>
 8006b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b7c:	1f0c      	subs	r4, r1, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bfb8      	it	lt
 8006b82:	18e4      	addlt	r4, r4, r3
 8006b84:	f000 f8e4 	bl	8006d50 <__malloc_lock>
 8006b88:	4a1c      	ldr	r2, [pc, #112]	; (8006bfc <_free_r+0x8c>)
 8006b8a:	6813      	ldr	r3, [r2, #0]
 8006b8c:	b933      	cbnz	r3, 8006b9c <_free_r+0x2c>
 8006b8e:	6063      	str	r3, [r4, #4]
 8006b90:	6014      	str	r4, [r2, #0]
 8006b92:	4628      	mov	r0, r5
 8006b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b98:	f000 b8e0 	b.w	8006d5c <__malloc_unlock>
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	d908      	bls.n	8006bb2 <_free_r+0x42>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	1821      	adds	r1, r4, r0
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	bf01      	itttt	eq
 8006ba8:	6819      	ldreq	r1, [r3, #0]
 8006baa:	685b      	ldreq	r3, [r3, #4]
 8006bac:	1809      	addeq	r1, r1, r0
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	e7ed      	b.n	8006b8e <_free_r+0x1e>
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b10b      	cbz	r3, 8006bbc <_free_r+0x4c>
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d9fa      	bls.n	8006bb2 <_free_r+0x42>
 8006bbc:	6811      	ldr	r1, [r2, #0]
 8006bbe:	1850      	adds	r0, r2, r1
 8006bc0:	42a0      	cmp	r0, r4
 8006bc2:	d10b      	bne.n	8006bdc <_free_r+0x6c>
 8006bc4:	6820      	ldr	r0, [r4, #0]
 8006bc6:	4401      	add	r1, r0
 8006bc8:	1850      	adds	r0, r2, r1
 8006bca:	4283      	cmp	r3, r0
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	d1e0      	bne.n	8006b92 <_free_r+0x22>
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4408      	add	r0, r1
 8006bd6:	6010      	str	r0, [r2, #0]
 8006bd8:	6053      	str	r3, [r2, #4]
 8006bda:	e7da      	b.n	8006b92 <_free_r+0x22>
 8006bdc:	d902      	bls.n	8006be4 <_free_r+0x74>
 8006bde:	230c      	movs	r3, #12
 8006be0:	602b      	str	r3, [r5, #0]
 8006be2:	e7d6      	b.n	8006b92 <_free_r+0x22>
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	1821      	adds	r1, r4, r0
 8006be8:	428b      	cmp	r3, r1
 8006bea:	bf01      	itttt	eq
 8006bec:	6819      	ldreq	r1, [r3, #0]
 8006bee:	685b      	ldreq	r3, [r3, #4]
 8006bf0:	1809      	addeq	r1, r1, r0
 8006bf2:	6021      	streq	r1, [r4, #0]
 8006bf4:	6063      	str	r3, [r4, #4]
 8006bf6:	6054      	str	r4, [r2, #4]
 8006bf8:	e7cb      	b.n	8006b92 <_free_r+0x22>
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	2000093c 	.word	0x2000093c

08006c00 <malloc>:
 8006c00:	4b02      	ldr	r3, [pc, #8]	; (8006c0c <malloc+0xc>)
 8006c02:	4601      	mov	r1, r0
 8006c04:	6818      	ldr	r0, [r3, #0]
 8006c06:	f000 b823 	b.w	8006c50 <_malloc_r>
 8006c0a:	bf00      	nop
 8006c0c:	20000094 	.word	0x20000094

08006c10 <sbrk_aligned>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4e0e      	ldr	r6, [pc, #56]	; (8006c4c <sbrk_aligned+0x3c>)
 8006c14:	460c      	mov	r4, r1
 8006c16:	6831      	ldr	r1, [r6, #0]
 8006c18:	4605      	mov	r5, r0
 8006c1a:	b911      	cbnz	r1, 8006c22 <sbrk_aligned+0x12>
 8006c1c:	f000 ffe4 	bl	8007be8 <_sbrk_r>
 8006c20:	6030      	str	r0, [r6, #0]
 8006c22:	4621      	mov	r1, r4
 8006c24:	4628      	mov	r0, r5
 8006c26:	f000 ffdf 	bl	8007be8 <_sbrk_r>
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	d00a      	beq.n	8006c44 <sbrk_aligned+0x34>
 8006c2e:	1cc4      	adds	r4, r0, #3
 8006c30:	f024 0403 	bic.w	r4, r4, #3
 8006c34:	42a0      	cmp	r0, r4
 8006c36:	d007      	beq.n	8006c48 <sbrk_aligned+0x38>
 8006c38:	1a21      	subs	r1, r4, r0
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f000 ffd4 	bl	8007be8 <_sbrk_r>
 8006c40:	3001      	adds	r0, #1
 8006c42:	d101      	bne.n	8006c48 <sbrk_aligned+0x38>
 8006c44:	f04f 34ff 	mov.w	r4, #4294967295
 8006c48:	4620      	mov	r0, r4
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	20000940 	.word	0x20000940

08006c50 <_malloc_r>:
 8006c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c54:	1ccd      	adds	r5, r1, #3
 8006c56:	f025 0503 	bic.w	r5, r5, #3
 8006c5a:	3508      	adds	r5, #8
 8006c5c:	2d0c      	cmp	r5, #12
 8006c5e:	bf38      	it	cc
 8006c60:	250c      	movcc	r5, #12
 8006c62:	2d00      	cmp	r5, #0
 8006c64:	4607      	mov	r7, r0
 8006c66:	db01      	blt.n	8006c6c <_malloc_r+0x1c>
 8006c68:	42a9      	cmp	r1, r5
 8006c6a:	d905      	bls.n	8006c78 <_malloc_r+0x28>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	2600      	movs	r6, #0
 8006c70:	603b      	str	r3, [r7, #0]
 8006c72:	4630      	mov	r0, r6
 8006c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d4c <_malloc_r+0xfc>
 8006c7c:	f000 f868 	bl	8006d50 <__malloc_lock>
 8006c80:	f8d8 3000 	ldr.w	r3, [r8]
 8006c84:	461c      	mov	r4, r3
 8006c86:	bb5c      	cbnz	r4, 8006ce0 <_malloc_r+0x90>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	f7ff ffc0 	bl	8006c10 <sbrk_aligned>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	4604      	mov	r4, r0
 8006c94:	d155      	bne.n	8006d42 <_malloc_r+0xf2>
 8006c96:	f8d8 4000 	ldr.w	r4, [r8]
 8006c9a:	4626      	mov	r6, r4
 8006c9c:	2e00      	cmp	r6, #0
 8006c9e:	d145      	bne.n	8006d2c <_malloc_r+0xdc>
 8006ca0:	2c00      	cmp	r4, #0
 8006ca2:	d048      	beq.n	8006d36 <_malloc_r+0xe6>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4638      	mov	r0, r7
 8006caa:	eb04 0903 	add.w	r9, r4, r3
 8006cae:	f000 ff9b 	bl	8007be8 <_sbrk_r>
 8006cb2:	4581      	cmp	r9, r0
 8006cb4:	d13f      	bne.n	8006d36 <_malloc_r+0xe6>
 8006cb6:	6821      	ldr	r1, [r4, #0]
 8006cb8:	4638      	mov	r0, r7
 8006cba:	1a6d      	subs	r5, r5, r1
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	f7ff ffa7 	bl	8006c10 <sbrk_aligned>
 8006cc2:	3001      	adds	r0, #1
 8006cc4:	d037      	beq.n	8006d36 <_malloc_r+0xe6>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	442b      	add	r3, r5
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d038      	beq.n	8006d46 <_malloc_r+0xf6>
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	42a2      	cmp	r2, r4
 8006cd8:	d12b      	bne.n	8006d32 <_malloc_r+0xe2>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	e00f      	b.n	8006d00 <_malloc_r+0xb0>
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	1b52      	subs	r2, r2, r5
 8006ce4:	d41f      	bmi.n	8006d26 <_malloc_r+0xd6>
 8006ce6:	2a0b      	cmp	r2, #11
 8006ce8:	d917      	bls.n	8006d1a <_malloc_r+0xca>
 8006cea:	1961      	adds	r1, r4, r5
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	6025      	str	r5, [r4, #0]
 8006cf0:	bf18      	it	ne
 8006cf2:	6059      	strne	r1, [r3, #4]
 8006cf4:	6863      	ldr	r3, [r4, #4]
 8006cf6:	bf08      	it	eq
 8006cf8:	f8c8 1000 	streq.w	r1, [r8]
 8006cfc:	5162      	str	r2, [r4, r5]
 8006cfe:	604b      	str	r3, [r1, #4]
 8006d00:	4638      	mov	r0, r7
 8006d02:	f104 060b 	add.w	r6, r4, #11
 8006d06:	f000 f829 	bl	8006d5c <__malloc_unlock>
 8006d0a:	f026 0607 	bic.w	r6, r6, #7
 8006d0e:	1d23      	adds	r3, r4, #4
 8006d10:	1af2      	subs	r2, r6, r3
 8006d12:	d0ae      	beq.n	8006c72 <_malloc_r+0x22>
 8006d14:	1b9b      	subs	r3, r3, r6
 8006d16:	50a3      	str	r3, [r4, r2]
 8006d18:	e7ab      	b.n	8006c72 <_malloc_r+0x22>
 8006d1a:	42a3      	cmp	r3, r4
 8006d1c:	6862      	ldr	r2, [r4, #4]
 8006d1e:	d1dd      	bne.n	8006cdc <_malloc_r+0x8c>
 8006d20:	f8c8 2000 	str.w	r2, [r8]
 8006d24:	e7ec      	b.n	8006d00 <_malloc_r+0xb0>
 8006d26:	4623      	mov	r3, r4
 8006d28:	6864      	ldr	r4, [r4, #4]
 8006d2a:	e7ac      	b.n	8006c86 <_malloc_r+0x36>
 8006d2c:	4634      	mov	r4, r6
 8006d2e:	6876      	ldr	r6, [r6, #4]
 8006d30:	e7b4      	b.n	8006c9c <_malloc_r+0x4c>
 8006d32:	4613      	mov	r3, r2
 8006d34:	e7cc      	b.n	8006cd0 <_malloc_r+0x80>
 8006d36:	230c      	movs	r3, #12
 8006d38:	4638      	mov	r0, r7
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	f000 f80e 	bl	8006d5c <__malloc_unlock>
 8006d40:	e797      	b.n	8006c72 <_malloc_r+0x22>
 8006d42:	6025      	str	r5, [r4, #0]
 8006d44:	e7dc      	b.n	8006d00 <_malloc_r+0xb0>
 8006d46:	605b      	str	r3, [r3, #4]
 8006d48:	deff      	udf	#255	; 0xff
 8006d4a:	bf00      	nop
 8006d4c:	2000093c 	.word	0x2000093c

08006d50 <__malloc_lock>:
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <__malloc_lock+0x8>)
 8006d52:	f7ff b880 	b.w	8005e56 <__retarget_lock_acquire_recursive>
 8006d56:	bf00      	nop
 8006d58:	20000938 	.word	0x20000938

08006d5c <__malloc_unlock>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	; (8006d64 <__malloc_unlock+0x8>)
 8006d5e:	f7ff b87b 	b.w	8005e58 <__retarget_lock_release_recursive>
 8006d62:	bf00      	nop
 8006d64:	20000938 	.word	0x20000938

08006d68 <_Balloc>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	69c6      	ldr	r6, [r0, #28]
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	460d      	mov	r5, r1
 8006d70:	b976      	cbnz	r6, 8006d90 <_Balloc+0x28>
 8006d72:	2010      	movs	r0, #16
 8006d74:	f7ff ff44 	bl	8006c00 <malloc>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	61e0      	str	r0, [r4, #28]
 8006d7c:	b920      	cbnz	r0, 8006d88 <_Balloc+0x20>
 8006d7e:	216b      	movs	r1, #107	; 0x6b
 8006d80:	4b17      	ldr	r3, [pc, #92]	; (8006de0 <_Balloc+0x78>)
 8006d82:	4818      	ldr	r0, [pc, #96]	; (8006de4 <_Balloc+0x7c>)
 8006d84:	f000 ff40 	bl	8007c08 <__assert_func>
 8006d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d8c:	6006      	str	r6, [r0, #0]
 8006d8e:	60c6      	str	r6, [r0, #12]
 8006d90:	69e6      	ldr	r6, [r4, #28]
 8006d92:	68f3      	ldr	r3, [r6, #12]
 8006d94:	b183      	cbz	r3, 8006db8 <_Balloc+0x50>
 8006d96:	69e3      	ldr	r3, [r4, #28]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d9e:	b9b8      	cbnz	r0, 8006dd0 <_Balloc+0x68>
 8006da0:	2101      	movs	r1, #1
 8006da2:	fa01 f605 	lsl.w	r6, r1, r5
 8006da6:	1d72      	adds	r2, r6, #5
 8006da8:	4620      	mov	r0, r4
 8006daa:	0092      	lsls	r2, r2, #2
 8006dac:	f000 ff4a 	bl	8007c44 <_calloc_r>
 8006db0:	b160      	cbz	r0, 8006dcc <_Balloc+0x64>
 8006db2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006db6:	e00e      	b.n	8006dd6 <_Balloc+0x6e>
 8006db8:	2221      	movs	r2, #33	; 0x21
 8006dba:	2104      	movs	r1, #4
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 ff41 	bl	8007c44 <_calloc_r>
 8006dc2:	69e3      	ldr	r3, [r4, #28]
 8006dc4:	60f0      	str	r0, [r6, #12]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e4      	bne.n	8006d96 <_Balloc+0x2e>
 8006dcc:	2000      	movs	r0, #0
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	6802      	ldr	r2, [r0, #0]
 8006dd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ddc:	e7f7      	b.n	8006dce <_Balloc+0x66>
 8006dde:	bf00      	nop
 8006de0:	080086b7 	.word	0x080086b7
 8006de4:	08008737 	.word	0x08008737

08006de8 <_Bfree>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	69c6      	ldr	r6, [r0, #28]
 8006dec:	4605      	mov	r5, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	b976      	cbnz	r6, 8006e10 <_Bfree+0x28>
 8006df2:	2010      	movs	r0, #16
 8006df4:	f7ff ff04 	bl	8006c00 <malloc>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	61e8      	str	r0, [r5, #28]
 8006dfc:	b920      	cbnz	r0, 8006e08 <_Bfree+0x20>
 8006dfe:	218f      	movs	r1, #143	; 0x8f
 8006e00:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <_Bfree+0x3c>)
 8006e02:	4809      	ldr	r0, [pc, #36]	; (8006e28 <_Bfree+0x40>)
 8006e04:	f000 ff00 	bl	8007c08 <__assert_func>
 8006e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e0c:	6006      	str	r6, [r0, #0]
 8006e0e:	60c6      	str	r6, [r0, #12]
 8006e10:	b13c      	cbz	r4, 8006e22 <_Bfree+0x3a>
 8006e12:	69eb      	ldr	r3, [r5, #28]
 8006e14:	6862      	ldr	r2, [r4, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e1c:	6021      	str	r1, [r4, #0]
 8006e1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	080086b7 	.word	0x080086b7
 8006e28:	08008737 	.word	0x08008737

08006e2c <__multadd>:
 8006e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	4607      	mov	r7, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	461e      	mov	r6, r3
 8006e36:	2000      	movs	r0, #0
 8006e38:	690d      	ldr	r5, [r1, #16]
 8006e3a:	f101 0c14 	add.w	ip, r1, #20
 8006e3e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e42:	3001      	adds	r0, #1
 8006e44:	b299      	uxth	r1, r3
 8006e46:	fb02 6101 	mla	r1, r2, r1, r6
 8006e4a:	0c1e      	lsrs	r6, r3, #16
 8006e4c:	0c0b      	lsrs	r3, r1, #16
 8006e4e:	fb02 3306 	mla	r3, r2, r6, r3
 8006e52:	b289      	uxth	r1, r1
 8006e54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e58:	4285      	cmp	r5, r0
 8006e5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e5e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e62:	dcec      	bgt.n	8006e3e <__multadd+0x12>
 8006e64:	b30e      	cbz	r6, 8006eaa <__multadd+0x7e>
 8006e66:	68a3      	ldr	r3, [r4, #8]
 8006e68:	42ab      	cmp	r3, r5
 8006e6a:	dc19      	bgt.n	8006ea0 <__multadd+0x74>
 8006e6c:	6861      	ldr	r1, [r4, #4]
 8006e6e:	4638      	mov	r0, r7
 8006e70:	3101      	adds	r1, #1
 8006e72:	f7ff ff79 	bl	8006d68 <_Balloc>
 8006e76:	4680      	mov	r8, r0
 8006e78:	b928      	cbnz	r0, 8006e86 <__multadd+0x5a>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	21ba      	movs	r1, #186	; 0xba
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <__multadd+0x84>)
 8006e80:	480c      	ldr	r0, [pc, #48]	; (8006eb4 <__multadd+0x88>)
 8006e82:	f000 fec1 	bl	8007c08 <__assert_func>
 8006e86:	6922      	ldr	r2, [r4, #16]
 8006e88:	f104 010c 	add.w	r1, r4, #12
 8006e8c:	3202      	adds	r2, #2
 8006e8e:	0092      	lsls	r2, r2, #2
 8006e90:	300c      	adds	r0, #12
 8006e92:	f7fe fff0 	bl	8005e76 <memcpy>
 8006e96:	4621      	mov	r1, r4
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f7ff ffa5 	bl	8006de8 <_Bfree>
 8006e9e:	4644      	mov	r4, r8
 8006ea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	615e      	str	r6, [r3, #20]
 8006ea8:	6125      	str	r5, [r4, #16]
 8006eaa:	4620      	mov	r0, r4
 8006eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb0:	08008726 	.word	0x08008726
 8006eb4:	08008737 	.word	0x08008737

08006eb8 <__hi0bits>:
 8006eb8:	0c02      	lsrs	r2, r0, #16
 8006eba:	0412      	lsls	r2, r2, #16
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	b9ca      	cbnz	r2, 8006ef4 <__hi0bits+0x3c>
 8006ec0:	0403      	lsls	r3, r0, #16
 8006ec2:	2010      	movs	r0, #16
 8006ec4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ec8:	bf04      	itt	eq
 8006eca:	021b      	lsleq	r3, r3, #8
 8006ecc:	3008      	addeq	r0, #8
 8006ece:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ed2:	bf04      	itt	eq
 8006ed4:	011b      	lsleq	r3, r3, #4
 8006ed6:	3004      	addeq	r0, #4
 8006ed8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006edc:	bf04      	itt	eq
 8006ede:	009b      	lsleq	r3, r3, #2
 8006ee0:	3002      	addeq	r0, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	db05      	blt.n	8006ef2 <__hi0bits+0x3a>
 8006ee6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006eea:	f100 0001 	add.w	r0, r0, #1
 8006eee:	bf08      	it	eq
 8006ef0:	2020      	moveq	r0, #32
 8006ef2:	4770      	bx	lr
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	e7e5      	b.n	8006ec4 <__hi0bits+0xc>

08006ef8 <__lo0bits>:
 8006ef8:	6803      	ldr	r3, [r0, #0]
 8006efa:	4602      	mov	r2, r0
 8006efc:	f013 0007 	ands.w	r0, r3, #7
 8006f00:	d00b      	beq.n	8006f1a <__lo0bits+0x22>
 8006f02:	07d9      	lsls	r1, r3, #31
 8006f04:	d421      	bmi.n	8006f4a <__lo0bits+0x52>
 8006f06:	0798      	lsls	r0, r3, #30
 8006f08:	bf49      	itett	mi
 8006f0a:	085b      	lsrmi	r3, r3, #1
 8006f0c:	089b      	lsrpl	r3, r3, #2
 8006f0e:	2001      	movmi	r0, #1
 8006f10:	6013      	strmi	r3, [r2, #0]
 8006f12:	bf5c      	itt	pl
 8006f14:	2002      	movpl	r0, #2
 8006f16:	6013      	strpl	r3, [r2, #0]
 8006f18:	4770      	bx	lr
 8006f1a:	b299      	uxth	r1, r3
 8006f1c:	b909      	cbnz	r1, 8006f22 <__lo0bits+0x2a>
 8006f1e:	2010      	movs	r0, #16
 8006f20:	0c1b      	lsrs	r3, r3, #16
 8006f22:	b2d9      	uxtb	r1, r3
 8006f24:	b909      	cbnz	r1, 8006f2a <__lo0bits+0x32>
 8006f26:	3008      	adds	r0, #8
 8006f28:	0a1b      	lsrs	r3, r3, #8
 8006f2a:	0719      	lsls	r1, r3, #28
 8006f2c:	bf04      	itt	eq
 8006f2e:	091b      	lsreq	r3, r3, #4
 8006f30:	3004      	addeq	r0, #4
 8006f32:	0799      	lsls	r1, r3, #30
 8006f34:	bf04      	itt	eq
 8006f36:	089b      	lsreq	r3, r3, #2
 8006f38:	3002      	addeq	r0, #2
 8006f3a:	07d9      	lsls	r1, r3, #31
 8006f3c:	d403      	bmi.n	8006f46 <__lo0bits+0x4e>
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	f100 0001 	add.w	r0, r0, #1
 8006f44:	d003      	beq.n	8006f4e <__lo0bits+0x56>
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4770      	bx	lr
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	4770      	bx	lr
 8006f4e:	2020      	movs	r0, #32
 8006f50:	4770      	bx	lr
	...

08006f54 <__i2b>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	460c      	mov	r4, r1
 8006f58:	2101      	movs	r1, #1
 8006f5a:	f7ff ff05 	bl	8006d68 <_Balloc>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	b928      	cbnz	r0, 8006f6e <__i2b+0x1a>
 8006f62:	f240 1145 	movw	r1, #325	; 0x145
 8006f66:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <__i2b+0x24>)
 8006f68:	4804      	ldr	r0, [pc, #16]	; (8006f7c <__i2b+0x28>)
 8006f6a:	f000 fe4d 	bl	8007c08 <__assert_func>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	6144      	str	r4, [r0, #20]
 8006f72:	6103      	str	r3, [r0, #16]
 8006f74:	bd10      	pop	{r4, pc}
 8006f76:	bf00      	nop
 8006f78:	08008726 	.word	0x08008726
 8006f7c:	08008737 	.word	0x08008737

08006f80 <__multiply>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	4691      	mov	r9, r2
 8006f86:	690a      	ldr	r2, [r1, #16]
 8006f88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	bfbe      	ittt	lt
 8006f92:	460b      	movlt	r3, r1
 8006f94:	464c      	movlt	r4, r9
 8006f96:	4699      	movlt	r9, r3
 8006f98:	6927      	ldr	r7, [r4, #16]
 8006f9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	6861      	ldr	r1, [r4, #4]
 8006fa2:	eb07 060a 	add.w	r6, r7, sl
 8006fa6:	42b3      	cmp	r3, r6
 8006fa8:	b085      	sub	sp, #20
 8006faa:	bfb8      	it	lt
 8006fac:	3101      	addlt	r1, #1
 8006fae:	f7ff fedb 	bl	8006d68 <_Balloc>
 8006fb2:	b930      	cbnz	r0, 8006fc2 <__multiply+0x42>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006fba:	4b43      	ldr	r3, [pc, #268]	; (80070c8 <__multiply+0x148>)
 8006fbc:	4843      	ldr	r0, [pc, #268]	; (80070cc <__multiply+0x14c>)
 8006fbe:	f000 fe23 	bl	8007c08 <__assert_func>
 8006fc2:	f100 0514 	add.w	r5, r0, #20
 8006fc6:	462b      	mov	r3, r5
 8006fc8:	2200      	movs	r2, #0
 8006fca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fce:	4543      	cmp	r3, r8
 8006fd0:	d321      	bcc.n	8007016 <__multiply+0x96>
 8006fd2:	f104 0314 	add.w	r3, r4, #20
 8006fd6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fda:	f109 0314 	add.w	r3, r9, #20
 8006fde:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fe2:	9202      	str	r2, [sp, #8]
 8006fe4:	1b3a      	subs	r2, r7, r4
 8006fe6:	3a15      	subs	r2, #21
 8006fe8:	f022 0203 	bic.w	r2, r2, #3
 8006fec:	3204      	adds	r2, #4
 8006fee:	f104 0115 	add.w	r1, r4, #21
 8006ff2:	428f      	cmp	r7, r1
 8006ff4:	bf38      	it	cc
 8006ff6:	2204      	movcc	r2, #4
 8006ff8:	9201      	str	r2, [sp, #4]
 8006ffa:	9a02      	ldr	r2, [sp, #8]
 8006ffc:	9303      	str	r3, [sp, #12]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d80c      	bhi.n	800701c <__multiply+0x9c>
 8007002:	2e00      	cmp	r6, #0
 8007004:	dd03      	ble.n	800700e <__multiply+0x8e>
 8007006:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800700a:	2b00      	cmp	r3, #0
 800700c:	d05a      	beq.n	80070c4 <__multiply+0x144>
 800700e:	6106      	str	r6, [r0, #16]
 8007010:	b005      	add	sp, #20
 8007012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007016:	f843 2b04 	str.w	r2, [r3], #4
 800701a:	e7d8      	b.n	8006fce <__multiply+0x4e>
 800701c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007020:	f1ba 0f00 	cmp.w	sl, #0
 8007024:	d023      	beq.n	800706e <__multiply+0xee>
 8007026:	46a9      	mov	r9, r5
 8007028:	f04f 0c00 	mov.w	ip, #0
 800702c:	f104 0e14 	add.w	lr, r4, #20
 8007030:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007034:	f8d9 1000 	ldr.w	r1, [r9]
 8007038:	fa1f fb82 	uxth.w	fp, r2
 800703c:	b289      	uxth	r1, r1
 800703e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007042:	4461      	add	r1, ip
 8007044:	f8d9 c000 	ldr.w	ip, [r9]
 8007048:	0c12      	lsrs	r2, r2, #16
 800704a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800704e:	fb0a c202 	mla	r2, sl, r2, ip
 8007052:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007056:	b289      	uxth	r1, r1
 8007058:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800705c:	4577      	cmp	r7, lr
 800705e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007062:	f849 1b04 	str.w	r1, [r9], #4
 8007066:	d8e3      	bhi.n	8007030 <__multiply+0xb0>
 8007068:	9a01      	ldr	r2, [sp, #4]
 800706a:	f845 c002 	str.w	ip, [r5, r2]
 800706e:	9a03      	ldr	r2, [sp, #12]
 8007070:	3304      	adds	r3, #4
 8007072:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007076:	f1b9 0f00 	cmp.w	r9, #0
 800707a:	d021      	beq.n	80070c0 <__multiply+0x140>
 800707c:	46ae      	mov	lr, r5
 800707e:	f04f 0a00 	mov.w	sl, #0
 8007082:	6829      	ldr	r1, [r5, #0]
 8007084:	f104 0c14 	add.w	ip, r4, #20
 8007088:	f8bc b000 	ldrh.w	fp, [ip]
 800708c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007090:	b289      	uxth	r1, r1
 8007092:	fb09 220b 	mla	r2, r9, fp, r2
 8007096:	4452      	add	r2, sl
 8007098:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800709c:	f84e 1b04 	str.w	r1, [lr], #4
 80070a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070a8:	f8be 1000 	ldrh.w	r1, [lr]
 80070ac:	4567      	cmp	r7, ip
 80070ae:	fb09 110a 	mla	r1, r9, sl, r1
 80070b2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070ba:	d8e5      	bhi.n	8007088 <__multiply+0x108>
 80070bc:	9a01      	ldr	r2, [sp, #4]
 80070be:	50a9      	str	r1, [r5, r2]
 80070c0:	3504      	adds	r5, #4
 80070c2:	e79a      	b.n	8006ffa <__multiply+0x7a>
 80070c4:	3e01      	subs	r6, #1
 80070c6:	e79c      	b.n	8007002 <__multiply+0x82>
 80070c8:	08008726 	.word	0x08008726
 80070cc:	08008737 	.word	0x08008737

080070d0 <__pow5mult>:
 80070d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d4:	4615      	mov	r5, r2
 80070d6:	f012 0203 	ands.w	r2, r2, #3
 80070da:	4606      	mov	r6, r0
 80070dc:	460f      	mov	r7, r1
 80070de:	d007      	beq.n	80070f0 <__pow5mult+0x20>
 80070e0:	4c25      	ldr	r4, [pc, #148]	; (8007178 <__pow5mult+0xa8>)
 80070e2:	3a01      	subs	r2, #1
 80070e4:	2300      	movs	r3, #0
 80070e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070ea:	f7ff fe9f 	bl	8006e2c <__multadd>
 80070ee:	4607      	mov	r7, r0
 80070f0:	10ad      	asrs	r5, r5, #2
 80070f2:	d03d      	beq.n	8007170 <__pow5mult+0xa0>
 80070f4:	69f4      	ldr	r4, [r6, #28]
 80070f6:	b97c      	cbnz	r4, 8007118 <__pow5mult+0x48>
 80070f8:	2010      	movs	r0, #16
 80070fa:	f7ff fd81 	bl	8006c00 <malloc>
 80070fe:	4602      	mov	r2, r0
 8007100:	61f0      	str	r0, [r6, #28]
 8007102:	b928      	cbnz	r0, 8007110 <__pow5mult+0x40>
 8007104:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007108:	4b1c      	ldr	r3, [pc, #112]	; (800717c <__pow5mult+0xac>)
 800710a:	481d      	ldr	r0, [pc, #116]	; (8007180 <__pow5mult+0xb0>)
 800710c:	f000 fd7c 	bl	8007c08 <__assert_func>
 8007110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007114:	6004      	str	r4, [r0, #0]
 8007116:	60c4      	str	r4, [r0, #12]
 8007118:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800711c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007120:	b94c      	cbnz	r4, 8007136 <__pow5mult+0x66>
 8007122:	f240 2171 	movw	r1, #625	; 0x271
 8007126:	4630      	mov	r0, r6
 8007128:	f7ff ff14 	bl	8006f54 <__i2b>
 800712c:	2300      	movs	r3, #0
 800712e:	4604      	mov	r4, r0
 8007130:	f8c8 0008 	str.w	r0, [r8, #8]
 8007134:	6003      	str	r3, [r0, #0]
 8007136:	f04f 0900 	mov.w	r9, #0
 800713a:	07eb      	lsls	r3, r5, #31
 800713c:	d50a      	bpl.n	8007154 <__pow5mult+0x84>
 800713e:	4639      	mov	r1, r7
 8007140:	4622      	mov	r2, r4
 8007142:	4630      	mov	r0, r6
 8007144:	f7ff ff1c 	bl	8006f80 <__multiply>
 8007148:	4680      	mov	r8, r0
 800714a:	4639      	mov	r1, r7
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff fe4b 	bl	8006de8 <_Bfree>
 8007152:	4647      	mov	r7, r8
 8007154:	106d      	asrs	r5, r5, #1
 8007156:	d00b      	beq.n	8007170 <__pow5mult+0xa0>
 8007158:	6820      	ldr	r0, [r4, #0]
 800715a:	b938      	cbnz	r0, 800716c <__pow5mult+0x9c>
 800715c:	4622      	mov	r2, r4
 800715e:	4621      	mov	r1, r4
 8007160:	4630      	mov	r0, r6
 8007162:	f7ff ff0d 	bl	8006f80 <__multiply>
 8007166:	6020      	str	r0, [r4, #0]
 8007168:	f8c0 9000 	str.w	r9, [r0]
 800716c:	4604      	mov	r4, r0
 800716e:	e7e4      	b.n	800713a <__pow5mult+0x6a>
 8007170:	4638      	mov	r0, r7
 8007172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007176:	bf00      	nop
 8007178:	08008880 	.word	0x08008880
 800717c:	080086b7 	.word	0x080086b7
 8007180:	08008737 	.word	0x08008737

08007184 <__lshift>:
 8007184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007188:	460c      	mov	r4, r1
 800718a:	4607      	mov	r7, r0
 800718c:	4691      	mov	r9, r2
 800718e:	6923      	ldr	r3, [r4, #16]
 8007190:	6849      	ldr	r1, [r1, #4]
 8007192:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007196:	68a3      	ldr	r3, [r4, #8]
 8007198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800719c:	f108 0601 	add.w	r6, r8, #1
 80071a0:	42b3      	cmp	r3, r6
 80071a2:	db0b      	blt.n	80071bc <__lshift+0x38>
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff fddf 	bl	8006d68 <_Balloc>
 80071aa:	4605      	mov	r5, r0
 80071ac:	b948      	cbnz	r0, 80071c2 <__lshift+0x3e>
 80071ae:	4602      	mov	r2, r0
 80071b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071b4:	4b27      	ldr	r3, [pc, #156]	; (8007254 <__lshift+0xd0>)
 80071b6:	4828      	ldr	r0, [pc, #160]	; (8007258 <__lshift+0xd4>)
 80071b8:	f000 fd26 	bl	8007c08 <__assert_func>
 80071bc:	3101      	adds	r1, #1
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	e7ee      	b.n	80071a0 <__lshift+0x1c>
 80071c2:	2300      	movs	r3, #0
 80071c4:	f100 0114 	add.w	r1, r0, #20
 80071c8:	f100 0210 	add.w	r2, r0, #16
 80071cc:	4618      	mov	r0, r3
 80071ce:	4553      	cmp	r3, sl
 80071d0:	db33      	blt.n	800723a <__lshift+0xb6>
 80071d2:	6920      	ldr	r0, [r4, #16]
 80071d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071d8:	f104 0314 	add.w	r3, r4, #20
 80071dc:	f019 091f 	ands.w	r9, r9, #31
 80071e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80071e8:	d02b      	beq.n	8007242 <__lshift+0xbe>
 80071ea:	468a      	mov	sl, r1
 80071ec:	2200      	movs	r2, #0
 80071ee:	f1c9 0e20 	rsb	lr, r9, #32
 80071f2:	6818      	ldr	r0, [r3, #0]
 80071f4:	fa00 f009 	lsl.w	r0, r0, r9
 80071f8:	4310      	orrs	r0, r2
 80071fa:	f84a 0b04 	str.w	r0, [sl], #4
 80071fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007202:	459c      	cmp	ip, r3
 8007204:	fa22 f20e 	lsr.w	r2, r2, lr
 8007208:	d8f3      	bhi.n	80071f2 <__lshift+0x6e>
 800720a:	ebac 0304 	sub.w	r3, ip, r4
 800720e:	3b15      	subs	r3, #21
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	3304      	adds	r3, #4
 8007216:	f104 0015 	add.w	r0, r4, #21
 800721a:	4584      	cmp	ip, r0
 800721c:	bf38      	it	cc
 800721e:	2304      	movcc	r3, #4
 8007220:	50ca      	str	r2, [r1, r3]
 8007222:	b10a      	cbz	r2, 8007228 <__lshift+0xa4>
 8007224:	f108 0602 	add.w	r6, r8, #2
 8007228:	3e01      	subs	r6, #1
 800722a:	4638      	mov	r0, r7
 800722c:	4621      	mov	r1, r4
 800722e:	612e      	str	r6, [r5, #16]
 8007230:	f7ff fdda 	bl	8006de8 <_Bfree>
 8007234:	4628      	mov	r0, r5
 8007236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723a:	f842 0f04 	str.w	r0, [r2, #4]!
 800723e:	3301      	adds	r3, #1
 8007240:	e7c5      	b.n	80071ce <__lshift+0x4a>
 8007242:	3904      	subs	r1, #4
 8007244:	f853 2b04 	ldr.w	r2, [r3], #4
 8007248:	459c      	cmp	ip, r3
 800724a:	f841 2f04 	str.w	r2, [r1, #4]!
 800724e:	d8f9      	bhi.n	8007244 <__lshift+0xc0>
 8007250:	e7ea      	b.n	8007228 <__lshift+0xa4>
 8007252:	bf00      	nop
 8007254:	08008726 	.word	0x08008726
 8007258:	08008737 	.word	0x08008737

0800725c <__mcmp>:
 800725c:	4603      	mov	r3, r0
 800725e:	690a      	ldr	r2, [r1, #16]
 8007260:	6900      	ldr	r0, [r0, #16]
 8007262:	b530      	push	{r4, r5, lr}
 8007264:	1a80      	subs	r0, r0, r2
 8007266:	d10d      	bne.n	8007284 <__mcmp+0x28>
 8007268:	3314      	adds	r3, #20
 800726a:	3114      	adds	r1, #20
 800726c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800727c:	4295      	cmp	r5, r2
 800727e:	d002      	beq.n	8007286 <__mcmp+0x2a>
 8007280:	d304      	bcc.n	800728c <__mcmp+0x30>
 8007282:	2001      	movs	r0, #1
 8007284:	bd30      	pop	{r4, r5, pc}
 8007286:	42a3      	cmp	r3, r4
 8007288:	d3f4      	bcc.n	8007274 <__mcmp+0x18>
 800728a:	e7fb      	b.n	8007284 <__mcmp+0x28>
 800728c:	f04f 30ff 	mov.w	r0, #4294967295
 8007290:	e7f8      	b.n	8007284 <__mcmp+0x28>
	...

08007294 <__mdiff>:
 8007294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	460d      	mov	r5, r1
 800729a:	4607      	mov	r7, r0
 800729c:	4611      	mov	r1, r2
 800729e:	4628      	mov	r0, r5
 80072a0:	4614      	mov	r4, r2
 80072a2:	f7ff ffdb 	bl	800725c <__mcmp>
 80072a6:	1e06      	subs	r6, r0, #0
 80072a8:	d111      	bne.n	80072ce <__mdiff+0x3a>
 80072aa:	4631      	mov	r1, r6
 80072ac:	4638      	mov	r0, r7
 80072ae:	f7ff fd5b 	bl	8006d68 <_Balloc>
 80072b2:	4602      	mov	r2, r0
 80072b4:	b928      	cbnz	r0, 80072c2 <__mdiff+0x2e>
 80072b6:	f240 2137 	movw	r1, #567	; 0x237
 80072ba:	4b3a      	ldr	r3, [pc, #232]	; (80073a4 <__mdiff+0x110>)
 80072bc:	483a      	ldr	r0, [pc, #232]	; (80073a8 <__mdiff+0x114>)
 80072be:	f000 fca3 	bl	8007c08 <__assert_func>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80072c8:	4610      	mov	r0, r2
 80072ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	bfa4      	itt	ge
 80072d0:	4623      	movge	r3, r4
 80072d2:	462c      	movge	r4, r5
 80072d4:	4638      	mov	r0, r7
 80072d6:	6861      	ldr	r1, [r4, #4]
 80072d8:	bfa6      	itte	ge
 80072da:	461d      	movge	r5, r3
 80072dc:	2600      	movge	r6, #0
 80072de:	2601      	movlt	r6, #1
 80072e0:	f7ff fd42 	bl	8006d68 <_Balloc>
 80072e4:	4602      	mov	r2, r0
 80072e6:	b918      	cbnz	r0, 80072f0 <__mdiff+0x5c>
 80072e8:	f240 2145 	movw	r1, #581	; 0x245
 80072ec:	4b2d      	ldr	r3, [pc, #180]	; (80073a4 <__mdiff+0x110>)
 80072ee:	e7e5      	b.n	80072bc <__mdiff+0x28>
 80072f0:	f102 0814 	add.w	r8, r2, #20
 80072f4:	46c2      	mov	sl, r8
 80072f6:	f04f 0c00 	mov.w	ip, #0
 80072fa:	6927      	ldr	r7, [r4, #16]
 80072fc:	60c6      	str	r6, [r0, #12]
 80072fe:	692e      	ldr	r6, [r5, #16]
 8007300:	f104 0014 	add.w	r0, r4, #20
 8007304:	f105 0914 	add.w	r9, r5, #20
 8007308:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800730c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007310:	3410      	adds	r4, #16
 8007312:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007316:	f859 3b04 	ldr.w	r3, [r9], #4
 800731a:	fa1f f18b 	uxth.w	r1, fp
 800731e:	4461      	add	r1, ip
 8007320:	fa1f fc83 	uxth.w	ip, r3
 8007324:	0c1b      	lsrs	r3, r3, #16
 8007326:	eba1 010c 	sub.w	r1, r1, ip
 800732a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800732e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007332:	b289      	uxth	r1, r1
 8007334:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007338:	454e      	cmp	r6, r9
 800733a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800733e:	f84a 1b04 	str.w	r1, [sl], #4
 8007342:	d8e6      	bhi.n	8007312 <__mdiff+0x7e>
 8007344:	1b73      	subs	r3, r6, r5
 8007346:	3b15      	subs	r3, #21
 8007348:	f023 0303 	bic.w	r3, r3, #3
 800734c:	3515      	adds	r5, #21
 800734e:	3304      	adds	r3, #4
 8007350:	42ae      	cmp	r6, r5
 8007352:	bf38      	it	cc
 8007354:	2304      	movcc	r3, #4
 8007356:	4418      	add	r0, r3
 8007358:	4443      	add	r3, r8
 800735a:	461e      	mov	r6, r3
 800735c:	4605      	mov	r5, r0
 800735e:	4575      	cmp	r5, lr
 8007360:	d30e      	bcc.n	8007380 <__mdiff+0xec>
 8007362:	f10e 0103 	add.w	r1, lr, #3
 8007366:	1a09      	subs	r1, r1, r0
 8007368:	f021 0103 	bic.w	r1, r1, #3
 800736c:	3803      	subs	r0, #3
 800736e:	4586      	cmp	lr, r0
 8007370:	bf38      	it	cc
 8007372:	2100      	movcc	r1, #0
 8007374:	440b      	add	r3, r1
 8007376:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800737a:	b189      	cbz	r1, 80073a0 <__mdiff+0x10c>
 800737c:	6117      	str	r7, [r2, #16]
 800737e:	e7a3      	b.n	80072c8 <__mdiff+0x34>
 8007380:	f855 8b04 	ldr.w	r8, [r5], #4
 8007384:	fa1f f188 	uxth.w	r1, r8
 8007388:	4461      	add	r1, ip
 800738a:	140c      	asrs	r4, r1, #16
 800738c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007390:	b289      	uxth	r1, r1
 8007392:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007396:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800739a:	f846 1b04 	str.w	r1, [r6], #4
 800739e:	e7de      	b.n	800735e <__mdiff+0xca>
 80073a0:	3f01      	subs	r7, #1
 80073a2:	e7e8      	b.n	8007376 <__mdiff+0xe2>
 80073a4:	08008726 	.word	0x08008726
 80073a8:	08008737 	.word	0x08008737

080073ac <__d2b>:
 80073ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ae:	2101      	movs	r1, #1
 80073b0:	4617      	mov	r7, r2
 80073b2:	461c      	mov	r4, r3
 80073b4:	9e08      	ldr	r6, [sp, #32]
 80073b6:	f7ff fcd7 	bl	8006d68 <_Balloc>
 80073ba:	4605      	mov	r5, r0
 80073bc:	b930      	cbnz	r0, 80073cc <__d2b+0x20>
 80073be:	4602      	mov	r2, r0
 80073c0:	f240 310f 	movw	r1, #783	; 0x30f
 80073c4:	4b22      	ldr	r3, [pc, #136]	; (8007450 <__d2b+0xa4>)
 80073c6:	4823      	ldr	r0, [pc, #140]	; (8007454 <__d2b+0xa8>)
 80073c8:	f000 fc1e 	bl	8007c08 <__assert_func>
 80073cc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80073d0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80073d4:	bb24      	cbnz	r4, 8007420 <__d2b+0x74>
 80073d6:	2f00      	cmp	r7, #0
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	d026      	beq.n	800742a <__d2b+0x7e>
 80073dc:	4668      	mov	r0, sp
 80073de:	9700      	str	r7, [sp, #0]
 80073e0:	f7ff fd8a 	bl	8006ef8 <__lo0bits>
 80073e4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073e8:	b1e8      	cbz	r0, 8007426 <__d2b+0x7a>
 80073ea:	f1c0 0320 	rsb	r3, r0, #32
 80073ee:	fa02 f303 	lsl.w	r3, r2, r3
 80073f2:	430b      	orrs	r3, r1
 80073f4:	40c2      	lsrs	r2, r0
 80073f6:	616b      	str	r3, [r5, #20]
 80073f8:	9201      	str	r2, [sp, #4]
 80073fa:	9b01      	ldr	r3, [sp, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bf14      	ite	ne
 8007400:	2102      	movne	r1, #2
 8007402:	2101      	moveq	r1, #1
 8007404:	61ab      	str	r3, [r5, #24]
 8007406:	6129      	str	r1, [r5, #16]
 8007408:	b1bc      	cbz	r4, 800743a <__d2b+0x8e>
 800740a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800740e:	4404      	add	r4, r0
 8007410:	6034      	str	r4, [r6, #0]
 8007412:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007418:	6018      	str	r0, [r3, #0]
 800741a:	4628      	mov	r0, r5
 800741c:	b003      	add	sp, #12
 800741e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007420:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007424:	e7d7      	b.n	80073d6 <__d2b+0x2a>
 8007426:	6169      	str	r1, [r5, #20]
 8007428:	e7e7      	b.n	80073fa <__d2b+0x4e>
 800742a:	a801      	add	r0, sp, #4
 800742c:	f7ff fd64 	bl	8006ef8 <__lo0bits>
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	2101      	movs	r1, #1
 8007434:	616b      	str	r3, [r5, #20]
 8007436:	3020      	adds	r0, #32
 8007438:	e7e5      	b.n	8007406 <__d2b+0x5a>
 800743a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800743e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007442:	6030      	str	r0, [r6, #0]
 8007444:	6918      	ldr	r0, [r3, #16]
 8007446:	f7ff fd37 	bl	8006eb8 <__hi0bits>
 800744a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800744e:	e7e2      	b.n	8007416 <__d2b+0x6a>
 8007450:	08008726 	.word	0x08008726
 8007454:	08008737 	.word	0x08008737

08007458 <__ssputs_r>:
 8007458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	461f      	mov	r7, r3
 800745e:	688e      	ldr	r6, [r1, #8]
 8007460:	4682      	mov	sl, r0
 8007462:	42be      	cmp	r6, r7
 8007464:	460c      	mov	r4, r1
 8007466:	4690      	mov	r8, r2
 8007468:	680b      	ldr	r3, [r1, #0]
 800746a:	d82c      	bhi.n	80074c6 <__ssputs_r+0x6e>
 800746c:	898a      	ldrh	r2, [r1, #12]
 800746e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007472:	d026      	beq.n	80074c2 <__ssputs_r+0x6a>
 8007474:	6965      	ldr	r5, [r4, #20]
 8007476:	6909      	ldr	r1, [r1, #16]
 8007478:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800747c:	eba3 0901 	sub.w	r9, r3, r1
 8007480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007484:	1c7b      	adds	r3, r7, #1
 8007486:	444b      	add	r3, r9
 8007488:	106d      	asrs	r5, r5, #1
 800748a:	429d      	cmp	r5, r3
 800748c:	bf38      	it	cc
 800748e:	461d      	movcc	r5, r3
 8007490:	0553      	lsls	r3, r2, #21
 8007492:	d527      	bpl.n	80074e4 <__ssputs_r+0x8c>
 8007494:	4629      	mov	r1, r5
 8007496:	f7ff fbdb 	bl	8006c50 <_malloc_r>
 800749a:	4606      	mov	r6, r0
 800749c:	b360      	cbz	r0, 80074f8 <__ssputs_r+0xa0>
 800749e:	464a      	mov	r2, r9
 80074a0:	6921      	ldr	r1, [r4, #16]
 80074a2:	f7fe fce8 	bl	8005e76 <memcpy>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	6126      	str	r6, [r4, #16]
 80074b4:	444e      	add	r6, r9
 80074b6:	6026      	str	r6, [r4, #0]
 80074b8:	463e      	mov	r6, r7
 80074ba:	6165      	str	r5, [r4, #20]
 80074bc:	eba5 0509 	sub.w	r5, r5, r9
 80074c0:	60a5      	str	r5, [r4, #8]
 80074c2:	42be      	cmp	r6, r7
 80074c4:	d900      	bls.n	80074c8 <__ssputs_r+0x70>
 80074c6:	463e      	mov	r6, r7
 80074c8:	4632      	mov	r2, r6
 80074ca:	4641      	mov	r1, r8
 80074cc:	6820      	ldr	r0, [r4, #0]
 80074ce:	f7fe fc2b 	bl	8005d28 <memmove>
 80074d2:	2000      	movs	r0, #0
 80074d4:	68a3      	ldr	r3, [r4, #8]
 80074d6:	1b9b      	subs	r3, r3, r6
 80074d8:	60a3      	str	r3, [r4, #8]
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	4433      	add	r3, r6
 80074de:	6023      	str	r3, [r4, #0]
 80074e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e4:	462a      	mov	r2, r5
 80074e6:	f000 fbd3 	bl	8007c90 <_realloc_r>
 80074ea:	4606      	mov	r6, r0
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d1e0      	bne.n	80074b2 <__ssputs_r+0x5a>
 80074f0:	4650      	mov	r0, sl
 80074f2:	6921      	ldr	r1, [r4, #16]
 80074f4:	f7ff fb3c 	bl	8006b70 <_free_r>
 80074f8:	230c      	movs	r3, #12
 80074fa:	f8ca 3000 	str.w	r3, [sl]
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	f04f 30ff 	mov.w	r0, #4294967295
 8007504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	e7e9      	b.n	80074e0 <__ssputs_r+0x88>

0800750c <_svfiprintf_r>:
 800750c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	4698      	mov	r8, r3
 8007512:	898b      	ldrh	r3, [r1, #12]
 8007514:	4607      	mov	r7, r0
 8007516:	061b      	lsls	r3, r3, #24
 8007518:	460d      	mov	r5, r1
 800751a:	4614      	mov	r4, r2
 800751c:	b09d      	sub	sp, #116	; 0x74
 800751e:	d50e      	bpl.n	800753e <_svfiprintf_r+0x32>
 8007520:	690b      	ldr	r3, [r1, #16]
 8007522:	b963      	cbnz	r3, 800753e <_svfiprintf_r+0x32>
 8007524:	2140      	movs	r1, #64	; 0x40
 8007526:	f7ff fb93 	bl	8006c50 <_malloc_r>
 800752a:	6028      	str	r0, [r5, #0]
 800752c:	6128      	str	r0, [r5, #16]
 800752e:	b920      	cbnz	r0, 800753a <_svfiprintf_r+0x2e>
 8007530:	230c      	movs	r3, #12
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	e0d0      	b.n	80076dc <_svfiprintf_r+0x1d0>
 800753a:	2340      	movs	r3, #64	; 0x40
 800753c:	616b      	str	r3, [r5, #20]
 800753e:	2300      	movs	r3, #0
 8007540:	9309      	str	r3, [sp, #36]	; 0x24
 8007542:	2320      	movs	r3, #32
 8007544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007548:	2330      	movs	r3, #48	; 0x30
 800754a:	f04f 0901 	mov.w	r9, #1
 800754e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007552:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80076f4 <_svfiprintf_r+0x1e8>
 8007556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800755a:	4623      	mov	r3, r4
 800755c:	469a      	mov	sl, r3
 800755e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007562:	b10a      	cbz	r2, 8007568 <_svfiprintf_r+0x5c>
 8007564:	2a25      	cmp	r2, #37	; 0x25
 8007566:	d1f9      	bne.n	800755c <_svfiprintf_r+0x50>
 8007568:	ebba 0b04 	subs.w	fp, sl, r4
 800756c:	d00b      	beq.n	8007586 <_svfiprintf_r+0x7a>
 800756e:	465b      	mov	r3, fp
 8007570:	4622      	mov	r2, r4
 8007572:	4629      	mov	r1, r5
 8007574:	4638      	mov	r0, r7
 8007576:	f7ff ff6f 	bl	8007458 <__ssputs_r>
 800757a:	3001      	adds	r0, #1
 800757c:	f000 80a9 	beq.w	80076d2 <_svfiprintf_r+0x1c6>
 8007580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007582:	445a      	add	r2, fp
 8007584:	9209      	str	r2, [sp, #36]	; 0x24
 8007586:	f89a 3000 	ldrb.w	r3, [sl]
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 80a1 	beq.w	80076d2 <_svfiprintf_r+0x1c6>
 8007590:	2300      	movs	r3, #0
 8007592:	f04f 32ff 	mov.w	r2, #4294967295
 8007596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800759a:	f10a 0a01 	add.w	sl, sl, #1
 800759e:	9304      	str	r3, [sp, #16]
 80075a0:	9307      	str	r3, [sp, #28]
 80075a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075a6:	931a      	str	r3, [sp, #104]	; 0x68
 80075a8:	4654      	mov	r4, sl
 80075aa:	2205      	movs	r2, #5
 80075ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b0:	4850      	ldr	r0, [pc, #320]	; (80076f4 <_svfiprintf_r+0x1e8>)
 80075b2:	f7fe fc52 	bl	8005e5a <memchr>
 80075b6:	9a04      	ldr	r2, [sp, #16]
 80075b8:	b9d8      	cbnz	r0, 80075f2 <_svfiprintf_r+0xe6>
 80075ba:	06d0      	lsls	r0, r2, #27
 80075bc:	bf44      	itt	mi
 80075be:	2320      	movmi	r3, #32
 80075c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c4:	0711      	lsls	r1, r2, #28
 80075c6:	bf44      	itt	mi
 80075c8:	232b      	movmi	r3, #43	; 0x2b
 80075ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ce:	f89a 3000 	ldrb.w	r3, [sl]
 80075d2:	2b2a      	cmp	r3, #42	; 0x2a
 80075d4:	d015      	beq.n	8007602 <_svfiprintf_r+0xf6>
 80075d6:	4654      	mov	r4, sl
 80075d8:	2000      	movs	r0, #0
 80075da:	f04f 0c0a 	mov.w	ip, #10
 80075de:	9a07      	ldr	r2, [sp, #28]
 80075e0:	4621      	mov	r1, r4
 80075e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e6:	3b30      	subs	r3, #48	; 0x30
 80075e8:	2b09      	cmp	r3, #9
 80075ea:	d94d      	bls.n	8007688 <_svfiprintf_r+0x17c>
 80075ec:	b1b0      	cbz	r0, 800761c <_svfiprintf_r+0x110>
 80075ee:	9207      	str	r2, [sp, #28]
 80075f0:	e014      	b.n	800761c <_svfiprintf_r+0x110>
 80075f2:	eba0 0308 	sub.w	r3, r0, r8
 80075f6:	fa09 f303 	lsl.w	r3, r9, r3
 80075fa:	4313      	orrs	r3, r2
 80075fc:	46a2      	mov	sl, r4
 80075fe:	9304      	str	r3, [sp, #16]
 8007600:	e7d2      	b.n	80075a8 <_svfiprintf_r+0x9c>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	1d19      	adds	r1, r3, #4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	9103      	str	r1, [sp, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	bfbb      	ittet	lt
 800760e:	425b      	neglt	r3, r3
 8007610:	f042 0202 	orrlt.w	r2, r2, #2
 8007614:	9307      	strge	r3, [sp, #28]
 8007616:	9307      	strlt	r3, [sp, #28]
 8007618:	bfb8      	it	lt
 800761a:	9204      	strlt	r2, [sp, #16]
 800761c:	7823      	ldrb	r3, [r4, #0]
 800761e:	2b2e      	cmp	r3, #46	; 0x2e
 8007620:	d10c      	bne.n	800763c <_svfiprintf_r+0x130>
 8007622:	7863      	ldrb	r3, [r4, #1]
 8007624:	2b2a      	cmp	r3, #42	; 0x2a
 8007626:	d134      	bne.n	8007692 <_svfiprintf_r+0x186>
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	3402      	adds	r4, #2
 800762c:	1d1a      	adds	r2, r3, #4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	9203      	str	r2, [sp, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	bfb8      	it	lt
 8007636:	f04f 33ff 	movlt.w	r3, #4294967295
 800763a:	9305      	str	r3, [sp, #20]
 800763c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80076f8 <_svfiprintf_r+0x1ec>
 8007640:	2203      	movs	r2, #3
 8007642:	4650      	mov	r0, sl
 8007644:	7821      	ldrb	r1, [r4, #0]
 8007646:	f7fe fc08 	bl	8005e5a <memchr>
 800764a:	b138      	cbz	r0, 800765c <_svfiprintf_r+0x150>
 800764c:	2240      	movs	r2, #64	; 0x40
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	eba0 000a 	sub.w	r0, r0, sl
 8007654:	4082      	lsls	r2, r0
 8007656:	4313      	orrs	r3, r2
 8007658:	3401      	adds	r4, #1
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007660:	2206      	movs	r2, #6
 8007662:	4826      	ldr	r0, [pc, #152]	; (80076fc <_svfiprintf_r+0x1f0>)
 8007664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007668:	f7fe fbf7 	bl	8005e5a <memchr>
 800766c:	2800      	cmp	r0, #0
 800766e:	d038      	beq.n	80076e2 <_svfiprintf_r+0x1d6>
 8007670:	4b23      	ldr	r3, [pc, #140]	; (8007700 <_svfiprintf_r+0x1f4>)
 8007672:	bb1b      	cbnz	r3, 80076bc <_svfiprintf_r+0x1b0>
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	3307      	adds	r3, #7
 8007678:	f023 0307 	bic.w	r3, r3, #7
 800767c:	3308      	adds	r3, #8
 800767e:	9303      	str	r3, [sp, #12]
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	4433      	add	r3, r6
 8007684:	9309      	str	r3, [sp, #36]	; 0x24
 8007686:	e768      	b.n	800755a <_svfiprintf_r+0x4e>
 8007688:	460c      	mov	r4, r1
 800768a:	2001      	movs	r0, #1
 800768c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007690:	e7a6      	b.n	80075e0 <_svfiprintf_r+0xd4>
 8007692:	2300      	movs	r3, #0
 8007694:	f04f 0c0a 	mov.w	ip, #10
 8007698:	4619      	mov	r1, r3
 800769a:	3401      	adds	r4, #1
 800769c:	9305      	str	r3, [sp, #20]
 800769e:	4620      	mov	r0, r4
 80076a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076a4:	3a30      	subs	r2, #48	; 0x30
 80076a6:	2a09      	cmp	r2, #9
 80076a8:	d903      	bls.n	80076b2 <_svfiprintf_r+0x1a6>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0c6      	beq.n	800763c <_svfiprintf_r+0x130>
 80076ae:	9105      	str	r1, [sp, #20]
 80076b0:	e7c4      	b.n	800763c <_svfiprintf_r+0x130>
 80076b2:	4604      	mov	r4, r0
 80076b4:	2301      	movs	r3, #1
 80076b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ba:	e7f0      	b.n	800769e <_svfiprintf_r+0x192>
 80076bc:	ab03      	add	r3, sp, #12
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	462a      	mov	r2, r5
 80076c2:	4638      	mov	r0, r7
 80076c4:	4b0f      	ldr	r3, [pc, #60]	; (8007704 <_svfiprintf_r+0x1f8>)
 80076c6:	a904      	add	r1, sp, #16
 80076c8:	f7fd fd44 	bl	8005154 <_printf_float>
 80076cc:	1c42      	adds	r2, r0, #1
 80076ce:	4606      	mov	r6, r0
 80076d0:	d1d6      	bne.n	8007680 <_svfiprintf_r+0x174>
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	065b      	lsls	r3, r3, #25
 80076d6:	f53f af2d 	bmi.w	8007534 <_svfiprintf_r+0x28>
 80076da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076dc:	b01d      	add	sp, #116	; 0x74
 80076de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e2:	ab03      	add	r3, sp, #12
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	462a      	mov	r2, r5
 80076e8:	4638      	mov	r0, r7
 80076ea:	4b06      	ldr	r3, [pc, #24]	; (8007704 <_svfiprintf_r+0x1f8>)
 80076ec:	a904      	add	r1, sp, #16
 80076ee:	f7fd ffd1 	bl	8005694 <_printf_i>
 80076f2:	e7eb      	b.n	80076cc <_svfiprintf_r+0x1c0>
 80076f4:	0800888c 	.word	0x0800888c
 80076f8:	08008892 	.word	0x08008892
 80076fc:	08008896 	.word	0x08008896
 8007700:	08005155 	.word	0x08005155
 8007704:	08007459 	.word	0x08007459

08007708 <__sfputc_r>:
 8007708:	6893      	ldr	r3, [r2, #8]
 800770a:	b410      	push	{r4}
 800770c:	3b01      	subs	r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	6093      	str	r3, [r2, #8]
 8007712:	da07      	bge.n	8007724 <__sfputc_r+0x1c>
 8007714:	6994      	ldr	r4, [r2, #24]
 8007716:	42a3      	cmp	r3, r4
 8007718:	db01      	blt.n	800771e <__sfputc_r+0x16>
 800771a:	290a      	cmp	r1, #10
 800771c:	d102      	bne.n	8007724 <__sfputc_r+0x1c>
 800771e:	bc10      	pop	{r4}
 8007720:	f7fe ba6d 	b.w	8005bfe <__swbuf_r>
 8007724:	6813      	ldr	r3, [r2, #0]
 8007726:	1c58      	adds	r0, r3, #1
 8007728:	6010      	str	r0, [r2, #0]
 800772a:	7019      	strb	r1, [r3, #0]
 800772c:	4608      	mov	r0, r1
 800772e:	bc10      	pop	{r4}
 8007730:	4770      	bx	lr

08007732 <__sfputs_r>:
 8007732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007734:	4606      	mov	r6, r0
 8007736:	460f      	mov	r7, r1
 8007738:	4614      	mov	r4, r2
 800773a:	18d5      	adds	r5, r2, r3
 800773c:	42ac      	cmp	r4, r5
 800773e:	d101      	bne.n	8007744 <__sfputs_r+0x12>
 8007740:	2000      	movs	r0, #0
 8007742:	e007      	b.n	8007754 <__sfputs_r+0x22>
 8007744:	463a      	mov	r2, r7
 8007746:	4630      	mov	r0, r6
 8007748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800774c:	f7ff ffdc 	bl	8007708 <__sfputc_r>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d1f3      	bne.n	800773c <__sfputs_r+0xa>
 8007754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007758 <_vfiprintf_r>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	460d      	mov	r5, r1
 800775e:	4614      	mov	r4, r2
 8007760:	4698      	mov	r8, r3
 8007762:	4606      	mov	r6, r0
 8007764:	b09d      	sub	sp, #116	; 0x74
 8007766:	b118      	cbz	r0, 8007770 <_vfiprintf_r+0x18>
 8007768:	6a03      	ldr	r3, [r0, #32]
 800776a:	b90b      	cbnz	r3, 8007770 <_vfiprintf_r+0x18>
 800776c:	f7fe f940 	bl	80059f0 <__sinit>
 8007770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007772:	07d9      	lsls	r1, r3, #31
 8007774:	d405      	bmi.n	8007782 <_vfiprintf_r+0x2a>
 8007776:	89ab      	ldrh	r3, [r5, #12]
 8007778:	059a      	lsls	r2, r3, #22
 800777a:	d402      	bmi.n	8007782 <_vfiprintf_r+0x2a>
 800777c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777e:	f7fe fb6a 	bl	8005e56 <__retarget_lock_acquire_recursive>
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	071b      	lsls	r3, r3, #28
 8007786:	d501      	bpl.n	800778c <_vfiprintf_r+0x34>
 8007788:	692b      	ldr	r3, [r5, #16]
 800778a:	b99b      	cbnz	r3, 80077b4 <_vfiprintf_r+0x5c>
 800778c:	4629      	mov	r1, r5
 800778e:	4630      	mov	r0, r6
 8007790:	f7fe fa72 	bl	8005c78 <__swsetup_r>
 8007794:	b170      	cbz	r0, 80077b4 <_vfiprintf_r+0x5c>
 8007796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007798:	07dc      	lsls	r4, r3, #31
 800779a:	d504      	bpl.n	80077a6 <_vfiprintf_r+0x4e>
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	b01d      	add	sp, #116	; 0x74
 80077a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a6:	89ab      	ldrh	r3, [r5, #12]
 80077a8:	0598      	lsls	r0, r3, #22
 80077aa:	d4f7      	bmi.n	800779c <_vfiprintf_r+0x44>
 80077ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ae:	f7fe fb53 	bl	8005e58 <__retarget_lock_release_recursive>
 80077b2:	e7f3      	b.n	800779c <_vfiprintf_r+0x44>
 80077b4:	2300      	movs	r3, #0
 80077b6:	9309      	str	r3, [sp, #36]	; 0x24
 80077b8:	2320      	movs	r3, #32
 80077ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077be:	2330      	movs	r3, #48	; 0x30
 80077c0:	f04f 0901 	mov.w	r9, #1
 80077c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80077c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007978 <_vfiprintf_r+0x220>
 80077cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077d0:	4623      	mov	r3, r4
 80077d2:	469a      	mov	sl, r3
 80077d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d8:	b10a      	cbz	r2, 80077de <_vfiprintf_r+0x86>
 80077da:	2a25      	cmp	r2, #37	; 0x25
 80077dc:	d1f9      	bne.n	80077d2 <_vfiprintf_r+0x7a>
 80077de:	ebba 0b04 	subs.w	fp, sl, r4
 80077e2:	d00b      	beq.n	80077fc <_vfiprintf_r+0xa4>
 80077e4:	465b      	mov	r3, fp
 80077e6:	4622      	mov	r2, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7ff ffa1 	bl	8007732 <__sfputs_r>
 80077f0:	3001      	adds	r0, #1
 80077f2:	f000 80a9 	beq.w	8007948 <_vfiprintf_r+0x1f0>
 80077f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f8:	445a      	add	r2, fp
 80077fa:	9209      	str	r2, [sp, #36]	; 0x24
 80077fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80a1 	beq.w	8007948 <_vfiprintf_r+0x1f0>
 8007806:	2300      	movs	r3, #0
 8007808:	f04f 32ff 	mov.w	r2, #4294967295
 800780c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007810:	f10a 0a01 	add.w	sl, sl, #1
 8007814:	9304      	str	r3, [sp, #16]
 8007816:	9307      	str	r3, [sp, #28]
 8007818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800781c:	931a      	str	r3, [sp, #104]	; 0x68
 800781e:	4654      	mov	r4, sl
 8007820:	2205      	movs	r2, #5
 8007822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007826:	4854      	ldr	r0, [pc, #336]	; (8007978 <_vfiprintf_r+0x220>)
 8007828:	f7fe fb17 	bl	8005e5a <memchr>
 800782c:	9a04      	ldr	r2, [sp, #16]
 800782e:	b9d8      	cbnz	r0, 8007868 <_vfiprintf_r+0x110>
 8007830:	06d1      	lsls	r1, r2, #27
 8007832:	bf44      	itt	mi
 8007834:	2320      	movmi	r3, #32
 8007836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800783a:	0713      	lsls	r3, r2, #28
 800783c:	bf44      	itt	mi
 800783e:	232b      	movmi	r3, #43	; 0x2b
 8007840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007844:	f89a 3000 	ldrb.w	r3, [sl]
 8007848:	2b2a      	cmp	r3, #42	; 0x2a
 800784a:	d015      	beq.n	8007878 <_vfiprintf_r+0x120>
 800784c:	4654      	mov	r4, sl
 800784e:	2000      	movs	r0, #0
 8007850:	f04f 0c0a 	mov.w	ip, #10
 8007854:	9a07      	ldr	r2, [sp, #28]
 8007856:	4621      	mov	r1, r4
 8007858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800785c:	3b30      	subs	r3, #48	; 0x30
 800785e:	2b09      	cmp	r3, #9
 8007860:	d94d      	bls.n	80078fe <_vfiprintf_r+0x1a6>
 8007862:	b1b0      	cbz	r0, 8007892 <_vfiprintf_r+0x13a>
 8007864:	9207      	str	r2, [sp, #28]
 8007866:	e014      	b.n	8007892 <_vfiprintf_r+0x13a>
 8007868:	eba0 0308 	sub.w	r3, r0, r8
 800786c:	fa09 f303 	lsl.w	r3, r9, r3
 8007870:	4313      	orrs	r3, r2
 8007872:	46a2      	mov	sl, r4
 8007874:	9304      	str	r3, [sp, #16]
 8007876:	e7d2      	b.n	800781e <_vfiprintf_r+0xc6>
 8007878:	9b03      	ldr	r3, [sp, #12]
 800787a:	1d19      	adds	r1, r3, #4
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	9103      	str	r1, [sp, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	bfbb      	ittet	lt
 8007884:	425b      	neglt	r3, r3
 8007886:	f042 0202 	orrlt.w	r2, r2, #2
 800788a:	9307      	strge	r3, [sp, #28]
 800788c:	9307      	strlt	r3, [sp, #28]
 800788e:	bfb8      	it	lt
 8007890:	9204      	strlt	r2, [sp, #16]
 8007892:	7823      	ldrb	r3, [r4, #0]
 8007894:	2b2e      	cmp	r3, #46	; 0x2e
 8007896:	d10c      	bne.n	80078b2 <_vfiprintf_r+0x15a>
 8007898:	7863      	ldrb	r3, [r4, #1]
 800789a:	2b2a      	cmp	r3, #42	; 0x2a
 800789c:	d134      	bne.n	8007908 <_vfiprintf_r+0x1b0>
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	3402      	adds	r4, #2
 80078a2:	1d1a      	adds	r2, r3, #4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	9203      	str	r2, [sp, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bfb8      	it	lt
 80078ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80078b0:	9305      	str	r3, [sp, #20]
 80078b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800797c <_vfiprintf_r+0x224>
 80078b6:	2203      	movs	r2, #3
 80078b8:	4650      	mov	r0, sl
 80078ba:	7821      	ldrb	r1, [r4, #0]
 80078bc:	f7fe facd 	bl	8005e5a <memchr>
 80078c0:	b138      	cbz	r0, 80078d2 <_vfiprintf_r+0x17a>
 80078c2:	2240      	movs	r2, #64	; 0x40
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	eba0 000a 	sub.w	r0, r0, sl
 80078ca:	4082      	lsls	r2, r0
 80078cc:	4313      	orrs	r3, r2
 80078ce:	3401      	adds	r4, #1
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d6:	2206      	movs	r2, #6
 80078d8:	4829      	ldr	r0, [pc, #164]	; (8007980 <_vfiprintf_r+0x228>)
 80078da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078de:	f7fe fabc 	bl	8005e5a <memchr>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d03f      	beq.n	8007966 <_vfiprintf_r+0x20e>
 80078e6:	4b27      	ldr	r3, [pc, #156]	; (8007984 <_vfiprintf_r+0x22c>)
 80078e8:	bb1b      	cbnz	r3, 8007932 <_vfiprintf_r+0x1da>
 80078ea:	9b03      	ldr	r3, [sp, #12]
 80078ec:	3307      	adds	r3, #7
 80078ee:	f023 0307 	bic.w	r3, r3, #7
 80078f2:	3308      	adds	r3, #8
 80078f4:	9303      	str	r3, [sp, #12]
 80078f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f8:	443b      	add	r3, r7
 80078fa:	9309      	str	r3, [sp, #36]	; 0x24
 80078fc:	e768      	b.n	80077d0 <_vfiprintf_r+0x78>
 80078fe:	460c      	mov	r4, r1
 8007900:	2001      	movs	r0, #1
 8007902:	fb0c 3202 	mla	r2, ip, r2, r3
 8007906:	e7a6      	b.n	8007856 <_vfiprintf_r+0xfe>
 8007908:	2300      	movs	r3, #0
 800790a:	f04f 0c0a 	mov.w	ip, #10
 800790e:	4619      	mov	r1, r3
 8007910:	3401      	adds	r4, #1
 8007912:	9305      	str	r3, [sp, #20]
 8007914:	4620      	mov	r0, r4
 8007916:	f810 2b01 	ldrb.w	r2, [r0], #1
 800791a:	3a30      	subs	r2, #48	; 0x30
 800791c:	2a09      	cmp	r2, #9
 800791e:	d903      	bls.n	8007928 <_vfiprintf_r+0x1d0>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0c6      	beq.n	80078b2 <_vfiprintf_r+0x15a>
 8007924:	9105      	str	r1, [sp, #20]
 8007926:	e7c4      	b.n	80078b2 <_vfiprintf_r+0x15a>
 8007928:	4604      	mov	r4, r0
 800792a:	2301      	movs	r3, #1
 800792c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007930:	e7f0      	b.n	8007914 <_vfiprintf_r+0x1bc>
 8007932:	ab03      	add	r3, sp, #12
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	462a      	mov	r2, r5
 8007938:	4630      	mov	r0, r6
 800793a:	4b13      	ldr	r3, [pc, #76]	; (8007988 <_vfiprintf_r+0x230>)
 800793c:	a904      	add	r1, sp, #16
 800793e:	f7fd fc09 	bl	8005154 <_printf_float>
 8007942:	4607      	mov	r7, r0
 8007944:	1c78      	adds	r0, r7, #1
 8007946:	d1d6      	bne.n	80078f6 <_vfiprintf_r+0x19e>
 8007948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800794a:	07d9      	lsls	r1, r3, #31
 800794c:	d405      	bmi.n	800795a <_vfiprintf_r+0x202>
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	059a      	lsls	r2, r3, #22
 8007952:	d402      	bmi.n	800795a <_vfiprintf_r+0x202>
 8007954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007956:	f7fe fa7f 	bl	8005e58 <__retarget_lock_release_recursive>
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	065b      	lsls	r3, r3, #25
 800795e:	f53f af1d 	bmi.w	800779c <_vfiprintf_r+0x44>
 8007962:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007964:	e71c      	b.n	80077a0 <_vfiprintf_r+0x48>
 8007966:	ab03      	add	r3, sp, #12
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	462a      	mov	r2, r5
 800796c:	4630      	mov	r0, r6
 800796e:	4b06      	ldr	r3, [pc, #24]	; (8007988 <_vfiprintf_r+0x230>)
 8007970:	a904      	add	r1, sp, #16
 8007972:	f7fd fe8f 	bl	8005694 <_printf_i>
 8007976:	e7e4      	b.n	8007942 <_vfiprintf_r+0x1ea>
 8007978:	0800888c 	.word	0x0800888c
 800797c:	08008892 	.word	0x08008892
 8007980:	08008896 	.word	0x08008896
 8007984:	08005155 	.word	0x08005155
 8007988:	08007733 	.word	0x08007733

0800798c <__sflush_r>:
 800798c:	898a      	ldrh	r2, [r1, #12]
 800798e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007990:	4605      	mov	r5, r0
 8007992:	0710      	lsls	r0, r2, #28
 8007994:	460c      	mov	r4, r1
 8007996:	d457      	bmi.n	8007a48 <__sflush_r+0xbc>
 8007998:	684b      	ldr	r3, [r1, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dc04      	bgt.n	80079a8 <__sflush_r+0x1c>
 800799e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	dc01      	bgt.n	80079a8 <__sflush_r+0x1c>
 80079a4:	2000      	movs	r0, #0
 80079a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	d0fa      	beq.n	80079a4 <__sflush_r+0x18>
 80079ae:	2300      	movs	r3, #0
 80079b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079b4:	682f      	ldr	r7, [r5, #0]
 80079b6:	6a21      	ldr	r1, [r4, #32]
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	d032      	beq.n	8007a22 <__sflush_r+0x96>
 80079bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	075a      	lsls	r2, r3, #29
 80079c2:	d505      	bpl.n	80079d0 <__sflush_r+0x44>
 80079c4:	6863      	ldr	r3, [r4, #4]
 80079c6:	1ac0      	subs	r0, r0, r3
 80079c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079ca:	b10b      	cbz	r3, 80079d0 <__sflush_r+0x44>
 80079cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079ce:	1ac0      	subs	r0, r0, r3
 80079d0:	2300      	movs	r3, #0
 80079d2:	4602      	mov	r2, r0
 80079d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079d6:	4628      	mov	r0, r5
 80079d8:	6a21      	ldr	r1, [r4, #32]
 80079da:	47b0      	blx	r6
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	d106      	bne.n	80079f0 <__sflush_r+0x64>
 80079e2:	6829      	ldr	r1, [r5, #0]
 80079e4:	291d      	cmp	r1, #29
 80079e6:	d82b      	bhi.n	8007a40 <__sflush_r+0xb4>
 80079e8:	4a28      	ldr	r2, [pc, #160]	; (8007a8c <__sflush_r+0x100>)
 80079ea:	410a      	asrs	r2, r1
 80079ec:	07d6      	lsls	r6, r2, #31
 80079ee:	d427      	bmi.n	8007a40 <__sflush_r+0xb4>
 80079f0:	2200      	movs	r2, #0
 80079f2:	6062      	str	r2, [r4, #4]
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	04d9      	lsls	r1, r3, #19
 80079f8:	6022      	str	r2, [r4, #0]
 80079fa:	d504      	bpl.n	8007a06 <__sflush_r+0x7a>
 80079fc:	1c42      	adds	r2, r0, #1
 80079fe:	d101      	bne.n	8007a04 <__sflush_r+0x78>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	b903      	cbnz	r3, 8007a06 <__sflush_r+0x7a>
 8007a04:	6560      	str	r0, [r4, #84]	; 0x54
 8007a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a08:	602f      	str	r7, [r5, #0]
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	d0ca      	beq.n	80079a4 <__sflush_r+0x18>
 8007a0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a12:	4299      	cmp	r1, r3
 8007a14:	d002      	beq.n	8007a1c <__sflush_r+0x90>
 8007a16:	4628      	mov	r0, r5
 8007a18:	f7ff f8aa 	bl	8006b70 <_free_r>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	6360      	str	r0, [r4, #52]	; 0x34
 8007a20:	e7c1      	b.n	80079a6 <__sflush_r+0x1a>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b0      	blx	r6
 8007a28:	1c41      	adds	r1, r0, #1
 8007a2a:	d1c8      	bne.n	80079be <__sflush_r+0x32>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0c5      	beq.n	80079be <__sflush_r+0x32>
 8007a32:	2b1d      	cmp	r3, #29
 8007a34:	d001      	beq.n	8007a3a <__sflush_r+0xae>
 8007a36:	2b16      	cmp	r3, #22
 8007a38:	d101      	bne.n	8007a3e <__sflush_r+0xb2>
 8007a3a:	602f      	str	r7, [r5, #0]
 8007a3c:	e7b2      	b.n	80079a4 <__sflush_r+0x18>
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	e7ae      	b.n	80079a6 <__sflush_r+0x1a>
 8007a48:	690f      	ldr	r7, [r1, #16]
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	d0aa      	beq.n	80079a4 <__sflush_r+0x18>
 8007a4e:	0793      	lsls	r3, r2, #30
 8007a50:	bf18      	it	ne
 8007a52:	2300      	movne	r3, #0
 8007a54:	680e      	ldr	r6, [r1, #0]
 8007a56:	bf08      	it	eq
 8007a58:	694b      	ldreq	r3, [r1, #20]
 8007a5a:	1bf6      	subs	r6, r6, r7
 8007a5c:	600f      	str	r7, [r1, #0]
 8007a5e:	608b      	str	r3, [r1, #8]
 8007a60:	2e00      	cmp	r6, #0
 8007a62:	dd9f      	ble.n	80079a4 <__sflush_r+0x18>
 8007a64:	4633      	mov	r3, r6
 8007a66:	463a      	mov	r2, r7
 8007a68:	4628      	mov	r0, r5
 8007a6a:	6a21      	ldr	r1, [r4, #32]
 8007a6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a70:	47e0      	blx	ip
 8007a72:	2800      	cmp	r0, #0
 8007a74:	dc06      	bgt.n	8007a84 <__sflush_r+0xf8>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	e790      	b.n	80079a6 <__sflush_r+0x1a>
 8007a84:	4407      	add	r7, r0
 8007a86:	1a36      	subs	r6, r6, r0
 8007a88:	e7ea      	b.n	8007a60 <__sflush_r+0xd4>
 8007a8a:	bf00      	nop
 8007a8c:	dfbffffe 	.word	0xdfbffffe

08007a90 <_fflush_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	690b      	ldr	r3, [r1, #16]
 8007a94:	4605      	mov	r5, r0
 8007a96:	460c      	mov	r4, r1
 8007a98:	b913      	cbnz	r3, 8007aa0 <_fflush_r+0x10>
 8007a9a:	2500      	movs	r5, #0
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
 8007aa0:	b118      	cbz	r0, 8007aaa <_fflush_r+0x1a>
 8007aa2:	6a03      	ldr	r3, [r0, #32]
 8007aa4:	b90b      	cbnz	r3, 8007aaa <_fflush_r+0x1a>
 8007aa6:	f7fd ffa3 	bl	80059f0 <__sinit>
 8007aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0f3      	beq.n	8007a9a <_fflush_r+0xa>
 8007ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ab4:	07d0      	lsls	r0, r2, #31
 8007ab6:	d404      	bmi.n	8007ac2 <_fflush_r+0x32>
 8007ab8:	0599      	lsls	r1, r3, #22
 8007aba:	d402      	bmi.n	8007ac2 <_fflush_r+0x32>
 8007abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007abe:	f7fe f9ca 	bl	8005e56 <__retarget_lock_acquire_recursive>
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	f7ff ff61 	bl	800798c <__sflush_r>
 8007aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007acc:	4605      	mov	r5, r0
 8007ace:	07da      	lsls	r2, r3, #31
 8007ad0:	d4e4      	bmi.n	8007a9c <_fflush_r+0xc>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	059b      	lsls	r3, r3, #22
 8007ad6:	d4e1      	bmi.n	8007a9c <_fflush_r+0xc>
 8007ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ada:	f7fe f9bd 	bl	8005e58 <__retarget_lock_release_recursive>
 8007ade:	e7dd      	b.n	8007a9c <_fflush_r+0xc>

08007ae0 <__swhatbuf_r>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae8:	4615      	mov	r5, r2
 8007aea:	2900      	cmp	r1, #0
 8007aec:	461e      	mov	r6, r3
 8007aee:	b096      	sub	sp, #88	; 0x58
 8007af0:	da0c      	bge.n	8007b0c <__swhatbuf_r+0x2c>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	2100      	movs	r1, #0
 8007af6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007afa:	bf0c      	ite	eq
 8007afc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b00:	2340      	movne	r3, #64	; 0x40
 8007b02:	2000      	movs	r0, #0
 8007b04:	6031      	str	r1, [r6, #0]
 8007b06:	602b      	str	r3, [r5, #0]
 8007b08:	b016      	add	sp, #88	; 0x58
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	466a      	mov	r2, sp
 8007b0e:	f000 f849 	bl	8007ba4 <_fstat_r>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	dbed      	blt.n	8007af2 <__swhatbuf_r+0x12>
 8007b16:	9901      	ldr	r1, [sp, #4]
 8007b18:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b1c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b20:	4259      	negs	r1, r3
 8007b22:	4159      	adcs	r1, r3
 8007b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b28:	e7eb      	b.n	8007b02 <__swhatbuf_r+0x22>

08007b2a <__smakebuf_r>:
 8007b2a:	898b      	ldrh	r3, [r1, #12]
 8007b2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b2e:	079d      	lsls	r5, r3, #30
 8007b30:	4606      	mov	r6, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	d507      	bpl.n	8007b46 <__smakebuf_r+0x1c>
 8007b36:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	2301      	movs	r3, #1
 8007b40:	6163      	str	r3, [r4, #20]
 8007b42:	b002      	add	sp, #8
 8007b44:	bd70      	pop	{r4, r5, r6, pc}
 8007b46:	466a      	mov	r2, sp
 8007b48:	ab01      	add	r3, sp, #4
 8007b4a:	f7ff ffc9 	bl	8007ae0 <__swhatbuf_r>
 8007b4e:	9900      	ldr	r1, [sp, #0]
 8007b50:	4605      	mov	r5, r0
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff f87c 	bl	8006c50 <_malloc_r>
 8007b58:	b948      	cbnz	r0, 8007b6e <__smakebuf_r+0x44>
 8007b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5e:	059a      	lsls	r2, r3, #22
 8007b60:	d4ef      	bmi.n	8007b42 <__smakebuf_r+0x18>
 8007b62:	f023 0303 	bic.w	r3, r3, #3
 8007b66:	f043 0302 	orr.w	r3, r3, #2
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	e7e3      	b.n	8007b36 <__smakebuf_r+0xc>
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	6020      	str	r0, [r4, #0]
 8007b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	9b00      	ldr	r3, [sp, #0]
 8007b7a:	6120      	str	r0, [r4, #16]
 8007b7c:	6163      	str	r3, [r4, #20]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	b15b      	cbz	r3, 8007b9a <__smakebuf_r+0x70>
 8007b82:	4630      	mov	r0, r6
 8007b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b88:	f000 f81e 	bl	8007bc8 <_isatty_r>
 8007b8c:	b128      	cbz	r0, 8007b9a <__smakebuf_r+0x70>
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f023 0303 	bic.w	r3, r3, #3
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	431d      	orrs	r5, r3
 8007b9e:	81a5      	strh	r5, [r4, #12]
 8007ba0:	e7cf      	b.n	8007b42 <__smakebuf_r+0x18>
	...

08007ba4 <_fstat_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4d06      	ldr	r5, [pc, #24]	; (8007bc4 <_fstat_r+0x20>)
 8007baa:	4604      	mov	r4, r0
 8007bac:	4608      	mov	r0, r1
 8007bae:	4611      	mov	r1, r2
 8007bb0:	602b      	str	r3, [r5, #0]
 8007bb2:	f7fa fa45 	bl	8002040 <_fstat>
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	d102      	bne.n	8007bc0 <_fstat_r+0x1c>
 8007bba:	682b      	ldr	r3, [r5, #0]
 8007bbc:	b103      	cbz	r3, 8007bc0 <_fstat_r+0x1c>
 8007bbe:	6023      	str	r3, [r4, #0]
 8007bc0:	bd38      	pop	{r3, r4, r5, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20000934 	.word	0x20000934

08007bc8 <_isatty_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4d05      	ldr	r5, [pc, #20]	; (8007be4 <_isatty_r+0x1c>)
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	f7fa fa43 	bl	800205e <_isatty>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_isatty_r+0x1a>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_isatty_r+0x1a>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	20000934 	.word	0x20000934

08007be8 <_sbrk_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	2300      	movs	r3, #0
 8007bec:	4d05      	ldr	r5, [pc, #20]	; (8007c04 <_sbrk_r+0x1c>)
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	f7fa fa4a 	bl	800208c <_sbrk>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_sbrk_r+0x1a>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_sbrk_r+0x1a>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	20000934 	.word	0x20000934

08007c08 <__assert_func>:
 8007c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <__assert_func+0x2c>)
 8007c10:	4605      	mov	r5, r0
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68d8      	ldr	r0, [r3, #12]
 8007c16:	b14c      	cbz	r4, 8007c2c <__assert_func+0x24>
 8007c18:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <__assert_func+0x30>)
 8007c1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c1e:	9100      	str	r1, [sp, #0]
 8007c20:	462b      	mov	r3, r5
 8007c22:	4906      	ldr	r1, [pc, #24]	; (8007c3c <__assert_func+0x34>)
 8007c24:	f000 f870 	bl	8007d08 <fiprintf>
 8007c28:	f000 f880 	bl	8007d2c <abort>
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <__assert_func+0x38>)
 8007c2e:	461c      	mov	r4, r3
 8007c30:	e7f3      	b.n	8007c1a <__assert_func+0x12>
 8007c32:	bf00      	nop
 8007c34:	20000094 	.word	0x20000094
 8007c38:	080088a7 	.word	0x080088a7
 8007c3c:	080088b4 	.word	0x080088b4
 8007c40:	080088e2 	.word	0x080088e2

08007c44 <_calloc_r>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	fba1 5402 	umull	r5, r4, r1, r2
 8007c4a:	b934      	cbnz	r4, 8007c5a <_calloc_r+0x16>
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7fe ffff 	bl	8006c50 <_malloc_r>
 8007c52:	4606      	mov	r6, r0
 8007c54:	b928      	cbnz	r0, 8007c62 <_calloc_r+0x1e>
 8007c56:	4630      	mov	r0, r6
 8007c58:	bd70      	pop	{r4, r5, r6, pc}
 8007c5a:	220c      	movs	r2, #12
 8007c5c:	2600      	movs	r6, #0
 8007c5e:	6002      	str	r2, [r0, #0]
 8007c60:	e7f9      	b.n	8007c56 <_calloc_r+0x12>
 8007c62:	462a      	mov	r2, r5
 8007c64:	4621      	mov	r1, r4
 8007c66:	f7fe f879 	bl	8005d5c <memset>
 8007c6a:	e7f4      	b.n	8007c56 <_calloc_r+0x12>

08007c6c <__ascii_mbtowc>:
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	b901      	cbnz	r1, 8007c72 <__ascii_mbtowc+0x6>
 8007c70:	a901      	add	r1, sp, #4
 8007c72:	b142      	cbz	r2, 8007c86 <__ascii_mbtowc+0x1a>
 8007c74:	b14b      	cbz	r3, 8007c8a <__ascii_mbtowc+0x1e>
 8007c76:	7813      	ldrb	r3, [r2, #0]
 8007c78:	600b      	str	r3, [r1, #0]
 8007c7a:	7812      	ldrb	r2, [r2, #0]
 8007c7c:	1e10      	subs	r0, r2, #0
 8007c7e:	bf18      	it	ne
 8007c80:	2001      	movne	r0, #1
 8007c82:	b002      	add	sp, #8
 8007c84:	4770      	bx	lr
 8007c86:	4610      	mov	r0, r2
 8007c88:	e7fb      	b.n	8007c82 <__ascii_mbtowc+0x16>
 8007c8a:	f06f 0001 	mvn.w	r0, #1
 8007c8e:	e7f8      	b.n	8007c82 <__ascii_mbtowc+0x16>

08007c90 <_realloc_r>:
 8007c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c94:	4680      	mov	r8, r0
 8007c96:	4614      	mov	r4, r2
 8007c98:	460e      	mov	r6, r1
 8007c9a:	b921      	cbnz	r1, 8007ca6 <_realloc_r+0x16>
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca2:	f7fe bfd5 	b.w	8006c50 <_malloc_r>
 8007ca6:	b92a      	cbnz	r2, 8007cb4 <_realloc_r+0x24>
 8007ca8:	f7fe ff62 	bl	8006b70 <_free_r>
 8007cac:	4625      	mov	r5, r4
 8007cae:	4628      	mov	r0, r5
 8007cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb4:	f000 f841 	bl	8007d3a <_malloc_usable_size_r>
 8007cb8:	4284      	cmp	r4, r0
 8007cba:	4607      	mov	r7, r0
 8007cbc:	d802      	bhi.n	8007cc4 <_realloc_r+0x34>
 8007cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cc2:	d812      	bhi.n	8007cea <_realloc_r+0x5a>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f7fe ffc2 	bl	8006c50 <_malloc_r>
 8007ccc:	4605      	mov	r5, r0
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d0ed      	beq.n	8007cae <_realloc_r+0x1e>
 8007cd2:	42bc      	cmp	r4, r7
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	bf28      	it	cs
 8007cda:	463a      	movcs	r2, r7
 8007cdc:	f7fe f8cb 	bl	8005e76 <memcpy>
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	f7fe ff44 	bl	8006b70 <_free_r>
 8007ce8:	e7e1      	b.n	8007cae <_realloc_r+0x1e>
 8007cea:	4635      	mov	r5, r6
 8007cec:	e7df      	b.n	8007cae <_realloc_r+0x1e>

08007cee <__ascii_wctomb>:
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	b141      	cbz	r1, 8007d06 <__ascii_wctomb+0x18>
 8007cf4:	2aff      	cmp	r2, #255	; 0xff
 8007cf6:	d904      	bls.n	8007d02 <__ascii_wctomb+0x14>
 8007cf8:	228a      	movs	r2, #138	; 0x8a
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	4770      	bx	lr
 8007d02:	2001      	movs	r0, #1
 8007d04:	700a      	strb	r2, [r1, #0]
 8007d06:	4770      	bx	lr

08007d08 <fiprintf>:
 8007d08:	b40e      	push	{r1, r2, r3}
 8007d0a:	b503      	push	{r0, r1, lr}
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	ab03      	add	r3, sp, #12
 8007d10:	4805      	ldr	r0, [pc, #20]	; (8007d28 <fiprintf+0x20>)
 8007d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d16:	6800      	ldr	r0, [r0, #0]
 8007d18:	9301      	str	r3, [sp, #4]
 8007d1a:	f7ff fd1d 	bl	8007758 <_vfiprintf_r>
 8007d1e:	b002      	add	sp, #8
 8007d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d24:	b003      	add	sp, #12
 8007d26:	4770      	bx	lr
 8007d28:	20000094 	.word	0x20000094

08007d2c <abort>:
 8007d2c:	2006      	movs	r0, #6
 8007d2e:	b508      	push	{r3, lr}
 8007d30:	f000 f834 	bl	8007d9c <raise>
 8007d34:	2001      	movs	r0, #1
 8007d36:	f7fa f935 	bl	8001fa4 <_exit>

08007d3a <_malloc_usable_size_r>:
 8007d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3e:	1f18      	subs	r0, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bfbc      	itt	lt
 8007d44:	580b      	ldrlt	r3, [r1, r0]
 8007d46:	18c0      	addlt	r0, r0, r3
 8007d48:	4770      	bx	lr

08007d4a <_raise_r>:
 8007d4a:	291f      	cmp	r1, #31
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4604      	mov	r4, r0
 8007d50:	460d      	mov	r5, r1
 8007d52:	d904      	bls.n	8007d5e <_raise_r+0x14>
 8007d54:	2316      	movs	r3, #22
 8007d56:	6003      	str	r3, [r0, #0]
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5c:	bd38      	pop	{r3, r4, r5, pc}
 8007d5e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d60:	b112      	cbz	r2, 8007d68 <_raise_r+0x1e>
 8007d62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d66:	b94b      	cbnz	r3, 8007d7c <_raise_r+0x32>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 f831 	bl	8007dd0 <_getpid_r>
 8007d6e:	462a      	mov	r2, r5
 8007d70:	4601      	mov	r1, r0
 8007d72:	4620      	mov	r0, r4
 8007d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d78:	f000 b818 	b.w	8007dac <_kill_r>
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d00a      	beq.n	8007d96 <_raise_r+0x4c>
 8007d80:	1c59      	adds	r1, r3, #1
 8007d82:	d103      	bne.n	8007d8c <_raise_r+0x42>
 8007d84:	2316      	movs	r3, #22
 8007d86:	6003      	str	r3, [r0, #0]
 8007d88:	2001      	movs	r0, #1
 8007d8a:	e7e7      	b.n	8007d5c <_raise_r+0x12>
 8007d8c:	2400      	movs	r4, #0
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d94:	4798      	blx	r3
 8007d96:	2000      	movs	r0, #0
 8007d98:	e7e0      	b.n	8007d5c <_raise_r+0x12>
	...

08007d9c <raise>:
 8007d9c:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <raise+0xc>)
 8007d9e:	4601      	mov	r1, r0
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	f7ff bfd2 	b.w	8007d4a <_raise_r>
 8007da6:	bf00      	nop
 8007da8:	20000094 	.word	0x20000094

08007dac <_kill_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	2300      	movs	r3, #0
 8007db0:	4d06      	ldr	r5, [pc, #24]	; (8007dcc <_kill_r+0x20>)
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	4611      	mov	r1, r2
 8007db8:	602b      	str	r3, [r5, #0]
 8007dba:	f7fa f8e3 	bl	8001f84 <_kill>
 8007dbe:	1c43      	adds	r3, r0, #1
 8007dc0:	d102      	bne.n	8007dc8 <_kill_r+0x1c>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	b103      	cbz	r3, 8007dc8 <_kill_r+0x1c>
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	bd38      	pop	{r3, r4, r5, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000934 	.word	0x20000934

08007dd0 <_getpid_r>:
 8007dd0:	f7fa b8d1 	b.w	8001f76 <_getpid>

08007dd4 <_init>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	bf00      	nop
 8007dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dda:	bc08      	pop	{r3}
 8007ddc:	469e      	mov	lr, r3
 8007dde:	4770      	bx	lr

08007de0 <_fini>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr

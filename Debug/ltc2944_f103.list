
ltc2944_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e1c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  08008f30  08008f30  00018f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af8  08009af8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009af8  08009af8  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009af8  08009af8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  200001ec  08009cec  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  08009cec  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d997  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000272d  00000000  00000000  0002dbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  00030320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000979  00000000  00000000  00030f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cc9f  00000000  00000000  00031901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011773  00000000  00000000  0004e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cd63  00000000  00000000  0005fd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004674  00000000  00000000  000eca78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000f10ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f14 	.word	0x08008f14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08008f14 	.word	0x08008f14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_f2uiz>:
 8000d84:	0042      	lsls	r2, r0, #1
 8000d86:	d20e      	bcs.n	8000da6 <__aeabi_f2uiz+0x22>
 8000d88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d8c:	d30b      	bcc.n	8000da6 <__aeabi_f2uiz+0x22>
 8000d8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d96:	d409      	bmi.n	8000dac <__aeabi_f2uiz+0x28>
 8000d98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000da0:	fa23 f002 	lsr.w	r0, r3, r2
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr
 8000dac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000db0:	d101      	bne.n	8000db6 <__aeabi_f2uiz+0x32>
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	d102      	bne.n	8000dbc <__aeabi_f2uiz+0x38>
 8000db6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dba:	4770      	bx	lr
 8000dbc:	f04f 0000 	mov.w	r0, #0
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_d2lz>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	4605      	mov	r5, r0
 8000dc8:	460c      	mov	r4, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2300      	movs	r3, #0
 8000dce:	4628      	mov	r0, r5
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	f7ff fdf3 	bl	80009bc <__aeabi_dcmplt>
 8000dd6:	b928      	cbnz	r0, 8000de4 <__aeabi_d2lz+0x20>
 8000dd8:	4628      	mov	r0, r5
 8000dda:	4621      	mov	r1, r4
 8000ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000de0:	f000 b80a 	b.w	8000df8 <__aeabi_d2ulz>
 8000de4:	4628      	mov	r0, r5
 8000de6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000dea:	f000 f805 	bl	8000df8 <__aeabi_d2ulz>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
 8000df6:	bf00      	nop

08000df8 <__aeabi_d2ulz>:
 8000df8:	b5d0      	push	{r4, r6, r7, lr}
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <__aeabi_d2ulz+0x34>)
 8000dfe:	4606      	mov	r6, r0
 8000e00:	460f      	mov	r7, r1
 8000e02:	f7ff fb69 	bl	80004d8 <__aeabi_dmul>
 8000e06:	f7ff fe3f 	bl	8000a88 <__aeabi_d2uiz>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	f7ff faea 	bl	80003e4 <__aeabi_ui2d>
 8000e10:	2200      	movs	r2, #0
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <__aeabi_d2ulz+0x38>)
 8000e14:	f7ff fb60 	bl	80004d8 <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	4639      	mov	r1, r7
 8000e20:	f7ff f9a2 	bl	8000168 <__aeabi_dsub>
 8000e24:	f7ff fe30 	bl	8000a88 <__aeabi_d2uiz>
 8000e28:	4621      	mov	r1, r4
 8000e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e2c:	3df00000 	.word	0x3df00000
 8000e30:	41f00000 	.word	0x41f00000

08000e34 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_ADC1_Init+0x74>)
 8000e46:	4a19      	ldr	r2, [pc, #100]	; (8000eac <MX_ADC1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <MX_ADC1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MX_ADC1_Init+0x74>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_ADC1_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <MX_ADC1_Init+0x74>)
 8000e5e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_ADC1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_ADC1_Init+0x74>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <MX_ADC1_Init+0x74>)
 8000e72:	f001 f80f 	bl	8001e94 <HAL_ADC_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 fb8e 	bl	800159c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e80:	2308      	movs	r3, #8
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_ADC1_Init+0x74>)
 8000e92:	f001 f985 	bl	80021a0 <HAL_ADC_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e9c:	f000 fb7e 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000208 	.word	0x20000208
 8000eac:	40012400 	.word	0x40012400

08000eb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_ADC_MspInit+0x6c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d121      	bne.n	8000f14 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_ADC_MspInit+0x70>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f00:	2301      	movs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f04:	2303      	movs	r3, #3
 8000f06:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <HAL_ADC_MspInit+0x74>)
 8000f10:	f001 fbbe 	bl	8002690 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f14:	bf00      	nop
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40012400 	.word	0x40012400
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010c00 	.word	0x40010c00

08000f28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a23      	ldr	r2, [pc, #140]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f42:	f043 0310 	orr.w	r3, r3, #16
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f5a:	f043 0320 	orr.w	r3, r3, #32
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0320 	and.w	r3, r3, #32
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_GPIO_Init+0xa8>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000fa2:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <MX_GPIO_Init+0xac>)
 8000fa4:	f001 fcf8 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLU_Pin;
 8000fa8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_GPIO_Init+0xac>)
 8000fc2:	f001 fb65 	bl	8002690 <HAL_GPIO_Init>

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40011000 	.word	0x40011000

08000fd8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_I2C1_Init+0x50>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <MX_I2C1_Init+0x54>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_I2C1_Init+0x50>)
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <MX_I2C1_Init+0x58>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_I2C1_Init+0x50>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_I2C1_Init+0x50>)
 8001016:	f001 fcd7 	bl	80029c8 <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001020:	f000 fabc 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000238 	.word	0x20000238
 800102c:	40005400 	.word	0x40005400
 8001030:	000186a0 	.word	0x000186a0

08001034 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_I2C2_Init+0x50>)
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <MX_I2C2_Init+0x54>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_I2C2_Init+0x50>)
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_I2C2_Init+0x58>)
 8001042:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_I2C2_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_I2C2_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_I2C2_Init+0x50>)
 8001052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001056:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <MX_I2C2_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_I2C2_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <MX_I2C2_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_I2C2_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <MX_I2C2_Init+0x50>)
 8001072:	f001 fca9 	bl	80029c8 <HAL_I2C_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800107c:	f000 fa8e 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000028c 	.word	0x2000028c
 8001088:	40005800 	.word	0x40005800
 800108c:	00061a80 	.word	0x00061a80

08001090 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a2b      	ldr	r2, [pc, #172]	; (8001158 <HAL_I2C_MspInit+0xc8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d124      	bne.n	80010fa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a29      	ldr	r2, [pc, #164]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c8:	23c0      	movs	r3, #192	; 0xc0
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	4619      	mov	r1, r3
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <HAL_I2C_MspInit+0xd0>)
 80010dc:	f001 fad8 	bl	8002690 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a1d      	ldr	r2, [pc, #116]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_I2C_MspInit+0xcc>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010f8:	e029      	b.n	800114e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a19      	ldr	r2, [pc, #100]	; (8001164 <HAL_I2C_MspInit+0xd4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d124      	bne.n	800114e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_I2C_MspInit+0xcc>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <HAL_I2C_MspInit+0xcc>)
 800110a:	f043 0308 	orr.w	r3, r3, #8
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_I2C_MspInit+0xcc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800111c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	4619      	mov	r1, r3
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <HAL_I2C_MspInit+0xd0>)
 8001132:	f001 faad 	bl	8002690 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_I2C_MspInit+0xcc>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_I2C_MspInit+0xcc>)
 800113c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_I2C_MspInit+0xcc>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40005400 	.word	0x40005400
 800115c:	40021000 	.word	0x40021000
 8001160:	40010c00 	.word	0x40010c00
 8001164:	40005800 	.word	0x40005800

08001168 <LTC2944_Init>:
#include "stdio.h"

ltc2944_data_t ltc2944_data;
uint16_t Prescaler_Table[] = {1, 4, 16, 64, 256, 1024, 4096};
//
HAL_StatusTypeDef LTC2944_Init(ltc2944_configuration_t ltc2944){
 8001168:	b084      	sub	sp, #16
 800116a:	b5b0      	push	{r4, r5, r7, lr}
 800116c:	b088      	sub	sp, #32
 800116e:	af04      	add	r7, sp, #16
 8001170:	f107 0420 	add.w	r4, r7, #32
 8001174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ctrl_reg = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	71bb      	strb	r3, [r7, #6]
	uint16_t prescaler_value;
	float psc_temp;
	uint8_t status;

	// calculate prescalar value based on the battery parameters
	psc_temp = (4096.0 * ltc2944.batt_capacity * ltc2944.sense_resistor)
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f952 	bl	8000428 <__aeabi_f2d>
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b59      	ldr	r3, [pc, #356]	; (80012f0 <LTC2944_Init+0x188>)
 800118a:	f7ff f9a5 	bl	80004d8 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4614      	mov	r4, r2
 8001194:	461d      	mov	r5, r3
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f945 	bl	8000428 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4620      	mov	r0, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	f7ff f997 	bl	80004d8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
					/ (65535.0 * FACTOR_CHARGE_QLSB * 50);
 80011b2:	a34b      	add	r3, pc, #300	; (adr r3, 80012e0 <LTC2944_Init+0x178>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fab8 	bl	800072c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
	psc_temp = (4096.0 * ltc2944.batt_capacity * ltc2944.sense_resistor)
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fc80 	bl	8000ac8 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	60bb      	str	r3, [r7, #8]
	// loop through the Prescaler_Table[] to find the best match of
	// prescalar based on battery and sense resistor values.
	for(uint8_t i = 0; i <= sizeof(Prescaler_Table); i++){
 80011cc:	2300      	movs	r3, #0
 80011ce:	737b      	strb	r3, [r7, #13]
 80011d0:	e01b      	b.n	800120a <LTC2944_Init+0xa2>
		if((uint16_t)psc_temp <= Prescaler_Table[i]){
 80011d2:	68b8      	ldr	r0, [r7, #8]
 80011d4:	f7ff fdd6 	bl	8000d84 <__aeabi_f2uiz>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	7b7b      	ldrb	r3, [r7, #13]
 80011de:	4945      	ldr	r1, [pc, #276]	; (80012f4 <LTC2944_Init+0x18c>)
 80011e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d80d      	bhi.n	8001204 <LTC2944_Init+0x9c>
			if(i != 0){
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d008      	beq.n	8001200 <LTC2944_Init+0x98>
				if((uint16_t)psc_temp >= Prescaler_Table[i-1]);
 80011ee:	68b8      	ldr	r0, [r7, #8]
 80011f0:	f7ff fdc8 	bl	8000d84 <__aeabi_f2uiz>
				prescaler_value = Prescaler_Table[i];
 80011f4:	7b7b      	ldrb	r3, [r7, #13]
 80011f6:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <LTC2944_Init+0x18c>)
 80011f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011fc:	81fb      	strh	r3, [r7, #14]
				break;			// break from the for loop when a
 80011fe:	e007      	b.n	8001210 <LTC2944_Init+0xa8>
								// match is found, otherwise it will
								// loop through the whole table
			}
			else{
				prescaler_value = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i <= sizeof(Prescaler_Table); i++){
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	3301      	adds	r3, #1
 8001208:	737b      	strb	r3, [r7, #13]
 800120a:	7b7b      	ldrb	r3, [r7, #13]
 800120c:	2b0e      	cmp	r3, #14
 800120e:	d9e0      	bls.n	80011d2 <LTC2944_Init+0x6a>
		}
	}

	// calculate the amount of charge represented by the
	// least significant bit (qLSB) of the accumulated charge registers
	ltc2944_data.qLSB = FACTOR_CHARGE_QLSB * (50.0 / ltc2944.sense_resistor)
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f908 	bl	8000428 <__aeabi_f2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <LTC2944_Init+0x190>)
 8001222:	f7ff fa83 	bl	800072c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	a32e      	add	r3, pc, #184	; (adr r3, 80012e8 <LTC2944_Init+0x180>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff f950 	bl	80004d8 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4614      	mov	r4, r2
 800123e:	461d      	mov	r5, r3
								* (prescaler_value / 4096.0);
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f8de 	bl	8000404 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <LTC2944_Init+0x188>)
 800124e:	f7ff fa6d 	bl	800072c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4620      	mov	r0, r4
 8001258:	4629      	mov	r1, r5
 800125a:	f7ff f93d 	bl	80004d8 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fc2f 	bl	8000ac8 <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
	ltc2944_data.qLSB = FACTOR_CHARGE_QLSB * (50.0 / ltc2944.sense_resistor)
 800126c:	4a23      	ldr	r2, [pc, #140]	; (80012fc <LTC2944_Init+0x194>)
 800126e:	6113      	str	r3, [r2, #16]

	// calculate the value to put in the control register
	ctrl_reg |= ltc2944.adc_mode << 6;
 8001270:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	b25a      	sxtb	r2, r3
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b25b      	sxtb	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	71bb      	strb	r3, [r7, #6]
	ctrl_reg |= (uint8_t)prescaler_value << 3;
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	b25a      	sxtb	r2, r3
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	71bb      	strb	r3, [r7, #6]
	ctrl_reg |= ltc2944.alcc_mode << 1;
 8001298:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	b25a      	sxtb	r2, r3
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	71bb      	strb	r3, [r7, #6]

	//
	status = HAL_I2C_Mem_Write(&(ltc2944.i2c_handle), LTC2944_ADDRESS,
 80012ac:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80012b0:	230a      	movs	r3, #10
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	2201      	movs	r2, #1
 80012c0:	21c8      	movs	r1, #200	; 0xc8
 80012c2:	f001 fcc5 	bl	8002c50 <HAL_I2C_Mem_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
			CONTROL_REGISTER, 1, &ctrl_reg, 1, 10);

	return status;
 80012ca:	79fb      	ldrb	r3, [r7, #7]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012d6:	b004      	add	sp, #16
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	02fffd00 	.word	0x02fffd00
 80012e4:	4130ffef 	.word	0x4130ffef
 80012e8:	60000000 	.word	0x60000000
 80012ec:	3fd5c28f 	.word	0x3fd5c28f
 80012f0:	40b00000 	.word	0x40b00000
 80012f4:	20000000 	.word	0x20000000
 80012f8:	40490000 	.word	0x40490000
 80012fc:	200002e0 	.word	0x200002e0

08001300 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001308:	1d39      	adds	r1, r7, #4
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	2201      	movs	r2, #1
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <__io_putchar+0x20>)
 8001312:	f003 f8c9 	bl	80044a8 <HAL_UART_Transmit>
  return ch;
 8001316:	687b      	ldr	r3, [r7, #4]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000794 	.word	0x20000794
 8001324:	00000000 	.word	0x00000000

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b097      	sub	sp, #92	; 0x5c
 800132c:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f000 fd2b 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 f8a7 	bl	8001484 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemClock_Config();
 8001336:	f000 f8a5 	bl	8001484 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133a:	f7ff fdf5 	bl	8000f28 <MX_GPIO_Init>
  MX_I2C2_Init();
 800133e:	f7ff fe79 	bl	8001034 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001342:	f7ff fe49 	bl	8000fd8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001346:	f7ff fd75 	bl	8000e34 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800134a:	f000 fc83 	bl	8001c54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800134e:	f000 f963 	bl	8001618 <ssd1306_Init>
  HAL_ADC_Start(&hadc1);
 8001352:	483f      	ldr	r0, [pc, #252]	; (8001450 <main+0x128>)
 8001354:	f000 fe76 	bl	8002044 <HAL_ADC_Start>
  state_t state = IDLE;
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]

  Device_Config();
 800135c:	f000 f8ee 	bl	800153c <Device_Config>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  tick = HAL_GetTick();
 8001360:	f000 fd6a 	bl	8001e38 <HAL_GetTick>
 8001364:	4603      	mov	r3, r0
 8001366:	4a3b      	ldr	r2, [pc, #236]	; (8001454 <main+0x12c>)
 8001368:	6013      	str	r3, [r2, #0]
//	  printf(string_current);

	  prescaler_value = LTC2944_Init(ltc2944_struct);
 800136a:	4c3b      	ldr	r4, [pc, #236]	; (8001458 <main+0x130>)
 800136c:	4668      	mov	r0, sp
 800136e:	f104 0310 	add.w	r3, r4, #16
 8001372:	2250      	movs	r2, #80	; 0x50
 8001374:	4619      	mov	r1, r3
 8001376:	f004 fa50 	bl	800581a <memcpy>
 800137a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800137e:	f7ff fef3 	bl	8001168 <LTC2944_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fca5 	bl	8000cd4 <__aeabi_ui2f>
 800138a:	4603      	mov	r3, r0
 800138c:	4a33      	ldr	r2, [pc, #204]	; (800145c <main+0x134>)
 800138e:	6013      	str	r3, [r2, #0]

	  sprintf(stringTick, "%ld", tick);
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <main+0x12c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4932      	ldr	r1, [pc, #200]	; (8001460 <main+0x138>)
 8001398:	4832      	ldr	r0, [pc, #200]	; (8001464 <main+0x13c>)
 800139a:	f004 f933 	bl	8005604 <siprintf>
	  ssd1306_SetCursor(0, 0);
 800139e:	2100      	movs	r1, #0
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 faed 	bl	8001980 <ssd1306_SetCursor>
	  ssd1306_WriteString(stringTick, Font_7x10, Black);
 80013a6:	4a30      	ldr	r2, [pc, #192]	; (8001468 <main+0x140>)
 80013a8:	2300      	movs	r3, #0
 80013aa:	ca06      	ldmia	r2, {r1, r2}
 80013ac:	482d      	ldr	r0, [pc, #180]	; (8001464 <main+0x13c>)
 80013ae:	f000 fac1 	bl	8001934 <ssd1306_WriteString>

	  sprintf(stringTest1, "%f", prescaler_value);
 80013b2:	4b2a      	ldr	r3, [pc, #168]	; (800145c <main+0x134>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f836 	bl	8000428 <__aeabi_f2d>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	492a      	ldr	r1, [pc, #168]	; (800146c <main+0x144>)
 80013c2:	482b      	ldr	r0, [pc, #172]	; (8001470 <main+0x148>)
 80013c4:	f004 f91e 	bl	8005604 <siprintf>
	  ssd1306_SetCursor(0, 15);
 80013c8:	210f      	movs	r1, #15
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 fad8 	bl	8001980 <ssd1306_SetCursor>
	  ssd1306_WriteString(stringTest1, Font_7x10, Black);
 80013d0:	4a25      	ldr	r2, [pc, #148]	; (8001468 <main+0x140>)
 80013d2:	2300      	movs	r3, #0
 80013d4:	ca06      	ldmia	r2, {r1, r2}
 80013d6:	4826      	ldr	r0, [pc, #152]	; (8001470 <main+0x148>)
 80013d8:	f000 faac 	bl	8001934 <ssd1306_WriteString>

	  sprintf(stringTest2, "%f", tick*0.302);
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <main+0x12c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe ffff 	bl	80003e4 <__aeabi_ui2d>
 80013e6:	a318      	add	r3, pc, #96	; (adr r3, 8001448 <main+0x120>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f874 	bl	80004d8 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	491d      	ldr	r1, [pc, #116]	; (800146c <main+0x144>)
 80013f6:	481f      	ldr	r0, [pc, #124]	; (8001474 <main+0x14c>)
 80013f8:	f004 f904 	bl	8005604 <siprintf>
	  ssd1306_SetCursor(0, 30);
 80013fc:	211e      	movs	r1, #30
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 fabe 	bl	8001980 <ssd1306_SetCursor>
	  ssd1306_WriteString(stringTest2, Font_7x10, Black);
 8001404:	4a18      	ldr	r2, [pc, #96]	; (8001468 <main+0x140>)
 8001406:	2300      	movs	r3, #0
 8001408:	ca06      	ldmia	r2, {r1, r2}
 800140a:	481a      	ldr	r0, [pc, #104]	; (8001474 <main+0x14c>)
 800140c:	f000 fa92 	bl	8001934 <ssd1306_WriteString>
//		  ssd1306_UpdateScreen();
//		  ssd1306_Fill(White);
//	  }


	  ssd1306_UpdateScreen();
 8001410:	f000 f98e 	bl	8001730 <ssd1306_UpdateScreen>
	  ssd1306_Fill(White);
 8001414:	2001      	movs	r0, #1
 8001416:	f000 f969 	bl	80016ec <ssd1306_Fill>

	HAL_I2C_Mem_Read(&hi2c2, LTC2944_ADDRESS, ACCUMULATED_CHARGE_MSB, 1, buf, 2, 1000);
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	2302      	movs	r3, #2
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <main+0x150>)
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2301      	movs	r3, #1
 800142a:	2202      	movs	r2, #2
 800142c:	21c8      	movs	r1, #200	; 0xc8
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <main+0x154>)
 8001430:	f001 fd08 	bl	8002e44 <HAL_I2C_Mem_Read>
	voltage_ = buf[0] << 8 | buf[1];
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <main+0x150>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <main+0x150>)
 800143c:	7852      	ldrb	r2, [r2, #1]
 800143e:	4313      	orrs	r3, r2
 8001440:	461a      	mov	r2, r3
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <main+0x158>)
 8001444:	601a      	str	r2, [r3, #0]
	  tick = HAL_GetTick();
 8001446:	e78b      	b.n	8001360 <main+0x38>
 8001448:	ced91687 	.word	0xced91687
 800144c:	3fd353f7 	.word	0x3fd353f7
 8001450:	20000208 	.word	0x20000208
 8001454:	200002f4 	.word	0x200002f4
 8001458:	200002f8 	.word	0x200002f8
 800145c:	20000384 	.word	0x20000384
 8001460:	08008f30 	.word	0x08008f30
 8001464:	20000360 	.word	0x20000360
 8001468:	20000010 	.word	0x20000010
 800146c:	08008f34 	.word	0x08008f34
 8001470:	2000036c 	.word	0x2000036c
 8001474:	20000378 	.word	0x20000378
 8001478:	20000358 	.word	0x20000358
 800147c:	2000028c 	.word	0x2000028c
 8001480:	2000035c 	.word	0x2000035c

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b094      	sub	sp, #80	; 0x50
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148e:	2228      	movs	r2, #40	; 0x28
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f004 f933 	bl	80056fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b4:	2301      	movs	r3, #1
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c2:	2301      	movs	r3, #1
 80014c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c6:	2302      	movs	r3, #2
 80014c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 face 	bl	8003a7c <HAL_RCC_OscConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014e6:	f000 f859 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
 80014ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2102      	movs	r1, #2
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fd3a 	bl	8003f80 <HAL_RCC_ClockConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001512:	f000 f843 	bl	800159c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001516:	2302      	movs	r3, #2
 8001518:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800151a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4618      	mov	r0, r3
 8001524:	f002 feba 	bl	800429c <HAL_RCCEx_PeriphCLKConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800152e:	f000 f835 	bl	800159c <Error_Handler>
  }
}
 8001532:	bf00      	nop
 8001534:	3750      	adds	r7, #80	; 0x50
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <Device_Config>:

/* USER CODE BEGIN 4 */
void Device_Config(void){
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b095      	sub	sp, #84	; 0x54
 8001540:	af14      	add	r7, sp, #80	; 0x50
	ltc2944_struct.adc_mode = 			Automatic_Mode;
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <Device_Config+0x50>)
 8001544:	2203      	movs	r2, #3
 8001546:	701a      	strb	r2, [r3, #0]
//	ltc2944_struct.prescalar_factor = 	Factor_256;
	ltc2944_struct.alcc_mode = 			ALCC_Disable;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <Device_Config+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	705a      	strb	r2, [r3, #1]
	ltc2944_struct.sense_resistor = 	5;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <Device_Config+0x50>)
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <Device_Config+0x54>)
 8001552:	605a      	str	r2, [r3, #4]
	ltc2944_struct.batt_capacity =		3000;
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <Device_Config+0x50>)
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <Device_Config+0x58>)
 8001558:	609a      	str	r2, [r3, #8]
	ltc2944_struct.i2c_handle = 		hi2c2;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <Device_Config+0x50>)
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <Device_Config+0x5c>)
 800155e:	330c      	adds	r3, #12
 8001560:	4611      	mov	r1, r2
 8001562:	2254      	movs	r2, #84	; 0x54
 8001564:	4618      	mov	r0, r3
 8001566:	f004 f958 	bl	800581a <memcpy>

	LTC2944_Init(ltc2944_struct);
 800156a:	4c08      	ldr	r4, [pc, #32]	; (800158c <Device_Config+0x50>)
 800156c:	4668      	mov	r0, sp
 800156e:	f104 0310 	add.w	r3, r4, #16
 8001572:	2250      	movs	r2, #80	; 0x50
 8001574:	4619      	mov	r1, r3
 8001576:	f004 f950 	bl	800581a <memcpy>
 800157a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800157e:	f7ff fdf3 	bl	8001168 <LTC2944_Init>
}
 8001582:	bf00      	nop
 8001584:	3704      	adds	r7, #4
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	200002f8 	.word	0x200002f8
 8001590:	40a00000 	.word	0x40a00000
 8001594:	453b8000 	.word	0x453b8000
 8001598:	2000028c 	.word	0x2000028c

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <Error_Handler+0x8>

080015a6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af04      	add	r7, sp, #16
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2301      	movs	r3, #1
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	2200      	movs	r2, #0
 80015d0:	2178      	movs	r1, #120	; 0x78
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <ssd1306_WriteCommand+0x2c>)
 80015d4:	f001 fb3c 	bl	8002c50 <HAL_I2C_Mem_Write>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000238 	.word	0x20000238

080015e4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	f04f 32ff 	mov.w	r2, #4294967295
 80015f6:	9202      	str	r2, [sp, #8]
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	2178      	movs	r1, #120	; 0x78
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <ssd1306_WriteData+0x30>)
 8001606:	f001 fb23 	bl	8002c50 <HAL_I2C_Mem_Write>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000238 	.word	0x20000238

08001618 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800161c:	f7ff ffc3 	bl	80015a6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001620:	2064      	movs	r0, #100	; 0x64
 8001622:	f000 fc13 	bl	8001e4c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f9d6 	bl	80019d8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800162c:	2020      	movs	r0, #32
 800162e:	f7ff ffc1 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff ffbe 	bl	80015b4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001638:	20b0      	movs	r0, #176	; 0xb0
 800163a:	f7ff ffbb 	bl	80015b4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800163e:	20c8      	movs	r0, #200	; 0xc8
 8001640:	f7ff ffb8 	bl	80015b4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff ffb5 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800164a:	2010      	movs	r0, #16
 800164c:	f7ff ffb2 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001650:	2040      	movs	r0, #64	; 0x40
 8001652:	f7ff ffaf 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001656:	20ff      	movs	r0, #255	; 0xff
 8001658:	f000 f9aa 	bl	80019b0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800165c:	20a1      	movs	r0, #161	; 0xa1
 800165e:	f7ff ffa9 	bl	80015b4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001662:	20a6      	movs	r0, #166	; 0xa6
 8001664:	f7ff ffa6 	bl	80015b4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001668:	20a8      	movs	r0, #168	; 0xa8
 800166a:	f7ff ffa3 	bl	80015b4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800166e:	203f      	movs	r0, #63	; 0x3f
 8001670:	f7ff ffa0 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001674:	20a4      	movs	r0, #164	; 0xa4
 8001676:	f7ff ff9d 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800167a:	20d3      	movs	r0, #211	; 0xd3
 800167c:	f7ff ff9a 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff ff97 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001686:	20d5      	movs	r0, #213	; 0xd5
 8001688:	f7ff ff94 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800168c:	20f0      	movs	r0, #240	; 0xf0
 800168e:	f7ff ff91 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001692:	20d9      	movs	r0, #217	; 0xd9
 8001694:	f7ff ff8e 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001698:	2022      	movs	r0, #34	; 0x22
 800169a:	f7ff ff8b 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800169e:	20da      	movs	r0, #218	; 0xda
 80016a0:	f7ff ff88 	bl	80015b4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80016a4:	2012      	movs	r0, #18
 80016a6:	f7ff ff85 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80016aa:	20db      	movs	r0, #219	; 0xdb
 80016ac:	f7ff ff82 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80016b0:	2020      	movs	r0, #32
 80016b2:	f7ff ff7f 	bl	80015b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80016b6:	208d      	movs	r0, #141	; 0x8d
 80016b8:	f7ff ff7c 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80016bc:	2014      	movs	r0, #20
 80016be:	f7ff ff79 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 f988 	bl	80019d8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 f80f 	bl	80016ec <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80016ce:	f000 f82f 	bl	8001730 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <ssd1306_Init+0xd0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <ssd1306_Init+0xd0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80016de:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <ssd1306_Init+0xd0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	711a      	strb	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000788 	.word	0x20000788

080016ec <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e00d      	b.n	8001718 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <ssd1306_Fill+0x1a>
 8001702:	2100      	movs	r1, #0
 8001704:	e000      	b.n	8001708 <ssd1306_Fill+0x1c>
 8001706:	21ff      	movs	r1, #255	; 0xff
 8001708:	4a08      	ldr	r2, [pc, #32]	; (800172c <ssd1306_Fill+0x40>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	460a      	mov	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3301      	adds	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171e:	d3ed      	bcc.n	80016fc <ssd1306_Fill+0x10>
    }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	20000388 	.word	0x20000388

08001730 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001736:	2300      	movs	r3, #0
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e016      	b.n	800176a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3b50      	subs	r3, #80	; 0x50
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff36 	bl	80015b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff ff33 	bl	80015b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800174e:	2010      	movs	r0, #16
 8001750:	f7ff ff30 	bl	80015b4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	01db      	lsls	r3, r3, #7
 8001758:	4a08      	ldr	r2, [pc, #32]	; (800177c <ssd1306_UpdateScreen+0x4c>)
 800175a:	4413      	add	r3, r2
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff40 	bl	80015e4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	3301      	adds	r3, #1
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b07      	cmp	r3, #7
 800176e:	d9e5      	bls.n	800173c <ssd1306_UpdateScreen+0xc>
    }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000388 	.word	0x20000388

08001780 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	460b      	mov	r3, r1
 800178c:	71bb      	strb	r3, [r7, #6]
 800178e:	4613      	mov	r3, r2
 8001790:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db3d      	blt.n	8001816 <ssd1306_DrawPixel+0x96>
 800179a:	79bb      	ldrb	r3, [r7, #6]
 800179c:	2b3f      	cmp	r3, #63	; 0x3f
 800179e:	d83a      	bhi.n	8001816 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80017a0:	797b      	ldrb	r3, [r7, #5]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d11a      	bne.n	80017dc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017a6:	79fa      	ldrb	r2, [r7, #7]
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	b2d8      	uxtb	r0, r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	01db      	lsls	r3, r3, #7
 80017b2:	4413      	add	r3, r2
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <ssd1306_DrawPixel+0xa0>)
 80017b6:	5cd3      	ldrb	r3, [r2, r3]
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	79bb      	ldrb	r3, [r7, #6]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	b25b      	sxtb	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b259      	sxtb	r1, r3
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	4603      	mov	r3, r0
 80017d0:	01db      	lsls	r3, r3, #7
 80017d2:	4413      	add	r3, r2
 80017d4:	b2c9      	uxtb	r1, r1
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <ssd1306_DrawPixel+0xa0>)
 80017d8:	54d1      	strb	r1, [r2, r3]
 80017da:	e01d      	b.n	8001818 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017dc:	79fa      	ldrb	r2, [r7, #7]
 80017de:	79bb      	ldrb	r3, [r7, #6]
 80017e0:	08db      	lsrs	r3, r3, #3
 80017e2:	b2d8      	uxtb	r0, r3
 80017e4:	4603      	mov	r3, r0
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	4413      	add	r3, r2
 80017ea:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <ssd1306_DrawPixel+0xa0>)
 80017ec:	5cd3      	ldrb	r3, [r2, r3]
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	b25b      	sxtb	r3, r3
 8001802:	4013      	ands	r3, r2
 8001804:	b259      	sxtb	r1, r3
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	4603      	mov	r3, r0
 800180a:	01db      	lsls	r3, r3, #7
 800180c:	4413      	add	r3, r2
 800180e:	b2c9      	uxtb	r1, r1
 8001810:	4a03      	ldr	r2, [pc, #12]	; (8001820 <ssd1306_DrawPixel+0xa0>)
 8001812:	54d1      	strb	r1, [r2, r3]
 8001814:	e000      	b.n	8001818 <ssd1306_DrawPixel+0x98>
        return;
 8001816:	bf00      	nop
    }
}
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	20000388 	.word	0x20000388

08001824 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	4604      	mov	r4, r0
 800182c:	1d38      	adds	r0, r7, #4
 800182e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001832:	461a      	mov	r2, r3
 8001834:	4623      	mov	r3, r4
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	4613      	mov	r3, r2
 800183a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b1f      	cmp	r3, #31
 8001840:	d902      	bls.n	8001848 <ssd1306_WriteChar+0x24>
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b7e      	cmp	r3, #126	; 0x7e
 8001846:	d901      	bls.n	800184c <ssd1306_WriteChar+0x28>
        return 0;
 8001848:	2300      	movs	r3, #0
 800184a:	e06d      	b.n	8001928 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <ssd1306_WriteChar+0x10c>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	793b      	ldrb	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	2b80      	cmp	r3, #128	; 0x80
 8001858:	dc06      	bgt.n	8001868 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800185a:	4b35      	ldr	r3, [pc, #212]	; (8001930 <ssd1306_WriteChar+0x10c>)
 800185c:	885b      	ldrh	r3, [r3, #2]
 800185e:	461a      	mov	r2, r3
 8001860:	797b      	ldrb	r3, [r7, #5]
 8001862:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001864:	2b40      	cmp	r3, #64	; 0x40
 8001866:	dd01      	ble.n	800186c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001868:	2300      	movs	r3, #0
 800186a:	e05d      	b.n	8001928 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	e04c      	b.n	800190c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	3b20      	subs	r3, #32
 8001878:	7979      	ldrb	r1, [r7, #5]
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4619      	mov	r1, r3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	440b      	add	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	e034      	b.n	80018fc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d012      	beq.n	80018c8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <ssd1306_WriteChar+0x10c>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b2d8      	uxtb	r0, r3
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <ssd1306_WriteChar+0x10c>)
 80018b2:	885b      	ldrh	r3, [r3, #2]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	7bba      	ldrb	r2, [r7, #14]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff ff5d 	bl	8001780 <ssd1306_DrawPixel>
 80018c6:	e016      	b.n	80018f6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <ssd1306_WriteChar+0x10c>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	b2d8      	uxtb	r0, r3
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <ssd1306_WriteChar+0x10c>)
 80018d8:	885b      	ldrh	r3, [r3, #2]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b2d9      	uxtb	r1, r3
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	f7ff ff45 	bl	8001780 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	793b      	ldrb	r3, [r7, #4]
 80018fe:	461a      	mov	r2, r3
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	4293      	cmp	r3, r2
 8001904:	d3c5      	bcc.n	8001892 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	797b      	ldrb	r3, [r7, #5]
 800190e:	461a      	mov	r2, r3
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4293      	cmp	r3, r2
 8001914:	d3ad      	bcc.n	8001872 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <ssd1306_WriteChar+0x10c>)
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	793b      	ldrb	r3, [r7, #4]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b03      	ldr	r3, [pc, #12]	; (8001930 <ssd1306_WriteChar+0x10c>)
 8001924:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3724      	adds	r7, #36	; 0x24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	20000788 	.word	0x20000788

08001934 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	1d38      	adds	r0, r7, #4
 800193e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001942:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001944:	e012      	b.n	800196c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	7818      	ldrb	r0, [r3, #0]
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	1d3a      	adds	r2, r7, #4
 800194e:	ca06      	ldmia	r2, {r1, r2}
 8001950:	f7ff ff68 	bl	8001824 <ssd1306_WriteChar>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d002      	beq.n	8001966 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	e008      	b.n	8001978 <ssd1306_WriteString+0x44>
        }
        str++;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e8      	bne.n	8001946 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	781b      	ldrb	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	460a      	mov	r2, r1
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	4613      	mov	r3, r2
 800198e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	b29a      	uxth	r2, r3
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <ssd1306_SetCursor+0x2c>)
 8001996:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <ssd1306_SetCursor+0x2c>)
 800199e:	805a      	strh	r2, [r3, #2]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000788 	.word	0x20000788

080019b0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019ba:	2381      	movs	r3, #129	; 0x81
 80019bc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fdf7 	bl	80015b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fdf3 	bl	80015b4 <ssd1306_WriteCommand>
}
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80019e8:	23af      	movs	r3, #175	; 0xaf
 80019ea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <ssd1306_SetDisplayOn+0x38>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	715a      	strb	r2, [r3, #5]
 80019f2:	e004      	b.n	80019fe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80019f4:	23ae      	movs	r3, #174	; 0xae
 80019f6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <ssd1306_SetDisplayOn+0x38>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fdd7 	bl	80015b4 <ssd1306_WriteCommand>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000788 	.word	0x20000788

08001a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_MspInit+0x60>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_MspInit+0x60>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abe:	f000 f9a9 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  return 1;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <_kill>:

int _kill(int pid, int sig)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ade:	f003 fe61 	bl	80057a4 <__errno>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2216      	movs	r2, #22
 8001ae6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffe7 	bl	8001ad4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b06:	e7fe      	b.n	8001b06 <_exit+0x12>

08001b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
  }

  return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fbcf 	bl	8001300 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
  }
  return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_isatty>:

int _isatty(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
	...

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f003 fdca 	bl	80057a4 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20005000 	.word	0x20005000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	20000790 	.word	0x20000790
 8001c44:	20000930 	.word	0x20000930

08001c48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <MX_USART2_UART_Init+0x50>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_USART2_UART_Init+0x4c>)
 8001c8c:	f002 fbbc 	bl	8004408 <HAL_UART_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c96:	f7ff fc81 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000794 	.word	0x20000794
 8001ca4:	40004400 	.word	0x40004400

08001ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_UART_MspInit+0x88>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d12f      	bne.n	8001d28 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_UART_MspInit+0x8c>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_UART_MspInit+0x8c>)
 8001cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd2:	61d3      	str	r3, [r2, #28]
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_UART_MspInit+0x8c>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_UART_MspInit+0x8c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_UART_MspInit+0x8c>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_UART_MspInit+0x8c>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <HAL_UART_MspInit+0x90>)
 8001d0c:	f000 fcc0 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d10:	2308      	movs	r3, #8
 8001d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_UART_MspInit+0x90>)
 8001d24:	f000 fcb4 	bl	8002690 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40004400 	.word	0x40004400
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010800 	.word	0x40010800

08001d3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d3c:	f7ff ff84 	bl	8001c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d44:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d58:	4c09      	ldr	r4, [pc, #36]	; (8001d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d66:	f003 fd23 	bl	80057b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6a:	f7ff fadd 	bl	8001328 <main>
  bx lr
 8001d6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001d78:	08009b00 	.word	0x08009b00
  ldr r2, =_sbss
 8001d7c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001d80:	2000092c 	.word	0x2000092c

08001d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_2_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_Init+0x28>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_Init+0x28>)
 8001d92:	f043 0310 	orr.w	r3, r3, #16
 8001d96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 fc45 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9e:	200f      	movs	r0, #15
 8001da0:	f000 f808 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da4:	f7ff fe36 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x54>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x58>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fc4f 	bl	8002676 <HAL_SYSTICK_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00e      	b.n	8001e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d80a      	bhi.n	8001dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f000 fc25 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df4:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <HAL_InitTick+0x5c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000018 	.word	0x20000018
 8001e0c:	20000020 	.word	0x20000020
 8001e10:	2000001c 	.word	0x2000001c

08001e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_IncTick+0x1c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_IncTick+0x20>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a03      	ldr	r2, [pc, #12]	; (8001e34 <HAL_IncTick+0x20>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	20000020 	.word	0x20000020
 8001e34:	200007dc 	.word	0x200007dc

08001e38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b02      	ldr	r3, [pc, #8]	; (8001e48 <HAL_GetTick+0x10>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	200007dc 	.word	0x200007dc

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Delay+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffe0 	bl	8001e38 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000020 	.word	0x20000020

08001e94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0be      	b.n	8002034 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe ffec 	bl	8000eb0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fab3 	bl	8002444 <ADC_ConversionStop_Disable>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 8099 	bne.w	8002022 <HAL_ADC_Init+0x18e>
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 8095 	bne.w	8002022 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f00:	f023 0302 	bic.w	r3, r3, #2
 8001f04:	f043 0202 	orr.w	r2, r3, #2
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7b1b      	ldrb	r3, [r3, #12]
 8001f1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2c:	d003      	beq.n	8001f36 <HAL_ADC_Init+0xa2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <HAL_ADC_Init+0xa8>
 8001f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3a:	e000      	b.n	8001f3e <HAL_ADC_Init+0xaa>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7d1b      	ldrb	r3, [r3, #20]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d119      	bne.n	8001f80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7b1b      	ldrb	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	035a      	lsls	r2, r3, #13
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e00b      	b.n	8001f80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_ADC_Init+0x1a8>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb0:	d003      	beq.n	8001fba <HAL_ADC_Init+0x126>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d104      	bne.n	8001fc4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	051b      	lsls	r3, r3, #20
 8001fc2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	4b18      	ldr	r3, [pc, #96]	; (8002040 <HAL_ADC_Init+0x1ac>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d10b      	bne.n	8002000 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f023 0303 	bic.w	r3, r3, #3
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ffe:	e018      	b.n	8002032 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f023 0312 	bic.w	r3, r3, #18
 8002008:	f043 0210 	orr.w	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002020:	e007      	b.n	8002032 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002032:	7dfb      	ldrb	r3, [r7, #23]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	ffe1f7fd 	.word	0xffe1f7fd
 8002040:	ff1f0efe 	.word	0xff1f0efe

08002044 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_ADC_Start+0x1a>
 800205a:	2302      	movs	r3, #2
 800205c:	e098      	b.n	8002190 <HAL_ADC_Start+0x14c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f992 	bl	8002390 <ADC_Enable>
 800206c:	4603      	mov	r3, r0
 800206e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8087 	bne.w	8002186 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a41      	ldr	r2, [pc, #260]	; (8002198 <HAL_ADC_Start+0x154>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d105      	bne.n	80020a2 <HAL_ADC_Start+0x5e>
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_ADC_Start+0x158>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d115      	bne.n	80020ce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d026      	beq.n	800210a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020cc:	e01d      	b.n	800210a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2f      	ldr	r2, [pc, #188]	; (800219c <HAL_ADC_Start+0x158>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d004      	beq.n	80020ee <HAL_ADC_Start+0xaa>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2b      	ldr	r2, [pc, #172]	; (8002198 <HAL_ADC_Start+0x154>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10d      	bne.n	800210a <HAL_ADC_Start+0xc6>
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_ADC_Start+0x158>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002102:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	f023 0206 	bic.w	r2, r3, #6
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c
 8002122:	e002      	b.n	800212a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0202 	mvn.w	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002146:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800214a:	d113      	bne.n	8002174 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_ADC_Start+0x154>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d105      	bne.n	8002162 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_ADC_Start+0x158>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d108      	bne.n	8002174 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	e00c      	b.n	800218e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e003      	b.n	800218e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40012800 	.word	0x40012800
 800219c:	40012400 	.word	0x40012400

080021a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x20>
 80021bc:	2302      	movs	r3, #2
 80021be:	e0dc      	b.n	800237a <HAL_ADC_ConfigChannel+0x1da>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d81c      	bhi.n	800220a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3b05      	subs	r3, #5
 80021e2:	221f      	movs	r2, #31
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4019      	ands	r1, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	3b05      	subs	r3, #5
 80021fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	635a      	str	r2, [r3, #52]	; 0x34
 8002208:	e03c      	b.n	8002284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d81c      	bhi.n	800224c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b23      	subs	r3, #35	; 0x23
 8002224:	221f      	movs	r2, #31
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	4019      	ands	r1, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	3b23      	subs	r3, #35	; 0x23
 800223e:	fa00 f203 	lsl.w	r2, r0, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
 800224a:	e01b      	b.n	8002284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	3b41      	subs	r3, #65	; 0x41
 800225e:	221f      	movs	r2, #31
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	4019      	ands	r1, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b41      	subs	r3, #65	; 0x41
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b09      	cmp	r3, #9
 800228a:	d91c      	bls.n	80022c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68d9      	ldr	r1, [r3, #12]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	3b1e      	subs	r3, #30
 800229e:	2207      	movs	r2, #7
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4019      	ands	r1, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6898      	ldr	r0, [r3, #8]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	3b1e      	subs	r3, #30
 80022b8:	fa00 f203 	lsl.w	r2, r0, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	e019      	b.n	80022fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6919      	ldr	r1, [r3, #16]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	2207      	movs	r2, #7
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	4019      	ands	r1, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6898      	ldr	r0, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d003      	beq.n	800230a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002306:	2b11      	cmp	r3, #17
 8002308:	d132      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_ADC_ConfigChannel+0x1e4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d125      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d126      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002330:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b10      	cmp	r3, #16
 8002338:	d11a      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_ADC_ConfigChannel+0x1e8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <HAL_ADC_ConfigChannel+0x1ec>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	0c9a      	lsrs	r2, r3, #18
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002350:	e002      	b.n	8002358 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x1b2>
 800235e:	e007      	b.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40012400 	.word	0x40012400
 8002388:	20000018 	.word	0x20000018
 800238c:	431bde83 	.word	0x431bde83

08002390 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d040      	beq.n	8002430 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <ADC_Enable+0xac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <ADC_Enable+0xb0>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	0c9b      	lsrs	r3, r3, #18
 80023ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023cc:	e002      	b.n	80023d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023da:	f7ff fd2d 	bl	8001e38 <HAL_GetTick>
 80023de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023e0:	e01f      	b.n	8002422 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023e2:	f7ff fd29 	bl	8001e38 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d918      	bls.n	8002422 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d011      	beq.n	8002422 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e007      	b.n	8002432 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d1d8      	bne.n	80023e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000018 	.word	0x20000018
 8002440:	431bde83 	.word	0x431bde83

08002444 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d12e      	bne.n	80024bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800246e:	f7ff fce3 	bl	8001e38 <HAL_GetTick>
 8002472:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002474:	e01b      	b.n	80024ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002476:	f7ff fcdf 	bl	8001e38 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d914      	bls.n	80024ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d10d      	bne.n	80024ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e007      	b.n	80024be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d0dc      	beq.n	8002476 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	; (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	; (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff90 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff49 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff5e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff90 	bl	8002580 <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5f 	bl	800252c <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffb0 	bl	80025e4 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	e169      	b.n	8002978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a4:	2201      	movs	r2, #1
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8158 	bne.w	8002972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a9a      	ldr	r2, [pc, #616]	; (8002930 <HAL_GPIO_Init+0x2a0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d05e      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026cc:	4a98      	ldr	r2, [pc, #608]	; (8002930 <HAL_GPIO_Init+0x2a0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d875      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026d2:	4a98      	ldr	r2, [pc, #608]	; (8002934 <HAL_GPIO_Init+0x2a4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d058      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026d8:	4a96      	ldr	r2, [pc, #600]	; (8002934 <HAL_GPIO_Init+0x2a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d86f      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026de:	4a96      	ldr	r2, [pc, #600]	; (8002938 <HAL_GPIO_Init+0x2a8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d052      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026e4:	4a94      	ldr	r2, [pc, #592]	; (8002938 <HAL_GPIO_Init+0x2a8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d869      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026ea:	4a94      	ldr	r2, [pc, #592]	; (800293c <HAL_GPIO_Init+0x2ac>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d04c      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026f0:	4a92      	ldr	r2, [pc, #584]	; (800293c <HAL_GPIO_Init+0x2ac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d863      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026f6:	4a92      	ldr	r2, [pc, #584]	; (8002940 <HAL_GPIO_Init+0x2b0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d046      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026fc:	4a90      	ldr	r2, [pc, #576]	; (8002940 <HAL_GPIO_Init+0x2b0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d85d      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d82a      	bhi.n	800275c <HAL_GPIO_Init+0xcc>
 8002706:	2b12      	cmp	r3, #18
 8002708:	d859      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_GPIO_Init+0x80>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	0800278b 	.word	0x0800278b
 8002714:	08002765 	.word	0x08002765
 8002718:	08002777 	.word	0x08002777
 800271c:	080027b9 	.word	0x080027b9
 8002720:	080027bf 	.word	0x080027bf
 8002724:	080027bf 	.word	0x080027bf
 8002728:	080027bf 	.word	0x080027bf
 800272c:	080027bf 	.word	0x080027bf
 8002730:	080027bf 	.word	0x080027bf
 8002734:	080027bf 	.word	0x080027bf
 8002738:	080027bf 	.word	0x080027bf
 800273c:	080027bf 	.word	0x080027bf
 8002740:	080027bf 	.word	0x080027bf
 8002744:	080027bf 	.word	0x080027bf
 8002748:	080027bf 	.word	0x080027bf
 800274c:	080027bf 	.word	0x080027bf
 8002750:	080027bf 	.word	0x080027bf
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002781 	.word	0x08002781
 800275c:	4a79      	ldr	r2, [pc, #484]	; (8002944 <HAL_GPIO_Init+0x2b4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002762:	e02c      	b.n	80027be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e029      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	3304      	adds	r3, #4
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e024      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	3308      	adds	r3, #8
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e01f      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	330c      	adds	r3, #12
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e01a      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002792:	2304      	movs	r3, #4
 8002794:	623b      	str	r3, [r7, #32]
          break;
 8002796:	e013      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a0:	2308      	movs	r3, #8
 80027a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	611a      	str	r2, [r3, #16]
          break;
 80027aa:	e009      	b.n	80027c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	615a      	str	r2, [r3, #20]
          break;
 80027b6:	e003      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
          break;
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          break;
 80027be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2bff      	cmp	r3, #255	; 0xff
 80027c4:	d801      	bhi.n	80027ca <HAL_GPIO_Init+0x13a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_Init+0x13e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d802      	bhi.n	80027dc <HAL_GPIO_Init+0x14c>
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	e002      	b.n	80027e2 <HAL_GPIO_Init+0x152>
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	3b08      	subs	r3, #8
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	210f      	movs	r1, #15
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	431a      	orrs	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80b1 	beq.w	8002972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002810:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6193      	str	r3, [r2, #24]
 800281c:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002828:	4a48      	ldr	r2, [pc, #288]	; (800294c <HAL_GPIO_Init+0x2bc>)
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a40      	ldr	r2, [pc, #256]	; (8002950 <HAL_GPIO_Init+0x2c0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_GPIO_Init+0x1ec>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3f      	ldr	r2, [pc, #252]	; (8002954 <HAL_GPIO_Init+0x2c4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00d      	beq.n	8002878 <HAL_GPIO_Init+0x1e8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3e      	ldr	r2, [pc, #248]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <HAL_GPIO_Init+0x1e4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3d      	ldr	r2, [pc, #244]	; (800295c <HAL_GPIO_Init+0x2cc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_GPIO_Init+0x1e0>
 800286c:	2303      	movs	r3, #3
 800286e:	e006      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002870:	2304      	movs	r3, #4
 8002872:	e004      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002874:	2302      	movs	r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 800287c:	2300      	movs	r3, #0
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288e:	492f      	ldr	r1, [pc, #188]	; (800294c <HAL_GPIO_Init+0x2bc>)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	492c      	ldr	r1, [pc, #176]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4928      	ldr	r1, [pc, #160]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	4922      	ldr	r1, [pc, #136]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	491e      	ldr	r1, [pc, #120]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4918      	ldr	r1, [pc, #96]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	4914      	ldr	r1, [pc, #80]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002910:	4013      	ands	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d021      	beq.n	8002964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	490e      	ldr	r1, [pc, #56]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
 800292c:	e021      	b.n	8002972 <HAL_GPIO_Init+0x2e2>
 800292e:	bf00      	nop
 8002930:	10320000 	.word	0x10320000
 8002934:	10310000 	.word	0x10310000
 8002938:	10220000 	.word	0x10220000
 800293c:	10210000 	.word	0x10210000
 8002940:	10120000 	.word	0x10120000
 8002944:	10110000 	.word	0x10110000
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	40010800 	.word	0x40010800
 8002954:	40010c00 	.word	0x40010c00
 8002958:	40011000 	.word	0x40011000
 800295c:	40011400 	.word	0x40011400
 8002960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_GPIO_Init+0x304>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	43db      	mvns	r3, r3
 800296c:	4909      	ldr	r1, [pc, #36]	; (8002994 <HAL_GPIO_Init+0x304>)
 800296e:	4013      	ands	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	3301      	adds	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	f47f ae8e 	bne.w	80026a4 <HAL_GPIO_Init+0x14>
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	372c      	adds	r7, #44	; 0x2c
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40010400 	.word	0x40010400

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	611a      	str	r2, [r3, #16]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e12b      	b.n	8002c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fb4e 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0201 	bic.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a2c:	f001 fbf0 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 8002a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4a81      	ldr	r2, [pc, #516]	; (8002c3c <HAL_I2C_Init+0x274>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d807      	bhi.n	8002a4c <HAL_I2C_Init+0x84>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a80      	ldr	r2, [pc, #512]	; (8002c40 <HAL_I2C_Init+0x278>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	bf94      	ite	ls
 8002a44:	2301      	movls	r3, #1
 8002a46:	2300      	movhi	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e006      	b.n	8002a5a <HAL_I2C_Init+0x92>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a7d      	ldr	r2, [pc, #500]	; (8002c44 <HAL_I2C_Init+0x27c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	bf94      	ite	ls
 8002a54:	2301      	movls	r3, #1
 8002a56:	2300      	movhi	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0e7      	b.n	8002c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a78      	ldr	r2, [pc, #480]	; (8002c48 <HAL_I2C_Init+0x280>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0c9b      	lsrs	r3, r3, #18
 8002a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a6a      	ldr	r2, [pc, #424]	; (8002c3c <HAL_I2C_Init+0x274>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d802      	bhi.n	8002a9c <HAL_I2C_Init+0xd4>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	e009      	b.n	8002ab0 <HAL_I2C_Init+0xe8>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	4a69      	ldr	r2, [pc, #420]	; (8002c4c <HAL_I2C_Init+0x284>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	3301      	adds	r3, #1
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	495c      	ldr	r1, [pc, #368]	; (8002c3c <HAL_I2C_Init+0x274>)
 8002acc:	428b      	cmp	r3, r1
 8002ace:	d819      	bhi.n	8002b04 <HAL_I2C_Init+0x13c>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e59      	subs	r1, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ade:	1c59      	adds	r1, r3, #1
 8002ae0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_I2C_Init+0x138>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1e59      	subs	r1, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af8:	3301      	adds	r3, #1
 8002afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afe:	e051      	b.n	8002ba4 <HAL_I2C_Init+0x1dc>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e04f      	b.n	8002ba4 <HAL_I2C_Init+0x1dc>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d111      	bne.n	8002b30 <HAL_I2C_Init+0x168>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e58      	subs	r0, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	440b      	add	r3, r1
 8002b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	e012      	b.n	8002b56 <HAL_I2C_Init+0x18e>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1e58      	subs	r0, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	0099      	lsls	r1, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Init+0x196>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e022      	b.n	8002ba4 <HAL_I2C_Init+0x1dc>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10e      	bne.n	8002b84 <HAL_I2C_Init+0x1bc>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1e58      	subs	r0, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	440b      	add	r3, r1
 8002b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b82:	e00f      	b.n	8002ba4 <HAL_I2C_Init+0x1dc>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e58      	subs	r0, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	0099      	lsls	r1, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	6809      	ldr	r1, [r1, #0]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6911      	ldr	r1, [r2, #16]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	000186a0 	.word	0x000186a0
 8002c40:	001e847f 	.word	0x001e847f
 8002c44:	003d08ff 	.word	0x003d08ff
 8002c48:	431bde83 	.word	0x431bde83
 8002c4c:	10624dd3 	.word	0x10624dd3

08002c50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	460b      	mov	r3, r1
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c6a:	f7ff f8e5 	bl	8001e38 <HAL_GetTick>
 8002c6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	f040 80d9 	bne.w	8002e30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2319      	movs	r3, #25
 8002c84:	2201      	movs	r2, #1
 8002c86:	496d      	ldr	r1, [pc, #436]	; (8002e3c <HAL_I2C_Mem_Write+0x1ec>)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fcc1 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
 8002c96:	e0cc      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2C_Mem_Write+0x56>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e0c5      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d007      	beq.n	8002ccc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2221      	movs	r2, #33	; 0x21
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a4d      	ldr	r2, [pc, #308]	; (8002e40 <HAL_I2C_Mem_Write+0x1f0>)
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d0e:	88f8      	ldrh	r0, [r7, #6]
 8002d10:	893a      	ldrh	r2, [r7, #8]
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 faf8 	bl	8003314 <I2C_RequestMemoryWrite>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d052      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e081      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fd86 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d107      	bne.n	8002d56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06b      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d11b      	bne.n	8002dd0 <HAL_I2C_Mem_Write+0x180>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d017      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1aa      	bne.n	8002d2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fd79 	bl	80038d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00d      	beq.n	8002e04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d107      	bne.n	8002e00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e016      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	00100002 	.word	0x00100002
 8002e40:	ffff0000 	.word	0xffff0000

08002e44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	; 0x30
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	817b      	strh	r3, [r7, #10]
 8002e56:	460b      	mov	r3, r1
 8002e58:	813b      	strh	r3, [r7, #8]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e62:	f7fe ffe9 	bl	8001e38 <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	f040 8244 	bne.w	80032fe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2319      	movs	r3, #25
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4982      	ldr	r1, [pc, #520]	; (8003088 <HAL_I2C_Mem_Read+0x244>)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fbc5 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e237      	b.n	8003300 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Mem_Read+0x5a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e230      	b.n	8003300 <HAL_I2C_Mem_Read+0x4bc>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d007      	beq.n	8002ec4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2222      	movs	r2, #34	; 0x22
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a62      	ldr	r2, [pc, #392]	; (800308c <HAL_I2C_Mem_Read+0x248>)
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f06:	88f8      	ldrh	r0, [r7, #6]
 8002f08:	893a      	ldrh	r2, [r7, #8]
 8002f0a:	8979      	ldrh	r1, [r7, #10]
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	4603      	mov	r3, r0
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fa92 	bl	8003440 <I2C_RequestMemoryRead>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e1ec      	b.n	8003300 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d113      	bne.n	8002f56 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e1c0      	b.n	80032d8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d11e      	bne.n	8002f9c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f6e:	b672      	cpsid	i
}
 8002f70:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f98:	b662      	cpsie	i
}
 8002f9a:	e035      	b.n	8003008 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d11e      	bne.n	8002fe2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
}
 8002fb6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fdc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fde:	b662      	cpsie	i
}
 8002fe0:	e012      	b.n	8003008 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ff0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003008:	e166      	b.n	80032d8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	2b03      	cmp	r3, #3
 8003010:	f200 811f 	bhi.w	8003252 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	2b01      	cmp	r3, #1
 800301a:	d123      	bne.n	8003064 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fc9f 	bl	8003964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e167      	b.n	8003300 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003062:	e139      	b.n	80032d8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	2b02      	cmp	r3, #2
 800306a:	d152      	bne.n	8003112 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003072:	2200      	movs	r2, #0
 8003074:	4906      	ldr	r1, [pc, #24]	; (8003090 <HAL_I2C_Mem_Read+0x24c>)
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 faca 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e13c      	b.n	8003300 <HAL_I2C_Mem_Read+0x4bc>
 8003086:	bf00      	nop
 8003088:	00100002 	.word	0x00100002
 800308c:	ffff0000 	.word	0xffff0000
 8003090:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003094:	b672      	cpsid	i
}
 8003096:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030da:	b662      	cpsie	i
}
 80030dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003110:	e0e2      	b.n	80032d8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	2200      	movs	r2, #0
 800311a:	497b      	ldr	r1, [pc, #492]	; (8003308 <HAL_I2C_Mem_Read+0x4c4>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fa77 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0e9      	b.n	8003300 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800313c:	b672      	cpsid	i
}
 800313e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003172:	4b66      	ldr	r3, [pc, #408]	; (800330c <HAL_I2C_Mem_Read+0x4c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	08db      	lsrs	r3, r3, #3
 8003178:	4a65      	ldr	r2, [pc, #404]	; (8003310 <HAL_I2C_Mem_Read+0x4cc>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	0a1a      	lsrs	r2, r3, #8
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00da      	lsls	r2, r3, #3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	3b01      	subs	r3, #1
 8003190:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d118      	bne.n	80031ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f043 0220 	orr.w	r2, r3, #32
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80031ba:	b662      	cpsie	i
}
 80031bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e09a      	b.n	8003300 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d1d9      	bne.n	800318c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800321a:	b662      	cpsie	i
}
 800321c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003250:	e042      	b.n	80032d8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003254:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fb84 	bl	8003964 <I2C_WaitOnRXNEFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e04c      	b.n	8003300 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d118      	bne.n	80032d8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f47f ae94 	bne.w	800300a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3728      	adds	r7, #40	; 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	00010004 	.word	0x00010004
 800330c:	20000018 	.word	0x20000018
 8003310:	14f8b589 	.word	0x14f8b589

08003314 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	460b      	mov	r3, r1
 8003328:	813b      	strh	r3, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2200      	movs	r2, #0
 8003346:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f960 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003364:	d103      	bne.n	800336e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e05f      	b.n	8003432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	492d      	ldr	r1, [pc, #180]	; (800343c <I2C_RequestMemoryWrite+0x128>)
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f9bb 	bl	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e04c      	b.n	8003432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b0:	6a39      	ldr	r1, [r7, #32]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fa46 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d107      	bne.n	80033d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e02b      	b.n	8003432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d105      	bne.n	80033ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e0:	893b      	ldrh	r3, [r7, #8]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	611a      	str	r2, [r3, #16]
 80033ea:	e021      	b.n	8003430 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033ec:	893b      	ldrh	r3, [r7, #8]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fa20 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e005      	b.n	8003432 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003426:	893b      	ldrh	r3, [r7, #8]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	00010002 	.word	0x00010002

08003440 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af02      	add	r7, sp, #8
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	4608      	mov	r0, r1
 800344a:	4611      	mov	r1, r2
 800344c:	461a      	mov	r2, r3
 800344e:	4603      	mov	r3, r0
 8003450:	817b      	strh	r3, [r7, #10]
 8003452:	460b      	mov	r3, r1
 8003454:	813b      	strh	r3, [r7, #8]
 8003456:	4613      	mov	r3, r2
 8003458:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003468:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003478:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	2200      	movs	r2, #0
 8003482:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f8c2 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00d      	beq.n	80034ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a0:	d103      	bne.n	80034aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0aa      	b.n	8003604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ae:	897b      	ldrh	r3, [r7, #10]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	4952      	ldr	r1, [pc, #328]	; (800360c <I2C_RequestMemoryRead+0x1cc>)
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f91d 	bl	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e097      	b.n	8003604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	6a39      	ldr	r1, [r7, #32]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f9a8 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00d      	beq.n	8003516 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d107      	bne.n	8003512 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003510:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e076      	b.n	8003604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800351c:	893b      	ldrh	r3, [r7, #8]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	611a      	str	r2, [r3, #16]
 8003526:	e021      	b.n	800356c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003528:	893b      	ldrh	r3, [r7, #8]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	b29b      	uxth	r3, r3
 800352e:	b2da      	uxtb	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	6a39      	ldr	r1, [r7, #32]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f982 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b04      	cmp	r3, #4
 800354c:	d107      	bne.n	800355e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e050      	b.n	8003604 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003562:	893b      	ldrh	r3, [r7, #8]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356e:	6a39      	ldr	r1, [r7, #32]
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f967 	bl	8003844 <I2C_WaitOnTXEFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00d      	beq.n	8003598 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	2b04      	cmp	r3, #4
 8003582:	d107      	bne.n	8003594 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003592:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e035      	b.n	8003604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f82b 	bl	8003610 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ce:	d103      	bne.n	80035d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e013      	b.n	8003604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035dc:	897b      	ldrh	r3, [r7, #10]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	6a3a      	ldr	r2, [r7, #32]
 80035f0:	4906      	ldr	r1, [pc, #24]	; (800360c <I2C_RequestMemoryRead+0x1cc>)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f886 	bl	8003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	00010002 	.word	0x00010002

08003610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003620:	e048      	b.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d044      	beq.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fe fc05 	bl	8001e38 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d139      	bne.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10d      	bne.n	8003666 <I2C_WaitOnFlagUntilTimeout+0x56>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	e00c      	b.n	8003680 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	43da      	mvns	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	429a      	cmp	r2, r3
 8003684:	d116      	bne.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e023      	b.n	80036fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	0c1b      	lsrs	r3, r3, #16
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10d      	bne.n	80036da <I2C_WaitOnFlagUntilTimeout+0xca>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	e00c      	b.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	43da      	mvns	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d093      	beq.n	8003622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003712:	e071      	b.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d123      	bne.n	800376c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800373c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f043 0204 	orr.w	r2, r3, #4
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e067      	b.n	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	d041      	beq.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003774:	f7fe fb60 	bl	8001e38 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d136      	bne.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d10c      	bne.n	80037ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	e00b      	b.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	43da      	mvns	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4013      	ands	r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e021      	b.n	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d10c      	bne.n	800381c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	43da      	mvns	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf14      	ite	ne
 8003814:	2301      	movne	r3, #1
 8003816:	2300      	moveq	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e00b      	b.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f af6d 	bne.w	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003850:	e034      	b.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f8e3 	bl	8003a1e <I2C_IsAcknowledgeFailed>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e034      	b.n	80038cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d028      	beq.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386a:	f7fe fae5 	bl	8001e38 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d11d      	bne.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b80      	cmp	r3, #128	; 0x80
 800388c:	d016      	beq.n	80038bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e007      	b.n	80038cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d1c3      	bne.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038e0:	e034      	b.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f89b 	bl	8003a1e <I2C_IsAcknowledgeFailed>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e034      	b.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d028      	beq.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fa9d 	bl	8001e38 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11d      	bne.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b04      	cmp	r3, #4
 800391c:	d016      	beq.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f043 0220 	orr.w	r2, r3, #32
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e007      	b.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	d1c3      	bne.n	80038e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003970:	e049      	b.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b10      	cmp	r3, #16
 800397e:	d119      	bne.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0210 	mvn.w	r2, #16
 8003988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e030      	b.n	8003a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b4:	f7fe fa40 	bl	8001e38 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d302      	bcc.n	80039ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11d      	bne.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d016      	beq.n	8003a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f043 0220 	orr.w	r2, r3, #32
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e007      	b.n	8003a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d1ae      	bne.n	8003972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a34:	d11b      	bne.n	8003a6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
	...

08003a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e272      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8087 	beq.w	8003baa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a9c:	4b92      	ldr	r3, [pc, #584]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d00c      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aa8:	4b8f      	ldr	r3, [pc, #572]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d112      	bne.n	8003ada <HAL_RCC_OscConfig+0x5e>
 8003ab4:	4b8c      	ldr	r3, [pc, #560]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d10b      	bne.n	8003ada <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac2:	4b89      	ldr	r3, [pc, #548]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d06c      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x12c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d168      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e24c      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x76>
 8003ae4:	4b80      	ldr	r3, [pc, #512]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a7f      	ldr	r2, [pc, #508]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	e02e      	b.n	8003b50 <HAL_RCC_OscConfig+0xd4>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x98>
 8003afa:	4b7b      	ldr	r3, [pc, #492]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a7a      	ldr	r2, [pc, #488]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b78      	ldr	r3, [pc, #480]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a77      	ldr	r2, [pc, #476]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e01d      	b.n	8003b50 <HAL_RCC_OscConfig+0xd4>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0xbc>
 8003b1e:	4b72      	ldr	r3, [pc, #456]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a71      	ldr	r2, [pc, #452]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a6e      	ldr	r2, [pc, #440]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e00b      	b.n	8003b50 <HAL_RCC_OscConfig+0xd4>
 8003b38:	4b6b      	ldr	r3, [pc, #428]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a6a      	ldr	r2, [pc, #424]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b68      	ldr	r3, [pc, #416]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a67      	ldr	r2, [pc, #412]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d013      	beq.n	8003b80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fe f96e 	bl	8001e38 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fe f96a 	bl	8001e38 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e200      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	4b5d      	ldr	r3, [pc, #372]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0xe4>
 8003b7e:	e014      	b.n	8003baa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fe f95a 	bl	8001e38 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fe f956 	bl	8001e38 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e1ec      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9a:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x10c>
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d063      	beq.n	8003c7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bb6:	4b4c      	ldr	r3, [pc, #304]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bc2:	4b49      	ldr	r3, [pc, #292]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d11c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x18c>
 8003bce:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d116      	bne.n	8003c08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bda:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x176>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e1c0      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4939      	ldr	r1, [pc, #228]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c06:	e03a      	b.n	8003c7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <HAL_RCC_OscConfig+0x270>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7fe f90f 	bl	8001e38 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1e:	f7fe f90b 	bl	8001e38 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e1a1      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c30:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4927      	ldr	r1, [pc, #156]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	600b      	str	r3, [r1, #0]
 8003c50:	e015      	b.n	8003c7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c52:	4b26      	ldr	r3, [pc, #152]	; (8003cec <HAL_RCC_OscConfig+0x270>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c58:	f7fe f8ee 	bl	8001e38 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c60:	f7fe f8ea 	bl	8001e38 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e180      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d03a      	beq.n	8003d00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d019      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c92:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c98:	f7fe f8ce 	bl	8001e38 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca0:	f7fe f8ca 	bl	8001e38 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e160      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f000 face 	bl	8004260 <RCC_Delay>
 8003cc4:	e01c      	b.n	8003d00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ccc:	f7fe f8b4 	bl	8001e38 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd2:	e00f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd4:	f7fe f8b0 	bl	8001e38 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d908      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e146      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
 8003ce6:	bf00      	nop
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	42420000 	.word	0x42420000
 8003cf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	4b92      	ldr	r3, [pc, #584]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e9      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80a6 	beq.w	8003e5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d12:	4b8b      	ldr	r3, [pc, #556]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10d      	bne.n	8003d3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1e:	4b88      	ldr	r3, [pc, #544]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	4a87      	ldr	r2, [pc, #540]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	61d3      	str	r3, [r2, #28]
 8003d2a:	4b85      	ldr	r3, [pc, #532]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <HAL_RCC_OscConfig+0x4c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d118      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	4b7f      	ldr	r3, [pc, #508]	; (8003f44 <HAL_RCC_OscConfig+0x4c8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a7e      	ldr	r2, [pc, #504]	; (8003f44 <HAL_RCC_OscConfig+0x4c8>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d52:	f7fe f871 	bl	8001e38 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5a:	f7fe f86d 	bl	8001e38 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b64      	cmp	r3, #100	; 0x64
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e103      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6c:	4b75      	ldr	r3, [pc, #468]	; (8003f44 <HAL_RCC_OscConfig+0x4c8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x312>
 8003d80:	4b6f      	ldr	r3, [pc, #444]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4a6e      	ldr	r2, [pc, #440]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6213      	str	r3, [r2, #32]
 8003d8c:	e02d      	b.n	8003dea <HAL_RCC_OscConfig+0x36e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x334>
 8003d96:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	4a69      	ldr	r2, [pc, #420]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	6213      	str	r3, [r2, #32]
 8003da2:	4b67      	ldr	r3, [pc, #412]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4a66      	ldr	r2, [pc, #408]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	f023 0304 	bic.w	r3, r3, #4
 8003dac:	6213      	str	r3, [r2, #32]
 8003dae:	e01c      	b.n	8003dea <HAL_RCC_OscConfig+0x36e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d10c      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x356>
 8003db8:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	4a60      	ldr	r2, [pc, #384]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dbe:	f043 0304 	orr.w	r3, r3, #4
 8003dc2:	6213      	str	r3, [r2, #32]
 8003dc4:	4b5e      	ldr	r3, [pc, #376]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4a5d      	ldr	r2, [pc, #372]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6213      	str	r3, [r2, #32]
 8003dd0:	e00b      	b.n	8003dea <HAL_RCC_OscConfig+0x36e>
 8003dd2:	4b5b      	ldr	r3, [pc, #364]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	4a5a      	ldr	r2, [pc, #360]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	6213      	str	r3, [r2, #32]
 8003dde:	4b58      	ldr	r3, [pc, #352]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4a57      	ldr	r2, [pc, #348]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d015      	beq.n	8003e1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df2:	f7fe f821 	bl	8001e38 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fe f81d 	bl	8001e38 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e0b1      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0ee      	beq.n	8003dfa <HAL_RCC_OscConfig+0x37e>
 8003e1c:	e014      	b.n	8003e48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fe f80b 	bl	8001e38 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fe f807 	bl	8001e38 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e09b      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3c:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ee      	bne.n	8003e26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4e:	4b3c      	ldr	r3, [pc, #240]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8087 	beq.w	8003f72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 030c 	and.w	r3, r3, #12
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d061      	beq.n	8003f34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d146      	bne.n	8003f06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e78:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <HAL_RCC_OscConfig+0x4cc>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7fd ffdb 	bl	8001e38 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fd ffd7 	bl	8001e38 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e06d      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e98:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eac:	d108      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eae:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	4921      	ldr	r1, [pc, #132]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a19      	ldr	r1, [r3, #32]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	491b      	ldr	r1, [pc, #108]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_RCC_OscConfig+0x4cc>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fd ffab 	bl	8001e38 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fd ffa7 	bl	8001e38 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e03d      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x46a>
 8003f04:	e035      	b.n	8003f72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_RCC_OscConfig+0x4cc>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fd ff94 	bl	8001e38 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fd ff90 	bl	8001e38 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e026      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x498>
 8003f32:	e01e      	b.n	8003f72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e019      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40007000 	.word	0x40007000
 8003f48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_OscConfig+0x500>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000

08003f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0d0      	b.n	8004136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f94:	4b6a      	ldr	r3, [pc, #424]	; (8004140 <HAL_RCC_ClockConfig+0x1c0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d910      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b67      	ldr	r3, [pc, #412]	; (8004140 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 0207 	bic.w	r2, r3, #7
 8003faa:	4965      	ldr	r1, [pc, #404]	; (8004140 <HAL_RCC_ClockConfig+0x1c0>)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0b8      	b.n	8004136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fdc:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff4:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	494d      	ldr	r1, [pc, #308]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d040      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d115      	bne.n	800405e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403e:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e073      	b.n	8004136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06b      	b.n	8004136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405e:	4b39      	ldr	r3, [pc, #228]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f023 0203 	bic.w	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4936      	ldr	r1, [pc, #216]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004070:	f7fd fee2 	bl	8001e38 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	e00a      	b.n	800408e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004078:	f7fd fede 	bl	8001e38 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e053      	b.n	8004136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 020c 	and.w	r2, r3, #12
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	429a      	cmp	r2, r3
 800409e:	d1eb      	bne.n	8004078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a0:	4b27      	ldr	r3, [pc, #156]	; (8004140 <HAL_RCC_ClockConfig+0x1c0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d210      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCC_ClockConfig+0x1c0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 0207 	bic.w	r2, r3, #7
 80040b6:	4922      	ldr	r1, [pc, #136]	; (8004140 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_RCC_ClockConfig+0x1c0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e032      	b.n	8004136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4916      	ldr	r1, [pc, #88]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	490e      	ldr	r1, [pc, #56]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800410e:	f000 f821 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004112:	4602      	mov	r2, r0
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	490a      	ldr	r1, [pc, #40]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	5ccb      	ldrb	r3, [r1, r3]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1cc>)
 8004128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1d0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd fe40 	bl	8001db4 <HAL_InitTick>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40022000 	.word	0x40022000
 8004144:	40021000 	.word	0x40021000
 8004148:	080096a4 	.word	0x080096a4
 800414c:	20000018 	.word	0x20000018
 8004150:	2000001c 	.word	0x2000001c

08004154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800416e:	4b1e      	ldr	r3, [pc, #120]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b04      	cmp	r3, #4
 800417c:	d002      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x30>
 800417e:	2b08      	cmp	r3, #8
 8004180:	d003      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0x36>
 8004182:	e027      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004184:	4b19      	ldr	r3, [pc, #100]	; (80041ec <HAL_RCC_GetSysClockFreq+0x98>)
 8004186:	613b      	str	r3, [r7, #16]
      break;
 8004188:	e027      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	0c9b      	lsrs	r3, r3, #18
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004194:	5cd3      	ldrb	r3, [r2, r3]
 8004196:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	0c5b      	lsrs	r3, r3, #17
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041ae:	5cd3      	ldrb	r3, [r2, r3]
 80041b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <HAL_RCC_GetSysClockFreq+0x98>)
 80041b6:	fb03 f202 	mul.w	r2, r3, r2
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e004      	b.n	80041ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0c      	ldr	r2, [pc, #48]	; (80041f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	613b      	str	r3, [r7, #16]
      break;
 80041d2:	e002      	b.n	80041da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCC_GetSysClockFreq+0x98>)
 80041d6:	613b      	str	r3, [r7, #16]
      break;
 80041d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041da:	693b      	ldr	r3, [r7, #16]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	007a1200 	.word	0x007a1200
 80041f0:	080096bc 	.word	0x080096bc
 80041f4:	080096cc 	.word	0x080096cc
 80041f8:	003d0900 	.word	0x003d0900

080041fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004200:	4b02      	ldr	r3, [pc, #8]	; (800420c <HAL_RCC_GetHCLKFreq+0x10>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	20000018 	.word	0x20000018

08004210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004214:	f7ff fff2 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000
 8004234:	080096b4 	.word	0x080096b4

08004238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800423c:	f7ff ffde 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	0adb      	lsrs	r3, r3, #11
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	; (800425c <HAL_RCC_GetPCLK2Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000
 800425c:	080096b4 	.word	0x080096b4

08004260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <RCC_Delay+0x34>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <RCC_Delay+0x38>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0a5b      	lsrs	r3, r3, #9
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800427c:	bf00      	nop
  }
  while (Delay --);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1e5a      	subs	r2, r3, #1
 8004282:	60fa      	str	r2, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f9      	bne.n	800427c <RCC_Delay+0x1c>
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	20000018 	.word	0x20000018
 8004298:	10624dd3 	.word	0x10624dd3

0800429c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d07d      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042b8:	2300      	movs	r3, #0
 80042ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042bc:	4b4f      	ldr	r3, [pc, #316]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c8:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	4a4b      	ldr	r2, [pc, #300]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d2:	61d3      	str	r3, [r2, #28]
 80042d4:	4b49      	ldr	r3, [pc, #292]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e4:	4b46      	ldr	r3, [pc, #280]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d118      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f0:	4b43      	ldr	r3, [pc, #268]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a42      	ldr	r2, [pc, #264]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fc:	f7fd fd9c 	bl	8001e38 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	e008      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004304:	f7fd fd98 	bl	8001e38 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e06d      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b3a      	ldr	r3, [pc, #232]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004322:	4b36      	ldr	r3, [pc, #216]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02e      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d027      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004348:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800434a:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004350:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004356:	4a29      	ldr	r2, [pc, #164]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d014      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7fd fd67 	bl	8001e38 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd fd63 	bl	8001e38 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	; 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d901      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e036      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ee      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004390:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4917      	ldr	r1, [pc, #92]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a8:	4b14      	ldr	r3, [pc, #80]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	4a13      	ldr	r2, [pc, #76]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	490b      	ldr	r1, [pc, #44]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	4904      	ldr	r1, [pc, #16]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	40007000 	.word	0x40007000
 8004404:	42420440 	.word	0x42420440

08004408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e042      	b.n	80044a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fd fc3a 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800444a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f91d 	bl	800468c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	4613      	mov	r3, r2
 80044b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d16d      	bne.n	80045a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_UART_Transmit+0x2c>
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e066      	b.n	80045a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2221      	movs	r2, #33	; 0x21
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044e6:	f7fd fca7 	bl	8001e38 <HAL_GetTick>
 80044ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	88fa      	ldrh	r2, [r7, #6]
 80044f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d108      	bne.n	8004514 <HAL_UART_Transmit+0x6c>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d104      	bne.n	8004514 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	e003      	b.n	800451c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800451c:	e02a      	b.n	8004574 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2200      	movs	r2, #0
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f840 	bl	80045ae <UART_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e036      	b.n	80045a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800454c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	3302      	adds	r3, #2
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	e007      	b.n	8004566 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1cf      	bne.n	800451e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2140      	movs	r1, #64	; 0x40
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f810 	bl	80045ae <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e006      	b.n	80045a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b090      	sub	sp, #64	; 0x40
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045be:	e050      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d04c      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x30>
 80045ce:	f7fd fc33 	bl	8001e38 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045da:	429a      	cmp	r2, r3
 80045dc:	d241      	bcs.n	8004662 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045fe:	637a      	str	r2, [r7, #52]	; 0x34
 8004600:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e5      	bne.n	80045de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3314      	adds	r3, #20
 8004618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	613b      	str	r3, [r7, #16]
   return(result);
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	63bb      	str	r3, [r7, #56]	; 0x38
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004632:	623a      	str	r2, [r7, #32]
 8004634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	69f9      	ldr	r1, [r7, #28]
 8004638:	6a3a      	ldr	r2, [r7, #32]
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e5      	bne.n	8004612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e00f      	b.n	8004682 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	429a      	cmp	r2, r3
 8004670:	bf0c      	ite	eq
 8004672:	2301      	moveq	r3, #1
 8004674:	2300      	movne	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	461a      	mov	r2, r3
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	429a      	cmp	r2, r3
 800467e:	d09f      	beq.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3740      	adds	r7, #64	; 0x40
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046c6:	f023 030c 	bic.w	r3, r3, #12
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699a      	ldr	r2, [r3, #24]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2c      	ldr	r2, [pc, #176]	; (80047a0 <UART_SetConfig+0x114>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d103      	bne.n	80046fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7ff fda0 	bl	8004238 <HAL_RCC_GetPCLK2Freq>
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	e002      	b.n	8004702 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046fc:	f7ff fd88 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 8004700:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	009a      	lsls	r2, r3, #2
 800470c:	441a      	add	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	fbb2 f3f3 	udiv	r3, r2, r3
 8004718:	4a22      	ldr	r2, [pc, #136]	; (80047a4 <UART_SetConfig+0x118>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	0119      	lsls	r1, r3, #4
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009a      	lsls	r2, r3, #2
 800472c:	441a      	add	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	fbb2 f2f3 	udiv	r2, r2, r3
 8004738:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <UART_SetConfig+0x118>)
 800473a:	fba3 0302 	umull	r0, r3, r3, r2
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	2064      	movs	r0, #100	; 0x64
 8004742:	fb00 f303 	mul.w	r3, r0, r3
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	3332      	adds	r3, #50	; 0x32
 800474c:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <UART_SetConfig+0x118>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004758:	4419      	add	r1, r3
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009a      	lsls	r2, r3, #2
 8004764:	441a      	add	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004770:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <UART_SetConfig+0x118>)
 8004772:	fba3 0302 	umull	r0, r3, r3, r2
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	2064      	movs	r0, #100	; 0x64
 800477a:	fb00 f303 	mul.w	r3, r0, r3
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	3332      	adds	r3, #50	; 0x32
 8004784:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <UART_SetConfig+0x118>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	f003 020f 	and.w	r2, r3, #15
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	440a      	add	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40013800 	.word	0x40013800
 80047a4:	51eb851f 	.word	0x51eb851f

080047a8 <__cvt>:
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ae:	461f      	mov	r7, r3
 80047b0:	bfbb      	ittet	lt
 80047b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80047b6:	461f      	movlt	r7, r3
 80047b8:	2300      	movge	r3, #0
 80047ba:	232d      	movlt	r3, #45	; 0x2d
 80047bc:	b088      	sub	sp, #32
 80047be:	4614      	mov	r4, r2
 80047c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80047c4:	7013      	strb	r3, [r2, #0]
 80047c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80047c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80047cc:	f023 0820 	bic.w	r8, r3, #32
 80047d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047d4:	d005      	beq.n	80047e2 <__cvt+0x3a>
 80047d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80047da:	d100      	bne.n	80047de <__cvt+0x36>
 80047dc:	3501      	adds	r5, #1
 80047de:	2302      	movs	r3, #2
 80047e0:	e000      	b.n	80047e4 <__cvt+0x3c>
 80047e2:	2303      	movs	r3, #3
 80047e4:	aa07      	add	r2, sp, #28
 80047e6:	9204      	str	r2, [sp, #16]
 80047e8:	aa06      	add	r2, sp, #24
 80047ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80047ee:	e9cd 3500 	strd	r3, r5, [sp]
 80047f2:	4622      	mov	r2, r4
 80047f4:	463b      	mov	r3, r7
 80047f6:	f001 f8af 	bl	8005958 <_dtoa_r>
 80047fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047fe:	4606      	mov	r6, r0
 8004800:	d102      	bne.n	8004808 <__cvt+0x60>
 8004802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004804:	07db      	lsls	r3, r3, #31
 8004806:	d522      	bpl.n	800484e <__cvt+0xa6>
 8004808:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800480c:	eb06 0905 	add.w	r9, r6, r5
 8004810:	d110      	bne.n	8004834 <__cvt+0x8c>
 8004812:	7833      	ldrb	r3, [r6, #0]
 8004814:	2b30      	cmp	r3, #48	; 0x30
 8004816:	d10a      	bne.n	800482e <__cvt+0x86>
 8004818:	2200      	movs	r2, #0
 800481a:	2300      	movs	r3, #0
 800481c:	4620      	mov	r0, r4
 800481e:	4639      	mov	r1, r7
 8004820:	f7fc f8c2 	bl	80009a8 <__aeabi_dcmpeq>
 8004824:	b918      	cbnz	r0, 800482e <__cvt+0x86>
 8004826:	f1c5 0501 	rsb	r5, r5, #1
 800482a:	f8ca 5000 	str.w	r5, [sl]
 800482e:	f8da 3000 	ldr.w	r3, [sl]
 8004832:	4499      	add	r9, r3
 8004834:	2200      	movs	r2, #0
 8004836:	2300      	movs	r3, #0
 8004838:	4620      	mov	r0, r4
 800483a:	4639      	mov	r1, r7
 800483c:	f7fc f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8004840:	b108      	cbz	r0, 8004846 <__cvt+0x9e>
 8004842:	f8cd 901c 	str.w	r9, [sp, #28]
 8004846:	2230      	movs	r2, #48	; 0x30
 8004848:	9b07      	ldr	r3, [sp, #28]
 800484a:	454b      	cmp	r3, r9
 800484c:	d307      	bcc.n	800485e <__cvt+0xb6>
 800484e:	4630      	mov	r0, r6
 8004850:	9b07      	ldr	r3, [sp, #28]
 8004852:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004854:	1b9b      	subs	r3, r3, r6
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	b008      	add	sp, #32
 800485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485e:	1c59      	adds	r1, r3, #1
 8004860:	9107      	str	r1, [sp, #28]
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e7f0      	b.n	8004848 <__cvt+0xa0>

08004866 <__exponent>:
 8004866:	4603      	mov	r3, r0
 8004868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800486a:	2900      	cmp	r1, #0
 800486c:	f803 2b02 	strb.w	r2, [r3], #2
 8004870:	bfb6      	itet	lt
 8004872:	222d      	movlt	r2, #45	; 0x2d
 8004874:	222b      	movge	r2, #43	; 0x2b
 8004876:	4249      	neglt	r1, r1
 8004878:	2909      	cmp	r1, #9
 800487a:	7042      	strb	r2, [r0, #1]
 800487c:	dd2a      	ble.n	80048d4 <__exponent+0x6e>
 800487e:	f10d 0207 	add.w	r2, sp, #7
 8004882:	4617      	mov	r7, r2
 8004884:	260a      	movs	r6, #10
 8004886:	fb91 f5f6 	sdiv	r5, r1, r6
 800488a:	4694      	mov	ip, r2
 800488c:	fb06 1415 	mls	r4, r6, r5, r1
 8004890:	3430      	adds	r4, #48	; 0x30
 8004892:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004896:	460c      	mov	r4, r1
 8004898:	2c63      	cmp	r4, #99	; 0x63
 800489a:	4629      	mov	r1, r5
 800489c:	f102 32ff 	add.w	r2, r2, #4294967295
 80048a0:	dcf1      	bgt.n	8004886 <__exponent+0x20>
 80048a2:	3130      	adds	r1, #48	; 0x30
 80048a4:	f1ac 0402 	sub.w	r4, ip, #2
 80048a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048ac:	4622      	mov	r2, r4
 80048ae:	1c41      	adds	r1, r0, #1
 80048b0:	42ba      	cmp	r2, r7
 80048b2:	d30a      	bcc.n	80048ca <__exponent+0x64>
 80048b4:	f10d 0209 	add.w	r2, sp, #9
 80048b8:	eba2 020c 	sub.w	r2, r2, ip
 80048bc:	42bc      	cmp	r4, r7
 80048be:	bf88      	it	hi
 80048c0:	2200      	movhi	r2, #0
 80048c2:	4413      	add	r3, r2
 80048c4:	1a18      	subs	r0, r3, r0
 80048c6:	b003      	add	sp, #12
 80048c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80048ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80048d2:	e7ed      	b.n	80048b0 <__exponent+0x4a>
 80048d4:	2330      	movs	r3, #48	; 0x30
 80048d6:	3130      	adds	r1, #48	; 0x30
 80048d8:	7083      	strb	r3, [r0, #2]
 80048da:	70c1      	strb	r1, [r0, #3]
 80048dc:	1d03      	adds	r3, r0, #4
 80048de:	e7f1      	b.n	80048c4 <__exponent+0x5e>

080048e0 <_printf_float>:
 80048e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e4:	b091      	sub	sp, #68	; 0x44
 80048e6:	460c      	mov	r4, r1
 80048e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80048ec:	4616      	mov	r6, r2
 80048ee:	461f      	mov	r7, r3
 80048f0:	4605      	mov	r5, r0
 80048f2:	f000 ff0d 	bl	8005710 <_localeconv_r>
 80048f6:	6803      	ldr	r3, [r0, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	9309      	str	r3, [sp, #36]	; 0x24
 80048fc:	f7fb fc28 	bl	8000150 <strlen>
 8004900:	2300      	movs	r3, #0
 8004902:	930e      	str	r3, [sp, #56]	; 0x38
 8004904:	f8d8 3000 	ldr.w	r3, [r8]
 8004908:	900a      	str	r0, [sp, #40]	; 0x28
 800490a:	3307      	adds	r3, #7
 800490c:	f023 0307 	bic.w	r3, r3, #7
 8004910:	f103 0208 	add.w	r2, r3, #8
 8004914:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004918:	f8d4 b000 	ldr.w	fp, [r4]
 800491c:	f8c8 2000 	str.w	r2, [r8]
 8004920:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004924:	4652      	mov	r2, sl
 8004926:	4643      	mov	r3, r8
 8004928:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800492c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004930:	930b      	str	r3, [sp, #44]	; 0x2c
 8004932:	f04f 32ff 	mov.w	r2, #4294967295
 8004936:	4650      	mov	r0, sl
 8004938:	4b9c      	ldr	r3, [pc, #624]	; (8004bac <_printf_float+0x2cc>)
 800493a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800493c:	f7fc f866 	bl	8000a0c <__aeabi_dcmpun>
 8004940:	bb70      	cbnz	r0, 80049a0 <_printf_float+0xc0>
 8004942:	f04f 32ff 	mov.w	r2, #4294967295
 8004946:	4650      	mov	r0, sl
 8004948:	4b98      	ldr	r3, [pc, #608]	; (8004bac <_printf_float+0x2cc>)
 800494a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800494c:	f7fc f840 	bl	80009d0 <__aeabi_dcmple>
 8004950:	bb30      	cbnz	r0, 80049a0 <_printf_float+0xc0>
 8004952:	2200      	movs	r2, #0
 8004954:	2300      	movs	r3, #0
 8004956:	4650      	mov	r0, sl
 8004958:	4641      	mov	r1, r8
 800495a:	f7fc f82f 	bl	80009bc <__aeabi_dcmplt>
 800495e:	b110      	cbz	r0, 8004966 <_printf_float+0x86>
 8004960:	232d      	movs	r3, #45	; 0x2d
 8004962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004966:	4a92      	ldr	r2, [pc, #584]	; (8004bb0 <_printf_float+0x2d0>)
 8004968:	4b92      	ldr	r3, [pc, #584]	; (8004bb4 <_printf_float+0x2d4>)
 800496a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800496e:	bf94      	ite	ls
 8004970:	4690      	movls	r8, r2
 8004972:	4698      	movhi	r8, r3
 8004974:	2303      	movs	r3, #3
 8004976:	f04f 0a00 	mov.w	sl, #0
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	f02b 0304 	bic.w	r3, fp, #4
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	4633      	mov	r3, r6
 8004984:	4621      	mov	r1, r4
 8004986:	4628      	mov	r0, r5
 8004988:	9700      	str	r7, [sp, #0]
 800498a:	aa0f      	add	r2, sp, #60	; 0x3c
 800498c:	f000 f9d6 	bl	8004d3c <_printf_common>
 8004990:	3001      	adds	r0, #1
 8004992:	f040 8090 	bne.w	8004ab6 <_printf_float+0x1d6>
 8004996:	f04f 30ff 	mov.w	r0, #4294967295
 800499a:	b011      	add	sp, #68	; 0x44
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	4652      	mov	r2, sl
 80049a2:	4643      	mov	r3, r8
 80049a4:	4650      	mov	r0, sl
 80049a6:	4641      	mov	r1, r8
 80049a8:	f7fc f830 	bl	8000a0c <__aeabi_dcmpun>
 80049ac:	b148      	cbz	r0, 80049c2 <_printf_float+0xe2>
 80049ae:	f1b8 0f00 	cmp.w	r8, #0
 80049b2:	bfb8      	it	lt
 80049b4:	232d      	movlt	r3, #45	; 0x2d
 80049b6:	4a80      	ldr	r2, [pc, #512]	; (8004bb8 <_printf_float+0x2d8>)
 80049b8:	bfb8      	it	lt
 80049ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049be:	4b7f      	ldr	r3, [pc, #508]	; (8004bbc <_printf_float+0x2dc>)
 80049c0:	e7d3      	b.n	800496a <_printf_float+0x8a>
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	d142      	bne.n	8004a52 <_printf_float+0x172>
 80049cc:	2306      	movs	r3, #6
 80049ce:	6063      	str	r3, [r4, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	9206      	str	r2, [sp, #24]
 80049d4:	aa0e      	add	r2, sp, #56	; 0x38
 80049d6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80049da:	aa0d      	add	r2, sp, #52	; 0x34
 80049dc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80049e0:	9203      	str	r2, [sp, #12]
 80049e2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80049e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80049ea:	6023      	str	r3, [r4, #0]
 80049ec:	6863      	ldr	r3, [r4, #4]
 80049ee:	4652      	mov	r2, sl
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	4628      	mov	r0, r5
 80049f4:	4643      	mov	r3, r8
 80049f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80049f8:	f7ff fed6 	bl	80047a8 <__cvt>
 80049fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049fe:	4680      	mov	r8, r0
 8004a00:	2947      	cmp	r1, #71	; 0x47
 8004a02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a04:	d108      	bne.n	8004a18 <_printf_float+0x138>
 8004a06:	1cc8      	adds	r0, r1, #3
 8004a08:	db02      	blt.n	8004a10 <_printf_float+0x130>
 8004a0a:	6863      	ldr	r3, [r4, #4]
 8004a0c:	4299      	cmp	r1, r3
 8004a0e:	dd40      	ble.n	8004a92 <_printf_float+0x1b2>
 8004a10:	f1a9 0902 	sub.w	r9, r9, #2
 8004a14:	fa5f f989 	uxtb.w	r9, r9
 8004a18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a1c:	d81f      	bhi.n	8004a5e <_printf_float+0x17e>
 8004a1e:	464a      	mov	r2, r9
 8004a20:	3901      	subs	r1, #1
 8004a22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a26:	910d      	str	r1, [sp, #52]	; 0x34
 8004a28:	f7ff ff1d 	bl	8004866 <__exponent>
 8004a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a2e:	4682      	mov	sl, r0
 8004a30:	1813      	adds	r3, r2, r0
 8004a32:	2a01      	cmp	r2, #1
 8004a34:	6123      	str	r3, [r4, #16]
 8004a36:	dc02      	bgt.n	8004a3e <_printf_float+0x15e>
 8004a38:	6822      	ldr	r2, [r4, #0]
 8004a3a:	07d2      	lsls	r2, r2, #31
 8004a3c:	d501      	bpl.n	8004a42 <_printf_float+0x162>
 8004a3e:	3301      	adds	r3, #1
 8004a40:	6123      	str	r3, [r4, #16]
 8004a42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d09b      	beq.n	8004982 <_printf_float+0xa2>
 8004a4a:	232d      	movs	r3, #45	; 0x2d
 8004a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a50:	e797      	b.n	8004982 <_printf_float+0xa2>
 8004a52:	2947      	cmp	r1, #71	; 0x47
 8004a54:	d1bc      	bne.n	80049d0 <_printf_float+0xf0>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ba      	bne.n	80049d0 <_printf_float+0xf0>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e7b7      	b.n	80049ce <_printf_float+0xee>
 8004a5e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004a62:	d118      	bne.n	8004a96 <_printf_float+0x1b6>
 8004a64:	2900      	cmp	r1, #0
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	dd0b      	ble.n	8004a82 <_printf_float+0x1a2>
 8004a6a:	6121      	str	r1, [r4, #16]
 8004a6c:	b913      	cbnz	r3, 8004a74 <_printf_float+0x194>
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	07d0      	lsls	r0, r2, #31
 8004a72:	d502      	bpl.n	8004a7a <_printf_float+0x19a>
 8004a74:	3301      	adds	r3, #1
 8004a76:	440b      	add	r3, r1
 8004a78:	6123      	str	r3, [r4, #16]
 8004a7a:	f04f 0a00 	mov.w	sl, #0
 8004a7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a80:	e7df      	b.n	8004a42 <_printf_float+0x162>
 8004a82:	b913      	cbnz	r3, 8004a8a <_printf_float+0x1aa>
 8004a84:	6822      	ldr	r2, [r4, #0]
 8004a86:	07d2      	lsls	r2, r2, #31
 8004a88:	d501      	bpl.n	8004a8e <_printf_float+0x1ae>
 8004a8a:	3302      	adds	r3, #2
 8004a8c:	e7f4      	b.n	8004a78 <_printf_float+0x198>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e7f2      	b.n	8004a78 <_printf_float+0x198>
 8004a92:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a98:	4299      	cmp	r1, r3
 8004a9a:	db05      	blt.n	8004aa8 <_printf_float+0x1c8>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	6121      	str	r1, [r4, #16]
 8004aa0:	07d8      	lsls	r0, r3, #31
 8004aa2:	d5ea      	bpl.n	8004a7a <_printf_float+0x19a>
 8004aa4:	1c4b      	adds	r3, r1, #1
 8004aa6:	e7e7      	b.n	8004a78 <_printf_float+0x198>
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	bfcc      	ite	gt
 8004aac:	2201      	movgt	r2, #1
 8004aae:	f1c1 0202 	rsble	r2, r1, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	e7e0      	b.n	8004a78 <_printf_float+0x198>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	055a      	lsls	r2, r3, #21
 8004aba:	d407      	bmi.n	8004acc <_printf_float+0x1ec>
 8004abc:	6923      	ldr	r3, [r4, #16]
 8004abe:	4642      	mov	r2, r8
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d12b      	bne.n	8004b22 <_printf_float+0x242>
 8004aca:	e764      	b.n	8004996 <_printf_float+0xb6>
 8004acc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ad0:	f240 80dd 	bls.w	8004c8e <_printf_float+0x3ae>
 8004ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2300      	movs	r3, #0
 8004adc:	f7fb ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d033      	beq.n	8004b4c <_printf_float+0x26c>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	4a35      	ldr	r2, [pc, #212]	; (8004bc0 <_printf_float+0x2e0>)
 8004aec:	47b8      	blx	r7
 8004aee:	3001      	adds	r0, #1
 8004af0:	f43f af51 	beq.w	8004996 <_printf_float+0xb6>
 8004af4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004af8:	429a      	cmp	r2, r3
 8004afa:	db02      	blt.n	8004b02 <_printf_float+0x222>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	07d8      	lsls	r0, r3, #31
 8004b00:	d50f      	bpl.n	8004b22 <_printf_float+0x242>
 8004b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b8      	blx	r7
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f43f af42 	beq.w	8004996 <_printf_float+0xb6>
 8004b12:	f04f 0800 	mov.w	r8, #0
 8004b16:	f104 091a 	add.w	r9, r4, #26
 8004b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	4543      	cmp	r3, r8
 8004b20:	dc09      	bgt.n	8004b36 <_printf_float+0x256>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	079b      	lsls	r3, r3, #30
 8004b26:	f100 8104 	bmi.w	8004d32 <_printf_float+0x452>
 8004b2a:	68e0      	ldr	r0, [r4, #12]
 8004b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b2e:	4298      	cmp	r0, r3
 8004b30:	bfb8      	it	lt
 8004b32:	4618      	movlt	r0, r3
 8004b34:	e731      	b.n	800499a <_printf_float+0xba>
 8004b36:	2301      	movs	r3, #1
 8004b38:	464a      	mov	r2, r9
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	f43f af28 	beq.w	8004996 <_printf_float+0xb6>
 8004b46:	f108 0801 	add.w	r8, r8, #1
 8004b4a:	e7e6      	b.n	8004b1a <_printf_float+0x23a>
 8004b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	dc38      	bgt.n	8004bc4 <_printf_float+0x2e4>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4631      	mov	r1, r6
 8004b56:	4628      	mov	r0, r5
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <_printf_float+0x2e0>)
 8004b5a:	47b8      	blx	r7
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f43f af1a 	beq.w	8004996 <_printf_float+0xb6>
 8004b62:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d102      	bne.n	8004b70 <_printf_float+0x290>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	07d9      	lsls	r1, r3, #31
 8004b6e:	d5d8      	bpl.n	8004b22 <_printf_float+0x242>
 8004b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b74:	4631      	mov	r1, r6
 8004b76:	4628      	mov	r0, r5
 8004b78:	47b8      	blx	r7
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	f43f af0b 	beq.w	8004996 <_printf_float+0xb6>
 8004b80:	f04f 0900 	mov.w	r9, #0
 8004b84:	f104 0a1a 	add.w	sl, r4, #26
 8004b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b8a:	425b      	negs	r3, r3
 8004b8c:	454b      	cmp	r3, r9
 8004b8e:	dc01      	bgt.n	8004b94 <_printf_float+0x2b4>
 8004b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b92:	e794      	b.n	8004abe <_printf_float+0x1de>
 8004b94:	2301      	movs	r3, #1
 8004b96:	4652      	mov	r2, sl
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	f43f aef9 	beq.w	8004996 <_printf_float+0xb6>
 8004ba4:	f109 0901 	add.w	r9, r9, #1
 8004ba8:	e7ee      	b.n	8004b88 <_printf_float+0x2a8>
 8004baa:	bf00      	nop
 8004bac:	7fefffff 	.word	0x7fefffff
 8004bb0:	080096ce 	.word	0x080096ce
 8004bb4:	080096d2 	.word	0x080096d2
 8004bb8:	080096d6 	.word	0x080096d6
 8004bbc:	080096da 	.word	0x080096da
 8004bc0:	080096de 	.word	0x080096de
 8004bc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	bfa8      	it	ge
 8004bcc:	461a      	movge	r2, r3
 8004bce:	2a00      	cmp	r2, #0
 8004bd0:	4691      	mov	r9, r2
 8004bd2:	dc37      	bgt.n	8004c44 <_printf_float+0x364>
 8004bd4:	f04f 0b00 	mov.w	fp, #0
 8004bd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bdc:	f104 021a 	add.w	r2, r4, #26
 8004be0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004be4:	ebaa 0309 	sub.w	r3, sl, r9
 8004be8:	455b      	cmp	r3, fp
 8004bea:	dc33      	bgt.n	8004c54 <_printf_float+0x374>
 8004bec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	db3b      	blt.n	8004c6c <_printf_float+0x38c>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	07da      	lsls	r2, r3, #31
 8004bf8:	d438      	bmi.n	8004c6c <_printf_float+0x38c>
 8004bfa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004bfe:	eba2 0903 	sub.w	r9, r2, r3
 8004c02:	eba2 020a 	sub.w	r2, r2, sl
 8004c06:	4591      	cmp	r9, r2
 8004c08:	bfa8      	it	ge
 8004c0a:	4691      	movge	r9, r2
 8004c0c:	f1b9 0f00 	cmp.w	r9, #0
 8004c10:	dc34      	bgt.n	8004c7c <_printf_float+0x39c>
 8004c12:	f04f 0800 	mov.w	r8, #0
 8004c16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c1a:	f104 0a1a 	add.w	sl, r4, #26
 8004c1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	eba3 0309 	sub.w	r3, r3, r9
 8004c28:	4543      	cmp	r3, r8
 8004c2a:	f77f af7a 	ble.w	8004b22 <_printf_float+0x242>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4652      	mov	r2, sl
 8004c32:	4631      	mov	r1, r6
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	f43f aeac 	beq.w	8004996 <_printf_float+0xb6>
 8004c3e:	f108 0801 	add.w	r8, r8, #1
 8004c42:	e7ec      	b.n	8004c1e <_printf_float+0x33e>
 8004c44:	4613      	mov	r3, r2
 8004c46:	4631      	mov	r1, r6
 8004c48:	4642      	mov	r2, r8
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	47b8      	blx	r7
 8004c4e:	3001      	adds	r0, #1
 8004c50:	d1c0      	bne.n	8004bd4 <_printf_float+0x2f4>
 8004c52:	e6a0      	b.n	8004996 <_printf_float+0xb6>
 8004c54:	2301      	movs	r3, #1
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f43f ae99 	beq.w	8004996 <_printf_float+0xb6>
 8004c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c66:	f10b 0b01 	add.w	fp, fp, #1
 8004c6a:	e7b9      	b.n	8004be0 <_printf_float+0x300>
 8004c6c:	4631      	mov	r1, r6
 8004c6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	d1bf      	bne.n	8004bfa <_printf_float+0x31a>
 8004c7a:	e68c      	b.n	8004996 <_printf_float+0xb6>
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	eb08 020a 	add.w	r2, r8, sl
 8004c86:	47b8      	blx	r7
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d1c2      	bne.n	8004c12 <_printf_float+0x332>
 8004c8c:	e683      	b.n	8004996 <_printf_float+0xb6>
 8004c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c90:	2a01      	cmp	r2, #1
 8004c92:	dc01      	bgt.n	8004c98 <_printf_float+0x3b8>
 8004c94:	07db      	lsls	r3, r3, #31
 8004c96:	d539      	bpl.n	8004d0c <_printf_float+0x42c>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f ae77 	beq.w	8004996 <_printf_float+0xb6>
 8004ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f43f ae6f 	beq.w	8004996 <_printf_float+0xb6>
 8004cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004cc4:	f7fb fe70 	bl	80009a8 <__aeabi_dcmpeq>
 8004cc8:	b9d8      	cbnz	r0, 8004d02 <_printf_float+0x422>
 8004cca:	f109 33ff 	add.w	r3, r9, #4294967295
 8004cce:	f108 0201 	add.w	r2, r8, #1
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d10e      	bne.n	8004cfa <_printf_float+0x41a>
 8004cdc:	e65b      	b.n	8004996 <_printf_float+0xb6>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	464a      	mov	r2, r9
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f ae54 	beq.w	8004996 <_printf_float+0xb6>
 8004cee:	f108 0801 	add.w	r8, r8, #1
 8004cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	4543      	cmp	r3, r8
 8004cf8:	dcf1      	bgt.n	8004cde <_printf_float+0x3fe>
 8004cfa:	4653      	mov	r3, sl
 8004cfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d00:	e6de      	b.n	8004ac0 <_printf_float+0x1e0>
 8004d02:	f04f 0800 	mov.w	r8, #0
 8004d06:	f104 091a 	add.w	r9, r4, #26
 8004d0a:	e7f2      	b.n	8004cf2 <_printf_float+0x412>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4642      	mov	r2, r8
 8004d10:	e7df      	b.n	8004cd2 <_printf_float+0x3f2>
 8004d12:	2301      	movs	r3, #1
 8004d14:	464a      	mov	r2, r9
 8004d16:	4631      	mov	r1, r6
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b8      	blx	r7
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	f43f ae3a 	beq.w	8004996 <_printf_float+0xb6>
 8004d22:	f108 0801 	add.w	r8, r8, #1
 8004d26:	68e3      	ldr	r3, [r4, #12]
 8004d28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d2a:	1a5b      	subs	r3, r3, r1
 8004d2c:	4543      	cmp	r3, r8
 8004d2e:	dcf0      	bgt.n	8004d12 <_printf_float+0x432>
 8004d30:	e6fb      	b.n	8004b2a <_printf_float+0x24a>
 8004d32:	f04f 0800 	mov.w	r8, #0
 8004d36:	f104 0919 	add.w	r9, r4, #25
 8004d3a:	e7f4      	b.n	8004d26 <_printf_float+0x446>

08004d3c <_printf_common>:
 8004d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	4616      	mov	r6, r2
 8004d42:	4699      	mov	r9, r3
 8004d44:	688a      	ldr	r2, [r1, #8]
 8004d46:	690b      	ldr	r3, [r1, #16]
 8004d48:	4607      	mov	r7, r0
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	bfb8      	it	lt
 8004d4e:	4613      	movlt	r3, r2
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d56:	460c      	mov	r4, r1
 8004d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d5c:	b10a      	cbz	r2, 8004d62 <_printf_common+0x26>
 8004d5e:	3301      	adds	r3, #1
 8004d60:	6033      	str	r3, [r6, #0]
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	0699      	lsls	r1, r3, #26
 8004d66:	bf42      	ittt	mi
 8004d68:	6833      	ldrmi	r3, [r6, #0]
 8004d6a:	3302      	addmi	r3, #2
 8004d6c:	6033      	strmi	r3, [r6, #0]
 8004d6e:	6825      	ldr	r5, [r4, #0]
 8004d70:	f015 0506 	ands.w	r5, r5, #6
 8004d74:	d106      	bne.n	8004d84 <_printf_common+0x48>
 8004d76:	f104 0a19 	add.w	sl, r4, #25
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	6832      	ldr	r2, [r6, #0]
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	42ab      	cmp	r3, r5
 8004d82:	dc2b      	bgt.n	8004ddc <_printf_common+0xa0>
 8004d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d88:	1e13      	subs	r3, r2, #0
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	bf18      	it	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	0692      	lsls	r2, r2, #26
 8004d92:	d430      	bmi.n	8004df6 <_printf_common+0xba>
 8004d94:	4649      	mov	r1, r9
 8004d96:	4638      	mov	r0, r7
 8004d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d9c:	47c0      	blx	r8
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d023      	beq.n	8004dea <_printf_common+0xae>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	6922      	ldr	r2, [r4, #16]
 8004da6:	f003 0306 	and.w	r3, r3, #6
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	bf14      	ite	ne
 8004dae:	2500      	movne	r5, #0
 8004db0:	6833      	ldreq	r3, [r6, #0]
 8004db2:	f04f 0600 	mov.w	r6, #0
 8004db6:	bf08      	it	eq
 8004db8:	68e5      	ldreq	r5, [r4, #12]
 8004dba:	f104 041a 	add.w	r4, r4, #26
 8004dbe:	bf08      	it	eq
 8004dc0:	1aed      	subeq	r5, r5, r3
 8004dc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dc6:	bf08      	it	eq
 8004dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	bfc4      	itt	gt
 8004dd0:	1a9b      	subgt	r3, r3, r2
 8004dd2:	18ed      	addgt	r5, r5, r3
 8004dd4:	42b5      	cmp	r5, r6
 8004dd6:	d11a      	bne.n	8004e0e <_printf_common+0xd2>
 8004dd8:	2000      	movs	r0, #0
 8004dda:	e008      	b.n	8004dee <_printf_common+0xb2>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	4652      	mov	r2, sl
 8004de0:	4649      	mov	r1, r9
 8004de2:	4638      	mov	r0, r7
 8004de4:	47c0      	blx	r8
 8004de6:	3001      	adds	r0, #1
 8004de8:	d103      	bne.n	8004df2 <_printf_common+0xb6>
 8004dea:	f04f 30ff 	mov.w	r0, #4294967295
 8004dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df2:	3501      	adds	r5, #1
 8004df4:	e7c1      	b.n	8004d7a <_printf_common+0x3e>
 8004df6:	2030      	movs	r0, #48	; 0x30
 8004df8:	18e1      	adds	r1, r4, r3
 8004dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e04:	4422      	add	r2, r4
 8004e06:	3302      	adds	r3, #2
 8004e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e0c:	e7c2      	b.n	8004d94 <_printf_common+0x58>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4622      	mov	r2, r4
 8004e12:	4649      	mov	r1, r9
 8004e14:	4638      	mov	r0, r7
 8004e16:	47c0      	blx	r8
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d0e6      	beq.n	8004dea <_printf_common+0xae>
 8004e1c:	3601      	adds	r6, #1
 8004e1e:	e7d9      	b.n	8004dd4 <_printf_common+0x98>

08004e20 <_printf_i>:
 8004e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	7e0f      	ldrb	r7, [r1, #24]
 8004e26:	4691      	mov	r9, r2
 8004e28:	2f78      	cmp	r7, #120	; 0x78
 8004e2a:	4680      	mov	r8, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	469a      	mov	sl, r3
 8004e30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e36:	d807      	bhi.n	8004e48 <_printf_i+0x28>
 8004e38:	2f62      	cmp	r7, #98	; 0x62
 8004e3a:	d80a      	bhi.n	8004e52 <_printf_i+0x32>
 8004e3c:	2f00      	cmp	r7, #0
 8004e3e:	f000 80d5 	beq.w	8004fec <_printf_i+0x1cc>
 8004e42:	2f58      	cmp	r7, #88	; 0x58
 8004e44:	f000 80c1 	beq.w	8004fca <_printf_i+0x1aa>
 8004e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e50:	e03a      	b.n	8004ec8 <_printf_i+0xa8>
 8004e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e56:	2b15      	cmp	r3, #21
 8004e58:	d8f6      	bhi.n	8004e48 <_printf_i+0x28>
 8004e5a:	a101      	add	r1, pc, #4	; (adr r1, 8004e60 <_printf_i+0x40>)
 8004e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e60:	08004eb9 	.word	0x08004eb9
 8004e64:	08004ecd 	.word	0x08004ecd
 8004e68:	08004e49 	.word	0x08004e49
 8004e6c:	08004e49 	.word	0x08004e49
 8004e70:	08004e49 	.word	0x08004e49
 8004e74:	08004e49 	.word	0x08004e49
 8004e78:	08004ecd 	.word	0x08004ecd
 8004e7c:	08004e49 	.word	0x08004e49
 8004e80:	08004e49 	.word	0x08004e49
 8004e84:	08004e49 	.word	0x08004e49
 8004e88:	08004e49 	.word	0x08004e49
 8004e8c:	08004fd3 	.word	0x08004fd3
 8004e90:	08004ef9 	.word	0x08004ef9
 8004e94:	08004f8d 	.word	0x08004f8d
 8004e98:	08004e49 	.word	0x08004e49
 8004e9c:	08004e49 	.word	0x08004e49
 8004ea0:	08004ff5 	.word	0x08004ff5
 8004ea4:	08004e49 	.word	0x08004e49
 8004ea8:	08004ef9 	.word	0x08004ef9
 8004eac:	08004e49 	.word	0x08004e49
 8004eb0:	08004e49 	.word	0x08004e49
 8004eb4:	08004f95 	.word	0x08004f95
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	1d1a      	adds	r2, r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	602a      	str	r2, [r5, #0]
 8004ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0a0      	b.n	800500e <_printf_i+0x1ee>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	0607      	lsls	r7, r0, #24
 8004ed2:	f103 0104 	add.w	r1, r3, #4
 8004ed6:	6029      	str	r1, [r5, #0]
 8004ed8:	d501      	bpl.n	8004ede <_printf_i+0xbe>
 8004eda:	681e      	ldr	r6, [r3, #0]
 8004edc:	e003      	b.n	8004ee6 <_printf_i+0xc6>
 8004ede:	0646      	lsls	r6, r0, #25
 8004ee0:	d5fb      	bpl.n	8004eda <_printf_i+0xba>
 8004ee2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	da03      	bge.n	8004ef2 <_printf_i+0xd2>
 8004eea:	232d      	movs	r3, #45	; 0x2d
 8004eec:	4276      	negs	r6, r6
 8004eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef2:	230a      	movs	r3, #10
 8004ef4:	4859      	ldr	r0, [pc, #356]	; (800505c <_printf_i+0x23c>)
 8004ef6:	e012      	b.n	8004f1e <_printf_i+0xfe>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	6820      	ldr	r0, [r4, #0]
 8004efc:	1d19      	adds	r1, r3, #4
 8004efe:	6029      	str	r1, [r5, #0]
 8004f00:	0605      	lsls	r5, r0, #24
 8004f02:	d501      	bpl.n	8004f08 <_printf_i+0xe8>
 8004f04:	681e      	ldr	r6, [r3, #0]
 8004f06:	e002      	b.n	8004f0e <_printf_i+0xee>
 8004f08:	0641      	lsls	r1, r0, #25
 8004f0a:	d5fb      	bpl.n	8004f04 <_printf_i+0xe4>
 8004f0c:	881e      	ldrh	r6, [r3, #0]
 8004f0e:	2f6f      	cmp	r7, #111	; 0x6f
 8004f10:	bf0c      	ite	eq
 8004f12:	2308      	moveq	r3, #8
 8004f14:	230a      	movne	r3, #10
 8004f16:	4851      	ldr	r0, [pc, #324]	; (800505c <_printf_i+0x23c>)
 8004f18:	2100      	movs	r1, #0
 8004f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f1e:	6865      	ldr	r5, [r4, #4]
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	bfa8      	it	ge
 8004f24:	6821      	ldrge	r1, [r4, #0]
 8004f26:	60a5      	str	r5, [r4, #8]
 8004f28:	bfa4      	itt	ge
 8004f2a:	f021 0104 	bicge.w	r1, r1, #4
 8004f2e:	6021      	strge	r1, [r4, #0]
 8004f30:	b90e      	cbnz	r6, 8004f36 <_printf_i+0x116>
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	d04b      	beq.n	8004fce <_printf_i+0x1ae>
 8004f36:	4615      	mov	r5, r2
 8004f38:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f3c:	fb03 6711 	mls	r7, r3, r1, r6
 8004f40:	5dc7      	ldrb	r7, [r0, r7]
 8004f42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f46:	4637      	mov	r7, r6
 8004f48:	42bb      	cmp	r3, r7
 8004f4a:	460e      	mov	r6, r1
 8004f4c:	d9f4      	bls.n	8004f38 <_printf_i+0x118>
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d10b      	bne.n	8004f6a <_printf_i+0x14a>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	07de      	lsls	r6, r3, #31
 8004f56:	d508      	bpl.n	8004f6a <_printf_i+0x14a>
 8004f58:	6923      	ldr	r3, [r4, #16]
 8004f5a:	6861      	ldr	r1, [r4, #4]
 8004f5c:	4299      	cmp	r1, r3
 8004f5e:	bfde      	ittt	le
 8004f60:	2330      	movle	r3, #48	; 0x30
 8004f62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f6a:	1b52      	subs	r2, r2, r5
 8004f6c:	6122      	str	r2, [r4, #16]
 8004f6e:	464b      	mov	r3, r9
 8004f70:	4621      	mov	r1, r4
 8004f72:	4640      	mov	r0, r8
 8004f74:	f8cd a000 	str.w	sl, [sp]
 8004f78:	aa03      	add	r2, sp, #12
 8004f7a:	f7ff fedf 	bl	8004d3c <_printf_common>
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d14a      	bne.n	8005018 <_printf_i+0x1f8>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	b004      	add	sp, #16
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	f043 0320 	orr.w	r3, r3, #32
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	2778      	movs	r7, #120	; 0x78
 8004f96:	4832      	ldr	r0, [pc, #200]	; (8005060 <_printf_i+0x240>)
 8004f98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	6829      	ldr	r1, [r5, #0]
 8004fa0:	061f      	lsls	r7, r3, #24
 8004fa2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fa6:	d402      	bmi.n	8004fae <_printf_i+0x18e>
 8004fa8:	065f      	lsls	r7, r3, #25
 8004faa:	bf48      	it	mi
 8004fac:	b2b6      	uxthmi	r6, r6
 8004fae:	07df      	lsls	r7, r3, #31
 8004fb0:	bf48      	it	mi
 8004fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8004fb6:	6029      	str	r1, [r5, #0]
 8004fb8:	bf48      	it	mi
 8004fba:	6023      	strmi	r3, [r4, #0]
 8004fbc:	b91e      	cbnz	r6, 8004fc6 <_printf_i+0x1a6>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	f023 0320 	bic.w	r3, r3, #32
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	2310      	movs	r3, #16
 8004fc8:	e7a6      	b.n	8004f18 <_printf_i+0xf8>
 8004fca:	4824      	ldr	r0, [pc, #144]	; (800505c <_printf_i+0x23c>)
 8004fcc:	e7e4      	b.n	8004f98 <_printf_i+0x178>
 8004fce:	4615      	mov	r5, r2
 8004fd0:	e7bd      	b.n	8004f4e <_printf_i+0x12e>
 8004fd2:	682b      	ldr	r3, [r5, #0]
 8004fd4:	6826      	ldr	r6, [r4, #0]
 8004fd6:	1d18      	adds	r0, r3, #4
 8004fd8:	6961      	ldr	r1, [r4, #20]
 8004fda:	6028      	str	r0, [r5, #0]
 8004fdc:	0635      	lsls	r5, r6, #24
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	d501      	bpl.n	8004fe6 <_printf_i+0x1c6>
 8004fe2:	6019      	str	r1, [r3, #0]
 8004fe4:	e002      	b.n	8004fec <_printf_i+0x1cc>
 8004fe6:	0670      	lsls	r0, r6, #25
 8004fe8:	d5fb      	bpl.n	8004fe2 <_printf_i+0x1c2>
 8004fea:	8019      	strh	r1, [r3, #0]
 8004fec:	2300      	movs	r3, #0
 8004fee:	4615      	mov	r5, r2
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	e7bc      	b.n	8004f6e <_printf_i+0x14e>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	1d1a      	adds	r2, r3, #4
 8004ffa:	602a      	str	r2, [r5, #0]
 8004ffc:	681d      	ldr	r5, [r3, #0]
 8004ffe:	6862      	ldr	r2, [r4, #4]
 8005000:	4628      	mov	r0, r5
 8005002:	f000 fbfc 	bl	80057fe <memchr>
 8005006:	b108      	cbz	r0, 800500c <_printf_i+0x1ec>
 8005008:	1b40      	subs	r0, r0, r5
 800500a:	6060      	str	r0, [r4, #4]
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	2300      	movs	r3, #0
 8005012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005016:	e7aa      	b.n	8004f6e <_printf_i+0x14e>
 8005018:	462a      	mov	r2, r5
 800501a:	4649      	mov	r1, r9
 800501c:	4640      	mov	r0, r8
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	47d0      	blx	sl
 8005022:	3001      	adds	r0, #1
 8005024:	d0ad      	beq.n	8004f82 <_printf_i+0x162>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	079b      	lsls	r3, r3, #30
 800502a:	d413      	bmi.n	8005054 <_printf_i+0x234>
 800502c:	68e0      	ldr	r0, [r4, #12]
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	4298      	cmp	r0, r3
 8005032:	bfb8      	it	lt
 8005034:	4618      	movlt	r0, r3
 8005036:	e7a6      	b.n	8004f86 <_printf_i+0x166>
 8005038:	2301      	movs	r3, #1
 800503a:	4632      	mov	r2, r6
 800503c:	4649      	mov	r1, r9
 800503e:	4640      	mov	r0, r8
 8005040:	47d0      	blx	sl
 8005042:	3001      	adds	r0, #1
 8005044:	d09d      	beq.n	8004f82 <_printf_i+0x162>
 8005046:	3501      	adds	r5, #1
 8005048:	68e3      	ldr	r3, [r4, #12]
 800504a:	9903      	ldr	r1, [sp, #12]
 800504c:	1a5b      	subs	r3, r3, r1
 800504e:	42ab      	cmp	r3, r5
 8005050:	dcf2      	bgt.n	8005038 <_printf_i+0x218>
 8005052:	e7eb      	b.n	800502c <_printf_i+0x20c>
 8005054:	2500      	movs	r5, #0
 8005056:	f104 0619 	add.w	r6, r4, #25
 800505a:	e7f5      	b.n	8005048 <_printf_i+0x228>
 800505c:	080096e0 	.word	0x080096e0
 8005060:	080096f1 	.word	0x080096f1

08005064 <_scanf_float>:
 8005064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005068:	b087      	sub	sp, #28
 800506a:	9303      	str	r3, [sp, #12]
 800506c:	688b      	ldr	r3, [r1, #8]
 800506e:	4617      	mov	r7, r2
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005076:	bf85      	ittet	hi
 8005078:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800507c:	195b      	addhi	r3, r3, r5
 800507e:	2300      	movls	r3, #0
 8005080:	9302      	strhi	r3, [sp, #8]
 8005082:	bf88      	it	hi
 8005084:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005088:	468b      	mov	fp, r1
 800508a:	f04f 0500 	mov.w	r5, #0
 800508e:	bf8c      	ite	hi
 8005090:	608b      	strhi	r3, [r1, #8]
 8005092:	9302      	strls	r3, [sp, #8]
 8005094:	680b      	ldr	r3, [r1, #0]
 8005096:	4680      	mov	r8, r0
 8005098:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800509c:	f84b 3b1c 	str.w	r3, [fp], #28
 80050a0:	460c      	mov	r4, r1
 80050a2:	465e      	mov	r6, fp
 80050a4:	46aa      	mov	sl, r5
 80050a6:	46a9      	mov	r9, r5
 80050a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80050ac:	9501      	str	r5, [sp, #4]
 80050ae:	68a2      	ldr	r2, [r4, #8]
 80050b0:	b152      	cbz	r2, 80050c8 <_scanf_float+0x64>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b4e      	cmp	r3, #78	; 0x4e
 80050b8:	d864      	bhi.n	8005184 <_scanf_float+0x120>
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d83c      	bhi.n	8005138 <_scanf_float+0xd4>
 80050be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80050c2:	b2c8      	uxtb	r0, r1
 80050c4:	280e      	cmp	r0, #14
 80050c6:	d93a      	bls.n	800513e <_scanf_float+0xda>
 80050c8:	f1b9 0f00 	cmp.w	r9, #0
 80050cc:	d003      	beq.n	80050d6 <_scanf_float+0x72>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050da:	f1ba 0f01 	cmp.w	sl, #1
 80050de:	f200 8113 	bhi.w	8005308 <_scanf_float+0x2a4>
 80050e2:	455e      	cmp	r6, fp
 80050e4:	f200 8105 	bhi.w	80052f2 <_scanf_float+0x28e>
 80050e8:	2501      	movs	r5, #1
 80050ea:	4628      	mov	r0, r5
 80050ec:	b007      	add	sp, #28
 80050ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80050f6:	2a0d      	cmp	r2, #13
 80050f8:	d8e6      	bhi.n	80050c8 <_scanf_float+0x64>
 80050fa:	a101      	add	r1, pc, #4	; (adr r1, 8005100 <_scanf_float+0x9c>)
 80050fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005100:	0800523f 	.word	0x0800523f
 8005104:	080050c9 	.word	0x080050c9
 8005108:	080050c9 	.word	0x080050c9
 800510c:	080050c9 	.word	0x080050c9
 8005110:	0800529f 	.word	0x0800529f
 8005114:	08005277 	.word	0x08005277
 8005118:	080050c9 	.word	0x080050c9
 800511c:	080050c9 	.word	0x080050c9
 8005120:	0800524d 	.word	0x0800524d
 8005124:	080050c9 	.word	0x080050c9
 8005128:	080050c9 	.word	0x080050c9
 800512c:	080050c9 	.word	0x080050c9
 8005130:	080050c9 	.word	0x080050c9
 8005134:	08005205 	.word	0x08005205
 8005138:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800513c:	e7db      	b.n	80050f6 <_scanf_float+0x92>
 800513e:	290e      	cmp	r1, #14
 8005140:	d8c2      	bhi.n	80050c8 <_scanf_float+0x64>
 8005142:	a001      	add	r0, pc, #4	; (adr r0, 8005148 <_scanf_float+0xe4>)
 8005144:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005148:	080051f7 	.word	0x080051f7
 800514c:	080050c9 	.word	0x080050c9
 8005150:	080051f7 	.word	0x080051f7
 8005154:	0800528b 	.word	0x0800528b
 8005158:	080050c9 	.word	0x080050c9
 800515c:	080051a5 	.word	0x080051a5
 8005160:	080051e1 	.word	0x080051e1
 8005164:	080051e1 	.word	0x080051e1
 8005168:	080051e1 	.word	0x080051e1
 800516c:	080051e1 	.word	0x080051e1
 8005170:	080051e1 	.word	0x080051e1
 8005174:	080051e1 	.word	0x080051e1
 8005178:	080051e1 	.word	0x080051e1
 800517c:	080051e1 	.word	0x080051e1
 8005180:	080051e1 	.word	0x080051e1
 8005184:	2b6e      	cmp	r3, #110	; 0x6e
 8005186:	d809      	bhi.n	800519c <_scanf_float+0x138>
 8005188:	2b60      	cmp	r3, #96	; 0x60
 800518a:	d8b2      	bhi.n	80050f2 <_scanf_float+0x8e>
 800518c:	2b54      	cmp	r3, #84	; 0x54
 800518e:	d077      	beq.n	8005280 <_scanf_float+0x21c>
 8005190:	2b59      	cmp	r3, #89	; 0x59
 8005192:	d199      	bne.n	80050c8 <_scanf_float+0x64>
 8005194:	2d07      	cmp	r5, #7
 8005196:	d197      	bne.n	80050c8 <_scanf_float+0x64>
 8005198:	2508      	movs	r5, #8
 800519a:	e029      	b.n	80051f0 <_scanf_float+0x18c>
 800519c:	2b74      	cmp	r3, #116	; 0x74
 800519e:	d06f      	beq.n	8005280 <_scanf_float+0x21c>
 80051a0:	2b79      	cmp	r3, #121	; 0x79
 80051a2:	e7f6      	b.n	8005192 <_scanf_float+0x12e>
 80051a4:	6821      	ldr	r1, [r4, #0]
 80051a6:	05c8      	lsls	r0, r1, #23
 80051a8:	d51a      	bpl.n	80051e0 <_scanf_float+0x17c>
 80051aa:	9b02      	ldr	r3, [sp, #8]
 80051ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80051b0:	6021      	str	r1, [r4, #0]
 80051b2:	f109 0901 	add.w	r9, r9, #1
 80051b6:	b11b      	cbz	r3, 80051c0 <_scanf_float+0x15c>
 80051b8:	3b01      	subs	r3, #1
 80051ba:	3201      	adds	r2, #1
 80051bc:	9302      	str	r3, [sp, #8]
 80051be:	60a2      	str	r2, [r4, #8]
 80051c0:	68a3      	ldr	r3, [r4, #8]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	60a3      	str	r3, [r4, #8]
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	3301      	adds	r3, #1
 80051ca:	6123      	str	r3, [r4, #16]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	f340 8084 	ble.w	80052e0 <_scanf_float+0x27c>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	e766      	b.n	80050ae <_scanf_float+0x4a>
 80051e0:	eb1a 0f05 	cmn.w	sl, r5
 80051e4:	f47f af70 	bne.w	80050c8 <_scanf_float+0x64>
 80051e8:	6822      	ldr	r2, [r4, #0]
 80051ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80051ee:	6022      	str	r2, [r4, #0]
 80051f0:	f806 3b01 	strb.w	r3, [r6], #1
 80051f4:	e7e4      	b.n	80051c0 <_scanf_float+0x15c>
 80051f6:	6822      	ldr	r2, [r4, #0]
 80051f8:	0610      	lsls	r0, r2, #24
 80051fa:	f57f af65 	bpl.w	80050c8 <_scanf_float+0x64>
 80051fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005202:	e7f4      	b.n	80051ee <_scanf_float+0x18a>
 8005204:	f1ba 0f00 	cmp.w	sl, #0
 8005208:	d10e      	bne.n	8005228 <_scanf_float+0x1c4>
 800520a:	f1b9 0f00 	cmp.w	r9, #0
 800520e:	d10e      	bne.n	800522e <_scanf_float+0x1ca>
 8005210:	6822      	ldr	r2, [r4, #0]
 8005212:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005216:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800521a:	d108      	bne.n	800522e <_scanf_float+0x1ca>
 800521c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005220:	f04f 0a01 	mov.w	sl, #1
 8005224:	6022      	str	r2, [r4, #0]
 8005226:	e7e3      	b.n	80051f0 <_scanf_float+0x18c>
 8005228:	f1ba 0f02 	cmp.w	sl, #2
 800522c:	d055      	beq.n	80052da <_scanf_float+0x276>
 800522e:	2d01      	cmp	r5, #1
 8005230:	d002      	beq.n	8005238 <_scanf_float+0x1d4>
 8005232:	2d04      	cmp	r5, #4
 8005234:	f47f af48 	bne.w	80050c8 <_scanf_float+0x64>
 8005238:	3501      	adds	r5, #1
 800523a:	b2ed      	uxtb	r5, r5
 800523c:	e7d8      	b.n	80051f0 <_scanf_float+0x18c>
 800523e:	f1ba 0f01 	cmp.w	sl, #1
 8005242:	f47f af41 	bne.w	80050c8 <_scanf_float+0x64>
 8005246:	f04f 0a02 	mov.w	sl, #2
 800524a:	e7d1      	b.n	80051f0 <_scanf_float+0x18c>
 800524c:	b97d      	cbnz	r5, 800526e <_scanf_float+0x20a>
 800524e:	f1b9 0f00 	cmp.w	r9, #0
 8005252:	f47f af3c 	bne.w	80050ce <_scanf_float+0x6a>
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800525c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005260:	f47f af39 	bne.w	80050d6 <_scanf_float+0x72>
 8005264:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005268:	2501      	movs	r5, #1
 800526a:	6022      	str	r2, [r4, #0]
 800526c:	e7c0      	b.n	80051f0 <_scanf_float+0x18c>
 800526e:	2d03      	cmp	r5, #3
 8005270:	d0e2      	beq.n	8005238 <_scanf_float+0x1d4>
 8005272:	2d05      	cmp	r5, #5
 8005274:	e7de      	b.n	8005234 <_scanf_float+0x1d0>
 8005276:	2d02      	cmp	r5, #2
 8005278:	f47f af26 	bne.w	80050c8 <_scanf_float+0x64>
 800527c:	2503      	movs	r5, #3
 800527e:	e7b7      	b.n	80051f0 <_scanf_float+0x18c>
 8005280:	2d06      	cmp	r5, #6
 8005282:	f47f af21 	bne.w	80050c8 <_scanf_float+0x64>
 8005286:	2507      	movs	r5, #7
 8005288:	e7b2      	b.n	80051f0 <_scanf_float+0x18c>
 800528a:	6822      	ldr	r2, [r4, #0]
 800528c:	0591      	lsls	r1, r2, #22
 800528e:	f57f af1b 	bpl.w	80050c8 <_scanf_float+0x64>
 8005292:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005296:	6022      	str	r2, [r4, #0]
 8005298:	f8cd 9004 	str.w	r9, [sp, #4]
 800529c:	e7a8      	b.n	80051f0 <_scanf_float+0x18c>
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80052a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052a8:	d006      	beq.n	80052b8 <_scanf_float+0x254>
 80052aa:	0550      	lsls	r0, r2, #21
 80052ac:	f57f af0c 	bpl.w	80050c8 <_scanf_float+0x64>
 80052b0:	f1b9 0f00 	cmp.w	r9, #0
 80052b4:	f43f af0f 	beq.w	80050d6 <_scanf_float+0x72>
 80052b8:	0591      	lsls	r1, r2, #22
 80052ba:	bf58      	it	pl
 80052bc:	9901      	ldrpl	r1, [sp, #4]
 80052be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052c2:	bf58      	it	pl
 80052c4:	eba9 0101 	subpl.w	r1, r9, r1
 80052c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80052cc:	f04f 0900 	mov.w	r9, #0
 80052d0:	bf58      	it	pl
 80052d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80052d6:	6022      	str	r2, [r4, #0]
 80052d8:	e78a      	b.n	80051f0 <_scanf_float+0x18c>
 80052da:	f04f 0a03 	mov.w	sl, #3
 80052de:	e787      	b.n	80051f0 <_scanf_float+0x18c>
 80052e0:	4639      	mov	r1, r7
 80052e2:	4640      	mov	r0, r8
 80052e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80052e8:	4798      	blx	r3
 80052ea:	2800      	cmp	r0, #0
 80052ec:	f43f aedf 	beq.w	80050ae <_scanf_float+0x4a>
 80052f0:	e6ea      	b.n	80050c8 <_scanf_float+0x64>
 80052f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052f6:	463a      	mov	r2, r7
 80052f8:	4640      	mov	r0, r8
 80052fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052fe:	4798      	blx	r3
 8005300:	6923      	ldr	r3, [r4, #16]
 8005302:	3b01      	subs	r3, #1
 8005304:	6123      	str	r3, [r4, #16]
 8005306:	e6ec      	b.n	80050e2 <_scanf_float+0x7e>
 8005308:	1e6b      	subs	r3, r5, #1
 800530a:	2b06      	cmp	r3, #6
 800530c:	d825      	bhi.n	800535a <_scanf_float+0x2f6>
 800530e:	2d02      	cmp	r5, #2
 8005310:	d836      	bhi.n	8005380 <_scanf_float+0x31c>
 8005312:	455e      	cmp	r6, fp
 8005314:	f67f aee8 	bls.w	80050e8 <_scanf_float+0x84>
 8005318:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800531c:	463a      	mov	r2, r7
 800531e:	4640      	mov	r0, r8
 8005320:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005324:	4798      	blx	r3
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	3b01      	subs	r3, #1
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	e7f1      	b.n	8005312 <_scanf_float+0x2ae>
 800532e:	9802      	ldr	r0, [sp, #8]
 8005330:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005334:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005338:	463a      	mov	r2, r7
 800533a:	9002      	str	r0, [sp, #8]
 800533c:	4640      	mov	r0, r8
 800533e:	4798      	blx	r3
 8005340:	6923      	ldr	r3, [r4, #16]
 8005342:	3b01      	subs	r3, #1
 8005344:	6123      	str	r3, [r4, #16]
 8005346:	f10a 3aff 	add.w	sl, sl, #4294967295
 800534a:	fa5f fa8a 	uxtb.w	sl, sl
 800534e:	f1ba 0f02 	cmp.w	sl, #2
 8005352:	d1ec      	bne.n	800532e <_scanf_float+0x2ca>
 8005354:	3d03      	subs	r5, #3
 8005356:	b2ed      	uxtb	r5, r5
 8005358:	1b76      	subs	r6, r6, r5
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	05da      	lsls	r2, r3, #23
 800535e:	d52f      	bpl.n	80053c0 <_scanf_float+0x35c>
 8005360:	055b      	lsls	r3, r3, #21
 8005362:	d510      	bpl.n	8005386 <_scanf_float+0x322>
 8005364:	455e      	cmp	r6, fp
 8005366:	f67f aebf 	bls.w	80050e8 <_scanf_float+0x84>
 800536a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800536e:	463a      	mov	r2, r7
 8005370:	4640      	mov	r0, r8
 8005372:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005376:	4798      	blx	r3
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	3b01      	subs	r3, #1
 800537c:	6123      	str	r3, [r4, #16]
 800537e:	e7f1      	b.n	8005364 <_scanf_float+0x300>
 8005380:	46aa      	mov	sl, r5
 8005382:	9602      	str	r6, [sp, #8]
 8005384:	e7df      	b.n	8005346 <_scanf_float+0x2e2>
 8005386:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	2965      	cmp	r1, #101	; 0x65
 800538e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005392:	f106 35ff 	add.w	r5, r6, #4294967295
 8005396:	6123      	str	r3, [r4, #16]
 8005398:	d00c      	beq.n	80053b4 <_scanf_float+0x350>
 800539a:	2945      	cmp	r1, #69	; 0x45
 800539c:	d00a      	beq.n	80053b4 <_scanf_float+0x350>
 800539e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053a2:	463a      	mov	r2, r7
 80053a4:	4640      	mov	r0, r8
 80053a6:	4798      	blx	r3
 80053a8:	6923      	ldr	r3, [r4, #16]
 80053aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	1eb5      	subs	r5, r6, #2
 80053b2:	6123      	str	r3, [r4, #16]
 80053b4:	463a      	mov	r2, r7
 80053b6:	4640      	mov	r0, r8
 80053b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053bc:	4798      	blx	r3
 80053be:	462e      	mov	r6, r5
 80053c0:	6825      	ldr	r5, [r4, #0]
 80053c2:	f015 0510 	ands.w	r5, r5, #16
 80053c6:	d155      	bne.n	8005474 <_scanf_float+0x410>
 80053c8:	7035      	strb	r5, [r6, #0]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d4:	d11d      	bne.n	8005412 <_scanf_float+0x3ae>
 80053d6:	9b01      	ldr	r3, [sp, #4]
 80053d8:	454b      	cmp	r3, r9
 80053da:	eba3 0209 	sub.w	r2, r3, r9
 80053de:	d125      	bne.n	800542c <_scanf_float+0x3c8>
 80053e0:	2200      	movs	r2, #0
 80053e2:	4659      	mov	r1, fp
 80053e4:	4640      	mov	r0, r8
 80053e6:	f002 fc4b 	bl	8007c80 <_strtod_r>
 80053ea:	9b03      	ldr	r3, [sp, #12]
 80053ec:	f8d4 c000 	ldr.w	ip, [r4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f01c 0f02 	tst.w	ip, #2
 80053f6:	4606      	mov	r6, r0
 80053f8:	460f      	mov	r7, r1
 80053fa:	f103 0204 	add.w	r2, r3, #4
 80053fe:	d020      	beq.n	8005442 <_scanf_float+0x3de>
 8005400:	9903      	ldr	r1, [sp, #12]
 8005402:	600a      	str	r2, [r1, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	e9c3 6700 	strd	r6, r7, [r3]
 800540a:	68e3      	ldr	r3, [r4, #12]
 800540c:	3301      	adds	r3, #1
 800540e:	60e3      	str	r3, [r4, #12]
 8005410:	e66b      	b.n	80050ea <_scanf_float+0x86>
 8005412:	9b04      	ldr	r3, [sp, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0e3      	beq.n	80053e0 <_scanf_float+0x37c>
 8005418:	9905      	ldr	r1, [sp, #20]
 800541a:	230a      	movs	r3, #10
 800541c:	462a      	mov	r2, r5
 800541e:	4640      	mov	r0, r8
 8005420:	3101      	adds	r1, #1
 8005422:	f002 fcb1 	bl	8007d88 <_strtol_r>
 8005426:	9b04      	ldr	r3, [sp, #16]
 8005428:	9e05      	ldr	r6, [sp, #20]
 800542a:	1ac2      	subs	r2, r0, r3
 800542c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005430:	429e      	cmp	r6, r3
 8005432:	bf28      	it	cs
 8005434:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005438:	4630      	mov	r0, r6
 800543a:	490f      	ldr	r1, [pc, #60]	; (8005478 <_scanf_float+0x414>)
 800543c:	f000 f8e2 	bl	8005604 <siprintf>
 8005440:	e7ce      	b.n	80053e0 <_scanf_float+0x37c>
 8005442:	f01c 0f04 	tst.w	ip, #4
 8005446:	d1db      	bne.n	8005400 <_scanf_float+0x39c>
 8005448:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800544c:	f8cc 2000 	str.w	r2, [ip]
 8005450:	f8d3 8000 	ldr.w	r8, [r3]
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	f7fb fad8 	bl	8000a0c <__aeabi_dcmpun>
 800545c:	b128      	cbz	r0, 800546a <_scanf_float+0x406>
 800545e:	4807      	ldr	r0, [pc, #28]	; (800547c <_scanf_float+0x418>)
 8005460:	f000 f9ea 	bl	8005838 <nanf>
 8005464:	f8c8 0000 	str.w	r0, [r8]
 8005468:	e7cf      	b.n	800540a <_scanf_float+0x3a6>
 800546a:	4630      	mov	r0, r6
 800546c:	4639      	mov	r1, r7
 800546e:	f7fb fb2b 	bl	8000ac8 <__aeabi_d2f>
 8005472:	e7f7      	b.n	8005464 <_scanf_float+0x400>
 8005474:	2500      	movs	r5, #0
 8005476:	e638      	b.n	80050ea <_scanf_float+0x86>
 8005478:	08009702 	.word	0x08009702
 800547c:	08009a95 	.word	0x08009a95

08005480 <std>:
 8005480:	2300      	movs	r3, #0
 8005482:	b510      	push	{r4, lr}
 8005484:	4604      	mov	r4, r0
 8005486:	e9c0 3300 	strd	r3, r3, [r0]
 800548a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800548e:	6083      	str	r3, [r0, #8]
 8005490:	8181      	strh	r1, [r0, #12]
 8005492:	6643      	str	r3, [r0, #100]	; 0x64
 8005494:	81c2      	strh	r2, [r0, #14]
 8005496:	6183      	str	r3, [r0, #24]
 8005498:	4619      	mov	r1, r3
 800549a:	2208      	movs	r2, #8
 800549c:	305c      	adds	r0, #92	; 0x5c
 800549e:	f000 f92e 	bl	80056fe <memset>
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <std+0x58>)
 80054a4:	6224      	str	r4, [r4, #32]
 80054a6:	6263      	str	r3, [r4, #36]	; 0x24
 80054a8:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <std+0x5c>)
 80054aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <std+0x60>)
 80054ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054b0:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <std+0x64>)
 80054b2:	6323      	str	r3, [r4, #48]	; 0x30
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <std+0x68>)
 80054b6:	429c      	cmp	r4, r3
 80054b8:	d006      	beq.n	80054c8 <std+0x48>
 80054ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80054be:	4294      	cmp	r4, r2
 80054c0:	d002      	beq.n	80054c8 <std+0x48>
 80054c2:	33d0      	adds	r3, #208	; 0xd0
 80054c4:	429c      	cmp	r4, r3
 80054c6:	d105      	bne.n	80054d4 <std+0x54>
 80054c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d0:	f000 b992 	b.w	80057f8 <__retarget_lock_init_recursive>
 80054d4:	bd10      	pop	{r4, pc}
 80054d6:	bf00      	nop
 80054d8:	08005645 	.word	0x08005645
 80054dc:	08005667 	.word	0x08005667
 80054e0:	0800569f 	.word	0x0800569f
 80054e4:	080056c3 	.word	0x080056c3
 80054e8:	200007e0 	.word	0x200007e0

080054ec <stdio_exit_handler>:
 80054ec:	4a02      	ldr	r2, [pc, #8]	; (80054f8 <stdio_exit_handler+0xc>)
 80054ee:	4903      	ldr	r1, [pc, #12]	; (80054fc <stdio_exit_handler+0x10>)
 80054f0:	4803      	ldr	r0, [pc, #12]	; (8005500 <stdio_exit_handler+0x14>)
 80054f2:	f000 b869 	b.w	80055c8 <_fwalk_sglue>
 80054f6:	bf00      	nop
 80054f8:	20000024 	.word	0x20000024
 80054fc:	08008141 	.word	0x08008141
 8005500:	20000030 	.word	0x20000030

08005504 <cleanup_stdio>:
 8005504:	6841      	ldr	r1, [r0, #4]
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <cleanup_stdio+0x34>)
 8005508:	b510      	push	{r4, lr}
 800550a:	4299      	cmp	r1, r3
 800550c:	4604      	mov	r4, r0
 800550e:	d001      	beq.n	8005514 <cleanup_stdio+0x10>
 8005510:	f002 fe16 	bl	8008140 <_fflush_r>
 8005514:	68a1      	ldr	r1, [r4, #8]
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <cleanup_stdio+0x38>)
 8005518:	4299      	cmp	r1, r3
 800551a:	d002      	beq.n	8005522 <cleanup_stdio+0x1e>
 800551c:	4620      	mov	r0, r4
 800551e:	f002 fe0f 	bl	8008140 <_fflush_r>
 8005522:	68e1      	ldr	r1, [r4, #12]
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <cleanup_stdio+0x3c>)
 8005526:	4299      	cmp	r1, r3
 8005528:	d004      	beq.n	8005534 <cleanup_stdio+0x30>
 800552a:	4620      	mov	r0, r4
 800552c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005530:	f002 be06 	b.w	8008140 <_fflush_r>
 8005534:	bd10      	pop	{r4, pc}
 8005536:	bf00      	nop
 8005538:	200007e0 	.word	0x200007e0
 800553c:	20000848 	.word	0x20000848
 8005540:	200008b0 	.word	0x200008b0

08005544 <global_stdio_init.part.0>:
 8005544:	b510      	push	{r4, lr}
 8005546:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <global_stdio_init.part.0+0x30>)
 8005548:	4c0b      	ldr	r4, [pc, #44]	; (8005578 <global_stdio_init.part.0+0x34>)
 800554a:	4a0c      	ldr	r2, [pc, #48]	; (800557c <global_stdio_init.part.0+0x38>)
 800554c:	4620      	mov	r0, r4
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	2104      	movs	r1, #4
 8005552:	2200      	movs	r2, #0
 8005554:	f7ff ff94 	bl	8005480 <std>
 8005558:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800555c:	2201      	movs	r2, #1
 800555e:	2109      	movs	r1, #9
 8005560:	f7ff ff8e 	bl	8005480 <std>
 8005564:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005568:	2202      	movs	r2, #2
 800556a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800556e:	2112      	movs	r1, #18
 8005570:	f7ff bf86 	b.w	8005480 <std>
 8005574:	20000918 	.word	0x20000918
 8005578:	200007e0 	.word	0x200007e0
 800557c:	080054ed 	.word	0x080054ed

08005580 <__sfp_lock_acquire>:
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <__sfp_lock_acquire+0x8>)
 8005582:	f000 b93a 	b.w	80057fa <__retarget_lock_acquire_recursive>
 8005586:	bf00      	nop
 8005588:	20000921 	.word	0x20000921

0800558c <__sfp_lock_release>:
 800558c:	4801      	ldr	r0, [pc, #4]	; (8005594 <__sfp_lock_release+0x8>)
 800558e:	f000 b935 	b.w	80057fc <__retarget_lock_release_recursive>
 8005592:	bf00      	nop
 8005594:	20000921 	.word	0x20000921

08005598 <__sinit>:
 8005598:	b510      	push	{r4, lr}
 800559a:	4604      	mov	r4, r0
 800559c:	f7ff fff0 	bl	8005580 <__sfp_lock_acquire>
 80055a0:	6a23      	ldr	r3, [r4, #32]
 80055a2:	b11b      	cbz	r3, 80055ac <__sinit+0x14>
 80055a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a8:	f7ff bff0 	b.w	800558c <__sfp_lock_release>
 80055ac:	4b04      	ldr	r3, [pc, #16]	; (80055c0 <__sinit+0x28>)
 80055ae:	6223      	str	r3, [r4, #32]
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <__sinit+0x2c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1f5      	bne.n	80055a4 <__sinit+0xc>
 80055b8:	f7ff ffc4 	bl	8005544 <global_stdio_init.part.0>
 80055bc:	e7f2      	b.n	80055a4 <__sinit+0xc>
 80055be:	bf00      	nop
 80055c0:	08005505 	.word	0x08005505
 80055c4:	20000918 	.word	0x20000918

080055c8 <_fwalk_sglue>:
 80055c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055cc:	4607      	mov	r7, r0
 80055ce:	4688      	mov	r8, r1
 80055d0:	4614      	mov	r4, r2
 80055d2:	2600      	movs	r6, #0
 80055d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055d8:	f1b9 0901 	subs.w	r9, r9, #1
 80055dc:	d505      	bpl.n	80055ea <_fwalk_sglue+0x22>
 80055de:	6824      	ldr	r4, [r4, #0]
 80055e0:	2c00      	cmp	r4, #0
 80055e2:	d1f7      	bne.n	80055d4 <_fwalk_sglue+0xc>
 80055e4:	4630      	mov	r0, r6
 80055e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ea:	89ab      	ldrh	r3, [r5, #12]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d907      	bls.n	8005600 <_fwalk_sglue+0x38>
 80055f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055f4:	3301      	adds	r3, #1
 80055f6:	d003      	beq.n	8005600 <_fwalk_sglue+0x38>
 80055f8:	4629      	mov	r1, r5
 80055fa:	4638      	mov	r0, r7
 80055fc:	47c0      	blx	r8
 80055fe:	4306      	orrs	r6, r0
 8005600:	3568      	adds	r5, #104	; 0x68
 8005602:	e7e9      	b.n	80055d8 <_fwalk_sglue+0x10>

08005604 <siprintf>:
 8005604:	b40e      	push	{r1, r2, r3}
 8005606:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800560a:	b500      	push	{lr}
 800560c:	b09c      	sub	sp, #112	; 0x70
 800560e:	ab1d      	add	r3, sp, #116	; 0x74
 8005610:	9002      	str	r0, [sp, #8]
 8005612:	9006      	str	r0, [sp, #24]
 8005614:	9107      	str	r1, [sp, #28]
 8005616:	9104      	str	r1, [sp, #16]
 8005618:	4808      	ldr	r0, [pc, #32]	; (800563c <siprintf+0x38>)
 800561a:	4909      	ldr	r1, [pc, #36]	; (8005640 <siprintf+0x3c>)
 800561c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005620:	9105      	str	r1, [sp, #20]
 8005622:	6800      	ldr	r0, [r0, #0]
 8005624:	a902      	add	r1, sp, #8
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	f002 fc0a 	bl	8007e40 <_svfiprintf_r>
 800562c:	2200      	movs	r2, #0
 800562e:	9b02      	ldr	r3, [sp, #8]
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	b01c      	add	sp, #112	; 0x70
 8005634:	f85d eb04 	ldr.w	lr, [sp], #4
 8005638:	b003      	add	sp, #12
 800563a:	4770      	bx	lr
 800563c:	2000007c 	.word	0x2000007c
 8005640:	ffff0208 	.word	0xffff0208

08005644 <__sread>:
 8005644:	b510      	push	{r4, lr}
 8005646:	460c      	mov	r4, r1
 8005648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564c:	f000 f886 	bl	800575c <_read_r>
 8005650:	2800      	cmp	r0, #0
 8005652:	bfab      	itete	ge
 8005654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005656:	89a3      	ldrhlt	r3, [r4, #12]
 8005658:	181b      	addge	r3, r3, r0
 800565a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800565e:	bfac      	ite	ge
 8005660:	6563      	strge	r3, [r4, #84]	; 0x54
 8005662:	81a3      	strhlt	r3, [r4, #12]
 8005664:	bd10      	pop	{r4, pc}

08005666 <__swrite>:
 8005666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800566a:	461f      	mov	r7, r3
 800566c:	898b      	ldrh	r3, [r1, #12]
 800566e:	4605      	mov	r5, r0
 8005670:	05db      	lsls	r3, r3, #23
 8005672:	460c      	mov	r4, r1
 8005674:	4616      	mov	r6, r2
 8005676:	d505      	bpl.n	8005684 <__swrite+0x1e>
 8005678:	2302      	movs	r3, #2
 800567a:	2200      	movs	r2, #0
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	f000 f85a 	bl	8005738 <_lseek_r>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	4632      	mov	r2, r6
 8005688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	4628      	mov	r0, r5
 8005690:	463b      	mov	r3, r7
 8005692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800569a:	f000 b871 	b.w	8005780 <_write_r>

0800569e <__sseek>:
 800569e:	b510      	push	{r4, lr}
 80056a0:	460c      	mov	r4, r1
 80056a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a6:	f000 f847 	bl	8005738 <_lseek_r>
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	bf15      	itete	ne
 80056b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ba:	81a3      	strheq	r3, [r4, #12]
 80056bc:	bf18      	it	ne
 80056be:	81a3      	strhne	r3, [r4, #12]
 80056c0:	bd10      	pop	{r4, pc}

080056c2 <__sclose>:
 80056c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c6:	f000 b827 	b.w	8005718 <_close_r>

080056ca <memmove>:
 80056ca:	4288      	cmp	r0, r1
 80056cc:	b510      	push	{r4, lr}
 80056ce:	eb01 0402 	add.w	r4, r1, r2
 80056d2:	d902      	bls.n	80056da <memmove+0x10>
 80056d4:	4284      	cmp	r4, r0
 80056d6:	4623      	mov	r3, r4
 80056d8:	d807      	bhi.n	80056ea <memmove+0x20>
 80056da:	1e43      	subs	r3, r0, #1
 80056dc:	42a1      	cmp	r1, r4
 80056de:	d008      	beq.n	80056f2 <memmove+0x28>
 80056e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056e8:	e7f8      	b.n	80056dc <memmove+0x12>
 80056ea:	4601      	mov	r1, r0
 80056ec:	4402      	add	r2, r0
 80056ee:	428a      	cmp	r2, r1
 80056f0:	d100      	bne.n	80056f4 <memmove+0x2a>
 80056f2:	bd10      	pop	{r4, pc}
 80056f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056fc:	e7f7      	b.n	80056ee <memmove+0x24>

080056fe <memset>:
 80056fe:	4603      	mov	r3, r0
 8005700:	4402      	add	r2, r0
 8005702:	4293      	cmp	r3, r2
 8005704:	d100      	bne.n	8005708 <memset+0xa>
 8005706:	4770      	bx	lr
 8005708:	f803 1b01 	strb.w	r1, [r3], #1
 800570c:	e7f9      	b.n	8005702 <memset+0x4>
	...

08005710 <_localeconv_r>:
 8005710:	4800      	ldr	r0, [pc, #0]	; (8005714 <_localeconv_r+0x4>)
 8005712:	4770      	bx	lr
 8005714:	20000170 	.word	0x20000170

08005718 <_close_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	2300      	movs	r3, #0
 800571c:	4d05      	ldr	r5, [pc, #20]	; (8005734 <_close_r+0x1c>)
 800571e:	4604      	mov	r4, r0
 8005720:	4608      	mov	r0, r1
 8005722:	602b      	str	r3, [r5, #0]
 8005724:	f7fc fa29 	bl	8001b7a <_close>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d102      	bne.n	8005732 <_close_r+0x1a>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	b103      	cbz	r3, 8005732 <_close_r+0x1a>
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	2000091c 	.word	0x2000091c

08005738 <_lseek_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	2200      	movs	r2, #0
 8005742:	4d05      	ldr	r5, [pc, #20]	; (8005758 <_lseek_r+0x20>)
 8005744:	602a      	str	r2, [r5, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	f7fc fa3b 	bl	8001bc2 <_lseek>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_lseek_r+0x1e>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_lseek_r+0x1e>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	2000091c 	.word	0x2000091c

0800575c <_read_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	4611      	mov	r1, r2
 8005764:	2200      	movs	r2, #0
 8005766:	4d05      	ldr	r5, [pc, #20]	; (800577c <_read_r+0x20>)
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f7fc f9cc 	bl	8001b08 <_read>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_read_r+0x1e>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_read_r+0x1e>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	2000091c 	.word	0x2000091c

08005780 <_write_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4604      	mov	r4, r0
 8005784:	4608      	mov	r0, r1
 8005786:	4611      	mov	r1, r2
 8005788:	2200      	movs	r2, #0
 800578a:	4d05      	ldr	r5, [pc, #20]	; (80057a0 <_write_r+0x20>)
 800578c:	602a      	str	r2, [r5, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	f7fc f9d7 	bl	8001b42 <_write>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_write_r+0x1e>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_write_r+0x1e>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	2000091c 	.word	0x2000091c

080057a4 <__errno>:
 80057a4:	4b01      	ldr	r3, [pc, #4]	; (80057ac <__errno+0x8>)
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	2000007c 	.word	0x2000007c

080057b0 <__libc_init_array>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	2600      	movs	r6, #0
 80057b4:	4d0c      	ldr	r5, [pc, #48]	; (80057e8 <__libc_init_array+0x38>)
 80057b6:	4c0d      	ldr	r4, [pc, #52]	; (80057ec <__libc_init_array+0x3c>)
 80057b8:	1b64      	subs	r4, r4, r5
 80057ba:	10a4      	asrs	r4, r4, #2
 80057bc:	42a6      	cmp	r6, r4
 80057be:	d109      	bne.n	80057d4 <__libc_init_array+0x24>
 80057c0:	f003 fba8 	bl	8008f14 <_init>
 80057c4:	2600      	movs	r6, #0
 80057c6:	4d0a      	ldr	r5, [pc, #40]	; (80057f0 <__libc_init_array+0x40>)
 80057c8:	4c0a      	ldr	r4, [pc, #40]	; (80057f4 <__libc_init_array+0x44>)
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	42a6      	cmp	r6, r4
 80057d0:	d105      	bne.n	80057de <__libc_init_array+0x2e>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d8:	4798      	blx	r3
 80057da:	3601      	adds	r6, #1
 80057dc:	e7ee      	b.n	80057bc <__libc_init_array+0xc>
 80057de:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e2:	4798      	blx	r3
 80057e4:	3601      	adds	r6, #1
 80057e6:	e7f2      	b.n	80057ce <__libc_init_array+0x1e>
 80057e8:	08009af8 	.word	0x08009af8
 80057ec:	08009af8 	.word	0x08009af8
 80057f0:	08009af8 	.word	0x08009af8
 80057f4:	08009afc 	.word	0x08009afc

080057f8 <__retarget_lock_init_recursive>:
 80057f8:	4770      	bx	lr

080057fa <__retarget_lock_acquire_recursive>:
 80057fa:	4770      	bx	lr

080057fc <__retarget_lock_release_recursive>:
 80057fc:	4770      	bx	lr

080057fe <memchr>:
 80057fe:	4603      	mov	r3, r0
 8005800:	b510      	push	{r4, lr}
 8005802:	b2c9      	uxtb	r1, r1
 8005804:	4402      	add	r2, r0
 8005806:	4293      	cmp	r3, r2
 8005808:	4618      	mov	r0, r3
 800580a:	d101      	bne.n	8005810 <memchr+0x12>
 800580c:	2000      	movs	r0, #0
 800580e:	e003      	b.n	8005818 <memchr+0x1a>
 8005810:	7804      	ldrb	r4, [r0, #0]
 8005812:	3301      	adds	r3, #1
 8005814:	428c      	cmp	r4, r1
 8005816:	d1f6      	bne.n	8005806 <memchr+0x8>
 8005818:	bd10      	pop	{r4, pc}

0800581a <memcpy>:
 800581a:	440a      	add	r2, r1
 800581c:	4291      	cmp	r1, r2
 800581e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005822:	d100      	bne.n	8005826 <memcpy+0xc>
 8005824:	4770      	bx	lr
 8005826:	b510      	push	{r4, lr}
 8005828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800582c:	4291      	cmp	r1, r2
 800582e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005832:	d1f9      	bne.n	8005828 <memcpy+0xe>
 8005834:	bd10      	pop	{r4, pc}
	...

08005838 <nanf>:
 8005838:	4800      	ldr	r0, [pc, #0]	; (800583c <nanf+0x4>)
 800583a:	4770      	bx	lr
 800583c:	7fc00000 	.word	0x7fc00000

08005840 <quorem>:
 8005840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	6903      	ldr	r3, [r0, #16]
 8005846:	690c      	ldr	r4, [r1, #16]
 8005848:	4607      	mov	r7, r0
 800584a:	42a3      	cmp	r3, r4
 800584c:	db7f      	blt.n	800594e <quorem+0x10e>
 800584e:	3c01      	subs	r4, #1
 8005850:	f100 0514 	add.w	r5, r0, #20
 8005854:	f101 0814 	add.w	r8, r1, #20
 8005858:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005866:	3301      	adds	r3, #1
 8005868:	429a      	cmp	r2, r3
 800586a:	fbb2 f6f3 	udiv	r6, r2, r3
 800586e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005872:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005876:	d331      	bcc.n	80058dc <quorem+0x9c>
 8005878:	f04f 0e00 	mov.w	lr, #0
 800587c:	4640      	mov	r0, r8
 800587e:	46ac      	mov	ip, r5
 8005880:	46f2      	mov	sl, lr
 8005882:	f850 2b04 	ldr.w	r2, [r0], #4
 8005886:	b293      	uxth	r3, r2
 8005888:	fb06 e303 	mla	r3, r6, r3, lr
 800588c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005890:	0c1a      	lsrs	r2, r3, #16
 8005892:	b29b      	uxth	r3, r3
 8005894:	fb06 220e 	mla	r2, r6, lr, r2
 8005898:	ebaa 0303 	sub.w	r3, sl, r3
 800589c:	f8dc a000 	ldr.w	sl, [ip]
 80058a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80058a4:	fa1f fa8a 	uxth.w	sl, sl
 80058a8:	4453      	add	r3, sl
 80058aa:	f8dc a000 	ldr.w	sl, [ip]
 80058ae:	b292      	uxth	r2, r2
 80058b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80058b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058be:	4581      	cmp	r9, r0
 80058c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058c4:	f84c 3b04 	str.w	r3, [ip], #4
 80058c8:	d2db      	bcs.n	8005882 <quorem+0x42>
 80058ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80058ce:	b92b      	cbnz	r3, 80058dc <quorem+0x9c>
 80058d0:	9b01      	ldr	r3, [sp, #4]
 80058d2:	3b04      	subs	r3, #4
 80058d4:	429d      	cmp	r5, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	d32d      	bcc.n	8005936 <quorem+0xf6>
 80058da:	613c      	str	r4, [r7, #16]
 80058dc:	4638      	mov	r0, r7
 80058de:	f001 f9df 	bl	8006ca0 <__mcmp>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	db23      	blt.n	800592e <quorem+0xee>
 80058e6:	4629      	mov	r1, r5
 80058e8:	2000      	movs	r0, #0
 80058ea:	3601      	adds	r6, #1
 80058ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80058f0:	f8d1 c000 	ldr.w	ip, [r1]
 80058f4:	b293      	uxth	r3, r2
 80058f6:	1ac3      	subs	r3, r0, r3
 80058f8:	0c12      	lsrs	r2, r2, #16
 80058fa:	fa1f f08c 	uxth.w	r0, ip
 80058fe:	4403      	add	r3, r0
 8005900:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005904:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005908:	b29b      	uxth	r3, r3
 800590a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800590e:	45c1      	cmp	r9, r8
 8005910:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005914:	f841 3b04 	str.w	r3, [r1], #4
 8005918:	d2e8      	bcs.n	80058ec <quorem+0xac>
 800591a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800591e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005922:	b922      	cbnz	r2, 800592e <quorem+0xee>
 8005924:	3b04      	subs	r3, #4
 8005926:	429d      	cmp	r5, r3
 8005928:	461a      	mov	r2, r3
 800592a:	d30a      	bcc.n	8005942 <quorem+0x102>
 800592c:	613c      	str	r4, [r7, #16]
 800592e:	4630      	mov	r0, r6
 8005930:	b003      	add	sp, #12
 8005932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	3b04      	subs	r3, #4
 800593a:	2a00      	cmp	r2, #0
 800593c:	d1cd      	bne.n	80058da <quorem+0x9a>
 800593e:	3c01      	subs	r4, #1
 8005940:	e7c8      	b.n	80058d4 <quorem+0x94>
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	3b04      	subs	r3, #4
 8005946:	2a00      	cmp	r2, #0
 8005948:	d1f0      	bne.n	800592c <quorem+0xec>
 800594a:	3c01      	subs	r4, #1
 800594c:	e7eb      	b.n	8005926 <quorem+0xe6>
 800594e:	2000      	movs	r0, #0
 8005950:	e7ee      	b.n	8005930 <quorem+0xf0>
 8005952:	0000      	movs	r0, r0
 8005954:	0000      	movs	r0, r0
	...

08005958 <_dtoa_r>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	4616      	mov	r6, r2
 800595e:	461f      	mov	r7, r3
 8005960:	69c4      	ldr	r4, [r0, #28]
 8005962:	b099      	sub	sp, #100	; 0x64
 8005964:	4605      	mov	r5, r0
 8005966:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800596a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800596e:	b974      	cbnz	r4, 800598e <_dtoa_r+0x36>
 8005970:	2010      	movs	r0, #16
 8005972:	f000 fe1d 	bl	80065b0 <malloc>
 8005976:	4602      	mov	r2, r0
 8005978:	61e8      	str	r0, [r5, #28]
 800597a:	b920      	cbnz	r0, 8005986 <_dtoa_r+0x2e>
 800597c:	21ef      	movs	r1, #239	; 0xef
 800597e:	4bac      	ldr	r3, [pc, #688]	; (8005c30 <_dtoa_r+0x2d8>)
 8005980:	48ac      	ldr	r0, [pc, #688]	; (8005c34 <_dtoa_r+0x2dc>)
 8005982:	f002 fc2d 	bl	80081e0 <__assert_func>
 8005986:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800598a:	6004      	str	r4, [r0, #0]
 800598c:	60c4      	str	r4, [r0, #12]
 800598e:	69eb      	ldr	r3, [r5, #28]
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	b151      	cbz	r1, 80059aa <_dtoa_r+0x52>
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	2301      	movs	r3, #1
 8005998:	4093      	lsls	r3, r2
 800599a:	604a      	str	r2, [r1, #4]
 800599c:	608b      	str	r3, [r1, #8]
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 fefa 	bl	8006798 <_Bfree>
 80059a4:	2200      	movs	r2, #0
 80059a6:	69eb      	ldr	r3, [r5, #28]
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	1e3b      	subs	r3, r7, #0
 80059ac:	bfaf      	iteee	ge
 80059ae:	2300      	movge	r3, #0
 80059b0:	2201      	movlt	r2, #1
 80059b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059b6:	9305      	strlt	r3, [sp, #20]
 80059b8:	bfa8      	it	ge
 80059ba:	f8c8 3000 	strge.w	r3, [r8]
 80059be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80059c2:	4b9d      	ldr	r3, [pc, #628]	; (8005c38 <_dtoa_r+0x2e0>)
 80059c4:	bfb8      	it	lt
 80059c6:	f8c8 2000 	strlt.w	r2, [r8]
 80059ca:	ea33 0309 	bics.w	r3, r3, r9
 80059ce:	d119      	bne.n	8005a04 <_dtoa_r+0xac>
 80059d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80059d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059dc:	4333      	orrs	r3, r6
 80059de:	f000 8589 	beq.w	80064f4 <_dtoa_r+0xb9c>
 80059e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059e4:	b953      	cbnz	r3, 80059fc <_dtoa_r+0xa4>
 80059e6:	4b95      	ldr	r3, [pc, #596]	; (8005c3c <_dtoa_r+0x2e4>)
 80059e8:	e023      	b.n	8005a32 <_dtoa_r+0xda>
 80059ea:	4b95      	ldr	r3, [pc, #596]	; (8005c40 <_dtoa_r+0x2e8>)
 80059ec:	9303      	str	r3, [sp, #12]
 80059ee:	3308      	adds	r3, #8
 80059f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	9803      	ldr	r0, [sp, #12]
 80059f6:	b019      	add	sp, #100	; 0x64
 80059f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fc:	4b8f      	ldr	r3, [pc, #572]	; (8005c3c <_dtoa_r+0x2e4>)
 80059fe:	9303      	str	r3, [sp, #12]
 8005a00:	3303      	adds	r3, #3
 8005a02:	e7f5      	b.n	80059f0 <_dtoa_r+0x98>
 8005a04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a10:	2200      	movs	r2, #0
 8005a12:	2300      	movs	r3, #0
 8005a14:	f7fa ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8005a18:	4680      	mov	r8, r0
 8005a1a:	b160      	cbz	r0, 8005a36 <_dtoa_r+0xde>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8562 	beq.w	80064ee <_dtoa_r+0xb96>
 8005a2a:	4b86      	ldr	r3, [pc, #536]	; (8005c44 <_dtoa_r+0x2ec>)
 8005a2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	3b01      	subs	r3, #1
 8005a32:	9303      	str	r3, [sp, #12]
 8005a34:	e7de      	b.n	80059f4 <_dtoa_r+0x9c>
 8005a36:	ab16      	add	r3, sp, #88	; 0x58
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	ab17      	add	r3, sp, #92	; 0x5c
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a44:	f001 fa3c 	bl	8006ec0 <__d2b>
 8005a48:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	2c00      	cmp	r4, #0
 8005a50:	d07e      	beq.n	8005b50 <_dtoa_r+0x1f8>
 8005a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a58:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a60:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005a64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005a68:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	2200      	movs	r2, #0
 8005a70:	4b75      	ldr	r3, [pc, #468]	; (8005c48 <_dtoa_r+0x2f0>)
 8005a72:	f7fa fb79 	bl	8000168 <__aeabi_dsub>
 8005a76:	a368      	add	r3, pc, #416	; (adr r3, 8005c18 <_dtoa_r+0x2c0>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fd2c 	bl	80004d8 <__aeabi_dmul>
 8005a80:	a367      	add	r3, pc, #412	; (adr r3, 8005c20 <_dtoa_r+0x2c8>)
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	f7fa fb71 	bl	800016c <__adddf3>
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	460f      	mov	r7, r1
 8005a90:	f7fa fcb8 	bl	8000404 <__aeabi_i2d>
 8005a94:	a364      	add	r3, pc, #400	; (adr r3, 8005c28 <_dtoa_r+0x2d0>)
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f7fa fd1d 	bl	80004d8 <__aeabi_dmul>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	f7fa fb61 	bl	800016c <__adddf3>
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460f      	mov	r7, r1
 8005aae:	f7fa ffc3 	bl	8000a38 <__aeabi_d2iz>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	4683      	mov	fp, r0
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4639      	mov	r1, r7
 8005abc:	f7fa ff7e 	bl	80009bc <__aeabi_dcmplt>
 8005ac0:	b148      	cbz	r0, 8005ad6 <_dtoa_r+0x17e>
 8005ac2:	4658      	mov	r0, fp
 8005ac4:	f7fa fc9e 	bl	8000404 <__aeabi_i2d>
 8005ac8:	4632      	mov	r2, r6
 8005aca:	463b      	mov	r3, r7
 8005acc:	f7fa ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8005ad0:	b908      	cbnz	r0, 8005ad6 <_dtoa_r+0x17e>
 8005ad2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ad6:	f1bb 0f16 	cmp.w	fp, #22
 8005ada:	d857      	bhi.n	8005b8c <_dtoa_r+0x234>
 8005adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ae0:	4b5a      	ldr	r3, [pc, #360]	; (8005c4c <_dtoa_r+0x2f4>)
 8005ae2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	f7fa ff67 	bl	80009bc <__aeabi_dcmplt>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d04e      	beq.n	8005b90 <_dtoa_r+0x238>
 8005af2:	2300      	movs	r3, #0
 8005af4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005af8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005afa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005afc:	1b1b      	subs	r3, r3, r4
 8005afe:	1e5a      	subs	r2, r3, #1
 8005b00:	bf46      	itte	mi
 8005b02:	f1c3 0901 	rsbmi	r9, r3, #1
 8005b06:	2300      	movmi	r3, #0
 8005b08:	f04f 0900 	movpl.w	r9, #0
 8005b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b0e:	bf48      	it	mi
 8005b10:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005b12:	f1bb 0f00 	cmp.w	fp, #0
 8005b16:	db3d      	blt.n	8005b94 <_dtoa_r+0x23c>
 8005b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b1a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005b1e:	445b      	add	r3, fp
 8005b20:	9309      	str	r3, [sp, #36]	; 0x24
 8005b22:	2300      	movs	r3, #0
 8005b24:	930a      	str	r3, [sp, #40]	; 0x28
 8005b26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b28:	2b09      	cmp	r3, #9
 8005b2a:	d867      	bhi.n	8005bfc <_dtoa_r+0x2a4>
 8005b2c:	2b05      	cmp	r3, #5
 8005b2e:	bfc4      	itt	gt
 8005b30:	3b04      	subgt	r3, #4
 8005b32:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005b34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b36:	bfc8      	it	gt
 8005b38:	2400      	movgt	r4, #0
 8005b3a:	f1a3 0302 	sub.w	r3, r3, #2
 8005b3e:	bfd8      	it	le
 8005b40:	2401      	movle	r4, #1
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	f200 8086 	bhi.w	8005c54 <_dtoa_r+0x2fc>
 8005b48:	e8df f003 	tbb	[pc, r3]
 8005b4c:	5637392c 	.word	0x5637392c
 8005b50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005b54:	441c      	add	r4, r3
 8005b56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	bfc1      	itttt	gt
 8005b5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b62:	fa09 f903 	lslgt.w	r9, r9, r3
 8005b66:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005b6a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005b6e:	bfd6      	itet	le
 8005b70:	f1c3 0320 	rsble	r3, r3, #32
 8005b74:	ea49 0003 	orrgt.w	r0, r9, r3
 8005b78:	fa06 f003 	lslle.w	r0, r6, r3
 8005b7c:	f7fa fc32 	bl	80003e4 <__aeabi_ui2d>
 8005b80:	2201      	movs	r2, #1
 8005b82:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005b86:	3c01      	subs	r4, #1
 8005b88:	9213      	str	r2, [sp, #76]	; 0x4c
 8005b8a:	e76f      	b.n	8005a6c <_dtoa_r+0x114>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e7b3      	b.n	8005af8 <_dtoa_r+0x1a0>
 8005b90:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b92:	e7b2      	b.n	8005afa <_dtoa_r+0x1a2>
 8005b94:	f1cb 0300 	rsb	r3, fp, #0
 8005b98:	930a      	str	r3, [sp, #40]	; 0x28
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	eba9 090b 	sub.w	r9, r9, fp
 8005ba0:	930e      	str	r3, [sp, #56]	; 0x38
 8005ba2:	e7c0      	b.n	8005b26 <_dtoa_r+0x1ce>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ba8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dc55      	bgt.n	8005c5a <_dtoa_r+0x302>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	9306      	str	r3, [sp, #24]
 8005bb4:	9308      	str	r3, [sp, #32]
 8005bb6:	9223      	str	r2, [sp, #140]	; 0x8c
 8005bb8:	e00b      	b.n	8005bd2 <_dtoa_r+0x27a>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e7f3      	b.n	8005ba6 <_dtoa_r+0x24e>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bc4:	445b      	add	r3, fp
 8005bc6:	9306      	str	r3, [sp, #24]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	9308      	str	r3, [sp, #32]
 8005bce:	bfb8      	it	lt
 8005bd0:	2301      	movlt	r3, #1
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	69e8      	ldr	r0, [r5, #28]
 8005bd8:	f102 0614 	add.w	r6, r2, #20
 8005bdc:	429e      	cmp	r6, r3
 8005bde:	d940      	bls.n	8005c62 <_dtoa_r+0x30a>
 8005be0:	6041      	str	r1, [r0, #4]
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 fd98 	bl	8006718 <_Balloc>
 8005be8:	9003      	str	r0, [sp, #12]
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d13c      	bne.n	8005c68 <_dtoa_r+0x310>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	f240 11af 	movw	r1, #431	; 0x1af
 8005bf4:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <_dtoa_r+0x2f8>)
 8005bf6:	e6c3      	b.n	8005980 <_dtoa_r+0x28>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e7e1      	b.n	8005bc0 <_dtoa_r+0x268>
 8005bfc:	2401      	movs	r4, #1
 8005bfe:	2300      	movs	r3, #0
 8005c00:	940b      	str	r4, [sp, #44]	; 0x2c
 8005c02:	9322      	str	r3, [sp, #136]	; 0x88
 8005c04:	f04f 33ff 	mov.w	r3, #4294967295
 8005c08:	2200      	movs	r2, #0
 8005c0a:	9306      	str	r3, [sp, #24]
 8005c0c:	9308      	str	r3, [sp, #32]
 8005c0e:	2312      	movs	r3, #18
 8005c10:	e7d1      	b.n	8005bb6 <_dtoa_r+0x25e>
 8005c12:	bf00      	nop
 8005c14:	f3af 8000 	nop.w
 8005c18:	636f4361 	.word	0x636f4361
 8005c1c:	3fd287a7 	.word	0x3fd287a7
 8005c20:	8b60c8b3 	.word	0x8b60c8b3
 8005c24:	3fc68a28 	.word	0x3fc68a28
 8005c28:	509f79fb 	.word	0x509f79fb
 8005c2c:	3fd34413 	.word	0x3fd34413
 8005c30:	08009714 	.word	0x08009714
 8005c34:	0800972b 	.word	0x0800972b
 8005c38:	7ff00000 	.word	0x7ff00000
 8005c3c:	08009710 	.word	0x08009710
 8005c40:	08009707 	.word	0x08009707
 8005c44:	080096df 	.word	0x080096df
 8005c48:	3ff80000 	.word	0x3ff80000
 8005c4c:	08009818 	.word	0x08009818
 8005c50:	08009783 	.word	0x08009783
 8005c54:	2301      	movs	r3, #1
 8005c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c58:	e7d4      	b.n	8005c04 <_dtoa_r+0x2ac>
 8005c5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c5c:	9306      	str	r3, [sp, #24]
 8005c5e:	9308      	str	r3, [sp, #32]
 8005c60:	e7b7      	b.n	8005bd2 <_dtoa_r+0x27a>
 8005c62:	3101      	adds	r1, #1
 8005c64:	0052      	lsls	r2, r2, #1
 8005c66:	e7b7      	b.n	8005bd8 <_dtoa_r+0x280>
 8005c68:	69eb      	ldr	r3, [r5, #28]
 8005c6a:	9a03      	ldr	r2, [sp, #12]
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	9b08      	ldr	r3, [sp, #32]
 8005c70:	2b0e      	cmp	r3, #14
 8005c72:	f200 80a8 	bhi.w	8005dc6 <_dtoa_r+0x46e>
 8005c76:	2c00      	cmp	r4, #0
 8005c78:	f000 80a5 	beq.w	8005dc6 <_dtoa_r+0x46e>
 8005c7c:	f1bb 0f00 	cmp.w	fp, #0
 8005c80:	dd34      	ble.n	8005cec <_dtoa_r+0x394>
 8005c82:	4b9a      	ldr	r3, [pc, #616]	; (8005eec <_dtoa_r+0x594>)
 8005c84:	f00b 020f 	and.w	r2, fp, #15
 8005c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005c90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c94:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c98:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005c9c:	d016      	beq.n	8005ccc <_dtoa_r+0x374>
 8005c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ca2:	4b93      	ldr	r3, [pc, #588]	; (8005ef0 <_dtoa_r+0x598>)
 8005ca4:	2703      	movs	r7, #3
 8005ca6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005caa:	f7fa fd3f 	bl	800072c <__aeabi_ddiv>
 8005cae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cb2:	f004 040f 	and.w	r4, r4, #15
 8005cb6:	4e8e      	ldr	r6, [pc, #568]	; (8005ef0 <_dtoa_r+0x598>)
 8005cb8:	b954      	cbnz	r4, 8005cd0 <_dtoa_r+0x378>
 8005cba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cc2:	f7fa fd33 	bl	800072c <__aeabi_ddiv>
 8005cc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cca:	e029      	b.n	8005d20 <_dtoa_r+0x3c8>
 8005ccc:	2702      	movs	r7, #2
 8005cce:	e7f2      	b.n	8005cb6 <_dtoa_r+0x35e>
 8005cd0:	07e1      	lsls	r1, r4, #31
 8005cd2:	d508      	bpl.n	8005ce6 <_dtoa_r+0x38e>
 8005cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cdc:	f7fa fbfc 	bl	80004d8 <__aeabi_dmul>
 8005ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ce4:	3701      	adds	r7, #1
 8005ce6:	1064      	asrs	r4, r4, #1
 8005ce8:	3608      	adds	r6, #8
 8005cea:	e7e5      	b.n	8005cb8 <_dtoa_r+0x360>
 8005cec:	f000 80a5 	beq.w	8005e3a <_dtoa_r+0x4e2>
 8005cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cf4:	f1cb 0400 	rsb	r4, fp, #0
 8005cf8:	4b7c      	ldr	r3, [pc, #496]	; (8005eec <_dtoa_r+0x594>)
 8005cfa:	f004 020f 	and.w	r2, r4, #15
 8005cfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fbe7 	bl	80004d8 <__aeabi_dmul>
 8005d0a:	2702      	movs	r7, #2
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d12:	4e77      	ldr	r6, [pc, #476]	; (8005ef0 <_dtoa_r+0x598>)
 8005d14:	1124      	asrs	r4, r4, #4
 8005d16:	2c00      	cmp	r4, #0
 8005d18:	f040 8084 	bne.w	8005e24 <_dtoa_r+0x4cc>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1d2      	bne.n	8005cc6 <_dtoa_r+0x36e>
 8005d20:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d24:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 8087 	beq.w	8005e3e <_dtoa_r+0x4e6>
 8005d30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d34:	2200      	movs	r2, #0
 8005d36:	4b6f      	ldr	r3, [pc, #444]	; (8005ef4 <_dtoa_r+0x59c>)
 8005d38:	f7fa fe40 	bl	80009bc <__aeabi_dcmplt>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d07e      	beq.n	8005e3e <_dtoa_r+0x4e6>
 8005d40:	9b08      	ldr	r3, [sp, #32]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d07b      	beq.n	8005e3e <_dtoa_r+0x4e6>
 8005d46:	9b06      	ldr	r3, [sp, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dd38      	ble.n	8005dbe <_dtoa_r+0x466>
 8005d4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d50:	2200      	movs	r2, #0
 8005d52:	4b69      	ldr	r3, [pc, #420]	; (8005ef8 <_dtoa_r+0x5a0>)
 8005d54:	f7fa fbc0 	bl	80004d8 <__aeabi_dmul>
 8005d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d5c:	9c06      	ldr	r4, [sp, #24]
 8005d5e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005d62:	3701      	adds	r7, #1
 8005d64:	4638      	mov	r0, r7
 8005d66:	f7fa fb4d 	bl	8000404 <__aeabi_i2d>
 8005d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d6e:	f7fa fbb3 	bl	80004d8 <__aeabi_dmul>
 8005d72:	2200      	movs	r2, #0
 8005d74:	4b61      	ldr	r3, [pc, #388]	; (8005efc <_dtoa_r+0x5a4>)
 8005d76:	f7fa f9f9 	bl	800016c <__adddf3>
 8005d7a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005d7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d82:	9611      	str	r6, [sp, #68]	; 0x44
 8005d84:	2c00      	cmp	r4, #0
 8005d86:	d15d      	bne.n	8005e44 <_dtoa_r+0x4ec>
 8005d88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	4b5c      	ldr	r3, [pc, #368]	; (8005f00 <_dtoa_r+0x5a8>)
 8005d90:	f7fa f9ea 	bl	8000168 <__aeabi_dsub>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d9c:	4633      	mov	r3, r6
 8005d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005da0:	f7fa fe2a 	bl	80009f8 <__aeabi_dcmpgt>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	f040 8295 	bne.w	80062d4 <_dtoa_r+0x97c>
 8005daa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005db0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005db4:	f7fa fe02 	bl	80009bc <__aeabi_dcmplt>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	f040 8289 	bne.w	80062d0 <_dtoa_r+0x978>
 8005dbe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005dc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005dc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f2c0 8151 	blt.w	8006070 <_dtoa_r+0x718>
 8005dce:	f1bb 0f0e 	cmp.w	fp, #14
 8005dd2:	f300 814d 	bgt.w	8006070 <_dtoa_r+0x718>
 8005dd6:	4b45      	ldr	r3, [pc, #276]	; (8005eec <_dtoa_r+0x594>)
 8005dd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005ddc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005de0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005de4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f280 80da 	bge.w	8005fa0 <_dtoa_r+0x648>
 8005dec:	9b08      	ldr	r3, [sp, #32]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f300 80d6 	bgt.w	8005fa0 <_dtoa_r+0x648>
 8005df4:	f040 826b 	bne.w	80062ce <_dtoa_r+0x976>
 8005df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	4b40      	ldr	r3, [pc, #256]	; (8005f00 <_dtoa_r+0x5a8>)
 8005e00:	f7fa fb6a 	bl	80004d8 <__aeabi_dmul>
 8005e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e08:	f7fa fdec 	bl	80009e4 <__aeabi_dcmpge>
 8005e0c:	9c08      	ldr	r4, [sp, #32]
 8005e0e:	4626      	mov	r6, r4
 8005e10:	2800      	cmp	r0, #0
 8005e12:	f040 8241 	bne.w	8006298 <_dtoa_r+0x940>
 8005e16:	2331      	movs	r3, #49	; 0x31
 8005e18:	9f03      	ldr	r7, [sp, #12]
 8005e1a:	f10b 0b01 	add.w	fp, fp, #1
 8005e1e:	f807 3b01 	strb.w	r3, [r7], #1
 8005e22:	e23d      	b.n	80062a0 <_dtoa_r+0x948>
 8005e24:	07e2      	lsls	r2, r4, #31
 8005e26:	d505      	bpl.n	8005e34 <_dtoa_r+0x4dc>
 8005e28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e2c:	f7fa fb54 	bl	80004d8 <__aeabi_dmul>
 8005e30:	2301      	movs	r3, #1
 8005e32:	3701      	adds	r7, #1
 8005e34:	1064      	asrs	r4, r4, #1
 8005e36:	3608      	adds	r6, #8
 8005e38:	e76d      	b.n	8005d16 <_dtoa_r+0x3be>
 8005e3a:	2702      	movs	r7, #2
 8005e3c:	e770      	b.n	8005d20 <_dtoa_r+0x3c8>
 8005e3e:	46d8      	mov	r8, fp
 8005e40:	9c08      	ldr	r4, [sp, #32]
 8005e42:	e78f      	b.n	8005d64 <_dtoa_r+0x40c>
 8005e44:	9903      	ldr	r1, [sp, #12]
 8005e46:	4b29      	ldr	r3, [pc, #164]	; (8005eec <_dtoa_r+0x594>)
 8005e48:	4421      	add	r1, r4
 8005e4a:	9112      	str	r1, [sp, #72]	; 0x48
 8005e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e52:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e5a:	2900      	cmp	r1, #0
 8005e5c:	d054      	beq.n	8005f08 <_dtoa_r+0x5b0>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	4928      	ldr	r1, [pc, #160]	; (8005f04 <_dtoa_r+0x5ac>)
 8005e62:	f7fa fc63 	bl	800072c <__aeabi_ddiv>
 8005e66:	463b      	mov	r3, r7
 8005e68:	4632      	mov	r2, r6
 8005e6a:	f7fa f97d 	bl	8000168 <__aeabi_dsub>
 8005e6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e72:	9f03      	ldr	r7, [sp, #12]
 8005e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e78:	f7fa fdde 	bl	8000a38 <__aeabi_d2iz>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	f7fa fac1 	bl	8000404 <__aeabi_i2d>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e8a:	f7fa f96d 	bl	8000168 <__aeabi_dsub>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	3430      	adds	r4, #48	; 0x30
 8005e94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e9c:	f807 4b01 	strb.w	r4, [r7], #1
 8005ea0:	f7fa fd8c 	bl	80009bc <__aeabi_dcmplt>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d173      	bne.n	8005f90 <_dtoa_r+0x638>
 8005ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eac:	2000      	movs	r0, #0
 8005eae:	4911      	ldr	r1, [pc, #68]	; (8005ef4 <_dtoa_r+0x59c>)
 8005eb0:	f7fa f95a 	bl	8000168 <__aeabi_dsub>
 8005eb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005eb8:	f7fa fd80 	bl	80009bc <__aeabi_dcmplt>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f040 80b6 	bne.w	800602e <_dtoa_r+0x6d6>
 8005ec2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ec4:	429f      	cmp	r7, r3
 8005ec6:	f43f af7a 	beq.w	8005dbe <_dtoa_r+0x466>
 8005eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <_dtoa_r+0x5a0>)
 8005ed2:	f7fa fb01 	bl	80004d8 <__aeabi_dmul>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005edc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <_dtoa_r+0x5a0>)
 8005ee2:	f7fa faf9 	bl	80004d8 <__aeabi_dmul>
 8005ee6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005eea:	e7c3      	b.n	8005e74 <_dtoa_r+0x51c>
 8005eec:	08009818 	.word	0x08009818
 8005ef0:	080097f0 	.word	0x080097f0
 8005ef4:	3ff00000 	.word	0x3ff00000
 8005ef8:	40240000 	.word	0x40240000
 8005efc:	401c0000 	.word	0x401c0000
 8005f00:	40140000 	.word	0x40140000
 8005f04:	3fe00000 	.word	0x3fe00000
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa fae4 	bl	80004d8 <__aeabi_dmul>
 8005f10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f16:	9c03      	ldr	r4, [sp, #12]
 8005f18:	9314      	str	r3, [sp, #80]	; 0x50
 8005f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f1e:	f7fa fd8b 	bl	8000a38 <__aeabi_d2iz>
 8005f22:	9015      	str	r0, [sp, #84]	; 0x54
 8005f24:	f7fa fa6e 	bl	8000404 <__aeabi_i2d>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f30:	f7fa f91a 	bl	8000168 <__aeabi_dsub>
 8005f34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f36:	4606      	mov	r6, r0
 8005f38:	3330      	adds	r3, #48	; 0x30
 8005f3a:	f804 3b01 	strb.w	r3, [r4], #1
 8005f3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f40:	460f      	mov	r7, r1
 8005f42:	429c      	cmp	r4, r3
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	d124      	bne.n	8005f94 <_dtoa_r+0x63c>
 8005f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f4e:	4baf      	ldr	r3, [pc, #700]	; (800620c <_dtoa_r+0x8b4>)
 8005f50:	f7fa f90c 	bl	800016c <__adddf3>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4630      	mov	r0, r6
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	f7fa fd4c 	bl	80009f8 <__aeabi_dcmpgt>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d163      	bne.n	800602c <_dtoa_r+0x6d4>
 8005f64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f68:	2000      	movs	r0, #0
 8005f6a:	49a8      	ldr	r1, [pc, #672]	; (800620c <_dtoa_r+0x8b4>)
 8005f6c:	f7fa f8fc 	bl	8000168 <__aeabi_dsub>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4630      	mov	r0, r6
 8005f76:	4639      	mov	r1, r7
 8005f78:	f7fa fd20 	bl	80009bc <__aeabi_dcmplt>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f43f af1e 	beq.w	8005dbe <_dtoa_r+0x466>
 8005f82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005f84:	1e7b      	subs	r3, r7, #1
 8005f86:	9314      	str	r3, [sp, #80]	; 0x50
 8005f88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005f8c:	2b30      	cmp	r3, #48	; 0x30
 8005f8e:	d0f8      	beq.n	8005f82 <_dtoa_r+0x62a>
 8005f90:	46c3      	mov	fp, r8
 8005f92:	e03b      	b.n	800600c <_dtoa_r+0x6b4>
 8005f94:	4b9e      	ldr	r3, [pc, #632]	; (8006210 <_dtoa_r+0x8b8>)
 8005f96:	f7fa fa9f 	bl	80004d8 <__aeabi_dmul>
 8005f9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f9e:	e7bc      	b.n	8005f1a <_dtoa_r+0x5c2>
 8005fa0:	9f03      	ldr	r7, [sp, #12]
 8005fa2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005fa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005faa:	4640      	mov	r0, r8
 8005fac:	4649      	mov	r1, r9
 8005fae:	f7fa fbbd 	bl	800072c <__aeabi_ddiv>
 8005fb2:	f7fa fd41 	bl	8000a38 <__aeabi_d2iz>
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	f7fa fa24 	bl	8000404 <__aeabi_i2d>
 8005fbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fc0:	f7fa fa8a 	bl	80004d8 <__aeabi_dmul>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4640      	mov	r0, r8
 8005fca:	4649      	mov	r1, r9
 8005fcc:	f7fa f8cc 	bl	8000168 <__aeabi_dsub>
 8005fd0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005fd4:	f807 6b01 	strb.w	r6, [r7], #1
 8005fd8:	9e03      	ldr	r6, [sp, #12]
 8005fda:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005fde:	1bbe      	subs	r6, r7, r6
 8005fe0:	45b4      	cmp	ip, r6
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	d136      	bne.n	8006056 <_dtoa_r+0x6fe>
 8005fe8:	f7fa f8c0 	bl	800016c <__adddf3>
 8005fec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ff0:	4680      	mov	r8, r0
 8005ff2:	4689      	mov	r9, r1
 8005ff4:	f7fa fd00 	bl	80009f8 <__aeabi_dcmpgt>
 8005ff8:	bb58      	cbnz	r0, 8006052 <_dtoa_r+0x6fa>
 8005ffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f7fa fcd1 	bl	80009a8 <__aeabi_dcmpeq>
 8006006:	b108      	cbz	r0, 800600c <_dtoa_r+0x6b4>
 8006008:	07e3      	lsls	r3, r4, #31
 800600a:	d422      	bmi.n	8006052 <_dtoa_r+0x6fa>
 800600c:	4651      	mov	r1, sl
 800600e:	4628      	mov	r0, r5
 8006010:	f000 fbc2 	bl	8006798 <_Bfree>
 8006014:	2300      	movs	r3, #0
 8006016:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006018:	703b      	strb	r3, [r7, #0]
 800601a:	f10b 0301 	add.w	r3, fp, #1
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006022:	2b00      	cmp	r3, #0
 8006024:	f43f ace6 	beq.w	80059f4 <_dtoa_r+0x9c>
 8006028:	601f      	str	r7, [r3, #0]
 800602a:	e4e3      	b.n	80059f4 <_dtoa_r+0x9c>
 800602c:	4627      	mov	r7, r4
 800602e:	463b      	mov	r3, r7
 8006030:	461f      	mov	r7, r3
 8006032:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006036:	2a39      	cmp	r2, #57	; 0x39
 8006038:	d107      	bne.n	800604a <_dtoa_r+0x6f2>
 800603a:	9a03      	ldr	r2, [sp, #12]
 800603c:	429a      	cmp	r2, r3
 800603e:	d1f7      	bne.n	8006030 <_dtoa_r+0x6d8>
 8006040:	2230      	movs	r2, #48	; 0x30
 8006042:	9903      	ldr	r1, [sp, #12]
 8006044:	f108 0801 	add.w	r8, r8, #1
 8006048:	700a      	strb	r2, [r1, #0]
 800604a:	781a      	ldrb	r2, [r3, #0]
 800604c:	3201      	adds	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	e79e      	b.n	8005f90 <_dtoa_r+0x638>
 8006052:	46d8      	mov	r8, fp
 8006054:	e7eb      	b.n	800602e <_dtoa_r+0x6d6>
 8006056:	2200      	movs	r2, #0
 8006058:	4b6d      	ldr	r3, [pc, #436]	; (8006210 <_dtoa_r+0x8b8>)
 800605a:	f7fa fa3d 	bl	80004d8 <__aeabi_dmul>
 800605e:	2200      	movs	r2, #0
 8006060:	2300      	movs	r3, #0
 8006062:	4680      	mov	r8, r0
 8006064:	4689      	mov	r9, r1
 8006066:	f7fa fc9f 	bl	80009a8 <__aeabi_dcmpeq>
 800606a:	2800      	cmp	r0, #0
 800606c:	d09b      	beq.n	8005fa6 <_dtoa_r+0x64e>
 800606e:	e7cd      	b.n	800600c <_dtoa_r+0x6b4>
 8006070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006072:	2a00      	cmp	r2, #0
 8006074:	f000 80c4 	beq.w	8006200 <_dtoa_r+0x8a8>
 8006078:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800607a:	2a01      	cmp	r2, #1
 800607c:	f300 80a8 	bgt.w	80061d0 <_dtoa_r+0x878>
 8006080:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006082:	2a00      	cmp	r2, #0
 8006084:	f000 80a0 	beq.w	80061c8 <_dtoa_r+0x870>
 8006088:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800608c:	464f      	mov	r7, r9
 800608e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006092:	2101      	movs	r1, #1
 8006094:	441a      	add	r2, r3
 8006096:	4628      	mov	r0, r5
 8006098:	4499      	add	r9, r3
 800609a:	9209      	str	r2, [sp, #36]	; 0x24
 800609c:	f000 fc7c 	bl	8006998 <__i2b>
 80060a0:	4606      	mov	r6, r0
 80060a2:	b15f      	cbz	r7, 80060bc <_dtoa_r+0x764>
 80060a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dd08      	ble.n	80060bc <_dtoa_r+0x764>
 80060aa:	42bb      	cmp	r3, r7
 80060ac:	bfa8      	it	ge
 80060ae:	463b      	movge	r3, r7
 80060b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060b2:	eba9 0903 	sub.w	r9, r9, r3
 80060b6:	1aff      	subs	r7, r7, r3
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	9309      	str	r3, [sp, #36]	; 0x24
 80060bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060be:	b1f3      	cbz	r3, 80060fe <_dtoa_r+0x7a6>
 80060c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80a0 	beq.w	8006208 <_dtoa_r+0x8b0>
 80060c8:	2c00      	cmp	r4, #0
 80060ca:	dd10      	ble.n	80060ee <_dtoa_r+0x796>
 80060cc:	4631      	mov	r1, r6
 80060ce:	4622      	mov	r2, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	f000 fd1f 	bl	8006b14 <__pow5mult>
 80060d6:	4652      	mov	r2, sl
 80060d8:	4601      	mov	r1, r0
 80060da:	4606      	mov	r6, r0
 80060dc:	4628      	mov	r0, r5
 80060de:	f000 fc71 	bl	80069c4 <__multiply>
 80060e2:	4680      	mov	r8, r0
 80060e4:	4651      	mov	r1, sl
 80060e6:	4628      	mov	r0, r5
 80060e8:	f000 fb56 	bl	8006798 <_Bfree>
 80060ec:	46c2      	mov	sl, r8
 80060ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f0:	1b1a      	subs	r2, r3, r4
 80060f2:	d004      	beq.n	80060fe <_dtoa_r+0x7a6>
 80060f4:	4651      	mov	r1, sl
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 fd0c 	bl	8006b14 <__pow5mult>
 80060fc:	4682      	mov	sl, r0
 80060fe:	2101      	movs	r1, #1
 8006100:	4628      	mov	r0, r5
 8006102:	f000 fc49 	bl	8006998 <__i2b>
 8006106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006108:	4604      	mov	r4, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	f340 8082 	ble.w	8006214 <_dtoa_r+0x8bc>
 8006110:	461a      	mov	r2, r3
 8006112:	4601      	mov	r1, r0
 8006114:	4628      	mov	r0, r5
 8006116:	f000 fcfd 	bl	8006b14 <__pow5mult>
 800611a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800611c:	4604      	mov	r4, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	dd7b      	ble.n	800621a <_dtoa_r+0x8c2>
 8006122:	f04f 0800 	mov.w	r8, #0
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800612c:	6918      	ldr	r0, [r3, #16]
 800612e:	f000 fbe5 	bl	80068fc <__hi0bits>
 8006132:	f1c0 0020 	rsb	r0, r0, #32
 8006136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006138:	4418      	add	r0, r3
 800613a:	f010 001f 	ands.w	r0, r0, #31
 800613e:	f000 8092 	beq.w	8006266 <_dtoa_r+0x90e>
 8006142:	f1c0 0320 	rsb	r3, r0, #32
 8006146:	2b04      	cmp	r3, #4
 8006148:	f340 8085 	ble.w	8006256 <_dtoa_r+0x8fe>
 800614c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800614e:	f1c0 001c 	rsb	r0, r0, #28
 8006152:	4403      	add	r3, r0
 8006154:	4481      	add	r9, r0
 8006156:	4407      	add	r7, r0
 8006158:	9309      	str	r3, [sp, #36]	; 0x24
 800615a:	f1b9 0f00 	cmp.w	r9, #0
 800615e:	dd05      	ble.n	800616c <_dtoa_r+0x814>
 8006160:	4651      	mov	r1, sl
 8006162:	464a      	mov	r2, r9
 8006164:	4628      	mov	r0, r5
 8006166:	f000 fd2f 	bl	8006bc8 <__lshift>
 800616a:	4682      	mov	sl, r0
 800616c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	dd05      	ble.n	800617e <_dtoa_r+0x826>
 8006172:	4621      	mov	r1, r4
 8006174:	461a      	mov	r2, r3
 8006176:	4628      	mov	r0, r5
 8006178:	f000 fd26 	bl	8006bc8 <__lshift>
 800617c:	4604      	mov	r4, r0
 800617e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d072      	beq.n	800626a <_dtoa_r+0x912>
 8006184:	4621      	mov	r1, r4
 8006186:	4650      	mov	r0, sl
 8006188:	f000 fd8a 	bl	8006ca0 <__mcmp>
 800618c:	2800      	cmp	r0, #0
 800618e:	da6c      	bge.n	800626a <_dtoa_r+0x912>
 8006190:	2300      	movs	r3, #0
 8006192:	4651      	mov	r1, sl
 8006194:	220a      	movs	r2, #10
 8006196:	4628      	mov	r0, r5
 8006198:	f000 fb20 	bl	80067dc <__multadd>
 800619c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800619e:	4682      	mov	sl, r0
 80061a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 81ac 	beq.w	8006502 <_dtoa_r+0xbaa>
 80061aa:	2300      	movs	r3, #0
 80061ac:	4631      	mov	r1, r6
 80061ae:	220a      	movs	r2, #10
 80061b0:	4628      	mov	r0, r5
 80061b2:	f000 fb13 	bl	80067dc <__multadd>
 80061b6:	9b06      	ldr	r3, [sp, #24]
 80061b8:	4606      	mov	r6, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f300 8093 	bgt.w	80062e6 <_dtoa_r+0x98e>
 80061c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	dc59      	bgt.n	800627a <_dtoa_r+0x922>
 80061c6:	e08e      	b.n	80062e6 <_dtoa_r+0x98e>
 80061c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061ce:	e75d      	b.n	800608c <_dtoa_r+0x734>
 80061d0:	9b08      	ldr	r3, [sp, #32]
 80061d2:	1e5c      	subs	r4, r3, #1
 80061d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d6:	42a3      	cmp	r3, r4
 80061d8:	bfbf      	itttt	lt
 80061da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80061de:	1ae3      	sublt	r3, r4, r3
 80061e0:	18d2      	addlt	r2, r2, r3
 80061e2:	bfa8      	it	ge
 80061e4:	1b1c      	subge	r4, r3, r4
 80061e6:	9b08      	ldr	r3, [sp, #32]
 80061e8:	bfbe      	ittt	lt
 80061ea:	940a      	strlt	r4, [sp, #40]	; 0x28
 80061ec:	920e      	strlt	r2, [sp, #56]	; 0x38
 80061ee:	2400      	movlt	r4, #0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bfb5      	itete	lt
 80061f4:	eba9 0703 	sublt.w	r7, r9, r3
 80061f8:	464f      	movge	r7, r9
 80061fa:	2300      	movlt	r3, #0
 80061fc:	9b08      	ldrge	r3, [sp, #32]
 80061fe:	e747      	b.n	8006090 <_dtoa_r+0x738>
 8006200:	464f      	mov	r7, r9
 8006202:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006204:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006206:	e74c      	b.n	80060a2 <_dtoa_r+0x74a>
 8006208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800620a:	e773      	b.n	80060f4 <_dtoa_r+0x79c>
 800620c:	3fe00000 	.word	0x3fe00000
 8006210:	40240000 	.word	0x40240000
 8006214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006216:	2b01      	cmp	r3, #1
 8006218:	dc18      	bgt.n	800624c <_dtoa_r+0x8f4>
 800621a:	9b04      	ldr	r3, [sp, #16]
 800621c:	b9b3      	cbnz	r3, 800624c <_dtoa_r+0x8f4>
 800621e:	9b05      	ldr	r3, [sp, #20]
 8006220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006224:	b993      	cbnz	r3, 800624c <_dtoa_r+0x8f4>
 8006226:	9b05      	ldr	r3, [sp, #20]
 8006228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800622c:	0d1b      	lsrs	r3, r3, #20
 800622e:	051b      	lsls	r3, r3, #20
 8006230:	b17b      	cbz	r3, 8006252 <_dtoa_r+0x8fa>
 8006232:	f04f 0801 	mov.w	r8, #1
 8006236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006238:	f109 0901 	add.w	r9, r9, #1
 800623c:	3301      	adds	r3, #1
 800623e:	9309      	str	r3, [sp, #36]	; 0x24
 8006240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	f47f af6f 	bne.w	8006126 <_dtoa_r+0x7ce>
 8006248:	2001      	movs	r0, #1
 800624a:	e774      	b.n	8006136 <_dtoa_r+0x7de>
 800624c:	f04f 0800 	mov.w	r8, #0
 8006250:	e7f6      	b.n	8006240 <_dtoa_r+0x8e8>
 8006252:	4698      	mov	r8, r3
 8006254:	e7f4      	b.n	8006240 <_dtoa_r+0x8e8>
 8006256:	d080      	beq.n	800615a <_dtoa_r+0x802>
 8006258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800625a:	331c      	adds	r3, #28
 800625c:	441a      	add	r2, r3
 800625e:	4499      	add	r9, r3
 8006260:	441f      	add	r7, r3
 8006262:	9209      	str	r2, [sp, #36]	; 0x24
 8006264:	e779      	b.n	800615a <_dtoa_r+0x802>
 8006266:	4603      	mov	r3, r0
 8006268:	e7f6      	b.n	8006258 <_dtoa_r+0x900>
 800626a:	9b08      	ldr	r3, [sp, #32]
 800626c:	2b00      	cmp	r3, #0
 800626e:	dc34      	bgt.n	80062da <_dtoa_r+0x982>
 8006270:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006272:	2b02      	cmp	r3, #2
 8006274:	dd31      	ble.n	80062da <_dtoa_r+0x982>
 8006276:	9b08      	ldr	r3, [sp, #32]
 8006278:	9306      	str	r3, [sp, #24]
 800627a:	9b06      	ldr	r3, [sp, #24]
 800627c:	b963      	cbnz	r3, 8006298 <_dtoa_r+0x940>
 800627e:	4621      	mov	r1, r4
 8006280:	2205      	movs	r2, #5
 8006282:	4628      	mov	r0, r5
 8006284:	f000 faaa 	bl	80067dc <__multadd>
 8006288:	4601      	mov	r1, r0
 800628a:	4604      	mov	r4, r0
 800628c:	4650      	mov	r0, sl
 800628e:	f000 fd07 	bl	8006ca0 <__mcmp>
 8006292:	2800      	cmp	r0, #0
 8006294:	f73f adbf 	bgt.w	8005e16 <_dtoa_r+0x4be>
 8006298:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800629a:	9f03      	ldr	r7, [sp, #12]
 800629c:	ea6f 0b03 	mvn.w	fp, r3
 80062a0:	f04f 0800 	mov.w	r8, #0
 80062a4:	4621      	mov	r1, r4
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 fa76 	bl	8006798 <_Bfree>
 80062ac:	2e00      	cmp	r6, #0
 80062ae:	f43f aead 	beq.w	800600c <_dtoa_r+0x6b4>
 80062b2:	f1b8 0f00 	cmp.w	r8, #0
 80062b6:	d005      	beq.n	80062c4 <_dtoa_r+0x96c>
 80062b8:	45b0      	cmp	r8, r6
 80062ba:	d003      	beq.n	80062c4 <_dtoa_r+0x96c>
 80062bc:	4641      	mov	r1, r8
 80062be:	4628      	mov	r0, r5
 80062c0:	f000 fa6a 	bl	8006798 <_Bfree>
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 fa66 	bl	8006798 <_Bfree>
 80062cc:	e69e      	b.n	800600c <_dtoa_r+0x6b4>
 80062ce:	2400      	movs	r4, #0
 80062d0:	4626      	mov	r6, r4
 80062d2:	e7e1      	b.n	8006298 <_dtoa_r+0x940>
 80062d4:	46c3      	mov	fp, r8
 80062d6:	4626      	mov	r6, r4
 80062d8:	e59d      	b.n	8005e16 <_dtoa_r+0x4be>
 80062da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80c8 	beq.w	8006472 <_dtoa_r+0xb1a>
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	9306      	str	r3, [sp, #24]
 80062e6:	2f00      	cmp	r7, #0
 80062e8:	dd05      	ble.n	80062f6 <_dtoa_r+0x99e>
 80062ea:	4631      	mov	r1, r6
 80062ec:	463a      	mov	r2, r7
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 fc6a 	bl	8006bc8 <__lshift>
 80062f4:	4606      	mov	r6, r0
 80062f6:	f1b8 0f00 	cmp.w	r8, #0
 80062fa:	d05b      	beq.n	80063b4 <_dtoa_r+0xa5c>
 80062fc:	4628      	mov	r0, r5
 80062fe:	6871      	ldr	r1, [r6, #4]
 8006300:	f000 fa0a 	bl	8006718 <_Balloc>
 8006304:	4607      	mov	r7, r0
 8006306:	b928      	cbnz	r0, 8006314 <_dtoa_r+0x9bc>
 8006308:	4602      	mov	r2, r0
 800630a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800630e:	4b81      	ldr	r3, [pc, #516]	; (8006514 <_dtoa_r+0xbbc>)
 8006310:	f7ff bb36 	b.w	8005980 <_dtoa_r+0x28>
 8006314:	6932      	ldr	r2, [r6, #16]
 8006316:	f106 010c 	add.w	r1, r6, #12
 800631a:	3202      	adds	r2, #2
 800631c:	0092      	lsls	r2, r2, #2
 800631e:	300c      	adds	r0, #12
 8006320:	f7ff fa7b 	bl	800581a <memcpy>
 8006324:	2201      	movs	r2, #1
 8006326:	4639      	mov	r1, r7
 8006328:	4628      	mov	r0, r5
 800632a:	f000 fc4d 	bl	8006bc8 <__lshift>
 800632e:	46b0      	mov	r8, r6
 8006330:	4606      	mov	r6, r0
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	9a03      	ldr	r2, [sp, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	9308      	str	r3, [sp, #32]
 800633a:	9b06      	ldr	r3, [sp, #24]
 800633c:	4413      	add	r3, r2
 800633e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	930a      	str	r3, [sp, #40]	; 0x28
 8006348:	9b08      	ldr	r3, [sp, #32]
 800634a:	4621      	mov	r1, r4
 800634c:	3b01      	subs	r3, #1
 800634e:	4650      	mov	r0, sl
 8006350:	9304      	str	r3, [sp, #16]
 8006352:	f7ff fa75 	bl	8005840 <quorem>
 8006356:	4641      	mov	r1, r8
 8006358:	9006      	str	r0, [sp, #24]
 800635a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800635e:	4650      	mov	r0, sl
 8006360:	f000 fc9e 	bl	8006ca0 <__mcmp>
 8006364:	4632      	mov	r2, r6
 8006366:	9009      	str	r0, [sp, #36]	; 0x24
 8006368:	4621      	mov	r1, r4
 800636a:	4628      	mov	r0, r5
 800636c:	f000 fcb4 	bl	8006cd8 <__mdiff>
 8006370:	68c2      	ldr	r2, [r0, #12]
 8006372:	4607      	mov	r7, r0
 8006374:	bb02      	cbnz	r2, 80063b8 <_dtoa_r+0xa60>
 8006376:	4601      	mov	r1, r0
 8006378:	4650      	mov	r0, sl
 800637a:	f000 fc91 	bl	8006ca0 <__mcmp>
 800637e:	4602      	mov	r2, r0
 8006380:	4639      	mov	r1, r7
 8006382:	4628      	mov	r0, r5
 8006384:	920c      	str	r2, [sp, #48]	; 0x30
 8006386:	f000 fa07 	bl	8006798 <_Bfree>
 800638a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800638c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800638e:	9f08      	ldr	r7, [sp, #32]
 8006390:	ea43 0102 	orr.w	r1, r3, r2
 8006394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006396:	4319      	orrs	r1, r3
 8006398:	d110      	bne.n	80063bc <_dtoa_r+0xa64>
 800639a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800639e:	d029      	beq.n	80063f4 <_dtoa_r+0xa9c>
 80063a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	dd02      	ble.n	80063ac <_dtoa_r+0xa54>
 80063a6:	9b06      	ldr	r3, [sp, #24]
 80063a8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80063ac:	9b04      	ldr	r3, [sp, #16]
 80063ae:	f883 9000 	strb.w	r9, [r3]
 80063b2:	e777      	b.n	80062a4 <_dtoa_r+0x94c>
 80063b4:	4630      	mov	r0, r6
 80063b6:	e7ba      	b.n	800632e <_dtoa_r+0x9d6>
 80063b8:	2201      	movs	r2, #1
 80063ba:	e7e1      	b.n	8006380 <_dtoa_r+0xa28>
 80063bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	db04      	blt.n	80063cc <_dtoa_r+0xa74>
 80063c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80063c4:	430b      	orrs	r3, r1
 80063c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80063c8:	430b      	orrs	r3, r1
 80063ca:	d120      	bne.n	800640e <_dtoa_r+0xab6>
 80063cc:	2a00      	cmp	r2, #0
 80063ce:	dded      	ble.n	80063ac <_dtoa_r+0xa54>
 80063d0:	4651      	mov	r1, sl
 80063d2:	2201      	movs	r2, #1
 80063d4:	4628      	mov	r0, r5
 80063d6:	f000 fbf7 	bl	8006bc8 <__lshift>
 80063da:	4621      	mov	r1, r4
 80063dc:	4682      	mov	sl, r0
 80063de:	f000 fc5f 	bl	8006ca0 <__mcmp>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	dc03      	bgt.n	80063ee <_dtoa_r+0xa96>
 80063e6:	d1e1      	bne.n	80063ac <_dtoa_r+0xa54>
 80063e8:	f019 0f01 	tst.w	r9, #1
 80063ec:	d0de      	beq.n	80063ac <_dtoa_r+0xa54>
 80063ee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80063f2:	d1d8      	bne.n	80063a6 <_dtoa_r+0xa4e>
 80063f4:	2339      	movs	r3, #57	; 0x39
 80063f6:	9a04      	ldr	r2, [sp, #16]
 80063f8:	7013      	strb	r3, [r2, #0]
 80063fa:	463b      	mov	r3, r7
 80063fc:	461f      	mov	r7, r3
 80063fe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006402:	3b01      	subs	r3, #1
 8006404:	2a39      	cmp	r2, #57	; 0x39
 8006406:	d06b      	beq.n	80064e0 <_dtoa_r+0xb88>
 8006408:	3201      	adds	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	e74a      	b.n	80062a4 <_dtoa_r+0x94c>
 800640e:	2a00      	cmp	r2, #0
 8006410:	dd07      	ble.n	8006422 <_dtoa_r+0xaca>
 8006412:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006416:	d0ed      	beq.n	80063f4 <_dtoa_r+0xa9c>
 8006418:	9a04      	ldr	r2, [sp, #16]
 800641a:	f109 0301 	add.w	r3, r9, #1
 800641e:	7013      	strb	r3, [r2, #0]
 8006420:	e740      	b.n	80062a4 <_dtoa_r+0x94c>
 8006422:	9b08      	ldr	r3, [sp, #32]
 8006424:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006426:	f803 9c01 	strb.w	r9, [r3, #-1]
 800642a:	4293      	cmp	r3, r2
 800642c:	d042      	beq.n	80064b4 <_dtoa_r+0xb5c>
 800642e:	4651      	mov	r1, sl
 8006430:	2300      	movs	r3, #0
 8006432:	220a      	movs	r2, #10
 8006434:	4628      	mov	r0, r5
 8006436:	f000 f9d1 	bl	80067dc <__multadd>
 800643a:	45b0      	cmp	r8, r6
 800643c:	4682      	mov	sl, r0
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	f04f 020a 	mov.w	r2, #10
 8006446:	4641      	mov	r1, r8
 8006448:	4628      	mov	r0, r5
 800644a:	d107      	bne.n	800645c <_dtoa_r+0xb04>
 800644c:	f000 f9c6 	bl	80067dc <__multadd>
 8006450:	4680      	mov	r8, r0
 8006452:	4606      	mov	r6, r0
 8006454:	9b08      	ldr	r3, [sp, #32]
 8006456:	3301      	adds	r3, #1
 8006458:	9308      	str	r3, [sp, #32]
 800645a:	e775      	b.n	8006348 <_dtoa_r+0x9f0>
 800645c:	f000 f9be 	bl	80067dc <__multadd>
 8006460:	4631      	mov	r1, r6
 8006462:	4680      	mov	r8, r0
 8006464:	2300      	movs	r3, #0
 8006466:	220a      	movs	r2, #10
 8006468:	4628      	mov	r0, r5
 800646a:	f000 f9b7 	bl	80067dc <__multadd>
 800646e:	4606      	mov	r6, r0
 8006470:	e7f0      	b.n	8006454 <_dtoa_r+0xafc>
 8006472:	9b08      	ldr	r3, [sp, #32]
 8006474:	9306      	str	r3, [sp, #24]
 8006476:	9f03      	ldr	r7, [sp, #12]
 8006478:	4621      	mov	r1, r4
 800647a:	4650      	mov	r0, sl
 800647c:	f7ff f9e0 	bl	8005840 <quorem>
 8006480:	9b03      	ldr	r3, [sp, #12]
 8006482:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006486:	f807 9b01 	strb.w	r9, [r7], #1
 800648a:	1afa      	subs	r2, r7, r3
 800648c:	9b06      	ldr	r3, [sp, #24]
 800648e:	4293      	cmp	r3, r2
 8006490:	dd07      	ble.n	80064a2 <_dtoa_r+0xb4a>
 8006492:	4651      	mov	r1, sl
 8006494:	2300      	movs	r3, #0
 8006496:	220a      	movs	r2, #10
 8006498:	4628      	mov	r0, r5
 800649a:	f000 f99f 	bl	80067dc <__multadd>
 800649e:	4682      	mov	sl, r0
 80064a0:	e7ea      	b.n	8006478 <_dtoa_r+0xb20>
 80064a2:	9b06      	ldr	r3, [sp, #24]
 80064a4:	f04f 0800 	mov.w	r8, #0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bfcc      	ite	gt
 80064ac:	461f      	movgt	r7, r3
 80064ae:	2701      	movle	r7, #1
 80064b0:	9b03      	ldr	r3, [sp, #12]
 80064b2:	441f      	add	r7, r3
 80064b4:	4651      	mov	r1, sl
 80064b6:	2201      	movs	r2, #1
 80064b8:	4628      	mov	r0, r5
 80064ba:	f000 fb85 	bl	8006bc8 <__lshift>
 80064be:	4621      	mov	r1, r4
 80064c0:	4682      	mov	sl, r0
 80064c2:	f000 fbed 	bl	8006ca0 <__mcmp>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	dc97      	bgt.n	80063fa <_dtoa_r+0xaa2>
 80064ca:	d102      	bne.n	80064d2 <_dtoa_r+0xb7a>
 80064cc:	f019 0f01 	tst.w	r9, #1
 80064d0:	d193      	bne.n	80063fa <_dtoa_r+0xaa2>
 80064d2:	463b      	mov	r3, r7
 80064d4:	461f      	mov	r7, r3
 80064d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064da:	2a30      	cmp	r2, #48	; 0x30
 80064dc:	d0fa      	beq.n	80064d4 <_dtoa_r+0xb7c>
 80064de:	e6e1      	b.n	80062a4 <_dtoa_r+0x94c>
 80064e0:	9a03      	ldr	r2, [sp, #12]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d18a      	bne.n	80063fc <_dtoa_r+0xaa4>
 80064e6:	2331      	movs	r3, #49	; 0x31
 80064e8:	f10b 0b01 	add.w	fp, fp, #1
 80064ec:	e797      	b.n	800641e <_dtoa_r+0xac6>
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <_dtoa_r+0xbc0>)
 80064f0:	f7ff ba9f 	b.w	8005a32 <_dtoa_r+0xda>
 80064f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f47f aa77 	bne.w	80059ea <_dtoa_r+0x92>
 80064fc:	4b07      	ldr	r3, [pc, #28]	; (800651c <_dtoa_r+0xbc4>)
 80064fe:	f7ff ba98 	b.w	8005a32 <_dtoa_r+0xda>
 8006502:	9b06      	ldr	r3, [sp, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	dcb6      	bgt.n	8006476 <_dtoa_r+0xb1e>
 8006508:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800650a:	2b02      	cmp	r3, #2
 800650c:	f73f aeb5 	bgt.w	800627a <_dtoa_r+0x922>
 8006510:	e7b1      	b.n	8006476 <_dtoa_r+0xb1e>
 8006512:	bf00      	nop
 8006514:	08009783 	.word	0x08009783
 8006518:	080096de 	.word	0x080096de
 800651c:	08009707 	.word	0x08009707

08006520 <_free_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4605      	mov	r5, r0
 8006524:	2900      	cmp	r1, #0
 8006526:	d040      	beq.n	80065aa <_free_r+0x8a>
 8006528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800652c:	1f0c      	subs	r4, r1, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	bfb8      	it	lt
 8006532:	18e4      	addlt	r4, r4, r3
 8006534:	f000 f8e4 	bl	8006700 <__malloc_lock>
 8006538:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <_free_r+0x8c>)
 800653a:	6813      	ldr	r3, [r2, #0]
 800653c:	b933      	cbnz	r3, 800654c <_free_r+0x2c>
 800653e:	6063      	str	r3, [r4, #4]
 8006540:	6014      	str	r4, [r2, #0]
 8006542:	4628      	mov	r0, r5
 8006544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006548:	f000 b8e0 	b.w	800670c <__malloc_unlock>
 800654c:	42a3      	cmp	r3, r4
 800654e:	d908      	bls.n	8006562 <_free_r+0x42>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	1821      	adds	r1, r4, r0
 8006554:	428b      	cmp	r3, r1
 8006556:	bf01      	itttt	eq
 8006558:	6819      	ldreq	r1, [r3, #0]
 800655a:	685b      	ldreq	r3, [r3, #4]
 800655c:	1809      	addeq	r1, r1, r0
 800655e:	6021      	streq	r1, [r4, #0]
 8006560:	e7ed      	b.n	800653e <_free_r+0x1e>
 8006562:	461a      	mov	r2, r3
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	b10b      	cbz	r3, 800656c <_free_r+0x4c>
 8006568:	42a3      	cmp	r3, r4
 800656a:	d9fa      	bls.n	8006562 <_free_r+0x42>
 800656c:	6811      	ldr	r1, [r2, #0]
 800656e:	1850      	adds	r0, r2, r1
 8006570:	42a0      	cmp	r0, r4
 8006572:	d10b      	bne.n	800658c <_free_r+0x6c>
 8006574:	6820      	ldr	r0, [r4, #0]
 8006576:	4401      	add	r1, r0
 8006578:	1850      	adds	r0, r2, r1
 800657a:	4283      	cmp	r3, r0
 800657c:	6011      	str	r1, [r2, #0]
 800657e:	d1e0      	bne.n	8006542 <_free_r+0x22>
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	4408      	add	r0, r1
 8006586:	6010      	str	r0, [r2, #0]
 8006588:	6053      	str	r3, [r2, #4]
 800658a:	e7da      	b.n	8006542 <_free_r+0x22>
 800658c:	d902      	bls.n	8006594 <_free_r+0x74>
 800658e:	230c      	movs	r3, #12
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	e7d6      	b.n	8006542 <_free_r+0x22>
 8006594:	6820      	ldr	r0, [r4, #0]
 8006596:	1821      	adds	r1, r4, r0
 8006598:	428b      	cmp	r3, r1
 800659a:	bf01      	itttt	eq
 800659c:	6819      	ldreq	r1, [r3, #0]
 800659e:	685b      	ldreq	r3, [r3, #4]
 80065a0:	1809      	addeq	r1, r1, r0
 80065a2:	6021      	streq	r1, [r4, #0]
 80065a4:	6063      	str	r3, [r4, #4]
 80065a6:	6054      	str	r4, [r2, #4]
 80065a8:	e7cb      	b.n	8006542 <_free_r+0x22>
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000924 	.word	0x20000924

080065b0 <malloc>:
 80065b0:	4b02      	ldr	r3, [pc, #8]	; (80065bc <malloc+0xc>)
 80065b2:	4601      	mov	r1, r0
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	f000 b823 	b.w	8006600 <_malloc_r>
 80065ba:	bf00      	nop
 80065bc:	2000007c 	.word	0x2000007c

080065c0 <sbrk_aligned>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	4e0e      	ldr	r6, [pc, #56]	; (80065fc <sbrk_aligned+0x3c>)
 80065c4:	460c      	mov	r4, r1
 80065c6:	6831      	ldr	r1, [r6, #0]
 80065c8:	4605      	mov	r5, r0
 80065ca:	b911      	cbnz	r1, 80065d2 <sbrk_aligned+0x12>
 80065cc:	f001 fdf2 	bl	80081b4 <_sbrk_r>
 80065d0:	6030      	str	r0, [r6, #0]
 80065d2:	4621      	mov	r1, r4
 80065d4:	4628      	mov	r0, r5
 80065d6:	f001 fded 	bl	80081b4 <_sbrk_r>
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	d00a      	beq.n	80065f4 <sbrk_aligned+0x34>
 80065de:	1cc4      	adds	r4, r0, #3
 80065e0:	f024 0403 	bic.w	r4, r4, #3
 80065e4:	42a0      	cmp	r0, r4
 80065e6:	d007      	beq.n	80065f8 <sbrk_aligned+0x38>
 80065e8:	1a21      	subs	r1, r4, r0
 80065ea:	4628      	mov	r0, r5
 80065ec:	f001 fde2 	bl	80081b4 <_sbrk_r>
 80065f0:	3001      	adds	r0, #1
 80065f2:	d101      	bne.n	80065f8 <sbrk_aligned+0x38>
 80065f4:	f04f 34ff 	mov.w	r4, #4294967295
 80065f8:	4620      	mov	r0, r4
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	20000928 	.word	0x20000928

08006600 <_malloc_r>:
 8006600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006604:	1ccd      	adds	r5, r1, #3
 8006606:	f025 0503 	bic.w	r5, r5, #3
 800660a:	3508      	adds	r5, #8
 800660c:	2d0c      	cmp	r5, #12
 800660e:	bf38      	it	cc
 8006610:	250c      	movcc	r5, #12
 8006612:	2d00      	cmp	r5, #0
 8006614:	4607      	mov	r7, r0
 8006616:	db01      	blt.n	800661c <_malloc_r+0x1c>
 8006618:	42a9      	cmp	r1, r5
 800661a:	d905      	bls.n	8006628 <_malloc_r+0x28>
 800661c:	230c      	movs	r3, #12
 800661e:	2600      	movs	r6, #0
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	4630      	mov	r0, r6
 8006624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006628:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066fc <_malloc_r+0xfc>
 800662c:	f000 f868 	bl	8006700 <__malloc_lock>
 8006630:	f8d8 3000 	ldr.w	r3, [r8]
 8006634:	461c      	mov	r4, r3
 8006636:	bb5c      	cbnz	r4, 8006690 <_malloc_r+0x90>
 8006638:	4629      	mov	r1, r5
 800663a:	4638      	mov	r0, r7
 800663c:	f7ff ffc0 	bl	80065c0 <sbrk_aligned>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	4604      	mov	r4, r0
 8006644:	d155      	bne.n	80066f2 <_malloc_r+0xf2>
 8006646:	f8d8 4000 	ldr.w	r4, [r8]
 800664a:	4626      	mov	r6, r4
 800664c:	2e00      	cmp	r6, #0
 800664e:	d145      	bne.n	80066dc <_malloc_r+0xdc>
 8006650:	2c00      	cmp	r4, #0
 8006652:	d048      	beq.n	80066e6 <_malloc_r+0xe6>
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	4631      	mov	r1, r6
 8006658:	4638      	mov	r0, r7
 800665a:	eb04 0903 	add.w	r9, r4, r3
 800665e:	f001 fda9 	bl	80081b4 <_sbrk_r>
 8006662:	4581      	cmp	r9, r0
 8006664:	d13f      	bne.n	80066e6 <_malloc_r+0xe6>
 8006666:	6821      	ldr	r1, [r4, #0]
 8006668:	4638      	mov	r0, r7
 800666a:	1a6d      	subs	r5, r5, r1
 800666c:	4629      	mov	r1, r5
 800666e:	f7ff ffa7 	bl	80065c0 <sbrk_aligned>
 8006672:	3001      	adds	r0, #1
 8006674:	d037      	beq.n	80066e6 <_malloc_r+0xe6>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	442b      	add	r3, r5
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	f8d8 3000 	ldr.w	r3, [r8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d038      	beq.n	80066f6 <_malloc_r+0xf6>
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	42a2      	cmp	r2, r4
 8006688:	d12b      	bne.n	80066e2 <_malloc_r+0xe2>
 800668a:	2200      	movs	r2, #0
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	e00f      	b.n	80066b0 <_malloc_r+0xb0>
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	1b52      	subs	r2, r2, r5
 8006694:	d41f      	bmi.n	80066d6 <_malloc_r+0xd6>
 8006696:	2a0b      	cmp	r2, #11
 8006698:	d917      	bls.n	80066ca <_malloc_r+0xca>
 800669a:	1961      	adds	r1, r4, r5
 800669c:	42a3      	cmp	r3, r4
 800669e:	6025      	str	r5, [r4, #0]
 80066a0:	bf18      	it	ne
 80066a2:	6059      	strne	r1, [r3, #4]
 80066a4:	6863      	ldr	r3, [r4, #4]
 80066a6:	bf08      	it	eq
 80066a8:	f8c8 1000 	streq.w	r1, [r8]
 80066ac:	5162      	str	r2, [r4, r5]
 80066ae:	604b      	str	r3, [r1, #4]
 80066b0:	4638      	mov	r0, r7
 80066b2:	f104 060b 	add.w	r6, r4, #11
 80066b6:	f000 f829 	bl	800670c <__malloc_unlock>
 80066ba:	f026 0607 	bic.w	r6, r6, #7
 80066be:	1d23      	adds	r3, r4, #4
 80066c0:	1af2      	subs	r2, r6, r3
 80066c2:	d0ae      	beq.n	8006622 <_malloc_r+0x22>
 80066c4:	1b9b      	subs	r3, r3, r6
 80066c6:	50a3      	str	r3, [r4, r2]
 80066c8:	e7ab      	b.n	8006622 <_malloc_r+0x22>
 80066ca:	42a3      	cmp	r3, r4
 80066cc:	6862      	ldr	r2, [r4, #4]
 80066ce:	d1dd      	bne.n	800668c <_malloc_r+0x8c>
 80066d0:	f8c8 2000 	str.w	r2, [r8]
 80066d4:	e7ec      	b.n	80066b0 <_malloc_r+0xb0>
 80066d6:	4623      	mov	r3, r4
 80066d8:	6864      	ldr	r4, [r4, #4]
 80066da:	e7ac      	b.n	8006636 <_malloc_r+0x36>
 80066dc:	4634      	mov	r4, r6
 80066de:	6876      	ldr	r6, [r6, #4]
 80066e0:	e7b4      	b.n	800664c <_malloc_r+0x4c>
 80066e2:	4613      	mov	r3, r2
 80066e4:	e7cc      	b.n	8006680 <_malloc_r+0x80>
 80066e6:	230c      	movs	r3, #12
 80066e8:	4638      	mov	r0, r7
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	f000 f80e 	bl	800670c <__malloc_unlock>
 80066f0:	e797      	b.n	8006622 <_malloc_r+0x22>
 80066f2:	6025      	str	r5, [r4, #0]
 80066f4:	e7dc      	b.n	80066b0 <_malloc_r+0xb0>
 80066f6:	605b      	str	r3, [r3, #4]
 80066f8:	deff      	udf	#255	; 0xff
 80066fa:	bf00      	nop
 80066fc:	20000924 	.word	0x20000924

08006700 <__malloc_lock>:
 8006700:	4801      	ldr	r0, [pc, #4]	; (8006708 <__malloc_lock+0x8>)
 8006702:	f7ff b87a 	b.w	80057fa <__retarget_lock_acquire_recursive>
 8006706:	bf00      	nop
 8006708:	20000920 	.word	0x20000920

0800670c <__malloc_unlock>:
 800670c:	4801      	ldr	r0, [pc, #4]	; (8006714 <__malloc_unlock+0x8>)
 800670e:	f7ff b875 	b.w	80057fc <__retarget_lock_release_recursive>
 8006712:	bf00      	nop
 8006714:	20000920 	.word	0x20000920

08006718 <_Balloc>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	69c6      	ldr	r6, [r0, #28]
 800671c:	4604      	mov	r4, r0
 800671e:	460d      	mov	r5, r1
 8006720:	b976      	cbnz	r6, 8006740 <_Balloc+0x28>
 8006722:	2010      	movs	r0, #16
 8006724:	f7ff ff44 	bl	80065b0 <malloc>
 8006728:	4602      	mov	r2, r0
 800672a:	61e0      	str	r0, [r4, #28]
 800672c:	b920      	cbnz	r0, 8006738 <_Balloc+0x20>
 800672e:	216b      	movs	r1, #107	; 0x6b
 8006730:	4b17      	ldr	r3, [pc, #92]	; (8006790 <_Balloc+0x78>)
 8006732:	4818      	ldr	r0, [pc, #96]	; (8006794 <_Balloc+0x7c>)
 8006734:	f001 fd54 	bl	80081e0 <__assert_func>
 8006738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800673c:	6006      	str	r6, [r0, #0]
 800673e:	60c6      	str	r6, [r0, #12]
 8006740:	69e6      	ldr	r6, [r4, #28]
 8006742:	68f3      	ldr	r3, [r6, #12]
 8006744:	b183      	cbz	r3, 8006768 <_Balloc+0x50>
 8006746:	69e3      	ldr	r3, [r4, #28]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800674e:	b9b8      	cbnz	r0, 8006780 <_Balloc+0x68>
 8006750:	2101      	movs	r1, #1
 8006752:	fa01 f605 	lsl.w	r6, r1, r5
 8006756:	1d72      	adds	r2, r6, #5
 8006758:	4620      	mov	r0, r4
 800675a:	0092      	lsls	r2, r2, #2
 800675c:	f001 fd5e 	bl	800821c <_calloc_r>
 8006760:	b160      	cbz	r0, 800677c <_Balloc+0x64>
 8006762:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006766:	e00e      	b.n	8006786 <_Balloc+0x6e>
 8006768:	2221      	movs	r2, #33	; 0x21
 800676a:	2104      	movs	r1, #4
 800676c:	4620      	mov	r0, r4
 800676e:	f001 fd55 	bl	800821c <_calloc_r>
 8006772:	69e3      	ldr	r3, [r4, #28]
 8006774:	60f0      	str	r0, [r6, #12]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e4      	bne.n	8006746 <_Balloc+0x2e>
 800677c:	2000      	movs	r0, #0
 800677e:	bd70      	pop	{r4, r5, r6, pc}
 8006780:	6802      	ldr	r2, [r0, #0]
 8006782:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006786:	2300      	movs	r3, #0
 8006788:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800678c:	e7f7      	b.n	800677e <_Balloc+0x66>
 800678e:	bf00      	nop
 8006790:	08009714 	.word	0x08009714
 8006794:	08009794 	.word	0x08009794

08006798 <_Bfree>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	69c6      	ldr	r6, [r0, #28]
 800679c:	4605      	mov	r5, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	b976      	cbnz	r6, 80067c0 <_Bfree+0x28>
 80067a2:	2010      	movs	r0, #16
 80067a4:	f7ff ff04 	bl	80065b0 <malloc>
 80067a8:	4602      	mov	r2, r0
 80067aa:	61e8      	str	r0, [r5, #28]
 80067ac:	b920      	cbnz	r0, 80067b8 <_Bfree+0x20>
 80067ae:	218f      	movs	r1, #143	; 0x8f
 80067b0:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <_Bfree+0x3c>)
 80067b2:	4809      	ldr	r0, [pc, #36]	; (80067d8 <_Bfree+0x40>)
 80067b4:	f001 fd14 	bl	80081e0 <__assert_func>
 80067b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067bc:	6006      	str	r6, [r0, #0]
 80067be:	60c6      	str	r6, [r0, #12]
 80067c0:	b13c      	cbz	r4, 80067d2 <_Bfree+0x3a>
 80067c2:	69eb      	ldr	r3, [r5, #28]
 80067c4:	6862      	ldr	r2, [r4, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067cc:	6021      	str	r1, [r4, #0]
 80067ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
 80067d4:	08009714 	.word	0x08009714
 80067d8:	08009794 	.word	0x08009794

080067dc <__multadd>:
 80067dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e0:	4607      	mov	r7, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	461e      	mov	r6, r3
 80067e6:	2000      	movs	r0, #0
 80067e8:	690d      	ldr	r5, [r1, #16]
 80067ea:	f101 0c14 	add.w	ip, r1, #20
 80067ee:	f8dc 3000 	ldr.w	r3, [ip]
 80067f2:	3001      	adds	r0, #1
 80067f4:	b299      	uxth	r1, r3
 80067f6:	fb02 6101 	mla	r1, r2, r1, r6
 80067fa:	0c1e      	lsrs	r6, r3, #16
 80067fc:	0c0b      	lsrs	r3, r1, #16
 80067fe:	fb02 3306 	mla	r3, r2, r6, r3
 8006802:	b289      	uxth	r1, r1
 8006804:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006808:	4285      	cmp	r5, r0
 800680a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800680e:	f84c 1b04 	str.w	r1, [ip], #4
 8006812:	dcec      	bgt.n	80067ee <__multadd+0x12>
 8006814:	b30e      	cbz	r6, 800685a <__multadd+0x7e>
 8006816:	68a3      	ldr	r3, [r4, #8]
 8006818:	42ab      	cmp	r3, r5
 800681a:	dc19      	bgt.n	8006850 <__multadd+0x74>
 800681c:	6861      	ldr	r1, [r4, #4]
 800681e:	4638      	mov	r0, r7
 8006820:	3101      	adds	r1, #1
 8006822:	f7ff ff79 	bl	8006718 <_Balloc>
 8006826:	4680      	mov	r8, r0
 8006828:	b928      	cbnz	r0, 8006836 <__multadd+0x5a>
 800682a:	4602      	mov	r2, r0
 800682c:	21ba      	movs	r1, #186	; 0xba
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <__multadd+0x84>)
 8006830:	480c      	ldr	r0, [pc, #48]	; (8006864 <__multadd+0x88>)
 8006832:	f001 fcd5 	bl	80081e0 <__assert_func>
 8006836:	6922      	ldr	r2, [r4, #16]
 8006838:	f104 010c 	add.w	r1, r4, #12
 800683c:	3202      	adds	r2, #2
 800683e:	0092      	lsls	r2, r2, #2
 8006840:	300c      	adds	r0, #12
 8006842:	f7fe ffea 	bl	800581a <memcpy>
 8006846:	4621      	mov	r1, r4
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff ffa5 	bl	8006798 <_Bfree>
 800684e:	4644      	mov	r4, r8
 8006850:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006854:	3501      	adds	r5, #1
 8006856:	615e      	str	r6, [r3, #20]
 8006858:	6125      	str	r5, [r4, #16]
 800685a:	4620      	mov	r0, r4
 800685c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006860:	08009783 	.word	0x08009783
 8006864:	08009794 	.word	0x08009794

08006868 <__s2b>:
 8006868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800686c:	4615      	mov	r5, r2
 800686e:	2209      	movs	r2, #9
 8006870:	461f      	mov	r7, r3
 8006872:	3308      	adds	r3, #8
 8006874:	460c      	mov	r4, r1
 8006876:	fb93 f3f2 	sdiv	r3, r3, r2
 800687a:	4606      	mov	r6, r0
 800687c:	2201      	movs	r2, #1
 800687e:	2100      	movs	r1, #0
 8006880:	429a      	cmp	r2, r3
 8006882:	db09      	blt.n	8006898 <__s2b+0x30>
 8006884:	4630      	mov	r0, r6
 8006886:	f7ff ff47 	bl	8006718 <_Balloc>
 800688a:	b940      	cbnz	r0, 800689e <__s2b+0x36>
 800688c:	4602      	mov	r2, r0
 800688e:	21d3      	movs	r1, #211	; 0xd3
 8006890:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <__s2b+0x8c>)
 8006892:	4819      	ldr	r0, [pc, #100]	; (80068f8 <__s2b+0x90>)
 8006894:	f001 fca4 	bl	80081e0 <__assert_func>
 8006898:	0052      	lsls	r2, r2, #1
 800689a:	3101      	adds	r1, #1
 800689c:	e7f0      	b.n	8006880 <__s2b+0x18>
 800689e:	9b08      	ldr	r3, [sp, #32]
 80068a0:	2d09      	cmp	r5, #9
 80068a2:	6143      	str	r3, [r0, #20]
 80068a4:	f04f 0301 	mov.w	r3, #1
 80068a8:	6103      	str	r3, [r0, #16]
 80068aa:	dd16      	ble.n	80068da <__s2b+0x72>
 80068ac:	f104 0909 	add.w	r9, r4, #9
 80068b0:	46c8      	mov	r8, r9
 80068b2:	442c      	add	r4, r5
 80068b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80068b8:	4601      	mov	r1, r0
 80068ba:	220a      	movs	r2, #10
 80068bc:	4630      	mov	r0, r6
 80068be:	3b30      	subs	r3, #48	; 0x30
 80068c0:	f7ff ff8c 	bl	80067dc <__multadd>
 80068c4:	45a0      	cmp	r8, r4
 80068c6:	d1f5      	bne.n	80068b4 <__s2b+0x4c>
 80068c8:	f1a5 0408 	sub.w	r4, r5, #8
 80068cc:	444c      	add	r4, r9
 80068ce:	1b2d      	subs	r5, r5, r4
 80068d0:	1963      	adds	r3, r4, r5
 80068d2:	42bb      	cmp	r3, r7
 80068d4:	db04      	blt.n	80068e0 <__s2b+0x78>
 80068d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068da:	2509      	movs	r5, #9
 80068dc:	340a      	adds	r4, #10
 80068de:	e7f6      	b.n	80068ce <__s2b+0x66>
 80068e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068e4:	4601      	mov	r1, r0
 80068e6:	220a      	movs	r2, #10
 80068e8:	4630      	mov	r0, r6
 80068ea:	3b30      	subs	r3, #48	; 0x30
 80068ec:	f7ff ff76 	bl	80067dc <__multadd>
 80068f0:	e7ee      	b.n	80068d0 <__s2b+0x68>
 80068f2:	bf00      	nop
 80068f4:	08009783 	.word	0x08009783
 80068f8:	08009794 	.word	0x08009794

080068fc <__hi0bits>:
 80068fc:	0c02      	lsrs	r2, r0, #16
 80068fe:	0412      	lsls	r2, r2, #16
 8006900:	4603      	mov	r3, r0
 8006902:	b9ca      	cbnz	r2, 8006938 <__hi0bits+0x3c>
 8006904:	0403      	lsls	r3, r0, #16
 8006906:	2010      	movs	r0, #16
 8006908:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800690c:	bf04      	itt	eq
 800690e:	021b      	lsleq	r3, r3, #8
 8006910:	3008      	addeq	r0, #8
 8006912:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006916:	bf04      	itt	eq
 8006918:	011b      	lsleq	r3, r3, #4
 800691a:	3004      	addeq	r0, #4
 800691c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006920:	bf04      	itt	eq
 8006922:	009b      	lsleq	r3, r3, #2
 8006924:	3002      	addeq	r0, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	db05      	blt.n	8006936 <__hi0bits+0x3a>
 800692a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800692e:	f100 0001 	add.w	r0, r0, #1
 8006932:	bf08      	it	eq
 8006934:	2020      	moveq	r0, #32
 8006936:	4770      	bx	lr
 8006938:	2000      	movs	r0, #0
 800693a:	e7e5      	b.n	8006908 <__hi0bits+0xc>

0800693c <__lo0bits>:
 800693c:	6803      	ldr	r3, [r0, #0]
 800693e:	4602      	mov	r2, r0
 8006940:	f013 0007 	ands.w	r0, r3, #7
 8006944:	d00b      	beq.n	800695e <__lo0bits+0x22>
 8006946:	07d9      	lsls	r1, r3, #31
 8006948:	d421      	bmi.n	800698e <__lo0bits+0x52>
 800694a:	0798      	lsls	r0, r3, #30
 800694c:	bf49      	itett	mi
 800694e:	085b      	lsrmi	r3, r3, #1
 8006950:	089b      	lsrpl	r3, r3, #2
 8006952:	2001      	movmi	r0, #1
 8006954:	6013      	strmi	r3, [r2, #0]
 8006956:	bf5c      	itt	pl
 8006958:	2002      	movpl	r0, #2
 800695a:	6013      	strpl	r3, [r2, #0]
 800695c:	4770      	bx	lr
 800695e:	b299      	uxth	r1, r3
 8006960:	b909      	cbnz	r1, 8006966 <__lo0bits+0x2a>
 8006962:	2010      	movs	r0, #16
 8006964:	0c1b      	lsrs	r3, r3, #16
 8006966:	b2d9      	uxtb	r1, r3
 8006968:	b909      	cbnz	r1, 800696e <__lo0bits+0x32>
 800696a:	3008      	adds	r0, #8
 800696c:	0a1b      	lsrs	r3, r3, #8
 800696e:	0719      	lsls	r1, r3, #28
 8006970:	bf04      	itt	eq
 8006972:	091b      	lsreq	r3, r3, #4
 8006974:	3004      	addeq	r0, #4
 8006976:	0799      	lsls	r1, r3, #30
 8006978:	bf04      	itt	eq
 800697a:	089b      	lsreq	r3, r3, #2
 800697c:	3002      	addeq	r0, #2
 800697e:	07d9      	lsls	r1, r3, #31
 8006980:	d403      	bmi.n	800698a <__lo0bits+0x4e>
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	f100 0001 	add.w	r0, r0, #1
 8006988:	d003      	beq.n	8006992 <__lo0bits+0x56>
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	4770      	bx	lr
 800698e:	2000      	movs	r0, #0
 8006990:	4770      	bx	lr
 8006992:	2020      	movs	r0, #32
 8006994:	4770      	bx	lr
	...

08006998 <__i2b>:
 8006998:	b510      	push	{r4, lr}
 800699a:	460c      	mov	r4, r1
 800699c:	2101      	movs	r1, #1
 800699e:	f7ff febb 	bl	8006718 <_Balloc>
 80069a2:	4602      	mov	r2, r0
 80069a4:	b928      	cbnz	r0, 80069b2 <__i2b+0x1a>
 80069a6:	f240 1145 	movw	r1, #325	; 0x145
 80069aa:	4b04      	ldr	r3, [pc, #16]	; (80069bc <__i2b+0x24>)
 80069ac:	4804      	ldr	r0, [pc, #16]	; (80069c0 <__i2b+0x28>)
 80069ae:	f001 fc17 	bl	80081e0 <__assert_func>
 80069b2:	2301      	movs	r3, #1
 80069b4:	6144      	str	r4, [r0, #20]
 80069b6:	6103      	str	r3, [r0, #16]
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	bf00      	nop
 80069bc:	08009783 	.word	0x08009783
 80069c0:	08009794 	.word	0x08009794

080069c4 <__multiply>:
 80069c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	4691      	mov	r9, r2
 80069ca:	690a      	ldr	r2, [r1, #16]
 80069cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069d0:	460c      	mov	r4, r1
 80069d2:	429a      	cmp	r2, r3
 80069d4:	bfbe      	ittt	lt
 80069d6:	460b      	movlt	r3, r1
 80069d8:	464c      	movlt	r4, r9
 80069da:	4699      	movlt	r9, r3
 80069dc:	6927      	ldr	r7, [r4, #16]
 80069de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069e2:	68a3      	ldr	r3, [r4, #8]
 80069e4:	6861      	ldr	r1, [r4, #4]
 80069e6:	eb07 060a 	add.w	r6, r7, sl
 80069ea:	42b3      	cmp	r3, r6
 80069ec:	b085      	sub	sp, #20
 80069ee:	bfb8      	it	lt
 80069f0:	3101      	addlt	r1, #1
 80069f2:	f7ff fe91 	bl	8006718 <_Balloc>
 80069f6:	b930      	cbnz	r0, 8006a06 <__multiply+0x42>
 80069f8:	4602      	mov	r2, r0
 80069fa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80069fe:	4b43      	ldr	r3, [pc, #268]	; (8006b0c <__multiply+0x148>)
 8006a00:	4843      	ldr	r0, [pc, #268]	; (8006b10 <__multiply+0x14c>)
 8006a02:	f001 fbed 	bl	80081e0 <__assert_func>
 8006a06:	f100 0514 	add.w	r5, r0, #20
 8006a0a:	462b      	mov	r3, r5
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a12:	4543      	cmp	r3, r8
 8006a14:	d321      	bcc.n	8006a5a <__multiply+0x96>
 8006a16:	f104 0314 	add.w	r3, r4, #20
 8006a1a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a1e:	f109 0314 	add.w	r3, r9, #20
 8006a22:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a26:	9202      	str	r2, [sp, #8]
 8006a28:	1b3a      	subs	r2, r7, r4
 8006a2a:	3a15      	subs	r2, #21
 8006a2c:	f022 0203 	bic.w	r2, r2, #3
 8006a30:	3204      	adds	r2, #4
 8006a32:	f104 0115 	add.w	r1, r4, #21
 8006a36:	428f      	cmp	r7, r1
 8006a38:	bf38      	it	cc
 8006a3a:	2204      	movcc	r2, #4
 8006a3c:	9201      	str	r2, [sp, #4]
 8006a3e:	9a02      	ldr	r2, [sp, #8]
 8006a40:	9303      	str	r3, [sp, #12]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d80c      	bhi.n	8006a60 <__multiply+0x9c>
 8006a46:	2e00      	cmp	r6, #0
 8006a48:	dd03      	ble.n	8006a52 <__multiply+0x8e>
 8006a4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d05a      	beq.n	8006b08 <__multiply+0x144>
 8006a52:	6106      	str	r6, [r0, #16]
 8006a54:	b005      	add	sp, #20
 8006a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5a:	f843 2b04 	str.w	r2, [r3], #4
 8006a5e:	e7d8      	b.n	8006a12 <__multiply+0x4e>
 8006a60:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a64:	f1ba 0f00 	cmp.w	sl, #0
 8006a68:	d023      	beq.n	8006ab2 <__multiply+0xee>
 8006a6a:	46a9      	mov	r9, r5
 8006a6c:	f04f 0c00 	mov.w	ip, #0
 8006a70:	f104 0e14 	add.w	lr, r4, #20
 8006a74:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a78:	f8d9 1000 	ldr.w	r1, [r9]
 8006a7c:	fa1f fb82 	uxth.w	fp, r2
 8006a80:	b289      	uxth	r1, r1
 8006a82:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a86:	4461      	add	r1, ip
 8006a88:	f8d9 c000 	ldr.w	ip, [r9]
 8006a8c:	0c12      	lsrs	r2, r2, #16
 8006a8e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006a92:	fb0a c202 	mla	r2, sl, r2, ip
 8006a96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a9a:	b289      	uxth	r1, r1
 8006a9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006aa0:	4577      	cmp	r7, lr
 8006aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006aa6:	f849 1b04 	str.w	r1, [r9], #4
 8006aaa:	d8e3      	bhi.n	8006a74 <__multiply+0xb0>
 8006aac:	9a01      	ldr	r2, [sp, #4]
 8006aae:	f845 c002 	str.w	ip, [r5, r2]
 8006ab2:	9a03      	ldr	r2, [sp, #12]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006aba:	f1b9 0f00 	cmp.w	r9, #0
 8006abe:	d021      	beq.n	8006b04 <__multiply+0x140>
 8006ac0:	46ae      	mov	lr, r5
 8006ac2:	f04f 0a00 	mov.w	sl, #0
 8006ac6:	6829      	ldr	r1, [r5, #0]
 8006ac8:	f104 0c14 	add.w	ip, r4, #20
 8006acc:	f8bc b000 	ldrh.w	fp, [ip]
 8006ad0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ad4:	b289      	uxth	r1, r1
 8006ad6:	fb09 220b 	mla	r2, r9, fp, r2
 8006ada:	4452      	add	r2, sl
 8006adc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ae0:	f84e 1b04 	str.w	r1, [lr], #4
 8006ae4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ae8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006aec:	f8be 1000 	ldrh.w	r1, [lr]
 8006af0:	4567      	cmp	r7, ip
 8006af2:	fb09 110a 	mla	r1, r9, sl, r1
 8006af6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006afa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006afe:	d8e5      	bhi.n	8006acc <__multiply+0x108>
 8006b00:	9a01      	ldr	r2, [sp, #4]
 8006b02:	50a9      	str	r1, [r5, r2]
 8006b04:	3504      	adds	r5, #4
 8006b06:	e79a      	b.n	8006a3e <__multiply+0x7a>
 8006b08:	3e01      	subs	r6, #1
 8006b0a:	e79c      	b.n	8006a46 <__multiply+0x82>
 8006b0c:	08009783 	.word	0x08009783
 8006b10:	08009794 	.word	0x08009794

08006b14 <__pow5mult>:
 8006b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b18:	4615      	mov	r5, r2
 8006b1a:	f012 0203 	ands.w	r2, r2, #3
 8006b1e:	4606      	mov	r6, r0
 8006b20:	460f      	mov	r7, r1
 8006b22:	d007      	beq.n	8006b34 <__pow5mult+0x20>
 8006b24:	4c25      	ldr	r4, [pc, #148]	; (8006bbc <__pow5mult+0xa8>)
 8006b26:	3a01      	subs	r2, #1
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b2e:	f7ff fe55 	bl	80067dc <__multadd>
 8006b32:	4607      	mov	r7, r0
 8006b34:	10ad      	asrs	r5, r5, #2
 8006b36:	d03d      	beq.n	8006bb4 <__pow5mult+0xa0>
 8006b38:	69f4      	ldr	r4, [r6, #28]
 8006b3a:	b97c      	cbnz	r4, 8006b5c <__pow5mult+0x48>
 8006b3c:	2010      	movs	r0, #16
 8006b3e:	f7ff fd37 	bl	80065b0 <malloc>
 8006b42:	4602      	mov	r2, r0
 8006b44:	61f0      	str	r0, [r6, #28]
 8006b46:	b928      	cbnz	r0, 8006b54 <__pow5mult+0x40>
 8006b48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b4c:	4b1c      	ldr	r3, [pc, #112]	; (8006bc0 <__pow5mult+0xac>)
 8006b4e:	481d      	ldr	r0, [pc, #116]	; (8006bc4 <__pow5mult+0xb0>)
 8006b50:	f001 fb46 	bl	80081e0 <__assert_func>
 8006b54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b58:	6004      	str	r4, [r0, #0]
 8006b5a:	60c4      	str	r4, [r0, #12]
 8006b5c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006b60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b64:	b94c      	cbnz	r4, 8006b7a <__pow5mult+0x66>
 8006b66:	f240 2171 	movw	r1, #625	; 0x271
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7ff ff14 	bl	8006998 <__i2b>
 8006b70:	2300      	movs	r3, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b78:	6003      	str	r3, [r0, #0]
 8006b7a:	f04f 0900 	mov.w	r9, #0
 8006b7e:	07eb      	lsls	r3, r5, #31
 8006b80:	d50a      	bpl.n	8006b98 <__pow5mult+0x84>
 8006b82:	4639      	mov	r1, r7
 8006b84:	4622      	mov	r2, r4
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7ff ff1c 	bl	80069c4 <__multiply>
 8006b8c:	4680      	mov	r8, r0
 8006b8e:	4639      	mov	r1, r7
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff fe01 	bl	8006798 <_Bfree>
 8006b96:	4647      	mov	r7, r8
 8006b98:	106d      	asrs	r5, r5, #1
 8006b9a:	d00b      	beq.n	8006bb4 <__pow5mult+0xa0>
 8006b9c:	6820      	ldr	r0, [r4, #0]
 8006b9e:	b938      	cbnz	r0, 8006bb0 <__pow5mult+0x9c>
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f7ff ff0d 	bl	80069c4 <__multiply>
 8006baa:	6020      	str	r0, [r4, #0]
 8006bac:	f8c0 9000 	str.w	r9, [r0]
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	e7e4      	b.n	8006b7e <__pow5mult+0x6a>
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bba:	bf00      	nop
 8006bbc:	080098e0 	.word	0x080098e0
 8006bc0:	08009714 	.word	0x08009714
 8006bc4:	08009794 	.word	0x08009794

08006bc8 <__lshift>:
 8006bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	460c      	mov	r4, r1
 8006bce:	4607      	mov	r7, r0
 8006bd0:	4691      	mov	r9, r2
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	6849      	ldr	r1, [r1, #4]
 8006bd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bda:	68a3      	ldr	r3, [r4, #8]
 8006bdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006be0:	f108 0601 	add.w	r6, r8, #1
 8006be4:	42b3      	cmp	r3, r6
 8006be6:	db0b      	blt.n	8006c00 <__lshift+0x38>
 8006be8:	4638      	mov	r0, r7
 8006bea:	f7ff fd95 	bl	8006718 <_Balloc>
 8006bee:	4605      	mov	r5, r0
 8006bf0:	b948      	cbnz	r0, 8006c06 <__lshift+0x3e>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006bf8:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <__lshift+0xd0>)
 8006bfa:	4828      	ldr	r0, [pc, #160]	; (8006c9c <__lshift+0xd4>)
 8006bfc:	f001 faf0 	bl	80081e0 <__assert_func>
 8006c00:	3101      	adds	r1, #1
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	e7ee      	b.n	8006be4 <__lshift+0x1c>
 8006c06:	2300      	movs	r3, #0
 8006c08:	f100 0114 	add.w	r1, r0, #20
 8006c0c:	f100 0210 	add.w	r2, r0, #16
 8006c10:	4618      	mov	r0, r3
 8006c12:	4553      	cmp	r3, sl
 8006c14:	db33      	blt.n	8006c7e <__lshift+0xb6>
 8006c16:	6920      	ldr	r0, [r4, #16]
 8006c18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c1c:	f104 0314 	add.w	r3, r4, #20
 8006c20:	f019 091f 	ands.w	r9, r9, #31
 8006c24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c2c:	d02b      	beq.n	8006c86 <__lshift+0xbe>
 8006c2e:	468a      	mov	sl, r1
 8006c30:	2200      	movs	r2, #0
 8006c32:	f1c9 0e20 	rsb	lr, r9, #32
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	fa00 f009 	lsl.w	r0, r0, r9
 8006c3c:	4310      	orrs	r0, r2
 8006c3e:	f84a 0b04 	str.w	r0, [sl], #4
 8006c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c46:	459c      	cmp	ip, r3
 8006c48:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c4c:	d8f3      	bhi.n	8006c36 <__lshift+0x6e>
 8006c4e:	ebac 0304 	sub.w	r3, ip, r4
 8006c52:	3b15      	subs	r3, #21
 8006c54:	f023 0303 	bic.w	r3, r3, #3
 8006c58:	3304      	adds	r3, #4
 8006c5a:	f104 0015 	add.w	r0, r4, #21
 8006c5e:	4584      	cmp	ip, r0
 8006c60:	bf38      	it	cc
 8006c62:	2304      	movcc	r3, #4
 8006c64:	50ca      	str	r2, [r1, r3]
 8006c66:	b10a      	cbz	r2, 8006c6c <__lshift+0xa4>
 8006c68:	f108 0602 	add.w	r6, r8, #2
 8006c6c:	3e01      	subs	r6, #1
 8006c6e:	4638      	mov	r0, r7
 8006c70:	4621      	mov	r1, r4
 8006c72:	612e      	str	r6, [r5, #16]
 8006c74:	f7ff fd90 	bl	8006798 <_Bfree>
 8006c78:	4628      	mov	r0, r5
 8006c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c82:	3301      	adds	r3, #1
 8006c84:	e7c5      	b.n	8006c12 <__lshift+0x4a>
 8006c86:	3904      	subs	r1, #4
 8006c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c8c:	459c      	cmp	ip, r3
 8006c8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c92:	d8f9      	bhi.n	8006c88 <__lshift+0xc0>
 8006c94:	e7ea      	b.n	8006c6c <__lshift+0xa4>
 8006c96:	bf00      	nop
 8006c98:	08009783 	.word	0x08009783
 8006c9c:	08009794 	.word	0x08009794

08006ca0 <__mcmp>:
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	690a      	ldr	r2, [r1, #16]
 8006ca4:	6900      	ldr	r0, [r0, #16]
 8006ca6:	b530      	push	{r4, r5, lr}
 8006ca8:	1a80      	subs	r0, r0, r2
 8006caa:	d10d      	bne.n	8006cc8 <__mcmp+0x28>
 8006cac:	3314      	adds	r3, #20
 8006cae:	3114      	adds	r1, #20
 8006cb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006cb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cc0:	4295      	cmp	r5, r2
 8006cc2:	d002      	beq.n	8006cca <__mcmp+0x2a>
 8006cc4:	d304      	bcc.n	8006cd0 <__mcmp+0x30>
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	bd30      	pop	{r4, r5, pc}
 8006cca:	42a3      	cmp	r3, r4
 8006ccc:	d3f4      	bcc.n	8006cb8 <__mcmp+0x18>
 8006cce:	e7fb      	b.n	8006cc8 <__mcmp+0x28>
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	e7f8      	b.n	8006cc8 <__mcmp+0x28>
	...

08006cd8 <__mdiff>:
 8006cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	460d      	mov	r5, r1
 8006cde:	4607      	mov	r7, r0
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	f7ff ffdb 	bl	8006ca0 <__mcmp>
 8006cea:	1e06      	subs	r6, r0, #0
 8006cec:	d111      	bne.n	8006d12 <__mdiff+0x3a>
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	f7ff fd11 	bl	8006718 <_Balloc>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	b928      	cbnz	r0, 8006d06 <__mdiff+0x2e>
 8006cfa:	f240 2137 	movw	r1, #567	; 0x237
 8006cfe:	4b3a      	ldr	r3, [pc, #232]	; (8006de8 <__mdiff+0x110>)
 8006d00:	483a      	ldr	r0, [pc, #232]	; (8006dec <__mdiff+0x114>)
 8006d02:	f001 fa6d 	bl	80081e0 <__assert_func>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d12:	bfa4      	itt	ge
 8006d14:	4623      	movge	r3, r4
 8006d16:	462c      	movge	r4, r5
 8006d18:	4638      	mov	r0, r7
 8006d1a:	6861      	ldr	r1, [r4, #4]
 8006d1c:	bfa6      	itte	ge
 8006d1e:	461d      	movge	r5, r3
 8006d20:	2600      	movge	r6, #0
 8006d22:	2601      	movlt	r6, #1
 8006d24:	f7ff fcf8 	bl	8006718 <_Balloc>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	b918      	cbnz	r0, 8006d34 <__mdiff+0x5c>
 8006d2c:	f240 2145 	movw	r1, #581	; 0x245
 8006d30:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <__mdiff+0x110>)
 8006d32:	e7e5      	b.n	8006d00 <__mdiff+0x28>
 8006d34:	f102 0814 	add.w	r8, r2, #20
 8006d38:	46c2      	mov	sl, r8
 8006d3a:	f04f 0c00 	mov.w	ip, #0
 8006d3e:	6927      	ldr	r7, [r4, #16]
 8006d40:	60c6      	str	r6, [r0, #12]
 8006d42:	692e      	ldr	r6, [r5, #16]
 8006d44:	f104 0014 	add.w	r0, r4, #20
 8006d48:	f105 0914 	add.w	r9, r5, #20
 8006d4c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006d50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d54:	3410      	adds	r4, #16
 8006d56:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006d5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d5e:	fa1f f18b 	uxth.w	r1, fp
 8006d62:	4461      	add	r1, ip
 8006d64:	fa1f fc83 	uxth.w	ip, r3
 8006d68:	0c1b      	lsrs	r3, r3, #16
 8006d6a:	eba1 010c 	sub.w	r1, r1, ip
 8006d6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d72:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006d76:	b289      	uxth	r1, r1
 8006d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006d7c:	454e      	cmp	r6, r9
 8006d7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006d82:	f84a 1b04 	str.w	r1, [sl], #4
 8006d86:	d8e6      	bhi.n	8006d56 <__mdiff+0x7e>
 8006d88:	1b73      	subs	r3, r6, r5
 8006d8a:	3b15      	subs	r3, #21
 8006d8c:	f023 0303 	bic.w	r3, r3, #3
 8006d90:	3515      	adds	r5, #21
 8006d92:	3304      	adds	r3, #4
 8006d94:	42ae      	cmp	r6, r5
 8006d96:	bf38      	it	cc
 8006d98:	2304      	movcc	r3, #4
 8006d9a:	4418      	add	r0, r3
 8006d9c:	4443      	add	r3, r8
 8006d9e:	461e      	mov	r6, r3
 8006da0:	4605      	mov	r5, r0
 8006da2:	4575      	cmp	r5, lr
 8006da4:	d30e      	bcc.n	8006dc4 <__mdiff+0xec>
 8006da6:	f10e 0103 	add.w	r1, lr, #3
 8006daa:	1a09      	subs	r1, r1, r0
 8006dac:	f021 0103 	bic.w	r1, r1, #3
 8006db0:	3803      	subs	r0, #3
 8006db2:	4586      	cmp	lr, r0
 8006db4:	bf38      	it	cc
 8006db6:	2100      	movcc	r1, #0
 8006db8:	440b      	add	r3, r1
 8006dba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006dbe:	b189      	cbz	r1, 8006de4 <__mdiff+0x10c>
 8006dc0:	6117      	str	r7, [r2, #16]
 8006dc2:	e7a3      	b.n	8006d0c <__mdiff+0x34>
 8006dc4:	f855 8b04 	ldr.w	r8, [r5], #4
 8006dc8:	fa1f f188 	uxth.w	r1, r8
 8006dcc:	4461      	add	r1, ip
 8006dce:	140c      	asrs	r4, r1, #16
 8006dd0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006dd4:	b289      	uxth	r1, r1
 8006dd6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006dda:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006dde:	f846 1b04 	str.w	r1, [r6], #4
 8006de2:	e7de      	b.n	8006da2 <__mdiff+0xca>
 8006de4:	3f01      	subs	r7, #1
 8006de6:	e7e8      	b.n	8006dba <__mdiff+0xe2>
 8006de8:	08009783 	.word	0x08009783
 8006dec:	08009794 	.word	0x08009794

08006df0 <__ulp>:
 8006df0:	4b0e      	ldr	r3, [pc, #56]	; (8006e2c <__ulp+0x3c>)
 8006df2:	400b      	ands	r3, r1
 8006df4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	dc08      	bgt.n	8006e0e <__ulp+0x1e>
 8006dfc:	425b      	negs	r3, r3
 8006dfe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006e02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e06:	da04      	bge.n	8006e12 <__ulp+0x22>
 8006e08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e0c:	4113      	asrs	r3, r2
 8006e0e:	2200      	movs	r2, #0
 8006e10:	e008      	b.n	8006e24 <__ulp+0x34>
 8006e12:	f1a2 0314 	sub.w	r3, r2, #20
 8006e16:	2b1e      	cmp	r3, #30
 8006e18:	bfd6      	itet	le
 8006e1a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006e1e:	2201      	movgt	r2, #1
 8006e20:	40da      	lsrle	r2, r3
 8006e22:	2300      	movs	r3, #0
 8006e24:	4619      	mov	r1, r3
 8006e26:	4610      	mov	r0, r2
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	7ff00000 	.word	0x7ff00000

08006e30 <__b2d>:
 8006e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e32:	6905      	ldr	r5, [r0, #16]
 8006e34:	f100 0714 	add.w	r7, r0, #20
 8006e38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006e3c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006e40:	1f2e      	subs	r6, r5, #4
 8006e42:	4620      	mov	r0, r4
 8006e44:	f7ff fd5a 	bl	80068fc <__hi0bits>
 8006e48:	f1c0 0220 	rsb	r2, r0, #32
 8006e4c:	280a      	cmp	r0, #10
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006ebc <__b2d+0x8c>
 8006e54:	600a      	str	r2, [r1, #0]
 8006e56:	dc12      	bgt.n	8006e7e <__b2d+0x4e>
 8006e58:	f1c0 0e0b 	rsb	lr, r0, #11
 8006e5c:	fa24 f20e 	lsr.w	r2, r4, lr
 8006e60:	42b7      	cmp	r7, r6
 8006e62:	ea42 010c 	orr.w	r1, r2, ip
 8006e66:	bf2c      	ite	cs
 8006e68:	2200      	movcs	r2, #0
 8006e6a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006e6e:	3315      	adds	r3, #21
 8006e70:	fa04 f303 	lsl.w	r3, r4, r3
 8006e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7e:	42b7      	cmp	r7, r6
 8006e80:	bf2e      	itee	cs
 8006e82:	2200      	movcs	r2, #0
 8006e84:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006e88:	f1a5 0608 	subcc.w	r6, r5, #8
 8006e8c:	3b0b      	subs	r3, #11
 8006e8e:	d012      	beq.n	8006eb6 <__b2d+0x86>
 8006e90:	f1c3 0520 	rsb	r5, r3, #32
 8006e94:	fa22 f105 	lsr.w	r1, r2, r5
 8006e98:	409c      	lsls	r4, r3
 8006e9a:	430c      	orrs	r4, r1
 8006e9c:	42be      	cmp	r6, r7
 8006e9e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006ea2:	bf94      	ite	ls
 8006ea4:	2400      	movls	r4, #0
 8006ea6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006eaa:	409a      	lsls	r2, r3
 8006eac:	40ec      	lsrs	r4, r5
 8006eae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006eb2:	4322      	orrs	r2, r4
 8006eb4:	e7e1      	b.n	8006e7a <__b2d+0x4a>
 8006eb6:	ea44 010c 	orr.w	r1, r4, ip
 8006eba:	e7de      	b.n	8006e7a <__b2d+0x4a>
 8006ebc:	3ff00000 	.word	0x3ff00000

08006ec0 <__d2b>:
 8006ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	4617      	mov	r7, r2
 8006ec6:	461c      	mov	r4, r3
 8006ec8:	9e08      	ldr	r6, [sp, #32]
 8006eca:	f7ff fc25 	bl	8006718 <_Balloc>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	b930      	cbnz	r0, 8006ee0 <__d2b+0x20>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	f240 310f 	movw	r1, #783	; 0x30f
 8006ed8:	4b22      	ldr	r3, [pc, #136]	; (8006f64 <__d2b+0xa4>)
 8006eda:	4823      	ldr	r0, [pc, #140]	; (8006f68 <__d2b+0xa8>)
 8006edc:	f001 f980 	bl	80081e0 <__assert_func>
 8006ee0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006ee4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006ee8:	bb24      	cbnz	r4, 8006f34 <__d2b+0x74>
 8006eea:	2f00      	cmp	r7, #0
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	d026      	beq.n	8006f3e <__d2b+0x7e>
 8006ef0:	4668      	mov	r0, sp
 8006ef2:	9700      	str	r7, [sp, #0]
 8006ef4:	f7ff fd22 	bl	800693c <__lo0bits>
 8006ef8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006efc:	b1e8      	cbz	r0, 8006f3a <__d2b+0x7a>
 8006efe:	f1c0 0320 	rsb	r3, r0, #32
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	430b      	orrs	r3, r1
 8006f08:	40c2      	lsrs	r2, r0
 8006f0a:	616b      	str	r3, [r5, #20]
 8006f0c:	9201      	str	r2, [sp, #4]
 8006f0e:	9b01      	ldr	r3, [sp, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf14      	ite	ne
 8006f14:	2102      	movne	r1, #2
 8006f16:	2101      	moveq	r1, #1
 8006f18:	61ab      	str	r3, [r5, #24]
 8006f1a:	6129      	str	r1, [r5, #16]
 8006f1c:	b1bc      	cbz	r4, 8006f4e <__d2b+0x8e>
 8006f1e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006f22:	4404      	add	r4, r0
 8006f24:	6034      	str	r4, [r6, #0]
 8006f26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2c:	6018      	str	r0, [r3, #0]
 8006f2e:	4628      	mov	r0, r5
 8006f30:	b003      	add	sp, #12
 8006f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f38:	e7d7      	b.n	8006eea <__d2b+0x2a>
 8006f3a:	6169      	str	r1, [r5, #20]
 8006f3c:	e7e7      	b.n	8006f0e <__d2b+0x4e>
 8006f3e:	a801      	add	r0, sp, #4
 8006f40:	f7ff fcfc 	bl	800693c <__lo0bits>
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	2101      	movs	r1, #1
 8006f48:	616b      	str	r3, [r5, #20]
 8006f4a:	3020      	adds	r0, #32
 8006f4c:	e7e5      	b.n	8006f1a <__d2b+0x5a>
 8006f4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f52:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006f56:	6030      	str	r0, [r6, #0]
 8006f58:	6918      	ldr	r0, [r3, #16]
 8006f5a:	f7ff fccf 	bl	80068fc <__hi0bits>
 8006f5e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006f62:	e7e2      	b.n	8006f2a <__d2b+0x6a>
 8006f64:	08009783 	.word	0x08009783
 8006f68:	08009794 	.word	0x08009794

08006f6c <__ratio>:
 8006f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	4688      	mov	r8, r1
 8006f72:	4669      	mov	r1, sp
 8006f74:	4681      	mov	r9, r0
 8006f76:	f7ff ff5b 	bl	8006e30 <__b2d>
 8006f7a:	460f      	mov	r7, r1
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	4640      	mov	r0, r8
 8006f82:	a901      	add	r1, sp, #4
 8006f84:	f7ff ff54 	bl	8006e30 <__b2d>
 8006f88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006f90:	468b      	mov	fp, r1
 8006f92:	eba3 0c02 	sub.w	ip, r3, r2
 8006f96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bfd5      	itete	le
 8006fa4:	460a      	movle	r2, r1
 8006fa6:	462a      	movgt	r2, r5
 8006fa8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006fac:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006fb0:	bfd8      	it	le
 8006fb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006fb6:	465b      	mov	r3, fp
 8006fb8:	4602      	mov	r2, r0
 8006fba:	4639      	mov	r1, r7
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f7f9 fbb5 	bl	800072c <__aeabi_ddiv>
 8006fc2:	b003      	add	sp, #12
 8006fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fc8 <__copybits>:
 8006fc8:	3901      	subs	r1, #1
 8006fca:	b570      	push	{r4, r5, r6, lr}
 8006fcc:	1149      	asrs	r1, r1, #5
 8006fce:	6914      	ldr	r4, [r2, #16]
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	f102 0314 	add.w	r3, r2, #20
 8006fd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006fda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006fde:	1f05      	subs	r5, r0, #4
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d30c      	bcc.n	8006ffe <__copybits+0x36>
 8006fe4:	1aa3      	subs	r3, r4, r2
 8006fe6:	3b11      	subs	r3, #17
 8006fe8:	f023 0303 	bic.w	r3, r3, #3
 8006fec:	3211      	adds	r2, #17
 8006fee:	42a2      	cmp	r2, r4
 8006ff0:	bf88      	it	hi
 8006ff2:	2300      	movhi	r3, #0
 8006ff4:	4418      	add	r0, r3
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4288      	cmp	r0, r1
 8006ffa:	d305      	bcc.n	8007008 <__copybits+0x40>
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	f853 6b04 	ldr.w	r6, [r3], #4
 8007002:	f845 6f04 	str.w	r6, [r5, #4]!
 8007006:	e7eb      	b.n	8006fe0 <__copybits+0x18>
 8007008:	f840 3b04 	str.w	r3, [r0], #4
 800700c:	e7f4      	b.n	8006ff8 <__copybits+0x30>

0800700e <__any_on>:
 800700e:	f100 0214 	add.w	r2, r0, #20
 8007012:	6900      	ldr	r0, [r0, #16]
 8007014:	114b      	asrs	r3, r1, #5
 8007016:	4298      	cmp	r0, r3
 8007018:	b510      	push	{r4, lr}
 800701a:	db11      	blt.n	8007040 <__any_on+0x32>
 800701c:	dd0a      	ble.n	8007034 <__any_on+0x26>
 800701e:	f011 011f 	ands.w	r1, r1, #31
 8007022:	d007      	beq.n	8007034 <__any_on+0x26>
 8007024:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007028:	fa24 f001 	lsr.w	r0, r4, r1
 800702c:	fa00 f101 	lsl.w	r1, r0, r1
 8007030:	428c      	cmp	r4, r1
 8007032:	d10b      	bne.n	800704c <__any_on+0x3e>
 8007034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007038:	4293      	cmp	r3, r2
 800703a:	d803      	bhi.n	8007044 <__any_on+0x36>
 800703c:	2000      	movs	r0, #0
 800703e:	bd10      	pop	{r4, pc}
 8007040:	4603      	mov	r3, r0
 8007042:	e7f7      	b.n	8007034 <__any_on+0x26>
 8007044:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007048:	2900      	cmp	r1, #0
 800704a:	d0f5      	beq.n	8007038 <__any_on+0x2a>
 800704c:	2001      	movs	r0, #1
 800704e:	e7f6      	b.n	800703e <__any_on+0x30>

08007050 <sulp>:
 8007050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007054:	460f      	mov	r7, r1
 8007056:	4690      	mov	r8, r2
 8007058:	f7ff feca 	bl	8006df0 <__ulp>
 800705c:	4604      	mov	r4, r0
 800705e:	460d      	mov	r5, r1
 8007060:	f1b8 0f00 	cmp.w	r8, #0
 8007064:	d011      	beq.n	800708a <sulp+0x3a>
 8007066:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800706a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800706e:	2b00      	cmp	r3, #0
 8007070:	dd0b      	ble.n	800708a <sulp+0x3a>
 8007072:	2400      	movs	r4, #0
 8007074:	051b      	lsls	r3, r3, #20
 8007076:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800707a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800707e:	4622      	mov	r2, r4
 8007080:	462b      	mov	r3, r5
 8007082:	f7f9 fa29 	bl	80004d8 <__aeabi_dmul>
 8007086:	4604      	mov	r4, r0
 8007088:	460d      	mov	r5, r1
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007092:	0000      	movs	r0, r0
 8007094:	0000      	movs	r0, r0
	...

08007098 <_strtod_l>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	b09f      	sub	sp, #124	; 0x7c
 800709e:	9217      	str	r2, [sp, #92]	; 0x5c
 80070a0:	2200      	movs	r2, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	921a      	str	r2, [sp, #104]	; 0x68
 80070a6:	460d      	mov	r5, r1
 80070a8:	f04f 0800 	mov.w	r8, #0
 80070ac:	f04f 0900 	mov.w	r9, #0
 80070b0:	460a      	mov	r2, r1
 80070b2:	9219      	str	r2, [sp, #100]	; 0x64
 80070b4:	7811      	ldrb	r1, [r2, #0]
 80070b6:	292b      	cmp	r1, #43	; 0x2b
 80070b8:	d04a      	beq.n	8007150 <_strtod_l+0xb8>
 80070ba:	d838      	bhi.n	800712e <_strtod_l+0x96>
 80070bc:	290d      	cmp	r1, #13
 80070be:	d832      	bhi.n	8007126 <_strtod_l+0x8e>
 80070c0:	2908      	cmp	r1, #8
 80070c2:	d832      	bhi.n	800712a <_strtod_l+0x92>
 80070c4:	2900      	cmp	r1, #0
 80070c6:	d03b      	beq.n	8007140 <_strtod_l+0xa8>
 80070c8:	2200      	movs	r2, #0
 80070ca:	920e      	str	r2, [sp, #56]	; 0x38
 80070cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80070ce:	7832      	ldrb	r2, [r6, #0]
 80070d0:	2a30      	cmp	r2, #48	; 0x30
 80070d2:	f040 80b2 	bne.w	800723a <_strtod_l+0x1a2>
 80070d6:	7872      	ldrb	r2, [r6, #1]
 80070d8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80070dc:	2a58      	cmp	r2, #88	; 0x58
 80070de:	d16e      	bne.n	80071be <_strtod_l+0x126>
 80070e0:	9302      	str	r3, [sp, #8]
 80070e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070e4:	4620      	mov	r0, r4
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	ab1a      	add	r3, sp, #104	; 0x68
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	4a8c      	ldr	r2, [pc, #560]	; (8007320 <_strtod_l+0x288>)
 80070ee:	ab1b      	add	r3, sp, #108	; 0x6c
 80070f0:	a919      	add	r1, sp, #100	; 0x64
 80070f2:	f001 f90f 	bl	8008314 <__gethex>
 80070f6:	f010 070f 	ands.w	r7, r0, #15
 80070fa:	4605      	mov	r5, r0
 80070fc:	d005      	beq.n	800710a <_strtod_l+0x72>
 80070fe:	2f06      	cmp	r7, #6
 8007100:	d128      	bne.n	8007154 <_strtod_l+0xbc>
 8007102:	2300      	movs	r3, #0
 8007104:	3601      	adds	r6, #1
 8007106:	9619      	str	r6, [sp, #100]	; 0x64
 8007108:	930e      	str	r3, [sp, #56]	; 0x38
 800710a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800710c:	2b00      	cmp	r3, #0
 800710e:	f040 85a0 	bne.w	8007c52 <_strtod_l+0xbba>
 8007112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007114:	b1cb      	cbz	r3, 800714a <_strtod_l+0xb2>
 8007116:	4642      	mov	r2, r8
 8007118:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800711c:	4610      	mov	r0, r2
 800711e:	4619      	mov	r1, r3
 8007120:	b01f      	add	sp, #124	; 0x7c
 8007122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007126:	2920      	cmp	r1, #32
 8007128:	d1ce      	bne.n	80070c8 <_strtod_l+0x30>
 800712a:	3201      	adds	r2, #1
 800712c:	e7c1      	b.n	80070b2 <_strtod_l+0x1a>
 800712e:	292d      	cmp	r1, #45	; 0x2d
 8007130:	d1ca      	bne.n	80070c8 <_strtod_l+0x30>
 8007132:	2101      	movs	r1, #1
 8007134:	910e      	str	r1, [sp, #56]	; 0x38
 8007136:	1c51      	adds	r1, r2, #1
 8007138:	9119      	str	r1, [sp, #100]	; 0x64
 800713a:	7852      	ldrb	r2, [r2, #1]
 800713c:	2a00      	cmp	r2, #0
 800713e:	d1c5      	bne.n	80070cc <_strtod_l+0x34>
 8007140:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007142:	9519      	str	r5, [sp, #100]	; 0x64
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 8582 	bne.w	8007c4e <_strtod_l+0xbb6>
 800714a:	4642      	mov	r2, r8
 800714c:	464b      	mov	r3, r9
 800714e:	e7e5      	b.n	800711c <_strtod_l+0x84>
 8007150:	2100      	movs	r1, #0
 8007152:	e7ef      	b.n	8007134 <_strtod_l+0x9c>
 8007154:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007156:	b13a      	cbz	r2, 8007168 <_strtod_l+0xd0>
 8007158:	2135      	movs	r1, #53	; 0x35
 800715a:	a81c      	add	r0, sp, #112	; 0x70
 800715c:	f7ff ff34 	bl	8006fc8 <__copybits>
 8007160:	4620      	mov	r0, r4
 8007162:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007164:	f7ff fb18 	bl	8006798 <_Bfree>
 8007168:	3f01      	subs	r7, #1
 800716a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800716c:	2f04      	cmp	r7, #4
 800716e:	d806      	bhi.n	800717e <_strtod_l+0xe6>
 8007170:	e8df f007 	tbb	[pc, r7]
 8007174:	201d0314 	.word	0x201d0314
 8007178:	14          	.byte	0x14
 8007179:	00          	.byte	0x00
 800717a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800717e:	05e9      	lsls	r1, r5, #23
 8007180:	bf48      	it	mi
 8007182:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800718a:	0d1b      	lsrs	r3, r3, #20
 800718c:	051b      	lsls	r3, r3, #20
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1bb      	bne.n	800710a <_strtod_l+0x72>
 8007192:	f7fe fb07 	bl	80057a4 <__errno>
 8007196:	2322      	movs	r3, #34	; 0x22
 8007198:	6003      	str	r3, [r0, #0]
 800719a:	e7b6      	b.n	800710a <_strtod_l+0x72>
 800719c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071a0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80071a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80071ac:	e7e7      	b.n	800717e <_strtod_l+0xe6>
 80071ae:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007324 <_strtod_l+0x28c>
 80071b2:	e7e4      	b.n	800717e <_strtod_l+0xe6>
 80071b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80071b8:	f04f 38ff 	mov.w	r8, #4294967295
 80071bc:	e7df      	b.n	800717e <_strtod_l+0xe6>
 80071be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	9219      	str	r2, [sp, #100]	; 0x64
 80071c4:	785b      	ldrb	r3, [r3, #1]
 80071c6:	2b30      	cmp	r3, #48	; 0x30
 80071c8:	d0f9      	beq.n	80071be <_strtod_l+0x126>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d09d      	beq.n	800710a <_strtod_l+0x72>
 80071ce:	2301      	movs	r3, #1
 80071d0:	f04f 0a00 	mov.w	sl, #0
 80071d4:	220a      	movs	r2, #10
 80071d6:	46d3      	mov	fp, sl
 80071d8:	9305      	str	r3, [sp, #20]
 80071da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071dc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80071e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80071e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80071e4:	7806      	ldrb	r6, [r0, #0]
 80071e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80071ea:	b2d9      	uxtb	r1, r3
 80071ec:	2909      	cmp	r1, #9
 80071ee:	d926      	bls.n	800723e <_strtod_l+0x1a6>
 80071f0:	2201      	movs	r2, #1
 80071f2:	494d      	ldr	r1, [pc, #308]	; (8007328 <_strtod_l+0x290>)
 80071f4:	f000 ffcc 	bl	8008190 <strncmp>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d030      	beq.n	800725e <_strtod_l+0x1c6>
 80071fc:	2000      	movs	r0, #0
 80071fe:	4632      	mov	r2, r6
 8007200:	4603      	mov	r3, r0
 8007202:	465e      	mov	r6, fp
 8007204:	9008      	str	r0, [sp, #32]
 8007206:	2a65      	cmp	r2, #101	; 0x65
 8007208:	d001      	beq.n	800720e <_strtod_l+0x176>
 800720a:	2a45      	cmp	r2, #69	; 0x45
 800720c:	d113      	bne.n	8007236 <_strtod_l+0x19e>
 800720e:	b91e      	cbnz	r6, 8007218 <_strtod_l+0x180>
 8007210:	9a05      	ldr	r2, [sp, #20]
 8007212:	4302      	orrs	r2, r0
 8007214:	d094      	beq.n	8007140 <_strtod_l+0xa8>
 8007216:	2600      	movs	r6, #0
 8007218:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800721a:	1c6a      	adds	r2, r5, #1
 800721c:	9219      	str	r2, [sp, #100]	; 0x64
 800721e:	786a      	ldrb	r2, [r5, #1]
 8007220:	2a2b      	cmp	r2, #43	; 0x2b
 8007222:	d074      	beq.n	800730e <_strtod_l+0x276>
 8007224:	2a2d      	cmp	r2, #45	; 0x2d
 8007226:	d078      	beq.n	800731a <_strtod_l+0x282>
 8007228:	f04f 0c00 	mov.w	ip, #0
 800722c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007230:	2909      	cmp	r1, #9
 8007232:	d97f      	bls.n	8007334 <_strtod_l+0x29c>
 8007234:	9519      	str	r5, [sp, #100]	; 0x64
 8007236:	2700      	movs	r7, #0
 8007238:	e09e      	b.n	8007378 <_strtod_l+0x2e0>
 800723a:	2300      	movs	r3, #0
 800723c:	e7c8      	b.n	80071d0 <_strtod_l+0x138>
 800723e:	f1bb 0f08 	cmp.w	fp, #8
 8007242:	bfd8      	it	le
 8007244:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007246:	f100 0001 	add.w	r0, r0, #1
 800724a:	bfd6      	itet	le
 800724c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007250:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007254:	930a      	strle	r3, [sp, #40]	; 0x28
 8007256:	f10b 0b01 	add.w	fp, fp, #1
 800725a:	9019      	str	r0, [sp, #100]	; 0x64
 800725c:	e7c1      	b.n	80071e2 <_strtod_l+0x14a>
 800725e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	9219      	str	r2, [sp, #100]	; 0x64
 8007264:	785a      	ldrb	r2, [r3, #1]
 8007266:	f1bb 0f00 	cmp.w	fp, #0
 800726a:	d037      	beq.n	80072dc <_strtod_l+0x244>
 800726c:	465e      	mov	r6, fp
 800726e:	9008      	str	r0, [sp, #32]
 8007270:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007274:	2b09      	cmp	r3, #9
 8007276:	d912      	bls.n	800729e <_strtod_l+0x206>
 8007278:	2301      	movs	r3, #1
 800727a:	e7c4      	b.n	8007206 <_strtod_l+0x16e>
 800727c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800727e:	3001      	adds	r0, #1
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	9219      	str	r2, [sp, #100]	; 0x64
 8007284:	785a      	ldrb	r2, [r3, #1]
 8007286:	2a30      	cmp	r2, #48	; 0x30
 8007288:	d0f8      	beq.n	800727c <_strtod_l+0x1e4>
 800728a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800728e:	2b08      	cmp	r3, #8
 8007290:	f200 84e4 	bhi.w	8007c5c <_strtod_l+0xbc4>
 8007294:	9008      	str	r0, [sp, #32]
 8007296:	2000      	movs	r0, #0
 8007298:	4606      	mov	r6, r0
 800729a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800729c:	930b      	str	r3, [sp, #44]	; 0x2c
 800729e:	3a30      	subs	r2, #48	; 0x30
 80072a0:	f100 0301 	add.w	r3, r0, #1
 80072a4:	d014      	beq.n	80072d0 <_strtod_l+0x238>
 80072a6:	9908      	ldr	r1, [sp, #32]
 80072a8:	eb00 0c06 	add.w	ip, r0, r6
 80072ac:	4419      	add	r1, r3
 80072ae:	9108      	str	r1, [sp, #32]
 80072b0:	4633      	mov	r3, r6
 80072b2:	210a      	movs	r1, #10
 80072b4:	4563      	cmp	r3, ip
 80072b6:	d113      	bne.n	80072e0 <_strtod_l+0x248>
 80072b8:	1833      	adds	r3, r6, r0
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	f106 0601 	add.w	r6, r6, #1
 80072c0:	4406      	add	r6, r0
 80072c2:	dc1a      	bgt.n	80072fa <_strtod_l+0x262>
 80072c4:	230a      	movs	r3, #10
 80072c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072c8:	fb03 2301 	mla	r3, r3, r1, r2
 80072cc:	930a      	str	r3, [sp, #40]	; 0x28
 80072ce:	2300      	movs	r3, #0
 80072d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80072d2:	4618      	mov	r0, r3
 80072d4:	1c51      	adds	r1, r2, #1
 80072d6:	9119      	str	r1, [sp, #100]	; 0x64
 80072d8:	7852      	ldrb	r2, [r2, #1]
 80072da:	e7c9      	b.n	8007270 <_strtod_l+0x1d8>
 80072dc:	4658      	mov	r0, fp
 80072de:	e7d2      	b.n	8007286 <_strtod_l+0x1ee>
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	f103 0301 	add.w	r3, r3, #1
 80072e6:	dc03      	bgt.n	80072f0 <_strtod_l+0x258>
 80072e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80072ea:	434f      	muls	r7, r1
 80072ec:	970a      	str	r7, [sp, #40]	; 0x28
 80072ee:	e7e1      	b.n	80072b4 <_strtod_l+0x21c>
 80072f0:	2b10      	cmp	r3, #16
 80072f2:	bfd8      	it	le
 80072f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80072f8:	e7dc      	b.n	80072b4 <_strtod_l+0x21c>
 80072fa:	2e10      	cmp	r6, #16
 80072fc:	bfdc      	itt	le
 80072fe:	230a      	movle	r3, #10
 8007300:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007304:	e7e3      	b.n	80072ce <_strtod_l+0x236>
 8007306:	2300      	movs	r3, #0
 8007308:	9308      	str	r3, [sp, #32]
 800730a:	2301      	movs	r3, #1
 800730c:	e780      	b.n	8007210 <_strtod_l+0x178>
 800730e:	f04f 0c00 	mov.w	ip, #0
 8007312:	1caa      	adds	r2, r5, #2
 8007314:	9219      	str	r2, [sp, #100]	; 0x64
 8007316:	78aa      	ldrb	r2, [r5, #2]
 8007318:	e788      	b.n	800722c <_strtod_l+0x194>
 800731a:	f04f 0c01 	mov.w	ip, #1
 800731e:	e7f8      	b.n	8007312 <_strtod_l+0x27a>
 8007320:	080098f0 	.word	0x080098f0
 8007324:	7ff00000 	.word	0x7ff00000
 8007328:	080098ec 	.word	0x080098ec
 800732c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800732e:	1c51      	adds	r1, r2, #1
 8007330:	9119      	str	r1, [sp, #100]	; 0x64
 8007332:	7852      	ldrb	r2, [r2, #1]
 8007334:	2a30      	cmp	r2, #48	; 0x30
 8007336:	d0f9      	beq.n	800732c <_strtod_l+0x294>
 8007338:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800733c:	2908      	cmp	r1, #8
 800733e:	f63f af7a 	bhi.w	8007236 <_strtod_l+0x19e>
 8007342:	3a30      	subs	r2, #48	; 0x30
 8007344:	9209      	str	r2, [sp, #36]	; 0x24
 8007346:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007348:	920c      	str	r2, [sp, #48]	; 0x30
 800734a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800734c:	1c57      	adds	r7, r2, #1
 800734e:	9719      	str	r7, [sp, #100]	; 0x64
 8007350:	7852      	ldrb	r2, [r2, #1]
 8007352:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007356:	f1be 0f09 	cmp.w	lr, #9
 800735a:	d938      	bls.n	80073ce <_strtod_l+0x336>
 800735c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800735e:	1a7f      	subs	r7, r7, r1
 8007360:	2f08      	cmp	r7, #8
 8007362:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007366:	dc03      	bgt.n	8007370 <_strtod_l+0x2d8>
 8007368:	9909      	ldr	r1, [sp, #36]	; 0x24
 800736a:	428f      	cmp	r7, r1
 800736c:	bfa8      	it	ge
 800736e:	460f      	movge	r7, r1
 8007370:	f1bc 0f00 	cmp.w	ip, #0
 8007374:	d000      	beq.n	8007378 <_strtod_l+0x2e0>
 8007376:	427f      	negs	r7, r7
 8007378:	2e00      	cmp	r6, #0
 800737a:	d14f      	bne.n	800741c <_strtod_l+0x384>
 800737c:	9905      	ldr	r1, [sp, #20]
 800737e:	4301      	orrs	r1, r0
 8007380:	f47f aec3 	bne.w	800710a <_strtod_l+0x72>
 8007384:	2b00      	cmp	r3, #0
 8007386:	f47f aedb 	bne.w	8007140 <_strtod_l+0xa8>
 800738a:	2a69      	cmp	r2, #105	; 0x69
 800738c:	d029      	beq.n	80073e2 <_strtod_l+0x34a>
 800738e:	dc26      	bgt.n	80073de <_strtod_l+0x346>
 8007390:	2a49      	cmp	r2, #73	; 0x49
 8007392:	d026      	beq.n	80073e2 <_strtod_l+0x34a>
 8007394:	2a4e      	cmp	r2, #78	; 0x4e
 8007396:	f47f aed3 	bne.w	8007140 <_strtod_l+0xa8>
 800739a:	499a      	ldr	r1, [pc, #616]	; (8007604 <_strtod_l+0x56c>)
 800739c:	a819      	add	r0, sp, #100	; 0x64
 800739e:	f001 f9fb 	bl	8008798 <__match>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f43f aecc 	beq.w	8007140 <_strtod_l+0xa8>
 80073a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b28      	cmp	r3, #40	; 0x28
 80073ae:	d12f      	bne.n	8007410 <_strtod_l+0x378>
 80073b0:	4995      	ldr	r1, [pc, #596]	; (8007608 <_strtod_l+0x570>)
 80073b2:	aa1c      	add	r2, sp, #112	; 0x70
 80073b4:	a819      	add	r0, sp, #100	; 0x64
 80073b6:	f001 fa03 	bl	80087c0 <__hexnan>
 80073ba:	2805      	cmp	r0, #5
 80073bc:	d128      	bne.n	8007410 <_strtod_l+0x378>
 80073be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073c0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80073c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80073c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80073cc:	e69d      	b.n	800710a <_strtod_l+0x72>
 80073ce:	210a      	movs	r1, #10
 80073d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073d2:	fb01 2107 	mla	r1, r1, r7, r2
 80073d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80073da:	9209      	str	r2, [sp, #36]	; 0x24
 80073dc:	e7b5      	b.n	800734a <_strtod_l+0x2b2>
 80073de:	2a6e      	cmp	r2, #110	; 0x6e
 80073e0:	e7d9      	b.n	8007396 <_strtod_l+0x2fe>
 80073e2:	498a      	ldr	r1, [pc, #552]	; (800760c <_strtod_l+0x574>)
 80073e4:	a819      	add	r0, sp, #100	; 0x64
 80073e6:	f001 f9d7 	bl	8008798 <__match>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	f43f aea8 	beq.w	8007140 <_strtod_l+0xa8>
 80073f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073f2:	4987      	ldr	r1, [pc, #540]	; (8007610 <_strtod_l+0x578>)
 80073f4:	3b01      	subs	r3, #1
 80073f6:	a819      	add	r0, sp, #100	; 0x64
 80073f8:	9319      	str	r3, [sp, #100]	; 0x64
 80073fa:	f001 f9cd 	bl	8008798 <__match>
 80073fe:	b910      	cbnz	r0, 8007406 <_strtod_l+0x36e>
 8007400:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007402:	3301      	adds	r3, #1
 8007404:	9319      	str	r3, [sp, #100]	; 0x64
 8007406:	f04f 0800 	mov.w	r8, #0
 800740a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007614 <_strtod_l+0x57c>
 800740e:	e67c      	b.n	800710a <_strtod_l+0x72>
 8007410:	4881      	ldr	r0, [pc, #516]	; (8007618 <_strtod_l+0x580>)
 8007412:	f000 fedf 	bl	80081d4 <nan>
 8007416:	4680      	mov	r8, r0
 8007418:	4689      	mov	r9, r1
 800741a:	e676      	b.n	800710a <_strtod_l+0x72>
 800741c:	9b08      	ldr	r3, [sp, #32]
 800741e:	f1bb 0f00 	cmp.w	fp, #0
 8007422:	bf08      	it	eq
 8007424:	46b3      	moveq	fp, r6
 8007426:	1afb      	subs	r3, r7, r3
 8007428:	2e10      	cmp	r6, #16
 800742a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800742c:	4635      	mov	r5, r6
 800742e:	9309      	str	r3, [sp, #36]	; 0x24
 8007430:	bfa8      	it	ge
 8007432:	2510      	movge	r5, #16
 8007434:	f7f8 ffd6 	bl	80003e4 <__aeabi_ui2d>
 8007438:	2e09      	cmp	r6, #9
 800743a:	4680      	mov	r8, r0
 800743c:	4689      	mov	r9, r1
 800743e:	dd13      	ble.n	8007468 <_strtod_l+0x3d0>
 8007440:	4b76      	ldr	r3, [pc, #472]	; (800761c <_strtod_l+0x584>)
 8007442:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007446:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800744a:	f7f9 f845 	bl	80004d8 <__aeabi_dmul>
 800744e:	4680      	mov	r8, r0
 8007450:	4650      	mov	r0, sl
 8007452:	4689      	mov	r9, r1
 8007454:	f7f8 ffc6 	bl	80003e4 <__aeabi_ui2d>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4640      	mov	r0, r8
 800745e:	4649      	mov	r1, r9
 8007460:	f7f8 fe84 	bl	800016c <__adddf3>
 8007464:	4680      	mov	r8, r0
 8007466:	4689      	mov	r9, r1
 8007468:	2e0f      	cmp	r6, #15
 800746a:	dc36      	bgt.n	80074da <_strtod_l+0x442>
 800746c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800746e:	2b00      	cmp	r3, #0
 8007470:	f43f ae4b 	beq.w	800710a <_strtod_l+0x72>
 8007474:	dd22      	ble.n	80074bc <_strtod_l+0x424>
 8007476:	2b16      	cmp	r3, #22
 8007478:	dc09      	bgt.n	800748e <_strtod_l+0x3f6>
 800747a:	4968      	ldr	r1, [pc, #416]	; (800761c <_strtod_l+0x584>)
 800747c:	4642      	mov	r2, r8
 800747e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007482:	464b      	mov	r3, r9
 8007484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007488:	f7f9 f826 	bl	80004d8 <__aeabi_dmul>
 800748c:	e7c3      	b.n	8007416 <_strtod_l+0x37e>
 800748e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007490:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007494:	4293      	cmp	r3, r2
 8007496:	db20      	blt.n	80074da <_strtod_l+0x442>
 8007498:	4c60      	ldr	r4, [pc, #384]	; (800761c <_strtod_l+0x584>)
 800749a:	f1c6 060f 	rsb	r6, r6, #15
 800749e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80074a2:	4642      	mov	r2, r8
 80074a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a8:	464b      	mov	r3, r9
 80074aa:	f7f9 f815 	bl	80004d8 <__aeabi_dmul>
 80074ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b0:	1b9e      	subs	r6, r3, r6
 80074b2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80074b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074ba:	e7e5      	b.n	8007488 <_strtod_l+0x3f0>
 80074bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074be:	3316      	adds	r3, #22
 80074c0:	db0b      	blt.n	80074da <_strtod_l+0x442>
 80074c2:	9b08      	ldr	r3, [sp, #32]
 80074c4:	4640      	mov	r0, r8
 80074c6:	1bdf      	subs	r7, r3, r7
 80074c8:	4b54      	ldr	r3, [pc, #336]	; (800761c <_strtod_l+0x584>)
 80074ca:	4649      	mov	r1, r9
 80074cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80074d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d4:	f7f9 f92a 	bl	800072c <__aeabi_ddiv>
 80074d8:	e79d      	b.n	8007416 <_strtod_l+0x37e>
 80074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074dc:	1b75      	subs	r5, r6, r5
 80074de:	441d      	add	r5, r3
 80074e0:	2d00      	cmp	r5, #0
 80074e2:	dd70      	ble.n	80075c6 <_strtod_l+0x52e>
 80074e4:	f015 030f 	ands.w	r3, r5, #15
 80074e8:	d00a      	beq.n	8007500 <_strtod_l+0x468>
 80074ea:	494c      	ldr	r1, [pc, #304]	; (800761c <_strtod_l+0x584>)
 80074ec:	4642      	mov	r2, r8
 80074ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f6:	464b      	mov	r3, r9
 80074f8:	f7f8 ffee 	bl	80004d8 <__aeabi_dmul>
 80074fc:	4680      	mov	r8, r0
 80074fe:	4689      	mov	r9, r1
 8007500:	f035 050f 	bics.w	r5, r5, #15
 8007504:	d04d      	beq.n	80075a2 <_strtod_l+0x50a>
 8007506:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800750a:	dd22      	ble.n	8007552 <_strtod_l+0x4ba>
 800750c:	2600      	movs	r6, #0
 800750e:	46b3      	mov	fp, r6
 8007510:	960b      	str	r6, [sp, #44]	; 0x2c
 8007512:	9608      	str	r6, [sp, #32]
 8007514:	2322      	movs	r3, #34	; 0x22
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007614 <_strtod_l+0x57c>
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007522:	2b00      	cmp	r3, #0
 8007524:	f43f adf1 	beq.w	800710a <_strtod_l+0x72>
 8007528:	4620      	mov	r0, r4
 800752a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800752c:	f7ff f934 	bl	8006798 <_Bfree>
 8007530:	4620      	mov	r0, r4
 8007532:	9908      	ldr	r1, [sp, #32]
 8007534:	f7ff f930 	bl	8006798 <_Bfree>
 8007538:	4659      	mov	r1, fp
 800753a:	4620      	mov	r0, r4
 800753c:	f7ff f92c 	bl	8006798 <_Bfree>
 8007540:	4620      	mov	r0, r4
 8007542:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007544:	f7ff f928 	bl	8006798 <_Bfree>
 8007548:	4631      	mov	r1, r6
 800754a:	4620      	mov	r0, r4
 800754c:	f7ff f924 	bl	8006798 <_Bfree>
 8007550:	e5db      	b.n	800710a <_strtod_l+0x72>
 8007552:	4b33      	ldr	r3, [pc, #204]	; (8007620 <_strtod_l+0x588>)
 8007554:	4640      	mov	r0, r8
 8007556:	9305      	str	r3, [sp, #20]
 8007558:	2300      	movs	r3, #0
 800755a:	4649      	mov	r1, r9
 800755c:	469a      	mov	sl, r3
 800755e:	112d      	asrs	r5, r5, #4
 8007560:	2d01      	cmp	r5, #1
 8007562:	dc21      	bgt.n	80075a8 <_strtod_l+0x510>
 8007564:	b10b      	cbz	r3, 800756a <_strtod_l+0x4d2>
 8007566:	4680      	mov	r8, r0
 8007568:	4689      	mov	r9, r1
 800756a:	492d      	ldr	r1, [pc, #180]	; (8007620 <_strtod_l+0x588>)
 800756c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007570:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007574:	4642      	mov	r2, r8
 8007576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757a:	464b      	mov	r3, r9
 800757c:	f7f8 ffac 	bl	80004d8 <__aeabi_dmul>
 8007580:	4b24      	ldr	r3, [pc, #144]	; (8007614 <_strtod_l+0x57c>)
 8007582:	460a      	mov	r2, r1
 8007584:	400b      	ands	r3, r1
 8007586:	4927      	ldr	r1, [pc, #156]	; (8007624 <_strtod_l+0x58c>)
 8007588:	4680      	mov	r8, r0
 800758a:	428b      	cmp	r3, r1
 800758c:	d8be      	bhi.n	800750c <_strtod_l+0x474>
 800758e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007592:	428b      	cmp	r3, r1
 8007594:	bf86      	itte	hi
 8007596:	f04f 38ff 	movhi.w	r8, #4294967295
 800759a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007628 <_strtod_l+0x590>
 800759e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80075a2:	2300      	movs	r3, #0
 80075a4:	9305      	str	r3, [sp, #20]
 80075a6:	e07b      	b.n	80076a0 <_strtod_l+0x608>
 80075a8:	07ea      	lsls	r2, r5, #31
 80075aa:	d505      	bpl.n	80075b8 <_strtod_l+0x520>
 80075ac:	9b05      	ldr	r3, [sp, #20]
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f7f8 ff91 	bl	80004d8 <__aeabi_dmul>
 80075b6:	2301      	movs	r3, #1
 80075b8:	9a05      	ldr	r2, [sp, #20]
 80075ba:	f10a 0a01 	add.w	sl, sl, #1
 80075be:	3208      	adds	r2, #8
 80075c0:	106d      	asrs	r5, r5, #1
 80075c2:	9205      	str	r2, [sp, #20]
 80075c4:	e7cc      	b.n	8007560 <_strtod_l+0x4c8>
 80075c6:	d0ec      	beq.n	80075a2 <_strtod_l+0x50a>
 80075c8:	426d      	negs	r5, r5
 80075ca:	f015 020f 	ands.w	r2, r5, #15
 80075ce:	d00a      	beq.n	80075e6 <_strtod_l+0x54e>
 80075d0:	4b12      	ldr	r3, [pc, #72]	; (800761c <_strtod_l+0x584>)
 80075d2:	4640      	mov	r0, r8
 80075d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d8:	4649      	mov	r1, r9
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f9 f8a5 	bl	800072c <__aeabi_ddiv>
 80075e2:	4680      	mov	r8, r0
 80075e4:	4689      	mov	r9, r1
 80075e6:	112d      	asrs	r5, r5, #4
 80075e8:	d0db      	beq.n	80075a2 <_strtod_l+0x50a>
 80075ea:	2d1f      	cmp	r5, #31
 80075ec:	dd1e      	ble.n	800762c <_strtod_l+0x594>
 80075ee:	2600      	movs	r6, #0
 80075f0:	46b3      	mov	fp, r6
 80075f2:	960b      	str	r6, [sp, #44]	; 0x2c
 80075f4:	9608      	str	r6, [sp, #32]
 80075f6:	2322      	movs	r3, #34	; 0x22
 80075f8:	f04f 0800 	mov.w	r8, #0
 80075fc:	f04f 0900 	mov.w	r9, #0
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	e78d      	b.n	8007520 <_strtod_l+0x488>
 8007604:	080096db 	.word	0x080096db
 8007608:	08009904 	.word	0x08009904
 800760c:	080096d3 	.word	0x080096d3
 8007610:	0800970a 	.word	0x0800970a
 8007614:	7ff00000 	.word	0x7ff00000
 8007618:	08009a95 	.word	0x08009a95
 800761c:	08009818 	.word	0x08009818
 8007620:	080097f0 	.word	0x080097f0
 8007624:	7ca00000 	.word	0x7ca00000
 8007628:	7fefffff 	.word	0x7fefffff
 800762c:	f015 0310 	ands.w	r3, r5, #16
 8007630:	bf18      	it	ne
 8007632:	236a      	movne	r3, #106	; 0x6a
 8007634:	4640      	mov	r0, r8
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	4649      	mov	r1, r9
 800763a:	2300      	movs	r3, #0
 800763c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007908 <_strtod_l+0x870>
 8007640:	07ea      	lsls	r2, r5, #31
 8007642:	d504      	bpl.n	800764e <_strtod_l+0x5b6>
 8007644:	e9da 2300 	ldrd	r2, r3, [sl]
 8007648:	f7f8 ff46 	bl	80004d8 <__aeabi_dmul>
 800764c:	2301      	movs	r3, #1
 800764e:	106d      	asrs	r5, r5, #1
 8007650:	f10a 0a08 	add.w	sl, sl, #8
 8007654:	d1f4      	bne.n	8007640 <_strtod_l+0x5a8>
 8007656:	b10b      	cbz	r3, 800765c <_strtod_l+0x5c4>
 8007658:	4680      	mov	r8, r0
 800765a:	4689      	mov	r9, r1
 800765c:	9b05      	ldr	r3, [sp, #20]
 800765e:	b1bb      	cbz	r3, 8007690 <_strtod_l+0x5f8>
 8007660:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007664:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007668:	2b00      	cmp	r3, #0
 800766a:	4649      	mov	r1, r9
 800766c:	dd10      	ble.n	8007690 <_strtod_l+0x5f8>
 800766e:	2b1f      	cmp	r3, #31
 8007670:	f340 8128 	ble.w	80078c4 <_strtod_l+0x82c>
 8007674:	2b34      	cmp	r3, #52	; 0x34
 8007676:	bfd8      	it	le
 8007678:	f04f 33ff 	movle.w	r3, #4294967295
 800767c:	f04f 0800 	mov.w	r8, #0
 8007680:	bfcf      	iteee	gt
 8007682:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007686:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800768a:	4093      	lslle	r3, r2
 800768c:	ea03 0901 	andle.w	r9, r3, r1
 8007690:	2200      	movs	r2, #0
 8007692:	2300      	movs	r3, #0
 8007694:	4640      	mov	r0, r8
 8007696:	4649      	mov	r1, r9
 8007698:	f7f9 f986 	bl	80009a8 <__aeabi_dcmpeq>
 800769c:	2800      	cmp	r0, #0
 800769e:	d1a6      	bne.n	80075ee <_strtod_l+0x556>
 80076a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a2:	465a      	mov	r2, fp
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	4620      	mov	r0, r4
 80076a8:	4633      	mov	r3, r6
 80076aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076ac:	f7ff f8dc 	bl	8006868 <__s2b>
 80076b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80076b2:	2800      	cmp	r0, #0
 80076b4:	f43f af2a 	beq.w	800750c <_strtod_l+0x474>
 80076b8:	2600      	movs	r6, #0
 80076ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076bc:	9b08      	ldr	r3, [sp, #32]
 80076be:	2a00      	cmp	r2, #0
 80076c0:	eba3 0307 	sub.w	r3, r3, r7
 80076c4:	bfa8      	it	ge
 80076c6:	2300      	movge	r3, #0
 80076c8:	46b3      	mov	fp, r6
 80076ca:	9312      	str	r3, [sp, #72]	; 0x48
 80076cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076d0:	9316      	str	r3, [sp, #88]	; 0x58
 80076d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d4:	4620      	mov	r0, r4
 80076d6:	6859      	ldr	r1, [r3, #4]
 80076d8:	f7ff f81e 	bl	8006718 <_Balloc>
 80076dc:	9008      	str	r0, [sp, #32]
 80076de:	2800      	cmp	r0, #0
 80076e0:	f43f af18 	beq.w	8007514 <_strtod_l+0x47c>
 80076e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e6:	300c      	adds	r0, #12
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	f103 010c 	add.w	r1, r3, #12
 80076ee:	3202      	adds	r2, #2
 80076f0:	0092      	lsls	r2, r2, #2
 80076f2:	f7fe f892 	bl	800581a <memcpy>
 80076f6:	ab1c      	add	r3, sp, #112	; 0x70
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	ab1b      	add	r3, sp, #108	; 0x6c
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	4642      	mov	r2, r8
 8007700:	464b      	mov	r3, r9
 8007702:	4620      	mov	r0, r4
 8007704:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007708:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800770c:	f7ff fbd8 	bl	8006ec0 <__d2b>
 8007710:	901a      	str	r0, [sp, #104]	; 0x68
 8007712:	2800      	cmp	r0, #0
 8007714:	f43f aefe 	beq.w	8007514 <_strtod_l+0x47c>
 8007718:	2101      	movs	r1, #1
 800771a:	4620      	mov	r0, r4
 800771c:	f7ff f93c 	bl	8006998 <__i2b>
 8007720:	4683      	mov	fp, r0
 8007722:	2800      	cmp	r0, #0
 8007724:	f43f aef6 	beq.w	8007514 <_strtod_l+0x47c>
 8007728:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800772a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800772c:	2f00      	cmp	r7, #0
 800772e:	bfab      	itete	ge
 8007730:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007732:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007734:	eb07 0a03 	addge.w	sl, r7, r3
 8007738:	1bdd      	sublt	r5, r3, r7
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	bfa8      	it	ge
 800773e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007740:	eba7 0703 	sub.w	r7, r7, r3
 8007744:	4417      	add	r7, r2
 8007746:	4b71      	ldr	r3, [pc, #452]	; (800790c <_strtod_l+0x874>)
 8007748:	f107 37ff 	add.w	r7, r7, #4294967295
 800774c:	bfb8      	it	lt
 800774e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007752:	429f      	cmp	r7, r3
 8007754:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007758:	f280 80c7 	bge.w	80078ea <_strtod_l+0x852>
 800775c:	1bdb      	subs	r3, r3, r7
 800775e:	2b1f      	cmp	r3, #31
 8007760:	f04f 0101 	mov.w	r1, #1
 8007764:	eba2 0203 	sub.w	r2, r2, r3
 8007768:	f300 80b3 	bgt.w	80078d2 <_strtod_l+0x83a>
 800776c:	fa01 f303 	lsl.w	r3, r1, r3
 8007770:	9313      	str	r3, [sp, #76]	; 0x4c
 8007772:	2300      	movs	r3, #0
 8007774:	9310      	str	r3, [sp, #64]	; 0x40
 8007776:	eb0a 0702 	add.w	r7, sl, r2
 800777a:	9b05      	ldr	r3, [sp, #20]
 800777c:	45ba      	cmp	sl, r7
 800777e:	4415      	add	r5, r2
 8007780:	441d      	add	r5, r3
 8007782:	4653      	mov	r3, sl
 8007784:	bfa8      	it	ge
 8007786:	463b      	movge	r3, r7
 8007788:	42ab      	cmp	r3, r5
 800778a:	bfa8      	it	ge
 800778c:	462b      	movge	r3, r5
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfc2      	ittt	gt
 8007792:	1aff      	subgt	r7, r7, r3
 8007794:	1aed      	subgt	r5, r5, r3
 8007796:	ebaa 0a03 	subgt.w	sl, sl, r3
 800779a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800779c:	2b00      	cmp	r3, #0
 800779e:	dd17      	ble.n	80077d0 <_strtod_l+0x738>
 80077a0:	4659      	mov	r1, fp
 80077a2:	461a      	mov	r2, r3
 80077a4:	4620      	mov	r0, r4
 80077a6:	f7ff f9b5 	bl	8006b14 <__pow5mult>
 80077aa:	4683      	mov	fp, r0
 80077ac:	2800      	cmp	r0, #0
 80077ae:	f43f aeb1 	beq.w	8007514 <_strtod_l+0x47c>
 80077b2:	4601      	mov	r1, r0
 80077b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7ff f904 	bl	80069c4 <__multiply>
 80077bc:	900a      	str	r0, [sp, #40]	; 0x28
 80077be:	2800      	cmp	r0, #0
 80077c0:	f43f aea8 	beq.w	8007514 <_strtod_l+0x47c>
 80077c4:	4620      	mov	r0, r4
 80077c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80077c8:	f7fe ffe6 	bl	8006798 <_Bfree>
 80077cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ce:	931a      	str	r3, [sp, #104]	; 0x68
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	f300 808f 	bgt.w	80078f4 <_strtod_l+0x85c>
 80077d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dd08      	ble.n	80077ee <_strtod_l+0x756>
 80077dc:	4620      	mov	r0, r4
 80077de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077e0:	9908      	ldr	r1, [sp, #32]
 80077e2:	f7ff f997 	bl	8006b14 <__pow5mult>
 80077e6:	9008      	str	r0, [sp, #32]
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f43f ae93 	beq.w	8007514 <_strtod_l+0x47c>
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	dd08      	ble.n	8007804 <_strtod_l+0x76c>
 80077f2:	462a      	mov	r2, r5
 80077f4:	4620      	mov	r0, r4
 80077f6:	9908      	ldr	r1, [sp, #32]
 80077f8:	f7ff f9e6 	bl	8006bc8 <__lshift>
 80077fc:	9008      	str	r0, [sp, #32]
 80077fe:	2800      	cmp	r0, #0
 8007800:	f43f ae88 	beq.w	8007514 <_strtod_l+0x47c>
 8007804:	f1ba 0f00 	cmp.w	sl, #0
 8007808:	dd08      	ble.n	800781c <_strtod_l+0x784>
 800780a:	4659      	mov	r1, fp
 800780c:	4652      	mov	r2, sl
 800780e:	4620      	mov	r0, r4
 8007810:	f7ff f9da 	bl	8006bc8 <__lshift>
 8007814:	4683      	mov	fp, r0
 8007816:	2800      	cmp	r0, #0
 8007818:	f43f ae7c 	beq.w	8007514 <_strtod_l+0x47c>
 800781c:	4620      	mov	r0, r4
 800781e:	9a08      	ldr	r2, [sp, #32]
 8007820:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007822:	f7ff fa59 	bl	8006cd8 <__mdiff>
 8007826:	4606      	mov	r6, r0
 8007828:	2800      	cmp	r0, #0
 800782a:	f43f ae73 	beq.w	8007514 <_strtod_l+0x47c>
 800782e:	2500      	movs	r5, #0
 8007830:	68c3      	ldr	r3, [r0, #12]
 8007832:	4659      	mov	r1, fp
 8007834:	60c5      	str	r5, [r0, #12]
 8007836:	930a      	str	r3, [sp, #40]	; 0x28
 8007838:	f7ff fa32 	bl	8006ca0 <__mcmp>
 800783c:	42a8      	cmp	r0, r5
 800783e:	da6b      	bge.n	8007918 <_strtod_l+0x880>
 8007840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007842:	ea53 0308 	orrs.w	r3, r3, r8
 8007846:	f040 808f 	bne.w	8007968 <_strtod_l+0x8d0>
 800784a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800784e:	2b00      	cmp	r3, #0
 8007850:	f040 808a 	bne.w	8007968 <_strtod_l+0x8d0>
 8007854:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007858:	0d1b      	lsrs	r3, r3, #20
 800785a:	051b      	lsls	r3, r3, #20
 800785c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007860:	f240 8082 	bls.w	8007968 <_strtod_l+0x8d0>
 8007864:	6973      	ldr	r3, [r6, #20]
 8007866:	b913      	cbnz	r3, 800786e <_strtod_l+0x7d6>
 8007868:	6933      	ldr	r3, [r6, #16]
 800786a:	2b01      	cmp	r3, #1
 800786c:	dd7c      	ble.n	8007968 <_strtod_l+0x8d0>
 800786e:	4631      	mov	r1, r6
 8007870:	2201      	movs	r2, #1
 8007872:	4620      	mov	r0, r4
 8007874:	f7ff f9a8 	bl	8006bc8 <__lshift>
 8007878:	4659      	mov	r1, fp
 800787a:	4606      	mov	r6, r0
 800787c:	f7ff fa10 	bl	8006ca0 <__mcmp>
 8007880:	2800      	cmp	r0, #0
 8007882:	dd71      	ble.n	8007968 <_strtod_l+0x8d0>
 8007884:	9905      	ldr	r1, [sp, #20]
 8007886:	464b      	mov	r3, r9
 8007888:	4a21      	ldr	r2, [pc, #132]	; (8007910 <_strtod_l+0x878>)
 800788a:	2900      	cmp	r1, #0
 800788c:	f000 808d 	beq.w	80079aa <_strtod_l+0x912>
 8007890:	ea02 0109 	and.w	r1, r2, r9
 8007894:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007898:	f300 8087 	bgt.w	80079aa <_strtod_l+0x912>
 800789c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80078a0:	f77f aea9 	ble.w	80075f6 <_strtod_l+0x55e>
 80078a4:	4640      	mov	r0, r8
 80078a6:	4649      	mov	r1, r9
 80078a8:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <_strtod_l+0x87c>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	f7f8 fe14 	bl	80004d8 <__aeabi_dmul>
 80078b0:	4b17      	ldr	r3, [pc, #92]	; (8007910 <_strtod_l+0x878>)
 80078b2:	4680      	mov	r8, r0
 80078b4:	400b      	ands	r3, r1
 80078b6:	4689      	mov	r9, r1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f47f ae35 	bne.w	8007528 <_strtod_l+0x490>
 80078be:	2322      	movs	r3, #34	; 0x22
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	e631      	b.n	8007528 <_strtod_l+0x490>
 80078c4:	f04f 32ff 	mov.w	r2, #4294967295
 80078c8:	fa02 f303 	lsl.w	r3, r2, r3
 80078cc:	ea03 0808 	and.w	r8, r3, r8
 80078d0:	e6de      	b.n	8007690 <_strtod_l+0x5f8>
 80078d2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80078d6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80078da:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80078de:	37e2      	adds	r7, #226	; 0xe2
 80078e0:	fa01 f307 	lsl.w	r3, r1, r7
 80078e4:	9310      	str	r3, [sp, #64]	; 0x40
 80078e6:	9113      	str	r1, [sp, #76]	; 0x4c
 80078e8:	e745      	b.n	8007776 <_strtod_l+0x6de>
 80078ea:	2300      	movs	r3, #0
 80078ec:	9310      	str	r3, [sp, #64]	; 0x40
 80078ee:	2301      	movs	r3, #1
 80078f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80078f2:	e740      	b.n	8007776 <_strtod_l+0x6de>
 80078f4:	463a      	mov	r2, r7
 80078f6:	4620      	mov	r0, r4
 80078f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078fa:	f7ff f965 	bl	8006bc8 <__lshift>
 80078fe:	901a      	str	r0, [sp, #104]	; 0x68
 8007900:	2800      	cmp	r0, #0
 8007902:	f47f af68 	bne.w	80077d6 <_strtod_l+0x73e>
 8007906:	e605      	b.n	8007514 <_strtod_l+0x47c>
 8007908:	08009918 	.word	0x08009918
 800790c:	fffffc02 	.word	0xfffffc02
 8007910:	7ff00000 	.word	0x7ff00000
 8007914:	39500000 	.word	0x39500000
 8007918:	46ca      	mov	sl, r9
 800791a:	d165      	bne.n	80079e8 <_strtod_l+0x950>
 800791c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800791e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007922:	b352      	cbz	r2, 800797a <_strtod_l+0x8e2>
 8007924:	4a9e      	ldr	r2, [pc, #632]	; (8007ba0 <_strtod_l+0xb08>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d12a      	bne.n	8007980 <_strtod_l+0x8e8>
 800792a:	9b05      	ldr	r3, [sp, #20]
 800792c:	4641      	mov	r1, r8
 800792e:	b1fb      	cbz	r3, 8007970 <_strtod_l+0x8d8>
 8007930:	4b9c      	ldr	r3, [pc, #624]	; (8007ba4 <_strtod_l+0xb0c>)
 8007932:	f04f 32ff 	mov.w	r2, #4294967295
 8007936:	ea09 0303 	and.w	r3, r9, r3
 800793a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800793e:	d81a      	bhi.n	8007976 <_strtod_l+0x8de>
 8007940:	0d1b      	lsrs	r3, r3, #20
 8007942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	4299      	cmp	r1, r3
 800794c:	d118      	bne.n	8007980 <_strtod_l+0x8e8>
 800794e:	4b96      	ldr	r3, [pc, #600]	; (8007ba8 <_strtod_l+0xb10>)
 8007950:	459a      	cmp	sl, r3
 8007952:	d102      	bne.n	800795a <_strtod_l+0x8c2>
 8007954:	3101      	adds	r1, #1
 8007956:	f43f addd 	beq.w	8007514 <_strtod_l+0x47c>
 800795a:	f04f 0800 	mov.w	r8, #0
 800795e:	4b91      	ldr	r3, [pc, #580]	; (8007ba4 <_strtod_l+0xb0c>)
 8007960:	ea0a 0303 	and.w	r3, sl, r3
 8007964:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007968:	9b05      	ldr	r3, [sp, #20]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d19a      	bne.n	80078a4 <_strtod_l+0x80c>
 800796e:	e5db      	b.n	8007528 <_strtod_l+0x490>
 8007970:	f04f 33ff 	mov.w	r3, #4294967295
 8007974:	e7e9      	b.n	800794a <_strtod_l+0x8b2>
 8007976:	4613      	mov	r3, r2
 8007978:	e7e7      	b.n	800794a <_strtod_l+0x8b2>
 800797a:	ea53 0308 	orrs.w	r3, r3, r8
 800797e:	d081      	beq.n	8007884 <_strtod_l+0x7ec>
 8007980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007982:	b1e3      	cbz	r3, 80079be <_strtod_l+0x926>
 8007984:	ea13 0f0a 	tst.w	r3, sl
 8007988:	d0ee      	beq.n	8007968 <_strtod_l+0x8d0>
 800798a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798c:	4640      	mov	r0, r8
 800798e:	4649      	mov	r1, r9
 8007990:	9a05      	ldr	r2, [sp, #20]
 8007992:	b1c3      	cbz	r3, 80079c6 <_strtod_l+0x92e>
 8007994:	f7ff fb5c 	bl	8007050 <sulp>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800799e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079a0:	f7f8 fbe4 	bl	800016c <__adddf3>
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	e7de      	b.n	8007968 <_strtod_l+0x8d0>
 80079aa:	4013      	ands	r3, r2
 80079ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80079b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80079b4:	f04f 38ff 	mov.w	r8, #4294967295
 80079b8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80079bc:	e7d4      	b.n	8007968 <_strtod_l+0x8d0>
 80079be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079c0:	ea13 0f08 	tst.w	r3, r8
 80079c4:	e7e0      	b.n	8007988 <_strtod_l+0x8f0>
 80079c6:	f7ff fb43 	bl	8007050 <sulp>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80079d2:	f7f8 fbc9 	bl	8000168 <__aeabi_dsub>
 80079d6:	2200      	movs	r2, #0
 80079d8:	2300      	movs	r3, #0
 80079da:	4680      	mov	r8, r0
 80079dc:	4689      	mov	r9, r1
 80079de:	f7f8 ffe3 	bl	80009a8 <__aeabi_dcmpeq>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d0c0      	beq.n	8007968 <_strtod_l+0x8d0>
 80079e6:	e606      	b.n	80075f6 <_strtod_l+0x55e>
 80079e8:	4659      	mov	r1, fp
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7ff fabe 	bl	8006f6c <__ratio>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80079f8:	2200      	movs	r2, #0
 80079fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079fe:	f7f8 ffe7 	bl	80009d0 <__aeabi_dcmple>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	d06f      	beq.n	8007ae6 <_strtod_l+0xa4e>
 8007a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d17c      	bne.n	8007b06 <_strtod_l+0xa6e>
 8007a0c:	f1b8 0f00 	cmp.w	r8, #0
 8007a10:	d159      	bne.n	8007ac6 <_strtod_l+0xa2e>
 8007a12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d17b      	bne.n	8007b12 <_strtod_l+0xa7a>
 8007a1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4b62      	ldr	r3, [pc, #392]	; (8007bac <_strtod_l+0xb14>)
 8007a22:	f7f8 ffcb 	bl	80009bc <__aeabi_dcmplt>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d15a      	bne.n	8007ae0 <_strtod_l+0xa48>
 8007a2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a2e:	2200      	movs	r2, #0
 8007a30:	4b5f      	ldr	r3, [pc, #380]	; (8007bb0 <_strtod_l+0xb18>)
 8007a32:	f7f8 fd51 	bl	80004d8 <__aeabi_dmul>
 8007a36:	4605      	mov	r5, r0
 8007a38:	460f      	mov	r7, r1
 8007a3a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a3e:	9506      	str	r5, [sp, #24]
 8007a40:	9307      	str	r3, [sp, #28]
 8007a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a46:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a4a:	4b56      	ldr	r3, [pc, #344]	; (8007ba4 <_strtod_l+0xb0c>)
 8007a4c:	4a55      	ldr	r2, [pc, #340]	; (8007ba4 <_strtod_l+0xb0c>)
 8007a4e:	ea0a 0303 	and.w	r3, sl, r3
 8007a52:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a54:	4b57      	ldr	r3, [pc, #348]	; (8007bb4 <_strtod_l+0xb1c>)
 8007a56:	ea0a 0202 	and.w	r2, sl, r2
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	f040 80b0 	bne.w	8007bc0 <_strtod_l+0xb28>
 8007a60:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007a64:	4640      	mov	r0, r8
 8007a66:	4649      	mov	r1, r9
 8007a68:	f7ff f9c2 	bl	8006df0 <__ulp>
 8007a6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a70:	f7f8 fd32 	bl	80004d8 <__aeabi_dmul>
 8007a74:	4642      	mov	r2, r8
 8007a76:	464b      	mov	r3, r9
 8007a78:	f7f8 fb78 	bl	800016c <__adddf3>
 8007a7c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007ba4 <_strtod_l+0xb0c>
 8007a80:	4a4d      	ldr	r2, [pc, #308]	; (8007bb8 <_strtod_l+0xb20>)
 8007a82:	ea01 0a0a 	and.w	sl, r1, sl
 8007a86:	4592      	cmp	sl, r2
 8007a88:	4680      	mov	r8, r0
 8007a8a:	d948      	bls.n	8007b1e <_strtod_l+0xa86>
 8007a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a8e:	4b46      	ldr	r3, [pc, #280]	; (8007ba8 <_strtod_l+0xb10>)
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d103      	bne.n	8007a9c <_strtod_l+0xa04>
 8007a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a96:	3301      	adds	r3, #1
 8007a98:	f43f ad3c 	beq.w	8007514 <_strtod_l+0x47c>
 8007a9c:	f04f 38ff 	mov.w	r8, #4294967295
 8007aa0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007ba8 <_strtod_l+0xb10>
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007aa8:	f7fe fe76 	bl	8006798 <_Bfree>
 8007aac:	4620      	mov	r0, r4
 8007aae:	9908      	ldr	r1, [sp, #32]
 8007ab0:	f7fe fe72 	bl	8006798 <_Bfree>
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7fe fe6e 	bl	8006798 <_Bfree>
 8007abc:	4631      	mov	r1, r6
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f7fe fe6a 	bl	8006798 <_Bfree>
 8007ac4:	e605      	b.n	80076d2 <_strtod_l+0x63a>
 8007ac6:	f1b8 0f01 	cmp.w	r8, #1
 8007aca:	d103      	bne.n	8007ad4 <_strtod_l+0xa3c>
 8007acc:	f1b9 0f00 	cmp.w	r9, #0
 8007ad0:	f43f ad91 	beq.w	80075f6 <_strtod_l+0x55e>
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4b39      	ldr	r3, [pc, #228]	; (8007bbc <_strtod_l+0xb24>)
 8007ad8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ada:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ade:	e016      	b.n	8007b0e <_strtod_l+0xa76>
 8007ae0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ae2:	4f33      	ldr	r7, [pc, #204]	; (8007bb0 <_strtod_l+0xb18>)
 8007ae4:	e7a9      	b.n	8007a3a <_strtod_l+0x9a2>
 8007ae6:	4b32      	ldr	r3, [pc, #200]	; (8007bb0 <_strtod_l+0xb18>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007aee:	f7f8 fcf3 	bl	80004d8 <__aeabi_dmul>
 8007af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af4:	4605      	mov	r5, r0
 8007af6:	460f      	mov	r7, r1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d09e      	beq.n	8007a3a <_strtod_l+0x9a2>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b04:	e79d      	b.n	8007a42 <_strtod_l+0x9aa>
 8007b06:	2200      	movs	r2, #0
 8007b08:	4b28      	ldr	r3, [pc, #160]	; (8007bac <_strtod_l+0xb14>)
 8007b0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b0e:	4f27      	ldr	r7, [pc, #156]	; (8007bac <_strtod_l+0xb14>)
 8007b10:	e797      	b.n	8007a42 <_strtod_l+0x9aa>
 8007b12:	2200      	movs	r2, #0
 8007b14:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <_strtod_l+0xb24>)
 8007b16:	4645      	mov	r5, r8
 8007b18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b1c:	e7f7      	b.n	8007b0e <_strtod_l+0xa76>
 8007b1e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007b22:	9b05      	ldr	r3, [sp, #20]
 8007b24:	46ca      	mov	sl, r9
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1bc      	bne.n	8007aa4 <_strtod_l+0xa0c>
 8007b2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b30:	0d1b      	lsrs	r3, r3, #20
 8007b32:	051b      	lsls	r3, r3, #20
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d1b5      	bne.n	8007aa4 <_strtod_l+0xa0c>
 8007b38:	4628      	mov	r0, r5
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	f7f9 f942 	bl	8000dc4 <__aeabi_d2lz>
 8007b40:	f7f8 fc9c 	bl	800047c <__aeabi_l2d>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4628      	mov	r0, r5
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 fb0c 	bl	8000168 <__aeabi_dsub>
 8007b50:	460b      	mov	r3, r1
 8007b52:	4602      	mov	r2, r0
 8007b54:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007b58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007b62:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007b66:	d06c      	beq.n	8007c42 <_strtod_l+0xbaa>
 8007b68:	a309      	add	r3, pc, #36	; (adr r3, 8007b90 <_strtod_l+0xaf8>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 ff25 	bl	80009bc <__aeabi_dcmplt>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f47f acd8 	bne.w	8007528 <_strtod_l+0x490>
 8007b78:	a307      	add	r3, pc, #28	; (adr r3, 8007b98 <_strtod_l+0xb00>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b82:	f7f8 ff39 	bl	80009f8 <__aeabi_dcmpgt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d08c      	beq.n	8007aa4 <_strtod_l+0xa0c>
 8007b8a:	e4cd      	b.n	8007528 <_strtod_l+0x490>
 8007b8c:	f3af 8000 	nop.w
 8007b90:	94a03595 	.word	0x94a03595
 8007b94:	3fdfffff 	.word	0x3fdfffff
 8007b98:	35afe535 	.word	0x35afe535
 8007b9c:	3fe00000 	.word	0x3fe00000
 8007ba0:	000fffff 	.word	0x000fffff
 8007ba4:	7ff00000 	.word	0x7ff00000
 8007ba8:	7fefffff 	.word	0x7fefffff
 8007bac:	3ff00000 	.word	0x3ff00000
 8007bb0:	3fe00000 	.word	0x3fe00000
 8007bb4:	7fe00000 	.word	0x7fe00000
 8007bb8:	7c9fffff 	.word	0x7c9fffff
 8007bbc:	bff00000 	.word	0xbff00000
 8007bc0:	9b05      	ldr	r3, [sp, #20]
 8007bc2:	b333      	cbz	r3, 8007c12 <_strtod_l+0xb7a>
 8007bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007bca:	d822      	bhi.n	8007c12 <_strtod_l+0xb7a>
 8007bcc:	a328      	add	r3, pc, #160	; (adr r3, 8007c70 <_strtod_l+0xbd8>)
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f8 fefb 	bl	80009d0 <__aeabi_dcmple>
 8007bda:	b1a0      	cbz	r0, 8007c06 <_strtod_l+0xb6e>
 8007bdc:	4639      	mov	r1, r7
 8007bde:	4628      	mov	r0, r5
 8007be0:	f7f8 ff52 	bl	8000a88 <__aeabi_d2uiz>
 8007be4:	2801      	cmp	r0, #1
 8007be6:	bf38      	it	cc
 8007be8:	2001      	movcc	r0, #1
 8007bea:	f7f8 fbfb 	bl	80003e4 <__aeabi_ui2d>
 8007bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	460f      	mov	r7, r1
 8007bf4:	bb03      	cbnz	r3, 8007c38 <_strtod_l+0xba0>
 8007bf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bfa:	9014      	str	r0, [sp, #80]	; 0x50
 8007bfc:	9315      	str	r3, [sp, #84]	; 0x54
 8007bfe:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c02:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c0a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	9311      	str	r3, [sp, #68]	; 0x44
 8007c12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007c16:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007c1a:	f7ff f8e9 	bl	8006df0 <__ulp>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4640      	mov	r0, r8
 8007c24:	4649      	mov	r1, r9
 8007c26:	f7f8 fc57 	bl	80004d8 <__aeabi_dmul>
 8007c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c2e:	f7f8 fa9d 	bl	800016c <__adddf3>
 8007c32:	4680      	mov	r8, r0
 8007c34:	4689      	mov	r9, r1
 8007c36:	e774      	b.n	8007b22 <_strtod_l+0xa8a>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007c40:	e7dd      	b.n	8007bfe <_strtod_l+0xb66>
 8007c42:	a30d      	add	r3, pc, #52	; (adr r3, 8007c78 <_strtod_l+0xbe0>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 feb8 	bl	80009bc <__aeabi_dcmplt>
 8007c4c:	e79b      	b.n	8007b86 <_strtod_l+0xaee>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	930e      	str	r3, [sp, #56]	; 0x38
 8007c52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	f7ff ba5b 	b.w	8007112 <_strtod_l+0x7a>
 8007c5c:	2a65      	cmp	r2, #101	; 0x65
 8007c5e:	f43f ab52 	beq.w	8007306 <_strtod_l+0x26e>
 8007c62:	2a45      	cmp	r2, #69	; 0x45
 8007c64:	f43f ab4f 	beq.w	8007306 <_strtod_l+0x26e>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f7ff bb87 	b.w	800737c <_strtod_l+0x2e4>
 8007c6e:	bf00      	nop
 8007c70:	ffc00000 	.word	0xffc00000
 8007c74:	41dfffff 	.word	0x41dfffff
 8007c78:	94a03595 	.word	0x94a03595
 8007c7c:	3fcfffff 	.word	0x3fcfffff

08007c80 <_strtod_r>:
 8007c80:	4b01      	ldr	r3, [pc, #4]	; (8007c88 <_strtod_r+0x8>)
 8007c82:	f7ff ba09 	b.w	8007098 <_strtod_l>
 8007c86:	bf00      	nop
 8007c88:	20000080 	.word	0x20000080

08007c8c <_strtol_l.constprop.0>:
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c92:	4686      	mov	lr, r0
 8007c94:	4690      	mov	r8, r2
 8007c96:	d001      	beq.n	8007c9c <_strtol_l.constprop.0+0x10>
 8007c98:	2b24      	cmp	r3, #36	; 0x24
 8007c9a:	d906      	bls.n	8007caa <_strtol_l.constprop.0+0x1e>
 8007c9c:	f7fd fd82 	bl	80057a4 <__errno>
 8007ca0:	2316      	movs	r3, #22
 8007ca2:	6003      	str	r3, [r0, #0]
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007caa:	460d      	mov	r5, r1
 8007cac:	4835      	ldr	r0, [pc, #212]	; (8007d84 <_strtol_l.constprop.0+0xf8>)
 8007cae:	462a      	mov	r2, r5
 8007cb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cb4:	5d06      	ldrb	r6, [r0, r4]
 8007cb6:	f016 0608 	ands.w	r6, r6, #8
 8007cba:	d1f8      	bne.n	8007cae <_strtol_l.constprop.0+0x22>
 8007cbc:	2c2d      	cmp	r4, #45	; 0x2d
 8007cbe:	d12e      	bne.n	8007d1e <_strtol_l.constprop.0+0x92>
 8007cc0:	2601      	movs	r6, #1
 8007cc2:	782c      	ldrb	r4, [r5, #0]
 8007cc4:	1c95      	adds	r5, r2, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d057      	beq.n	8007d7a <_strtol_l.constprop.0+0xee>
 8007cca:	2b10      	cmp	r3, #16
 8007ccc:	d109      	bne.n	8007ce2 <_strtol_l.constprop.0+0x56>
 8007cce:	2c30      	cmp	r4, #48	; 0x30
 8007cd0:	d107      	bne.n	8007ce2 <_strtol_l.constprop.0+0x56>
 8007cd2:	782a      	ldrb	r2, [r5, #0]
 8007cd4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007cd8:	2a58      	cmp	r2, #88	; 0x58
 8007cda:	d149      	bne.n	8007d70 <_strtol_l.constprop.0+0xe4>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	786c      	ldrb	r4, [r5, #1]
 8007ce0:	3502      	adds	r5, #2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007ce8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007cec:	fbbc f9f3 	udiv	r9, ip, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	fb03 ca19 	mls	sl, r3, r9, ip
 8007cf6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007cfa:	2f09      	cmp	r7, #9
 8007cfc:	d814      	bhi.n	8007d28 <_strtol_l.constprop.0+0x9c>
 8007cfe:	463c      	mov	r4, r7
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	dd20      	ble.n	8007d46 <_strtol_l.constprop.0+0xba>
 8007d04:	1c57      	adds	r7, r2, #1
 8007d06:	d007      	beq.n	8007d18 <_strtol_l.constprop.0+0x8c>
 8007d08:	4581      	cmp	r9, r0
 8007d0a:	d319      	bcc.n	8007d40 <_strtol_l.constprop.0+0xb4>
 8007d0c:	d101      	bne.n	8007d12 <_strtol_l.constprop.0+0x86>
 8007d0e:	45a2      	cmp	sl, r4
 8007d10:	db16      	blt.n	8007d40 <_strtol_l.constprop.0+0xb4>
 8007d12:	2201      	movs	r2, #1
 8007d14:	fb00 4003 	mla	r0, r0, r3, r4
 8007d18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d1c:	e7eb      	b.n	8007cf6 <_strtol_l.constprop.0+0x6a>
 8007d1e:	2c2b      	cmp	r4, #43	; 0x2b
 8007d20:	bf04      	itt	eq
 8007d22:	782c      	ldrbeq	r4, [r5, #0]
 8007d24:	1c95      	addeq	r5, r2, #2
 8007d26:	e7ce      	b.n	8007cc6 <_strtol_l.constprop.0+0x3a>
 8007d28:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007d2c:	2f19      	cmp	r7, #25
 8007d2e:	d801      	bhi.n	8007d34 <_strtol_l.constprop.0+0xa8>
 8007d30:	3c37      	subs	r4, #55	; 0x37
 8007d32:	e7e5      	b.n	8007d00 <_strtol_l.constprop.0+0x74>
 8007d34:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007d38:	2f19      	cmp	r7, #25
 8007d3a:	d804      	bhi.n	8007d46 <_strtol_l.constprop.0+0xba>
 8007d3c:	3c57      	subs	r4, #87	; 0x57
 8007d3e:	e7df      	b.n	8007d00 <_strtol_l.constprop.0+0x74>
 8007d40:	f04f 32ff 	mov.w	r2, #4294967295
 8007d44:	e7e8      	b.n	8007d18 <_strtol_l.constprop.0+0x8c>
 8007d46:	1c53      	adds	r3, r2, #1
 8007d48:	d108      	bne.n	8007d5c <_strtol_l.constprop.0+0xd0>
 8007d4a:	2322      	movs	r3, #34	; 0x22
 8007d4c:	4660      	mov	r0, ip
 8007d4e:	f8ce 3000 	str.w	r3, [lr]
 8007d52:	f1b8 0f00 	cmp.w	r8, #0
 8007d56:	d0a6      	beq.n	8007ca6 <_strtol_l.constprop.0+0x1a>
 8007d58:	1e69      	subs	r1, r5, #1
 8007d5a:	e006      	b.n	8007d6a <_strtol_l.constprop.0+0xde>
 8007d5c:	b106      	cbz	r6, 8007d60 <_strtol_l.constprop.0+0xd4>
 8007d5e:	4240      	negs	r0, r0
 8007d60:	f1b8 0f00 	cmp.w	r8, #0
 8007d64:	d09f      	beq.n	8007ca6 <_strtol_l.constprop.0+0x1a>
 8007d66:	2a00      	cmp	r2, #0
 8007d68:	d1f6      	bne.n	8007d58 <_strtol_l.constprop.0+0xcc>
 8007d6a:	f8c8 1000 	str.w	r1, [r8]
 8007d6e:	e79a      	b.n	8007ca6 <_strtol_l.constprop.0+0x1a>
 8007d70:	2430      	movs	r4, #48	; 0x30
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1b5      	bne.n	8007ce2 <_strtol_l.constprop.0+0x56>
 8007d76:	2308      	movs	r3, #8
 8007d78:	e7b3      	b.n	8007ce2 <_strtol_l.constprop.0+0x56>
 8007d7a:	2c30      	cmp	r4, #48	; 0x30
 8007d7c:	d0a9      	beq.n	8007cd2 <_strtol_l.constprop.0+0x46>
 8007d7e:	230a      	movs	r3, #10
 8007d80:	e7af      	b.n	8007ce2 <_strtol_l.constprop.0+0x56>
 8007d82:	bf00      	nop
 8007d84:	08009941 	.word	0x08009941

08007d88 <_strtol_r>:
 8007d88:	f7ff bf80 	b.w	8007c8c <_strtol_l.constprop.0>

08007d8c <__ssputs_r>:
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	461f      	mov	r7, r3
 8007d92:	688e      	ldr	r6, [r1, #8]
 8007d94:	4682      	mov	sl, r0
 8007d96:	42be      	cmp	r6, r7
 8007d98:	460c      	mov	r4, r1
 8007d9a:	4690      	mov	r8, r2
 8007d9c:	680b      	ldr	r3, [r1, #0]
 8007d9e:	d82c      	bhi.n	8007dfa <__ssputs_r+0x6e>
 8007da0:	898a      	ldrh	r2, [r1, #12]
 8007da2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007da6:	d026      	beq.n	8007df6 <__ssputs_r+0x6a>
 8007da8:	6965      	ldr	r5, [r4, #20]
 8007daa:	6909      	ldr	r1, [r1, #16]
 8007dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007db0:	eba3 0901 	sub.w	r9, r3, r1
 8007db4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007db8:	1c7b      	adds	r3, r7, #1
 8007dba:	444b      	add	r3, r9
 8007dbc:	106d      	asrs	r5, r5, #1
 8007dbe:	429d      	cmp	r5, r3
 8007dc0:	bf38      	it	cc
 8007dc2:	461d      	movcc	r5, r3
 8007dc4:	0553      	lsls	r3, r2, #21
 8007dc6:	d527      	bpl.n	8007e18 <__ssputs_r+0x8c>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7fe fc19 	bl	8006600 <_malloc_r>
 8007dce:	4606      	mov	r6, r0
 8007dd0:	b360      	cbz	r0, 8007e2c <__ssputs_r+0xa0>
 8007dd2:	464a      	mov	r2, r9
 8007dd4:	6921      	ldr	r1, [r4, #16]
 8007dd6:	f7fd fd20 	bl	800581a <memcpy>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	6126      	str	r6, [r4, #16]
 8007de8:	444e      	add	r6, r9
 8007dea:	6026      	str	r6, [r4, #0]
 8007dec:	463e      	mov	r6, r7
 8007dee:	6165      	str	r5, [r4, #20]
 8007df0:	eba5 0509 	sub.w	r5, r5, r9
 8007df4:	60a5      	str	r5, [r4, #8]
 8007df6:	42be      	cmp	r6, r7
 8007df8:	d900      	bls.n	8007dfc <__ssputs_r+0x70>
 8007dfa:	463e      	mov	r6, r7
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	4641      	mov	r1, r8
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	f7fd fc62 	bl	80056ca <memmove>
 8007e06:	2000      	movs	r0, #0
 8007e08:	68a3      	ldr	r3, [r4, #8]
 8007e0a:	1b9b      	subs	r3, r3, r6
 8007e0c:	60a3      	str	r3, [r4, #8]
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	4433      	add	r3, r6
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e18:	462a      	mov	r2, r5
 8007e1a:	f000 fd7e 	bl	800891a <_realloc_r>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d1e0      	bne.n	8007de6 <__ssputs_r+0x5a>
 8007e24:	4650      	mov	r0, sl
 8007e26:	6921      	ldr	r1, [r4, #16]
 8007e28:	f7fe fb7a 	bl	8006520 <_free_r>
 8007e2c:	230c      	movs	r3, #12
 8007e2e:	f8ca 3000 	str.w	r3, [sl]
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	e7e9      	b.n	8007e14 <__ssputs_r+0x88>

08007e40 <_svfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4698      	mov	r8, r3
 8007e46:	898b      	ldrh	r3, [r1, #12]
 8007e48:	4607      	mov	r7, r0
 8007e4a:	061b      	lsls	r3, r3, #24
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	4614      	mov	r4, r2
 8007e50:	b09d      	sub	sp, #116	; 0x74
 8007e52:	d50e      	bpl.n	8007e72 <_svfiprintf_r+0x32>
 8007e54:	690b      	ldr	r3, [r1, #16]
 8007e56:	b963      	cbnz	r3, 8007e72 <_svfiprintf_r+0x32>
 8007e58:	2140      	movs	r1, #64	; 0x40
 8007e5a:	f7fe fbd1 	bl	8006600 <_malloc_r>
 8007e5e:	6028      	str	r0, [r5, #0]
 8007e60:	6128      	str	r0, [r5, #16]
 8007e62:	b920      	cbnz	r0, 8007e6e <_svfiprintf_r+0x2e>
 8007e64:	230c      	movs	r3, #12
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	e0d0      	b.n	8008010 <_svfiprintf_r+0x1d0>
 8007e6e:	2340      	movs	r3, #64	; 0x40
 8007e70:	616b      	str	r3, [r5, #20]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9309      	str	r3, [sp, #36]	; 0x24
 8007e76:	2320      	movs	r3, #32
 8007e78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e7c:	2330      	movs	r3, #48	; 0x30
 8007e7e:	f04f 0901 	mov.w	r9, #1
 8007e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e86:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008028 <_svfiprintf_r+0x1e8>
 8007e8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e8e:	4623      	mov	r3, r4
 8007e90:	469a      	mov	sl, r3
 8007e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e96:	b10a      	cbz	r2, 8007e9c <_svfiprintf_r+0x5c>
 8007e98:	2a25      	cmp	r2, #37	; 0x25
 8007e9a:	d1f9      	bne.n	8007e90 <_svfiprintf_r+0x50>
 8007e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007ea0:	d00b      	beq.n	8007eba <_svfiprintf_r+0x7a>
 8007ea2:	465b      	mov	r3, fp
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff ff6f 	bl	8007d8c <__ssputs_r>
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f000 80a9 	beq.w	8008006 <_svfiprintf_r+0x1c6>
 8007eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eb6:	445a      	add	r2, fp
 8007eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eba:	f89a 3000 	ldrb.w	r3, [sl]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 80a1 	beq.w	8008006 <_svfiprintf_r+0x1c6>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ece:	f10a 0a01 	add.w	sl, sl, #1
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	9307      	str	r3, [sp, #28]
 8007ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eda:	931a      	str	r3, [sp, #104]	; 0x68
 8007edc:	4654      	mov	r4, sl
 8007ede:	2205      	movs	r2, #5
 8007ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee4:	4850      	ldr	r0, [pc, #320]	; (8008028 <_svfiprintf_r+0x1e8>)
 8007ee6:	f7fd fc8a 	bl	80057fe <memchr>
 8007eea:	9a04      	ldr	r2, [sp, #16]
 8007eec:	b9d8      	cbnz	r0, 8007f26 <_svfiprintf_r+0xe6>
 8007eee:	06d0      	lsls	r0, r2, #27
 8007ef0:	bf44      	itt	mi
 8007ef2:	2320      	movmi	r3, #32
 8007ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef8:	0711      	lsls	r1, r2, #28
 8007efa:	bf44      	itt	mi
 8007efc:	232b      	movmi	r3, #43	; 0x2b
 8007efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f02:	f89a 3000 	ldrb.w	r3, [sl]
 8007f06:	2b2a      	cmp	r3, #42	; 0x2a
 8007f08:	d015      	beq.n	8007f36 <_svfiprintf_r+0xf6>
 8007f0a:	4654      	mov	r4, sl
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f04f 0c0a 	mov.w	ip, #10
 8007f12:	9a07      	ldr	r2, [sp, #28]
 8007f14:	4621      	mov	r1, r4
 8007f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f1a:	3b30      	subs	r3, #48	; 0x30
 8007f1c:	2b09      	cmp	r3, #9
 8007f1e:	d94d      	bls.n	8007fbc <_svfiprintf_r+0x17c>
 8007f20:	b1b0      	cbz	r0, 8007f50 <_svfiprintf_r+0x110>
 8007f22:	9207      	str	r2, [sp, #28]
 8007f24:	e014      	b.n	8007f50 <_svfiprintf_r+0x110>
 8007f26:	eba0 0308 	sub.w	r3, r0, r8
 8007f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	46a2      	mov	sl, r4
 8007f32:	9304      	str	r3, [sp, #16]
 8007f34:	e7d2      	b.n	8007edc <_svfiprintf_r+0x9c>
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	1d19      	adds	r1, r3, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	9103      	str	r1, [sp, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bfbb      	ittet	lt
 8007f42:	425b      	neglt	r3, r3
 8007f44:	f042 0202 	orrlt.w	r2, r2, #2
 8007f48:	9307      	strge	r3, [sp, #28]
 8007f4a:	9307      	strlt	r3, [sp, #28]
 8007f4c:	bfb8      	it	lt
 8007f4e:	9204      	strlt	r2, [sp, #16]
 8007f50:	7823      	ldrb	r3, [r4, #0]
 8007f52:	2b2e      	cmp	r3, #46	; 0x2e
 8007f54:	d10c      	bne.n	8007f70 <_svfiprintf_r+0x130>
 8007f56:	7863      	ldrb	r3, [r4, #1]
 8007f58:	2b2a      	cmp	r3, #42	; 0x2a
 8007f5a:	d134      	bne.n	8007fc6 <_svfiprintf_r+0x186>
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	3402      	adds	r4, #2
 8007f60:	1d1a      	adds	r2, r3, #4
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	9203      	str	r2, [sp, #12]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	bfb8      	it	lt
 8007f6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f6e:	9305      	str	r3, [sp, #20]
 8007f70:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800802c <_svfiprintf_r+0x1ec>
 8007f74:	2203      	movs	r2, #3
 8007f76:	4650      	mov	r0, sl
 8007f78:	7821      	ldrb	r1, [r4, #0]
 8007f7a:	f7fd fc40 	bl	80057fe <memchr>
 8007f7e:	b138      	cbz	r0, 8007f90 <_svfiprintf_r+0x150>
 8007f80:	2240      	movs	r2, #64	; 0x40
 8007f82:	9b04      	ldr	r3, [sp, #16]
 8007f84:	eba0 000a 	sub.w	r0, r0, sl
 8007f88:	4082      	lsls	r2, r0
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	3401      	adds	r4, #1
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f94:	2206      	movs	r2, #6
 8007f96:	4826      	ldr	r0, [pc, #152]	; (8008030 <_svfiprintf_r+0x1f0>)
 8007f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f9c:	f7fd fc2f 	bl	80057fe <memchr>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d038      	beq.n	8008016 <_svfiprintf_r+0x1d6>
 8007fa4:	4b23      	ldr	r3, [pc, #140]	; (8008034 <_svfiprintf_r+0x1f4>)
 8007fa6:	bb1b      	cbnz	r3, 8007ff0 <_svfiprintf_r+0x1b0>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	3307      	adds	r3, #7
 8007fac:	f023 0307 	bic.w	r3, r3, #7
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb6:	4433      	add	r3, r6
 8007fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fba:	e768      	b.n	8007e8e <_svfiprintf_r+0x4e>
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc4:	e7a6      	b.n	8007f14 <_svfiprintf_r+0xd4>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f04f 0c0a 	mov.w	ip, #10
 8007fcc:	4619      	mov	r1, r3
 8007fce:	3401      	adds	r4, #1
 8007fd0:	9305      	str	r3, [sp, #20]
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd8:	3a30      	subs	r2, #48	; 0x30
 8007fda:	2a09      	cmp	r2, #9
 8007fdc:	d903      	bls.n	8007fe6 <_svfiprintf_r+0x1a6>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0c6      	beq.n	8007f70 <_svfiprintf_r+0x130>
 8007fe2:	9105      	str	r1, [sp, #20]
 8007fe4:	e7c4      	b.n	8007f70 <_svfiprintf_r+0x130>
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	2301      	movs	r3, #1
 8007fea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fee:	e7f0      	b.n	8007fd2 <_svfiprintf_r+0x192>
 8007ff0:	ab03      	add	r3, sp, #12
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	4b0f      	ldr	r3, [pc, #60]	; (8008038 <_svfiprintf_r+0x1f8>)
 8007ffa:	a904      	add	r1, sp, #16
 8007ffc:	f7fc fc70 	bl	80048e0 <_printf_float>
 8008000:	1c42      	adds	r2, r0, #1
 8008002:	4606      	mov	r6, r0
 8008004:	d1d6      	bne.n	8007fb4 <_svfiprintf_r+0x174>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	065b      	lsls	r3, r3, #25
 800800a:	f53f af2d 	bmi.w	8007e68 <_svfiprintf_r+0x28>
 800800e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008010:	b01d      	add	sp, #116	; 0x74
 8008012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	ab03      	add	r3, sp, #12
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	462a      	mov	r2, r5
 800801c:	4638      	mov	r0, r7
 800801e:	4b06      	ldr	r3, [pc, #24]	; (8008038 <_svfiprintf_r+0x1f8>)
 8008020:	a904      	add	r1, sp, #16
 8008022:	f7fc fefd 	bl	8004e20 <_printf_i>
 8008026:	e7eb      	b.n	8008000 <_svfiprintf_r+0x1c0>
 8008028:	08009a41 	.word	0x08009a41
 800802c:	08009a47 	.word	0x08009a47
 8008030:	08009a4b 	.word	0x08009a4b
 8008034:	080048e1 	.word	0x080048e1
 8008038:	08007d8d 	.word	0x08007d8d

0800803c <__sflush_r>:
 800803c:	898a      	ldrh	r2, [r1, #12]
 800803e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008040:	4605      	mov	r5, r0
 8008042:	0710      	lsls	r0, r2, #28
 8008044:	460c      	mov	r4, r1
 8008046:	d457      	bmi.n	80080f8 <__sflush_r+0xbc>
 8008048:	684b      	ldr	r3, [r1, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	dc04      	bgt.n	8008058 <__sflush_r+0x1c>
 800804e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	dc01      	bgt.n	8008058 <__sflush_r+0x1c>
 8008054:	2000      	movs	r0, #0
 8008056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800805a:	2e00      	cmp	r6, #0
 800805c:	d0fa      	beq.n	8008054 <__sflush_r+0x18>
 800805e:	2300      	movs	r3, #0
 8008060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008064:	682f      	ldr	r7, [r5, #0]
 8008066:	6a21      	ldr	r1, [r4, #32]
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	d032      	beq.n	80080d2 <__sflush_r+0x96>
 800806c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	075a      	lsls	r2, r3, #29
 8008072:	d505      	bpl.n	8008080 <__sflush_r+0x44>
 8008074:	6863      	ldr	r3, [r4, #4]
 8008076:	1ac0      	subs	r0, r0, r3
 8008078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800807a:	b10b      	cbz	r3, 8008080 <__sflush_r+0x44>
 800807c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800807e:	1ac0      	subs	r0, r0, r3
 8008080:	2300      	movs	r3, #0
 8008082:	4602      	mov	r2, r0
 8008084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008086:	4628      	mov	r0, r5
 8008088:	6a21      	ldr	r1, [r4, #32]
 800808a:	47b0      	blx	r6
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	d106      	bne.n	80080a0 <__sflush_r+0x64>
 8008092:	6829      	ldr	r1, [r5, #0]
 8008094:	291d      	cmp	r1, #29
 8008096:	d82b      	bhi.n	80080f0 <__sflush_r+0xb4>
 8008098:	4a28      	ldr	r2, [pc, #160]	; (800813c <__sflush_r+0x100>)
 800809a:	410a      	asrs	r2, r1
 800809c:	07d6      	lsls	r6, r2, #31
 800809e:	d427      	bmi.n	80080f0 <__sflush_r+0xb4>
 80080a0:	2200      	movs	r2, #0
 80080a2:	6062      	str	r2, [r4, #4]
 80080a4:	6922      	ldr	r2, [r4, #16]
 80080a6:	04d9      	lsls	r1, r3, #19
 80080a8:	6022      	str	r2, [r4, #0]
 80080aa:	d504      	bpl.n	80080b6 <__sflush_r+0x7a>
 80080ac:	1c42      	adds	r2, r0, #1
 80080ae:	d101      	bne.n	80080b4 <__sflush_r+0x78>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b903      	cbnz	r3, 80080b6 <__sflush_r+0x7a>
 80080b4:	6560      	str	r0, [r4, #84]	; 0x54
 80080b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080b8:	602f      	str	r7, [r5, #0]
 80080ba:	2900      	cmp	r1, #0
 80080bc:	d0ca      	beq.n	8008054 <__sflush_r+0x18>
 80080be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080c2:	4299      	cmp	r1, r3
 80080c4:	d002      	beq.n	80080cc <__sflush_r+0x90>
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7fe fa2a 	bl	8006520 <_free_r>
 80080cc:	2000      	movs	r0, #0
 80080ce:	6360      	str	r0, [r4, #52]	; 0x34
 80080d0:	e7c1      	b.n	8008056 <__sflush_r+0x1a>
 80080d2:	2301      	movs	r3, #1
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b0      	blx	r6
 80080d8:	1c41      	adds	r1, r0, #1
 80080da:	d1c8      	bne.n	800806e <__sflush_r+0x32>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0c5      	beq.n	800806e <__sflush_r+0x32>
 80080e2:	2b1d      	cmp	r3, #29
 80080e4:	d001      	beq.n	80080ea <__sflush_r+0xae>
 80080e6:	2b16      	cmp	r3, #22
 80080e8:	d101      	bne.n	80080ee <__sflush_r+0xb2>
 80080ea:	602f      	str	r7, [r5, #0]
 80080ec:	e7b2      	b.n	8008054 <__sflush_r+0x18>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	e7ae      	b.n	8008056 <__sflush_r+0x1a>
 80080f8:	690f      	ldr	r7, [r1, #16]
 80080fa:	2f00      	cmp	r7, #0
 80080fc:	d0aa      	beq.n	8008054 <__sflush_r+0x18>
 80080fe:	0793      	lsls	r3, r2, #30
 8008100:	bf18      	it	ne
 8008102:	2300      	movne	r3, #0
 8008104:	680e      	ldr	r6, [r1, #0]
 8008106:	bf08      	it	eq
 8008108:	694b      	ldreq	r3, [r1, #20]
 800810a:	1bf6      	subs	r6, r6, r7
 800810c:	600f      	str	r7, [r1, #0]
 800810e:	608b      	str	r3, [r1, #8]
 8008110:	2e00      	cmp	r6, #0
 8008112:	dd9f      	ble.n	8008054 <__sflush_r+0x18>
 8008114:	4633      	mov	r3, r6
 8008116:	463a      	mov	r2, r7
 8008118:	4628      	mov	r0, r5
 800811a:	6a21      	ldr	r1, [r4, #32]
 800811c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008120:	47e0      	blx	ip
 8008122:	2800      	cmp	r0, #0
 8008124:	dc06      	bgt.n	8008134 <__sflush_r+0xf8>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
 800812c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	e790      	b.n	8008056 <__sflush_r+0x1a>
 8008134:	4407      	add	r7, r0
 8008136:	1a36      	subs	r6, r6, r0
 8008138:	e7ea      	b.n	8008110 <__sflush_r+0xd4>
 800813a:	bf00      	nop
 800813c:	dfbffffe 	.word	0xdfbffffe

08008140 <_fflush_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	690b      	ldr	r3, [r1, #16]
 8008144:	4605      	mov	r5, r0
 8008146:	460c      	mov	r4, r1
 8008148:	b913      	cbnz	r3, 8008150 <_fflush_r+0x10>
 800814a:	2500      	movs	r5, #0
 800814c:	4628      	mov	r0, r5
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	b118      	cbz	r0, 800815a <_fflush_r+0x1a>
 8008152:	6a03      	ldr	r3, [r0, #32]
 8008154:	b90b      	cbnz	r3, 800815a <_fflush_r+0x1a>
 8008156:	f7fd fa1f 	bl	8005598 <__sinit>
 800815a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f3      	beq.n	800814a <_fflush_r+0xa>
 8008162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008164:	07d0      	lsls	r0, r2, #31
 8008166:	d404      	bmi.n	8008172 <_fflush_r+0x32>
 8008168:	0599      	lsls	r1, r3, #22
 800816a:	d402      	bmi.n	8008172 <_fflush_r+0x32>
 800816c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800816e:	f7fd fb44 	bl	80057fa <__retarget_lock_acquire_recursive>
 8008172:	4628      	mov	r0, r5
 8008174:	4621      	mov	r1, r4
 8008176:	f7ff ff61 	bl	800803c <__sflush_r>
 800817a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800817c:	4605      	mov	r5, r0
 800817e:	07da      	lsls	r2, r3, #31
 8008180:	d4e4      	bmi.n	800814c <_fflush_r+0xc>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	059b      	lsls	r3, r3, #22
 8008186:	d4e1      	bmi.n	800814c <_fflush_r+0xc>
 8008188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800818a:	f7fd fb37 	bl	80057fc <__retarget_lock_release_recursive>
 800818e:	e7dd      	b.n	800814c <_fflush_r+0xc>

08008190 <strncmp>:
 8008190:	b510      	push	{r4, lr}
 8008192:	b16a      	cbz	r2, 80081b0 <strncmp+0x20>
 8008194:	3901      	subs	r1, #1
 8008196:	1884      	adds	r4, r0, r2
 8008198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800819c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d103      	bne.n	80081ac <strncmp+0x1c>
 80081a4:	42a0      	cmp	r0, r4
 80081a6:	d001      	beq.n	80081ac <strncmp+0x1c>
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	d1f5      	bne.n	8008198 <strncmp+0x8>
 80081ac:	1ad0      	subs	r0, r2, r3
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	4610      	mov	r0, r2
 80081b2:	e7fc      	b.n	80081ae <strncmp+0x1e>

080081b4 <_sbrk_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	2300      	movs	r3, #0
 80081b8:	4d05      	ldr	r5, [pc, #20]	; (80081d0 <_sbrk_r+0x1c>)
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7f9 fd0c 	bl	8001bdc <_sbrk>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_sbrk_r+0x1a>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_sbrk_r+0x1a>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	2000091c 	.word	0x2000091c

080081d4 <nan>:
 80081d4:	2000      	movs	r0, #0
 80081d6:	4901      	ldr	r1, [pc, #4]	; (80081dc <nan+0x8>)
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	7ff80000 	.word	0x7ff80000

080081e0 <__assert_func>:
 80081e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081e2:	4614      	mov	r4, r2
 80081e4:	461a      	mov	r2, r3
 80081e6:	4b09      	ldr	r3, [pc, #36]	; (800820c <__assert_func+0x2c>)
 80081e8:	4605      	mov	r5, r0
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68d8      	ldr	r0, [r3, #12]
 80081ee:	b14c      	cbz	r4, 8008204 <__assert_func+0x24>
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <__assert_func+0x30>)
 80081f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081f6:	9100      	str	r1, [sp, #0]
 80081f8:	462b      	mov	r3, r5
 80081fa:	4906      	ldr	r1, [pc, #24]	; (8008214 <__assert_func+0x34>)
 80081fc:	f000 fbca 	bl	8008994 <fiprintf>
 8008200:	f000 fbda 	bl	80089b8 <abort>
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <__assert_func+0x38>)
 8008206:	461c      	mov	r4, r3
 8008208:	e7f3      	b.n	80081f2 <__assert_func+0x12>
 800820a:	bf00      	nop
 800820c:	2000007c 	.word	0x2000007c
 8008210:	08009a5a 	.word	0x08009a5a
 8008214:	08009a67 	.word	0x08009a67
 8008218:	08009a95 	.word	0x08009a95

0800821c <_calloc_r>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	fba1 5402 	umull	r5, r4, r1, r2
 8008222:	b934      	cbnz	r4, 8008232 <_calloc_r+0x16>
 8008224:	4629      	mov	r1, r5
 8008226:	f7fe f9eb 	bl	8006600 <_malloc_r>
 800822a:	4606      	mov	r6, r0
 800822c:	b928      	cbnz	r0, 800823a <_calloc_r+0x1e>
 800822e:	4630      	mov	r0, r6
 8008230:	bd70      	pop	{r4, r5, r6, pc}
 8008232:	220c      	movs	r2, #12
 8008234:	2600      	movs	r6, #0
 8008236:	6002      	str	r2, [r0, #0]
 8008238:	e7f9      	b.n	800822e <_calloc_r+0x12>
 800823a:	462a      	mov	r2, r5
 800823c:	4621      	mov	r1, r4
 800823e:	f7fd fa5e 	bl	80056fe <memset>
 8008242:	e7f4      	b.n	800822e <_calloc_r+0x12>

08008244 <rshift>:
 8008244:	6903      	ldr	r3, [r0, #16]
 8008246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800824a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800824e:	f100 0414 	add.w	r4, r0, #20
 8008252:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008256:	dd46      	ble.n	80082e6 <rshift+0xa2>
 8008258:	f011 011f 	ands.w	r1, r1, #31
 800825c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008260:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008264:	d10c      	bne.n	8008280 <rshift+0x3c>
 8008266:	4629      	mov	r1, r5
 8008268:	f100 0710 	add.w	r7, r0, #16
 800826c:	42b1      	cmp	r1, r6
 800826e:	d335      	bcc.n	80082dc <rshift+0x98>
 8008270:	1a9b      	subs	r3, r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	1eea      	subs	r2, r5, #3
 8008276:	4296      	cmp	r6, r2
 8008278:	bf38      	it	cc
 800827a:	2300      	movcc	r3, #0
 800827c:	4423      	add	r3, r4
 800827e:	e015      	b.n	80082ac <rshift+0x68>
 8008280:	46a1      	mov	r9, r4
 8008282:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008286:	f1c1 0820 	rsb	r8, r1, #32
 800828a:	40cf      	lsrs	r7, r1
 800828c:	f105 0e04 	add.w	lr, r5, #4
 8008290:	4576      	cmp	r6, lr
 8008292:	46f4      	mov	ip, lr
 8008294:	d816      	bhi.n	80082c4 <rshift+0x80>
 8008296:	1a9a      	subs	r2, r3, r2
 8008298:	0092      	lsls	r2, r2, #2
 800829a:	3a04      	subs	r2, #4
 800829c:	3501      	adds	r5, #1
 800829e:	42ae      	cmp	r6, r5
 80082a0:	bf38      	it	cc
 80082a2:	2200      	movcc	r2, #0
 80082a4:	18a3      	adds	r3, r4, r2
 80082a6:	50a7      	str	r7, [r4, r2]
 80082a8:	b107      	cbz	r7, 80082ac <rshift+0x68>
 80082aa:	3304      	adds	r3, #4
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	eba3 0204 	sub.w	r2, r3, r4
 80082b2:	bf08      	it	eq
 80082b4:	2300      	moveq	r3, #0
 80082b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082ba:	6102      	str	r2, [r0, #16]
 80082bc:	bf08      	it	eq
 80082be:	6143      	streq	r3, [r0, #20]
 80082c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082c4:	f8dc c000 	ldr.w	ip, [ip]
 80082c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80082cc:	ea4c 0707 	orr.w	r7, ip, r7
 80082d0:	f849 7b04 	str.w	r7, [r9], #4
 80082d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082d8:	40cf      	lsrs	r7, r1
 80082da:	e7d9      	b.n	8008290 <rshift+0x4c>
 80082dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80082e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80082e4:	e7c2      	b.n	800826c <rshift+0x28>
 80082e6:	4623      	mov	r3, r4
 80082e8:	e7e0      	b.n	80082ac <rshift+0x68>

080082ea <__hexdig_fun>:
 80082ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80082ee:	2b09      	cmp	r3, #9
 80082f0:	d802      	bhi.n	80082f8 <__hexdig_fun+0xe>
 80082f2:	3820      	subs	r0, #32
 80082f4:	b2c0      	uxtb	r0, r0
 80082f6:	4770      	bx	lr
 80082f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80082fc:	2b05      	cmp	r3, #5
 80082fe:	d801      	bhi.n	8008304 <__hexdig_fun+0x1a>
 8008300:	3847      	subs	r0, #71	; 0x47
 8008302:	e7f7      	b.n	80082f4 <__hexdig_fun+0xa>
 8008304:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008308:	2b05      	cmp	r3, #5
 800830a:	d801      	bhi.n	8008310 <__hexdig_fun+0x26>
 800830c:	3827      	subs	r0, #39	; 0x27
 800830e:	e7f1      	b.n	80082f4 <__hexdig_fun+0xa>
 8008310:	2000      	movs	r0, #0
 8008312:	4770      	bx	lr

08008314 <__gethex>:
 8008314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	4681      	mov	r9, r0
 800831a:	468a      	mov	sl, r1
 800831c:	4617      	mov	r7, r2
 800831e:	680a      	ldr	r2, [r1, #0]
 8008320:	b085      	sub	sp, #20
 8008322:	f102 0b02 	add.w	fp, r2, #2
 8008326:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800832a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	32fe      	adds	r2, #254	; 0xfe
 8008332:	eb02 030b 	add.w	r3, r2, fp
 8008336:	46d8      	mov	r8, fp
 8008338:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	2830      	cmp	r0, #48	; 0x30
 8008340:	d0f7      	beq.n	8008332 <__gethex+0x1e>
 8008342:	f7ff ffd2 	bl	80082ea <__hexdig_fun>
 8008346:	4604      	mov	r4, r0
 8008348:	2800      	cmp	r0, #0
 800834a:	d138      	bne.n	80083be <__gethex+0xaa>
 800834c:	2201      	movs	r2, #1
 800834e:	4640      	mov	r0, r8
 8008350:	49a7      	ldr	r1, [pc, #668]	; (80085f0 <__gethex+0x2dc>)
 8008352:	f7ff ff1d 	bl	8008190 <strncmp>
 8008356:	4606      	mov	r6, r0
 8008358:	2800      	cmp	r0, #0
 800835a:	d169      	bne.n	8008430 <__gethex+0x11c>
 800835c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008360:	465d      	mov	r5, fp
 8008362:	f7ff ffc2 	bl	80082ea <__hexdig_fun>
 8008366:	2800      	cmp	r0, #0
 8008368:	d064      	beq.n	8008434 <__gethex+0x120>
 800836a:	465a      	mov	r2, fp
 800836c:	7810      	ldrb	r0, [r2, #0]
 800836e:	4690      	mov	r8, r2
 8008370:	2830      	cmp	r0, #48	; 0x30
 8008372:	f102 0201 	add.w	r2, r2, #1
 8008376:	d0f9      	beq.n	800836c <__gethex+0x58>
 8008378:	f7ff ffb7 	bl	80082ea <__hexdig_fun>
 800837c:	2301      	movs	r3, #1
 800837e:	fab0 f480 	clz	r4, r0
 8008382:	465e      	mov	r6, fp
 8008384:	0964      	lsrs	r4, r4, #5
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	4642      	mov	r2, r8
 800838a:	4615      	mov	r5, r2
 800838c:	7828      	ldrb	r0, [r5, #0]
 800838e:	3201      	adds	r2, #1
 8008390:	f7ff ffab 	bl	80082ea <__hexdig_fun>
 8008394:	2800      	cmp	r0, #0
 8008396:	d1f8      	bne.n	800838a <__gethex+0x76>
 8008398:	2201      	movs	r2, #1
 800839a:	4628      	mov	r0, r5
 800839c:	4994      	ldr	r1, [pc, #592]	; (80085f0 <__gethex+0x2dc>)
 800839e:	f7ff fef7 	bl	8008190 <strncmp>
 80083a2:	b978      	cbnz	r0, 80083c4 <__gethex+0xb0>
 80083a4:	b946      	cbnz	r6, 80083b8 <__gethex+0xa4>
 80083a6:	1c6e      	adds	r6, r5, #1
 80083a8:	4632      	mov	r2, r6
 80083aa:	4615      	mov	r5, r2
 80083ac:	7828      	ldrb	r0, [r5, #0]
 80083ae:	3201      	adds	r2, #1
 80083b0:	f7ff ff9b 	bl	80082ea <__hexdig_fun>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1f8      	bne.n	80083aa <__gethex+0x96>
 80083b8:	1b73      	subs	r3, r6, r5
 80083ba:	009e      	lsls	r6, r3, #2
 80083bc:	e004      	b.n	80083c8 <__gethex+0xb4>
 80083be:	2400      	movs	r4, #0
 80083c0:	4626      	mov	r6, r4
 80083c2:	e7e1      	b.n	8008388 <__gethex+0x74>
 80083c4:	2e00      	cmp	r6, #0
 80083c6:	d1f7      	bne.n	80083b8 <__gethex+0xa4>
 80083c8:	782b      	ldrb	r3, [r5, #0]
 80083ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80083ce:	2b50      	cmp	r3, #80	; 0x50
 80083d0:	d13d      	bne.n	800844e <__gethex+0x13a>
 80083d2:	786b      	ldrb	r3, [r5, #1]
 80083d4:	2b2b      	cmp	r3, #43	; 0x2b
 80083d6:	d02f      	beq.n	8008438 <__gethex+0x124>
 80083d8:	2b2d      	cmp	r3, #45	; 0x2d
 80083da:	d031      	beq.n	8008440 <__gethex+0x12c>
 80083dc:	f04f 0b00 	mov.w	fp, #0
 80083e0:	1c69      	adds	r1, r5, #1
 80083e2:	7808      	ldrb	r0, [r1, #0]
 80083e4:	f7ff ff81 	bl	80082ea <__hexdig_fun>
 80083e8:	1e42      	subs	r2, r0, #1
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	2a18      	cmp	r2, #24
 80083ee:	d82e      	bhi.n	800844e <__gethex+0x13a>
 80083f0:	f1a0 0210 	sub.w	r2, r0, #16
 80083f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083f8:	f7ff ff77 	bl	80082ea <__hexdig_fun>
 80083fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008400:	fa5f fc8c 	uxtb.w	ip, ip
 8008404:	f1bc 0f18 	cmp.w	ip, #24
 8008408:	d91d      	bls.n	8008446 <__gethex+0x132>
 800840a:	f1bb 0f00 	cmp.w	fp, #0
 800840e:	d000      	beq.n	8008412 <__gethex+0xfe>
 8008410:	4252      	negs	r2, r2
 8008412:	4416      	add	r6, r2
 8008414:	f8ca 1000 	str.w	r1, [sl]
 8008418:	b1dc      	cbz	r4, 8008452 <__gethex+0x13e>
 800841a:	9b01      	ldr	r3, [sp, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	bf14      	ite	ne
 8008420:	f04f 0800 	movne.w	r8, #0
 8008424:	f04f 0806 	moveq.w	r8, #6
 8008428:	4640      	mov	r0, r8
 800842a:	b005      	add	sp, #20
 800842c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008430:	4645      	mov	r5, r8
 8008432:	4626      	mov	r6, r4
 8008434:	2401      	movs	r4, #1
 8008436:	e7c7      	b.n	80083c8 <__gethex+0xb4>
 8008438:	f04f 0b00 	mov.w	fp, #0
 800843c:	1ca9      	adds	r1, r5, #2
 800843e:	e7d0      	b.n	80083e2 <__gethex+0xce>
 8008440:	f04f 0b01 	mov.w	fp, #1
 8008444:	e7fa      	b.n	800843c <__gethex+0x128>
 8008446:	230a      	movs	r3, #10
 8008448:	fb03 0002 	mla	r0, r3, r2, r0
 800844c:	e7d0      	b.n	80083f0 <__gethex+0xdc>
 800844e:	4629      	mov	r1, r5
 8008450:	e7e0      	b.n	8008414 <__gethex+0x100>
 8008452:	4621      	mov	r1, r4
 8008454:	eba5 0308 	sub.w	r3, r5, r8
 8008458:	3b01      	subs	r3, #1
 800845a:	2b07      	cmp	r3, #7
 800845c:	dc0a      	bgt.n	8008474 <__gethex+0x160>
 800845e:	4648      	mov	r0, r9
 8008460:	f7fe f95a 	bl	8006718 <_Balloc>
 8008464:	4604      	mov	r4, r0
 8008466:	b940      	cbnz	r0, 800847a <__gethex+0x166>
 8008468:	4602      	mov	r2, r0
 800846a:	21e4      	movs	r1, #228	; 0xe4
 800846c:	4b61      	ldr	r3, [pc, #388]	; (80085f4 <__gethex+0x2e0>)
 800846e:	4862      	ldr	r0, [pc, #392]	; (80085f8 <__gethex+0x2e4>)
 8008470:	f7ff feb6 	bl	80081e0 <__assert_func>
 8008474:	3101      	adds	r1, #1
 8008476:	105b      	asrs	r3, r3, #1
 8008478:	e7ef      	b.n	800845a <__gethex+0x146>
 800847a:	2300      	movs	r3, #0
 800847c:	469b      	mov	fp, r3
 800847e:	f100 0a14 	add.w	sl, r0, #20
 8008482:	f8cd a004 	str.w	sl, [sp, #4]
 8008486:	45a8      	cmp	r8, r5
 8008488:	d344      	bcc.n	8008514 <__gethex+0x200>
 800848a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800848e:	4658      	mov	r0, fp
 8008490:	f848 bb04 	str.w	fp, [r8], #4
 8008494:	eba8 080a 	sub.w	r8, r8, sl
 8008498:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800849c:	6122      	str	r2, [r4, #16]
 800849e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80084a2:	f7fe fa2b 	bl	80068fc <__hi0bits>
 80084a6:	683d      	ldr	r5, [r7, #0]
 80084a8:	eba8 0800 	sub.w	r8, r8, r0
 80084ac:	45a8      	cmp	r8, r5
 80084ae:	dd59      	ble.n	8008564 <__gethex+0x250>
 80084b0:	eba8 0805 	sub.w	r8, r8, r5
 80084b4:	4641      	mov	r1, r8
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7fe fda9 	bl	800700e <__any_on>
 80084bc:	4683      	mov	fp, r0
 80084be:	b1b8      	cbz	r0, 80084f0 <__gethex+0x1dc>
 80084c0:	f04f 0b01 	mov.w	fp, #1
 80084c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80084c8:	1159      	asrs	r1, r3, #5
 80084ca:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80084ce:	f003 021f 	and.w	r2, r3, #31
 80084d2:	fa0b f202 	lsl.w	r2, fp, r2
 80084d6:	420a      	tst	r2, r1
 80084d8:	d00a      	beq.n	80084f0 <__gethex+0x1dc>
 80084da:	455b      	cmp	r3, fp
 80084dc:	dd06      	ble.n	80084ec <__gethex+0x1d8>
 80084de:	4620      	mov	r0, r4
 80084e0:	f1a8 0102 	sub.w	r1, r8, #2
 80084e4:	f7fe fd93 	bl	800700e <__any_on>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d138      	bne.n	800855e <__gethex+0x24a>
 80084ec:	f04f 0b02 	mov.w	fp, #2
 80084f0:	4641      	mov	r1, r8
 80084f2:	4620      	mov	r0, r4
 80084f4:	f7ff fea6 	bl	8008244 <rshift>
 80084f8:	4446      	add	r6, r8
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	42b3      	cmp	r3, r6
 80084fe:	da41      	bge.n	8008584 <__gethex+0x270>
 8008500:	4621      	mov	r1, r4
 8008502:	4648      	mov	r0, r9
 8008504:	f7fe f948 	bl	8006798 <_Bfree>
 8008508:	2300      	movs	r3, #0
 800850a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800850c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	e789      	b.n	8008428 <__gethex+0x114>
 8008514:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008518:	2a2e      	cmp	r2, #46	; 0x2e
 800851a:	d014      	beq.n	8008546 <__gethex+0x232>
 800851c:	2b20      	cmp	r3, #32
 800851e:	d106      	bne.n	800852e <__gethex+0x21a>
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	f843 bb04 	str.w	fp, [r3], #4
 8008526:	f04f 0b00 	mov.w	fp, #0
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	465b      	mov	r3, fp
 800852e:	7828      	ldrb	r0, [r5, #0]
 8008530:	9303      	str	r3, [sp, #12]
 8008532:	f7ff feda 	bl	80082ea <__hexdig_fun>
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	f000 000f 	and.w	r0, r0, #15
 800853c:	4098      	lsls	r0, r3
 800853e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008542:	3304      	adds	r3, #4
 8008544:	e79f      	b.n	8008486 <__gethex+0x172>
 8008546:	45a8      	cmp	r8, r5
 8008548:	d8e8      	bhi.n	800851c <__gethex+0x208>
 800854a:	2201      	movs	r2, #1
 800854c:	4628      	mov	r0, r5
 800854e:	4928      	ldr	r1, [pc, #160]	; (80085f0 <__gethex+0x2dc>)
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	f7ff fe1d 	bl	8008190 <strncmp>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	2800      	cmp	r0, #0
 800855a:	d1df      	bne.n	800851c <__gethex+0x208>
 800855c:	e793      	b.n	8008486 <__gethex+0x172>
 800855e:	f04f 0b03 	mov.w	fp, #3
 8008562:	e7c5      	b.n	80084f0 <__gethex+0x1dc>
 8008564:	da0b      	bge.n	800857e <__gethex+0x26a>
 8008566:	eba5 0808 	sub.w	r8, r5, r8
 800856a:	4621      	mov	r1, r4
 800856c:	4642      	mov	r2, r8
 800856e:	4648      	mov	r0, r9
 8008570:	f7fe fb2a 	bl	8006bc8 <__lshift>
 8008574:	4604      	mov	r4, r0
 8008576:	eba6 0608 	sub.w	r6, r6, r8
 800857a:	f100 0a14 	add.w	sl, r0, #20
 800857e:	f04f 0b00 	mov.w	fp, #0
 8008582:	e7ba      	b.n	80084fa <__gethex+0x1e6>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	42b3      	cmp	r3, r6
 8008588:	dd74      	ble.n	8008674 <__gethex+0x360>
 800858a:	1b9e      	subs	r6, r3, r6
 800858c:	42b5      	cmp	r5, r6
 800858e:	dc35      	bgt.n	80085fc <__gethex+0x2e8>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d023      	beq.n	80085de <__gethex+0x2ca>
 8008596:	2b03      	cmp	r3, #3
 8008598:	d025      	beq.n	80085e6 <__gethex+0x2d2>
 800859a:	2b01      	cmp	r3, #1
 800859c:	d115      	bne.n	80085ca <__gethex+0x2b6>
 800859e:	42b5      	cmp	r5, r6
 80085a0:	d113      	bne.n	80085ca <__gethex+0x2b6>
 80085a2:	2d01      	cmp	r5, #1
 80085a4:	d10b      	bne.n	80085be <__gethex+0x2aa>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	9a02      	ldr	r2, [sp, #8]
 80085aa:	f04f 0862 	mov.w	r8, #98	; 0x62
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	2301      	movs	r3, #1
 80085b2:	6123      	str	r3, [r4, #16]
 80085b4:	f8ca 3000 	str.w	r3, [sl]
 80085b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ba:	601c      	str	r4, [r3, #0]
 80085bc:	e734      	b.n	8008428 <__gethex+0x114>
 80085be:	4620      	mov	r0, r4
 80085c0:	1e69      	subs	r1, r5, #1
 80085c2:	f7fe fd24 	bl	800700e <__any_on>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d1ed      	bne.n	80085a6 <__gethex+0x292>
 80085ca:	4621      	mov	r1, r4
 80085cc:	4648      	mov	r0, r9
 80085ce:	f7fe f8e3 	bl	8006798 <_Bfree>
 80085d2:	2300      	movs	r3, #0
 80085d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085d6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	e724      	b.n	8008428 <__gethex+0x114>
 80085de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1f2      	bne.n	80085ca <__gethex+0x2b6>
 80085e4:	e7df      	b.n	80085a6 <__gethex+0x292>
 80085e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1dc      	bne.n	80085a6 <__gethex+0x292>
 80085ec:	e7ed      	b.n	80085ca <__gethex+0x2b6>
 80085ee:	bf00      	nop
 80085f0:	080098ec 	.word	0x080098ec
 80085f4:	08009783 	.word	0x08009783
 80085f8:	08009a96 	.word	0x08009a96
 80085fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8008600:	f1bb 0f00 	cmp.w	fp, #0
 8008604:	d133      	bne.n	800866e <__gethex+0x35a>
 8008606:	f1b8 0f00 	cmp.w	r8, #0
 800860a:	d004      	beq.n	8008616 <__gethex+0x302>
 800860c:	4641      	mov	r1, r8
 800860e:	4620      	mov	r0, r4
 8008610:	f7fe fcfd 	bl	800700e <__any_on>
 8008614:	4683      	mov	fp, r0
 8008616:	2301      	movs	r3, #1
 8008618:	ea4f 1268 	mov.w	r2, r8, asr #5
 800861c:	f008 081f 	and.w	r8, r8, #31
 8008620:	fa03 f308 	lsl.w	r3, r3, r8
 8008624:	f04f 0802 	mov.w	r8, #2
 8008628:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800862c:	4631      	mov	r1, r6
 800862e:	4213      	tst	r3, r2
 8008630:	4620      	mov	r0, r4
 8008632:	bf18      	it	ne
 8008634:	f04b 0b02 	orrne.w	fp, fp, #2
 8008638:	1bad      	subs	r5, r5, r6
 800863a:	f7ff fe03 	bl	8008244 <rshift>
 800863e:	687e      	ldr	r6, [r7, #4]
 8008640:	f1bb 0f00 	cmp.w	fp, #0
 8008644:	d04a      	beq.n	80086dc <__gethex+0x3c8>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b02      	cmp	r3, #2
 800864a:	d016      	beq.n	800867a <__gethex+0x366>
 800864c:	2b03      	cmp	r3, #3
 800864e:	d018      	beq.n	8008682 <__gethex+0x36e>
 8008650:	2b01      	cmp	r3, #1
 8008652:	d109      	bne.n	8008668 <__gethex+0x354>
 8008654:	f01b 0f02 	tst.w	fp, #2
 8008658:	d006      	beq.n	8008668 <__gethex+0x354>
 800865a:	f8da 3000 	ldr.w	r3, [sl]
 800865e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008662:	f01b 0f01 	tst.w	fp, #1
 8008666:	d10f      	bne.n	8008688 <__gethex+0x374>
 8008668:	f048 0810 	orr.w	r8, r8, #16
 800866c:	e036      	b.n	80086dc <__gethex+0x3c8>
 800866e:	f04f 0b01 	mov.w	fp, #1
 8008672:	e7d0      	b.n	8008616 <__gethex+0x302>
 8008674:	f04f 0801 	mov.w	r8, #1
 8008678:	e7e2      	b.n	8008640 <__gethex+0x32c>
 800867a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800867c:	f1c3 0301 	rsb	r3, r3, #1
 8008680:	930f      	str	r3, [sp, #60]	; 0x3c
 8008682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d0ef      	beq.n	8008668 <__gethex+0x354>
 8008688:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800868c:	f104 0214 	add.w	r2, r4, #20
 8008690:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	2300      	movs	r3, #0
 8008698:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800869c:	4694      	mov	ip, r2
 800869e:	f852 1b04 	ldr.w	r1, [r2], #4
 80086a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80086a6:	d01e      	beq.n	80086e6 <__gethex+0x3d2>
 80086a8:	3101      	adds	r1, #1
 80086aa:	f8cc 1000 	str.w	r1, [ip]
 80086ae:	f1b8 0f02 	cmp.w	r8, #2
 80086b2:	f104 0214 	add.w	r2, r4, #20
 80086b6:	d13d      	bne.n	8008734 <__gethex+0x420>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	42ab      	cmp	r3, r5
 80086be:	d10b      	bne.n	80086d8 <__gethex+0x3c4>
 80086c0:	2301      	movs	r3, #1
 80086c2:	1169      	asrs	r1, r5, #5
 80086c4:	f005 051f 	and.w	r5, r5, #31
 80086c8:	fa03 f505 	lsl.w	r5, r3, r5
 80086cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086d0:	421d      	tst	r5, r3
 80086d2:	bf18      	it	ne
 80086d4:	f04f 0801 	movne.w	r8, #1
 80086d8:	f048 0820 	orr.w	r8, r8, #32
 80086dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086de:	601c      	str	r4, [r3, #0]
 80086e0:	9b02      	ldr	r3, [sp, #8]
 80086e2:	601e      	str	r6, [r3, #0]
 80086e4:	e6a0      	b.n	8008428 <__gethex+0x114>
 80086e6:	4290      	cmp	r0, r2
 80086e8:	f842 3c04 	str.w	r3, [r2, #-4]
 80086ec:	d8d6      	bhi.n	800869c <__gethex+0x388>
 80086ee:	68a2      	ldr	r2, [r4, #8]
 80086f0:	4593      	cmp	fp, r2
 80086f2:	db17      	blt.n	8008724 <__gethex+0x410>
 80086f4:	6861      	ldr	r1, [r4, #4]
 80086f6:	4648      	mov	r0, r9
 80086f8:	3101      	adds	r1, #1
 80086fa:	f7fe f80d 	bl	8006718 <_Balloc>
 80086fe:	4682      	mov	sl, r0
 8008700:	b918      	cbnz	r0, 800870a <__gethex+0x3f6>
 8008702:	4602      	mov	r2, r0
 8008704:	2184      	movs	r1, #132	; 0x84
 8008706:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <__gethex+0x45c>)
 8008708:	e6b1      	b.n	800846e <__gethex+0x15a>
 800870a:	6922      	ldr	r2, [r4, #16]
 800870c:	f104 010c 	add.w	r1, r4, #12
 8008710:	3202      	adds	r2, #2
 8008712:	0092      	lsls	r2, r2, #2
 8008714:	300c      	adds	r0, #12
 8008716:	f7fd f880 	bl	800581a <memcpy>
 800871a:	4621      	mov	r1, r4
 800871c:	4648      	mov	r0, r9
 800871e:	f7fe f83b 	bl	8006798 <_Bfree>
 8008722:	4654      	mov	r4, sl
 8008724:	6922      	ldr	r2, [r4, #16]
 8008726:	1c51      	adds	r1, r2, #1
 8008728:	6121      	str	r1, [r4, #16]
 800872a:	2101      	movs	r1, #1
 800872c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008730:	6151      	str	r1, [r2, #20]
 8008732:	e7bc      	b.n	80086ae <__gethex+0x39a>
 8008734:	6921      	ldr	r1, [r4, #16]
 8008736:	4559      	cmp	r1, fp
 8008738:	dd0b      	ble.n	8008752 <__gethex+0x43e>
 800873a:	2101      	movs	r1, #1
 800873c:	4620      	mov	r0, r4
 800873e:	f7ff fd81 	bl	8008244 <rshift>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	3601      	adds	r6, #1
 8008746:	42b3      	cmp	r3, r6
 8008748:	f6ff aeda 	blt.w	8008500 <__gethex+0x1ec>
 800874c:	f04f 0801 	mov.w	r8, #1
 8008750:	e7c2      	b.n	80086d8 <__gethex+0x3c4>
 8008752:	f015 051f 	ands.w	r5, r5, #31
 8008756:	d0f9      	beq.n	800874c <__gethex+0x438>
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	f1c5 0520 	rsb	r5, r5, #32
 800875e:	441a      	add	r2, r3
 8008760:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008764:	f7fe f8ca 	bl	80068fc <__hi0bits>
 8008768:	42a8      	cmp	r0, r5
 800876a:	dbe6      	blt.n	800873a <__gethex+0x426>
 800876c:	e7ee      	b.n	800874c <__gethex+0x438>
 800876e:	bf00      	nop
 8008770:	08009783 	.word	0x08009783

08008774 <L_shift>:
 8008774:	f1c2 0208 	rsb	r2, r2, #8
 8008778:	0092      	lsls	r2, r2, #2
 800877a:	b570      	push	{r4, r5, r6, lr}
 800877c:	f1c2 0620 	rsb	r6, r2, #32
 8008780:	6843      	ldr	r3, [r0, #4]
 8008782:	6804      	ldr	r4, [r0, #0]
 8008784:	fa03 f506 	lsl.w	r5, r3, r6
 8008788:	432c      	orrs	r4, r5
 800878a:	40d3      	lsrs	r3, r2
 800878c:	6004      	str	r4, [r0, #0]
 800878e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008792:	4288      	cmp	r0, r1
 8008794:	d3f4      	bcc.n	8008780 <L_shift+0xc>
 8008796:	bd70      	pop	{r4, r5, r6, pc}

08008798 <__match>:
 8008798:	b530      	push	{r4, r5, lr}
 800879a:	6803      	ldr	r3, [r0, #0]
 800879c:	3301      	adds	r3, #1
 800879e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087a2:	b914      	cbnz	r4, 80087aa <__match+0x12>
 80087a4:	6003      	str	r3, [r0, #0]
 80087a6:	2001      	movs	r0, #1
 80087a8:	bd30      	pop	{r4, r5, pc}
 80087aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087b2:	2d19      	cmp	r5, #25
 80087b4:	bf98      	it	ls
 80087b6:	3220      	addls	r2, #32
 80087b8:	42a2      	cmp	r2, r4
 80087ba:	d0f0      	beq.n	800879e <__match+0x6>
 80087bc:	2000      	movs	r0, #0
 80087be:	e7f3      	b.n	80087a8 <__match+0x10>

080087c0 <__hexnan>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	2500      	movs	r5, #0
 80087c6:	680b      	ldr	r3, [r1, #0]
 80087c8:	4682      	mov	sl, r0
 80087ca:	115e      	asrs	r6, r3, #5
 80087cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80087d0:	f013 031f 	ands.w	r3, r3, #31
 80087d4:	bf18      	it	ne
 80087d6:	3604      	addne	r6, #4
 80087d8:	1f37      	subs	r7, r6, #4
 80087da:	4690      	mov	r8, r2
 80087dc:	46b9      	mov	r9, r7
 80087de:	463c      	mov	r4, r7
 80087e0:	46ab      	mov	fp, r5
 80087e2:	b087      	sub	sp, #28
 80087e4:	6801      	ldr	r1, [r0, #0]
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	f846 5c04 	str.w	r5, [r6, #-4]
 80087ec:	9502      	str	r5, [sp, #8]
 80087ee:	784a      	ldrb	r2, [r1, #1]
 80087f0:	1c4b      	adds	r3, r1, #1
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	b342      	cbz	r2, 8008848 <__hexnan+0x88>
 80087f6:	4610      	mov	r0, r2
 80087f8:	9105      	str	r1, [sp, #20]
 80087fa:	9204      	str	r2, [sp, #16]
 80087fc:	f7ff fd75 	bl	80082ea <__hexdig_fun>
 8008800:	2800      	cmp	r0, #0
 8008802:	d14f      	bne.n	80088a4 <__hexnan+0xe4>
 8008804:	9a04      	ldr	r2, [sp, #16]
 8008806:	9905      	ldr	r1, [sp, #20]
 8008808:	2a20      	cmp	r2, #32
 800880a:	d818      	bhi.n	800883e <__hexnan+0x7e>
 800880c:	9b02      	ldr	r3, [sp, #8]
 800880e:	459b      	cmp	fp, r3
 8008810:	dd13      	ble.n	800883a <__hexnan+0x7a>
 8008812:	454c      	cmp	r4, r9
 8008814:	d206      	bcs.n	8008824 <__hexnan+0x64>
 8008816:	2d07      	cmp	r5, #7
 8008818:	dc04      	bgt.n	8008824 <__hexnan+0x64>
 800881a:	462a      	mov	r2, r5
 800881c:	4649      	mov	r1, r9
 800881e:	4620      	mov	r0, r4
 8008820:	f7ff ffa8 	bl	8008774 <L_shift>
 8008824:	4544      	cmp	r4, r8
 8008826:	d950      	bls.n	80088ca <__hexnan+0x10a>
 8008828:	2300      	movs	r3, #0
 800882a:	f1a4 0904 	sub.w	r9, r4, #4
 800882e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008832:	461d      	mov	r5, r3
 8008834:	464c      	mov	r4, r9
 8008836:	f8cd b008 	str.w	fp, [sp, #8]
 800883a:	9903      	ldr	r1, [sp, #12]
 800883c:	e7d7      	b.n	80087ee <__hexnan+0x2e>
 800883e:	2a29      	cmp	r2, #41	; 0x29
 8008840:	d155      	bne.n	80088ee <__hexnan+0x12e>
 8008842:	3102      	adds	r1, #2
 8008844:	f8ca 1000 	str.w	r1, [sl]
 8008848:	f1bb 0f00 	cmp.w	fp, #0
 800884c:	d04f      	beq.n	80088ee <__hexnan+0x12e>
 800884e:	454c      	cmp	r4, r9
 8008850:	d206      	bcs.n	8008860 <__hexnan+0xa0>
 8008852:	2d07      	cmp	r5, #7
 8008854:	dc04      	bgt.n	8008860 <__hexnan+0xa0>
 8008856:	462a      	mov	r2, r5
 8008858:	4649      	mov	r1, r9
 800885a:	4620      	mov	r0, r4
 800885c:	f7ff ff8a 	bl	8008774 <L_shift>
 8008860:	4544      	cmp	r4, r8
 8008862:	d934      	bls.n	80088ce <__hexnan+0x10e>
 8008864:	4623      	mov	r3, r4
 8008866:	f1a8 0204 	sub.w	r2, r8, #4
 800886a:	f853 1b04 	ldr.w	r1, [r3], #4
 800886e:	429f      	cmp	r7, r3
 8008870:	f842 1f04 	str.w	r1, [r2, #4]!
 8008874:	d2f9      	bcs.n	800886a <__hexnan+0xaa>
 8008876:	1b3b      	subs	r3, r7, r4
 8008878:	f023 0303 	bic.w	r3, r3, #3
 800887c:	3304      	adds	r3, #4
 800887e:	3e03      	subs	r6, #3
 8008880:	3401      	adds	r4, #1
 8008882:	42a6      	cmp	r6, r4
 8008884:	bf38      	it	cc
 8008886:	2304      	movcc	r3, #4
 8008888:	2200      	movs	r2, #0
 800888a:	4443      	add	r3, r8
 800888c:	f843 2b04 	str.w	r2, [r3], #4
 8008890:	429f      	cmp	r7, r3
 8008892:	d2fb      	bcs.n	800888c <__hexnan+0xcc>
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	b91b      	cbnz	r3, 80088a0 <__hexnan+0xe0>
 8008898:	4547      	cmp	r7, r8
 800889a:	d126      	bne.n	80088ea <__hexnan+0x12a>
 800889c:	2301      	movs	r3, #1
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	2005      	movs	r0, #5
 80088a2:	e025      	b.n	80088f0 <__hexnan+0x130>
 80088a4:	3501      	adds	r5, #1
 80088a6:	2d08      	cmp	r5, #8
 80088a8:	f10b 0b01 	add.w	fp, fp, #1
 80088ac:	dd06      	ble.n	80088bc <__hexnan+0xfc>
 80088ae:	4544      	cmp	r4, r8
 80088b0:	d9c3      	bls.n	800883a <__hexnan+0x7a>
 80088b2:	2300      	movs	r3, #0
 80088b4:	2501      	movs	r5, #1
 80088b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80088ba:	3c04      	subs	r4, #4
 80088bc:	6822      	ldr	r2, [r4, #0]
 80088be:	f000 000f 	and.w	r0, r0, #15
 80088c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80088c6:	6020      	str	r0, [r4, #0]
 80088c8:	e7b7      	b.n	800883a <__hexnan+0x7a>
 80088ca:	2508      	movs	r5, #8
 80088cc:	e7b5      	b.n	800883a <__hexnan+0x7a>
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0df      	beq.n	8008894 <__hexnan+0xd4>
 80088d4:	f04f 32ff 	mov.w	r2, #4294967295
 80088d8:	f1c3 0320 	rsb	r3, r3, #32
 80088dc:	40da      	lsrs	r2, r3
 80088de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80088e2:	4013      	ands	r3, r2
 80088e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80088e8:	e7d4      	b.n	8008894 <__hexnan+0xd4>
 80088ea:	3f04      	subs	r7, #4
 80088ec:	e7d2      	b.n	8008894 <__hexnan+0xd4>
 80088ee:	2004      	movs	r0, #4
 80088f0:	b007      	add	sp, #28
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088f6 <__ascii_mbtowc>:
 80088f6:	b082      	sub	sp, #8
 80088f8:	b901      	cbnz	r1, 80088fc <__ascii_mbtowc+0x6>
 80088fa:	a901      	add	r1, sp, #4
 80088fc:	b142      	cbz	r2, 8008910 <__ascii_mbtowc+0x1a>
 80088fe:	b14b      	cbz	r3, 8008914 <__ascii_mbtowc+0x1e>
 8008900:	7813      	ldrb	r3, [r2, #0]
 8008902:	600b      	str	r3, [r1, #0]
 8008904:	7812      	ldrb	r2, [r2, #0]
 8008906:	1e10      	subs	r0, r2, #0
 8008908:	bf18      	it	ne
 800890a:	2001      	movne	r0, #1
 800890c:	b002      	add	sp, #8
 800890e:	4770      	bx	lr
 8008910:	4610      	mov	r0, r2
 8008912:	e7fb      	b.n	800890c <__ascii_mbtowc+0x16>
 8008914:	f06f 0001 	mvn.w	r0, #1
 8008918:	e7f8      	b.n	800890c <__ascii_mbtowc+0x16>

0800891a <_realloc_r>:
 800891a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	4680      	mov	r8, r0
 8008920:	4614      	mov	r4, r2
 8008922:	460e      	mov	r6, r1
 8008924:	b921      	cbnz	r1, 8008930 <_realloc_r+0x16>
 8008926:	4611      	mov	r1, r2
 8008928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800892c:	f7fd be68 	b.w	8006600 <_malloc_r>
 8008930:	b92a      	cbnz	r2, 800893e <_realloc_r+0x24>
 8008932:	f7fd fdf5 	bl	8006520 <_free_r>
 8008936:	4625      	mov	r5, r4
 8008938:	4628      	mov	r0, r5
 800893a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800893e:	f000 f842 	bl	80089c6 <_malloc_usable_size_r>
 8008942:	4284      	cmp	r4, r0
 8008944:	4607      	mov	r7, r0
 8008946:	d802      	bhi.n	800894e <_realloc_r+0x34>
 8008948:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800894c:	d812      	bhi.n	8008974 <_realloc_r+0x5a>
 800894e:	4621      	mov	r1, r4
 8008950:	4640      	mov	r0, r8
 8008952:	f7fd fe55 	bl	8006600 <_malloc_r>
 8008956:	4605      	mov	r5, r0
 8008958:	2800      	cmp	r0, #0
 800895a:	d0ed      	beq.n	8008938 <_realloc_r+0x1e>
 800895c:	42bc      	cmp	r4, r7
 800895e:	4622      	mov	r2, r4
 8008960:	4631      	mov	r1, r6
 8008962:	bf28      	it	cs
 8008964:	463a      	movcs	r2, r7
 8008966:	f7fc ff58 	bl	800581a <memcpy>
 800896a:	4631      	mov	r1, r6
 800896c:	4640      	mov	r0, r8
 800896e:	f7fd fdd7 	bl	8006520 <_free_r>
 8008972:	e7e1      	b.n	8008938 <_realloc_r+0x1e>
 8008974:	4635      	mov	r5, r6
 8008976:	e7df      	b.n	8008938 <_realloc_r+0x1e>

08008978 <__ascii_wctomb>:
 8008978:	4603      	mov	r3, r0
 800897a:	4608      	mov	r0, r1
 800897c:	b141      	cbz	r1, 8008990 <__ascii_wctomb+0x18>
 800897e:	2aff      	cmp	r2, #255	; 0xff
 8008980:	d904      	bls.n	800898c <__ascii_wctomb+0x14>
 8008982:	228a      	movs	r2, #138	; 0x8a
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	4770      	bx	lr
 800898c:	2001      	movs	r0, #1
 800898e:	700a      	strb	r2, [r1, #0]
 8008990:	4770      	bx	lr
	...

08008994 <fiprintf>:
 8008994:	b40e      	push	{r1, r2, r3}
 8008996:	b503      	push	{r0, r1, lr}
 8008998:	4601      	mov	r1, r0
 800899a:	ab03      	add	r3, sp, #12
 800899c:	4805      	ldr	r0, [pc, #20]	; (80089b4 <fiprintf+0x20>)
 800899e:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a2:	6800      	ldr	r0, [r0, #0]
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	f000 f83d 	bl	8008a24 <_vfiprintf_r>
 80089aa:	b002      	add	sp, #8
 80089ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b0:	b003      	add	sp, #12
 80089b2:	4770      	bx	lr
 80089b4:	2000007c 	.word	0x2000007c

080089b8 <abort>:
 80089b8:	2006      	movs	r0, #6
 80089ba:	b508      	push	{r3, lr}
 80089bc:	f000 fa0a 	bl	8008dd4 <raise>
 80089c0:	2001      	movs	r0, #1
 80089c2:	f7f9 f897 	bl	8001af4 <_exit>

080089c6 <_malloc_usable_size_r>:
 80089c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ca:	1f18      	subs	r0, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	bfbc      	itt	lt
 80089d0:	580b      	ldrlt	r3, [r1, r0]
 80089d2:	18c0      	addlt	r0, r0, r3
 80089d4:	4770      	bx	lr

080089d6 <__sfputc_r>:
 80089d6:	6893      	ldr	r3, [r2, #8]
 80089d8:	b410      	push	{r4}
 80089da:	3b01      	subs	r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	6093      	str	r3, [r2, #8]
 80089e0:	da07      	bge.n	80089f2 <__sfputc_r+0x1c>
 80089e2:	6994      	ldr	r4, [r2, #24]
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	db01      	blt.n	80089ec <__sfputc_r+0x16>
 80089e8:	290a      	cmp	r1, #10
 80089ea:	d102      	bne.n	80089f2 <__sfputc_r+0x1c>
 80089ec:	bc10      	pop	{r4}
 80089ee:	f000 b933 	b.w	8008c58 <__swbuf_r>
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	1c58      	adds	r0, r3, #1
 80089f6:	6010      	str	r0, [r2, #0]
 80089f8:	7019      	strb	r1, [r3, #0]
 80089fa:	4608      	mov	r0, r1
 80089fc:	bc10      	pop	{r4}
 80089fe:	4770      	bx	lr

08008a00 <__sfputs_r>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	4606      	mov	r6, r0
 8008a04:	460f      	mov	r7, r1
 8008a06:	4614      	mov	r4, r2
 8008a08:	18d5      	adds	r5, r2, r3
 8008a0a:	42ac      	cmp	r4, r5
 8008a0c:	d101      	bne.n	8008a12 <__sfputs_r+0x12>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e007      	b.n	8008a22 <__sfputs_r+0x22>
 8008a12:	463a      	mov	r2, r7
 8008a14:	4630      	mov	r0, r6
 8008a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1a:	f7ff ffdc 	bl	80089d6 <__sfputc_r>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	d1f3      	bne.n	8008a0a <__sfputs_r+0xa>
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a24 <_vfiprintf_r>:
 8008a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	460d      	mov	r5, r1
 8008a2a:	4614      	mov	r4, r2
 8008a2c:	4698      	mov	r8, r3
 8008a2e:	4606      	mov	r6, r0
 8008a30:	b09d      	sub	sp, #116	; 0x74
 8008a32:	b118      	cbz	r0, 8008a3c <_vfiprintf_r+0x18>
 8008a34:	6a03      	ldr	r3, [r0, #32]
 8008a36:	b90b      	cbnz	r3, 8008a3c <_vfiprintf_r+0x18>
 8008a38:	f7fc fdae 	bl	8005598 <__sinit>
 8008a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a3e:	07d9      	lsls	r1, r3, #31
 8008a40:	d405      	bmi.n	8008a4e <_vfiprintf_r+0x2a>
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	059a      	lsls	r2, r3, #22
 8008a46:	d402      	bmi.n	8008a4e <_vfiprintf_r+0x2a>
 8008a48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4a:	f7fc fed6 	bl	80057fa <__retarget_lock_acquire_recursive>
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	071b      	lsls	r3, r3, #28
 8008a52:	d501      	bpl.n	8008a58 <_vfiprintf_r+0x34>
 8008a54:	692b      	ldr	r3, [r5, #16]
 8008a56:	b99b      	cbnz	r3, 8008a80 <_vfiprintf_r+0x5c>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f000 f93a 	bl	8008cd4 <__swsetup_r>
 8008a60:	b170      	cbz	r0, 8008a80 <_vfiprintf_r+0x5c>
 8008a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a64:	07dc      	lsls	r4, r3, #31
 8008a66:	d504      	bpl.n	8008a72 <_vfiprintf_r+0x4e>
 8008a68:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6c:	b01d      	add	sp, #116	; 0x74
 8008a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a72:	89ab      	ldrh	r3, [r5, #12]
 8008a74:	0598      	lsls	r0, r3, #22
 8008a76:	d4f7      	bmi.n	8008a68 <_vfiprintf_r+0x44>
 8008a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a7a:	f7fc febf 	bl	80057fc <__retarget_lock_release_recursive>
 8008a7e:	e7f3      	b.n	8008a68 <_vfiprintf_r+0x44>
 8008a80:	2300      	movs	r3, #0
 8008a82:	9309      	str	r3, [sp, #36]	; 0x24
 8008a84:	2320      	movs	r3, #32
 8008a86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a8a:	2330      	movs	r3, #48	; 0x30
 8008a8c:	f04f 0901 	mov.w	r9, #1
 8008a90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a94:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008c44 <_vfiprintf_r+0x220>
 8008a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a9c:	4623      	mov	r3, r4
 8008a9e:	469a      	mov	sl, r3
 8008aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aa4:	b10a      	cbz	r2, 8008aaa <_vfiprintf_r+0x86>
 8008aa6:	2a25      	cmp	r2, #37	; 0x25
 8008aa8:	d1f9      	bne.n	8008a9e <_vfiprintf_r+0x7a>
 8008aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8008aae:	d00b      	beq.n	8008ac8 <_vfiprintf_r+0xa4>
 8008ab0:	465b      	mov	r3, fp
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f7ff ffa2 	bl	8008a00 <__sfputs_r>
 8008abc:	3001      	adds	r0, #1
 8008abe:	f000 80a9 	beq.w	8008c14 <_vfiprintf_r+0x1f0>
 8008ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ac4:	445a      	add	r2, fp
 8008ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 80a1 	beq.w	8008c14 <_vfiprintf_r+0x1f0>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008adc:	f10a 0a01 	add.w	sl, sl, #1
 8008ae0:	9304      	str	r3, [sp, #16]
 8008ae2:	9307      	str	r3, [sp, #28]
 8008ae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ae8:	931a      	str	r3, [sp, #104]	; 0x68
 8008aea:	4654      	mov	r4, sl
 8008aec:	2205      	movs	r2, #5
 8008aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af2:	4854      	ldr	r0, [pc, #336]	; (8008c44 <_vfiprintf_r+0x220>)
 8008af4:	f7fc fe83 	bl	80057fe <memchr>
 8008af8:	9a04      	ldr	r2, [sp, #16]
 8008afa:	b9d8      	cbnz	r0, 8008b34 <_vfiprintf_r+0x110>
 8008afc:	06d1      	lsls	r1, r2, #27
 8008afe:	bf44      	itt	mi
 8008b00:	2320      	movmi	r3, #32
 8008b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b06:	0713      	lsls	r3, r2, #28
 8008b08:	bf44      	itt	mi
 8008b0a:	232b      	movmi	r3, #43	; 0x2b
 8008b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b10:	f89a 3000 	ldrb.w	r3, [sl]
 8008b14:	2b2a      	cmp	r3, #42	; 0x2a
 8008b16:	d015      	beq.n	8008b44 <_vfiprintf_r+0x120>
 8008b18:	4654      	mov	r4, sl
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	f04f 0c0a 	mov.w	ip, #10
 8008b20:	9a07      	ldr	r2, [sp, #28]
 8008b22:	4621      	mov	r1, r4
 8008b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b28:	3b30      	subs	r3, #48	; 0x30
 8008b2a:	2b09      	cmp	r3, #9
 8008b2c:	d94d      	bls.n	8008bca <_vfiprintf_r+0x1a6>
 8008b2e:	b1b0      	cbz	r0, 8008b5e <_vfiprintf_r+0x13a>
 8008b30:	9207      	str	r2, [sp, #28]
 8008b32:	e014      	b.n	8008b5e <_vfiprintf_r+0x13a>
 8008b34:	eba0 0308 	sub.w	r3, r0, r8
 8008b38:	fa09 f303 	lsl.w	r3, r9, r3
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	46a2      	mov	sl, r4
 8008b40:	9304      	str	r3, [sp, #16]
 8008b42:	e7d2      	b.n	8008aea <_vfiprintf_r+0xc6>
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	1d19      	adds	r1, r3, #4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	9103      	str	r1, [sp, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	bfbb      	ittet	lt
 8008b50:	425b      	neglt	r3, r3
 8008b52:	f042 0202 	orrlt.w	r2, r2, #2
 8008b56:	9307      	strge	r3, [sp, #28]
 8008b58:	9307      	strlt	r3, [sp, #28]
 8008b5a:	bfb8      	it	lt
 8008b5c:	9204      	strlt	r2, [sp, #16]
 8008b5e:	7823      	ldrb	r3, [r4, #0]
 8008b60:	2b2e      	cmp	r3, #46	; 0x2e
 8008b62:	d10c      	bne.n	8008b7e <_vfiprintf_r+0x15a>
 8008b64:	7863      	ldrb	r3, [r4, #1]
 8008b66:	2b2a      	cmp	r3, #42	; 0x2a
 8008b68:	d134      	bne.n	8008bd4 <_vfiprintf_r+0x1b0>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	3402      	adds	r4, #2
 8008b6e:	1d1a      	adds	r2, r3, #4
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	9203      	str	r2, [sp, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bfb8      	it	lt
 8008b78:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b7c:	9305      	str	r3, [sp, #20]
 8008b7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c48 <_vfiprintf_r+0x224>
 8008b82:	2203      	movs	r2, #3
 8008b84:	4650      	mov	r0, sl
 8008b86:	7821      	ldrb	r1, [r4, #0]
 8008b88:	f7fc fe39 	bl	80057fe <memchr>
 8008b8c:	b138      	cbz	r0, 8008b9e <_vfiprintf_r+0x17a>
 8008b8e:	2240      	movs	r2, #64	; 0x40
 8008b90:	9b04      	ldr	r3, [sp, #16]
 8008b92:	eba0 000a 	sub.w	r0, r0, sl
 8008b96:	4082      	lsls	r2, r0
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	3401      	adds	r4, #1
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba2:	2206      	movs	r2, #6
 8008ba4:	4829      	ldr	r0, [pc, #164]	; (8008c4c <_vfiprintf_r+0x228>)
 8008ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008baa:	f7fc fe28 	bl	80057fe <memchr>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d03f      	beq.n	8008c32 <_vfiprintf_r+0x20e>
 8008bb2:	4b27      	ldr	r3, [pc, #156]	; (8008c50 <_vfiprintf_r+0x22c>)
 8008bb4:	bb1b      	cbnz	r3, 8008bfe <_vfiprintf_r+0x1da>
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	3307      	adds	r3, #7
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	9303      	str	r3, [sp, #12]
 8008bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc4:	443b      	add	r3, r7
 8008bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc8:	e768      	b.n	8008a9c <_vfiprintf_r+0x78>
 8008bca:	460c      	mov	r4, r1
 8008bcc:	2001      	movs	r0, #1
 8008bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd2:	e7a6      	b.n	8008b22 <_vfiprintf_r+0xfe>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f04f 0c0a 	mov.w	ip, #10
 8008bda:	4619      	mov	r1, r3
 8008bdc:	3401      	adds	r4, #1
 8008bde:	9305      	str	r3, [sp, #20]
 8008be0:	4620      	mov	r0, r4
 8008be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008be6:	3a30      	subs	r2, #48	; 0x30
 8008be8:	2a09      	cmp	r2, #9
 8008bea:	d903      	bls.n	8008bf4 <_vfiprintf_r+0x1d0>
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d0c6      	beq.n	8008b7e <_vfiprintf_r+0x15a>
 8008bf0:	9105      	str	r1, [sp, #20]
 8008bf2:	e7c4      	b.n	8008b7e <_vfiprintf_r+0x15a>
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bfc:	e7f0      	b.n	8008be0 <_vfiprintf_r+0x1bc>
 8008bfe:	ab03      	add	r3, sp, #12
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	462a      	mov	r2, r5
 8008c04:	4630      	mov	r0, r6
 8008c06:	4b13      	ldr	r3, [pc, #76]	; (8008c54 <_vfiprintf_r+0x230>)
 8008c08:	a904      	add	r1, sp, #16
 8008c0a:	f7fb fe69 	bl	80048e0 <_printf_float>
 8008c0e:	4607      	mov	r7, r0
 8008c10:	1c78      	adds	r0, r7, #1
 8008c12:	d1d6      	bne.n	8008bc2 <_vfiprintf_r+0x19e>
 8008c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c16:	07d9      	lsls	r1, r3, #31
 8008c18:	d405      	bmi.n	8008c26 <_vfiprintf_r+0x202>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	059a      	lsls	r2, r3, #22
 8008c1e:	d402      	bmi.n	8008c26 <_vfiprintf_r+0x202>
 8008c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c22:	f7fc fdeb 	bl	80057fc <__retarget_lock_release_recursive>
 8008c26:	89ab      	ldrh	r3, [r5, #12]
 8008c28:	065b      	lsls	r3, r3, #25
 8008c2a:	f53f af1d 	bmi.w	8008a68 <_vfiprintf_r+0x44>
 8008c2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c30:	e71c      	b.n	8008a6c <_vfiprintf_r+0x48>
 8008c32:	ab03      	add	r3, sp, #12
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	462a      	mov	r2, r5
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <_vfiprintf_r+0x230>)
 8008c3c:	a904      	add	r1, sp, #16
 8008c3e:	f7fc f8ef 	bl	8004e20 <_printf_i>
 8008c42:	e7e4      	b.n	8008c0e <_vfiprintf_r+0x1ea>
 8008c44:	08009a41 	.word	0x08009a41
 8008c48:	08009a47 	.word	0x08009a47
 8008c4c:	08009a4b 	.word	0x08009a4b
 8008c50:	080048e1 	.word	0x080048e1
 8008c54:	08008a01 	.word	0x08008a01

08008c58 <__swbuf_r>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	460e      	mov	r6, r1
 8008c5c:	4614      	mov	r4, r2
 8008c5e:	4605      	mov	r5, r0
 8008c60:	b118      	cbz	r0, 8008c6a <__swbuf_r+0x12>
 8008c62:	6a03      	ldr	r3, [r0, #32]
 8008c64:	b90b      	cbnz	r3, 8008c6a <__swbuf_r+0x12>
 8008c66:	f7fc fc97 	bl	8005598 <__sinit>
 8008c6a:	69a3      	ldr	r3, [r4, #24]
 8008c6c:	60a3      	str	r3, [r4, #8]
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	071a      	lsls	r2, r3, #28
 8008c72:	d525      	bpl.n	8008cc0 <__swbuf_r+0x68>
 8008c74:	6923      	ldr	r3, [r4, #16]
 8008c76:	b31b      	cbz	r3, 8008cc0 <__swbuf_r+0x68>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	6922      	ldr	r2, [r4, #16]
 8008c7c:	b2f6      	uxtb	r6, r6
 8008c7e:	1a98      	subs	r0, r3, r2
 8008c80:	6963      	ldr	r3, [r4, #20]
 8008c82:	4637      	mov	r7, r6
 8008c84:	4283      	cmp	r3, r0
 8008c86:	dc04      	bgt.n	8008c92 <__swbuf_r+0x3a>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f7ff fa58 	bl	8008140 <_fflush_r>
 8008c90:	b9e0      	cbnz	r0, 8008ccc <__swbuf_r+0x74>
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	60a3      	str	r3, [r4, #8]
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	6022      	str	r2, [r4, #0]
 8008c9e:	701e      	strb	r6, [r3, #0]
 8008ca0:	6962      	ldr	r2, [r4, #20]
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d004      	beq.n	8008cb2 <__swbuf_r+0x5a>
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	07db      	lsls	r3, r3, #31
 8008cac:	d506      	bpl.n	8008cbc <__swbuf_r+0x64>
 8008cae:	2e0a      	cmp	r6, #10
 8008cb0:	d104      	bne.n	8008cbc <__swbuf_r+0x64>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f7ff fa43 	bl	8008140 <_fflush_r>
 8008cba:	b938      	cbnz	r0, 8008ccc <__swbuf_r+0x74>
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f000 f806 	bl	8008cd4 <__swsetup_r>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d0d5      	beq.n	8008c78 <__swbuf_r+0x20>
 8008ccc:	f04f 37ff 	mov.w	r7, #4294967295
 8008cd0:	e7f4      	b.n	8008cbc <__swbuf_r+0x64>
	...

08008cd4 <__swsetup_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4b2a      	ldr	r3, [pc, #168]	; (8008d80 <__swsetup_r+0xac>)
 8008cd8:	4605      	mov	r5, r0
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	460c      	mov	r4, r1
 8008cde:	b118      	cbz	r0, 8008ce8 <__swsetup_r+0x14>
 8008ce0:	6a03      	ldr	r3, [r0, #32]
 8008ce2:	b90b      	cbnz	r3, 8008ce8 <__swsetup_r+0x14>
 8008ce4:	f7fc fc58 	bl	8005598 <__sinit>
 8008ce8:	89a3      	ldrh	r3, [r4, #12]
 8008cea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cee:	0718      	lsls	r0, r3, #28
 8008cf0:	d422      	bmi.n	8008d38 <__swsetup_r+0x64>
 8008cf2:	06d9      	lsls	r1, r3, #27
 8008cf4:	d407      	bmi.n	8008d06 <__swsetup_r+0x32>
 8008cf6:	2309      	movs	r3, #9
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008d02:	81a3      	strh	r3, [r4, #12]
 8008d04:	e034      	b.n	8008d70 <__swsetup_r+0x9c>
 8008d06:	0758      	lsls	r0, r3, #29
 8008d08:	d512      	bpl.n	8008d30 <__swsetup_r+0x5c>
 8008d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d0c:	b141      	cbz	r1, 8008d20 <__swsetup_r+0x4c>
 8008d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d12:	4299      	cmp	r1, r3
 8008d14:	d002      	beq.n	8008d1c <__swsetup_r+0x48>
 8008d16:	4628      	mov	r0, r5
 8008d18:	f7fd fc02 	bl	8006520 <_free_r>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	6363      	str	r3, [r4, #52]	; 0x34
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	6063      	str	r3, [r4, #4]
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f043 0308 	orr.w	r3, r3, #8
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	b94b      	cbnz	r3, 8008d50 <__swsetup_r+0x7c>
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d46:	d003      	beq.n	8008d50 <__swsetup_r+0x7c>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 f883 	bl	8008e56 <__smakebuf_r>
 8008d50:	89a0      	ldrh	r0, [r4, #12]
 8008d52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d56:	f010 0301 	ands.w	r3, r0, #1
 8008d5a:	d00a      	beq.n	8008d72 <__swsetup_r+0x9e>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60a3      	str	r3, [r4, #8]
 8008d60:	6963      	ldr	r3, [r4, #20]
 8008d62:	425b      	negs	r3, r3
 8008d64:	61a3      	str	r3, [r4, #24]
 8008d66:	6923      	ldr	r3, [r4, #16]
 8008d68:	b943      	cbnz	r3, 8008d7c <__swsetup_r+0xa8>
 8008d6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d6e:	d1c4      	bne.n	8008cfa <__swsetup_r+0x26>
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
 8008d72:	0781      	lsls	r1, r0, #30
 8008d74:	bf58      	it	pl
 8008d76:	6963      	ldrpl	r3, [r4, #20]
 8008d78:	60a3      	str	r3, [r4, #8]
 8008d7a:	e7f4      	b.n	8008d66 <__swsetup_r+0x92>
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	e7f7      	b.n	8008d70 <__swsetup_r+0x9c>
 8008d80:	2000007c 	.word	0x2000007c

08008d84 <_raise_r>:
 8008d84:	291f      	cmp	r1, #31
 8008d86:	b538      	push	{r3, r4, r5, lr}
 8008d88:	4604      	mov	r4, r0
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	d904      	bls.n	8008d98 <_raise_r+0x14>
 8008d8e:	2316      	movs	r3, #22
 8008d90:	6003      	str	r3, [r0, #0]
 8008d92:	f04f 30ff 	mov.w	r0, #4294967295
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008d9a:	b112      	cbz	r2, 8008da2 <_raise_r+0x1e>
 8008d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008da0:	b94b      	cbnz	r3, 8008db6 <_raise_r+0x32>
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 f830 	bl	8008e08 <_getpid_r>
 8008da8:	462a      	mov	r2, r5
 8008daa:	4601      	mov	r1, r0
 8008dac:	4620      	mov	r0, r4
 8008dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008db2:	f000 b817 	b.w	8008de4 <_kill_r>
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d00a      	beq.n	8008dd0 <_raise_r+0x4c>
 8008dba:	1c59      	adds	r1, r3, #1
 8008dbc:	d103      	bne.n	8008dc6 <_raise_r+0x42>
 8008dbe:	2316      	movs	r3, #22
 8008dc0:	6003      	str	r3, [r0, #0]
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	e7e7      	b.n	8008d96 <_raise_r+0x12>
 8008dc6:	2400      	movs	r4, #0
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008dce:	4798      	blx	r3
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e7e0      	b.n	8008d96 <_raise_r+0x12>

08008dd4 <raise>:
 8008dd4:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <raise+0xc>)
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	f7ff bfd3 	b.w	8008d84 <_raise_r>
 8008dde:	bf00      	nop
 8008de0:	2000007c 	.word	0x2000007c

08008de4 <_kill_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	2300      	movs	r3, #0
 8008de8:	4d06      	ldr	r5, [pc, #24]	; (8008e04 <_kill_r+0x20>)
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	4611      	mov	r1, r2
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	f7f8 fe6f 	bl	8001ad4 <_kill>
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d102      	bne.n	8008e00 <_kill_r+0x1c>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b103      	cbz	r3, 8008e00 <_kill_r+0x1c>
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	bd38      	pop	{r3, r4, r5, pc}
 8008e02:	bf00      	nop
 8008e04:	2000091c 	.word	0x2000091c

08008e08 <_getpid_r>:
 8008e08:	f7f8 be5d 	b.w	8001ac6 <_getpid>

08008e0c <__swhatbuf_r>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	460c      	mov	r4, r1
 8008e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e14:	4615      	mov	r5, r2
 8008e16:	2900      	cmp	r1, #0
 8008e18:	461e      	mov	r6, r3
 8008e1a:	b096      	sub	sp, #88	; 0x58
 8008e1c:	da0c      	bge.n	8008e38 <__swhatbuf_r+0x2c>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	2100      	movs	r1, #0
 8008e22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e26:	bf0c      	ite	eq
 8008e28:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e2c:	2340      	movne	r3, #64	; 0x40
 8008e2e:	2000      	movs	r0, #0
 8008e30:	6031      	str	r1, [r6, #0]
 8008e32:	602b      	str	r3, [r5, #0]
 8008e34:	b016      	add	sp, #88	; 0x58
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	466a      	mov	r2, sp
 8008e3a:	f000 f849 	bl	8008ed0 <_fstat_r>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	dbed      	blt.n	8008e1e <__swhatbuf_r+0x12>
 8008e42:	9901      	ldr	r1, [sp, #4]
 8008e44:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e48:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e4c:	4259      	negs	r1, r3
 8008e4e:	4159      	adcs	r1, r3
 8008e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e54:	e7eb      	b.n	8008e2e <__swhatbuf_r+0x22>

08008e56 <__smakebuf_r>:
 8008e56:	898b      	ldrh	r3, [r1, #12]
 8008e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e5a:	079d      	lsls	r5, r3, #30
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	d507      	bpl.n	8008e72 <__smakebuf_r+0x1c>
 8008e62:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	6123      	str	r3, [r4, #16]
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	6163      	str	r3, [r4, #20]
 8008e6e:	b002      	add	sp, #8
 8008e70:	bd70      	pop	{r4, r5, r6, pc}
 8008e72:	466a      	mov	r2, sp
 8008e74:	ab01      	add	r3, sp, #4
 8008e76:	f7ff ffc9 	bl	8008e0c <__swhatbuf_r>
 8008e7a:	9900      	ldr	r1, [sp, #0]
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7fd fbbe 	bl	8006600 <_malloc_r>
 8008e84:	b948      	cbnz	r0, 8008e9a <__smakebuf_r+0x44>
 8008e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8a:	059a      	lsls	r2, r3, #22
 8008e8c:	d4ef      	bmi.n	8008e6e <__smakebuf_r+0x18>
 8008e8e:	f023 0303 	bic.w	r3, r3, #3
 8008e92:	f043 0302 	orr.w	r3, r3, #2
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	e7e3      	b.n	8008e62 <__smakebuf_r+0xc>
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	6020      	str	r0, [r4, #0]
 8008e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	9b00      	ldr	r3, [sp, #0]
 8008ea6:	6120      	str	r0, [r4, #16]
 8008ea8:	6163      	str	r3, [r4, #20]
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	b15b      	cbz	r3, 8008ec6 <__smakebuf_r+0x70>
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb4:	f000 f81e 	bl	8008ef4 <_isatty_r>
 8008eb8:	b128      	cbz	r0, 8008ec6 <__smakebuf_r+0x70>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f023 0303 	bic.w	r3, r3, #3
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	431d      	orrs	r5, r3
 8008eca:	81a5      	strh	r5, [r4, #12]
 8008ecc:	e7cf      	b.n	8008e6e <__smakebuf_r+0x18>
	...

08008ed0 <_fstat_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	4d06      	ldr	r5, [pc, #24]	; (8008ef0 <_fstat_r+0x20>)
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	4611      	mov	r1, r2
 8008edc:	602b      	str	r3, [r5, #0]
 8008ede:	f7f8 fe57 	bl	8001b90 <_fstat>
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	d102      	bne.n	8008eec <_fstat_r+0x1c>
 8008ee6:	682b      	ldr	r3, [r5, #0]
 8008ee8:	b103      	cbz	r3, 8008eec <_fstat_r+0x1c>
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	bd38      	pop	{r3, r4, r5, pc}
 8008eee:	bf00      	nop
 8008ef0:	2000091c 	.word	0x2000091c

08008ef4 <_isatty_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4d05      	ldr	r5, [pc, #20]	; (8008f10 <_isatty_r+0x1c>)
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	602b      	str	r3, [r5, #0]
 8008f00:	f7f8 fe55 	bl	8001bae <_isatty>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_isatty_r+0x1a>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_isatty_r+0x1a>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	2000091c 	.word	0x2000091c

08008f14 <_init>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	bf00      	nop
 8008f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1a:	bc08      	pop	{r3}
 8008f1c:	469e      	mov	lr, r3
 8008f1e:	4770      	bx	lr

08008f20 <_fini>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr

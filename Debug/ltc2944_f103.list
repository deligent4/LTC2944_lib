
ltc2944_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be8  0800b7d0  0800b7d0  0001b7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3b8  0800c3b8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c3b8  0800c3b8  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c3b8  0800c3b8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3b8  0800c3b8  0001c3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3bc  0800c3bc  0001c3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  200001ec  0800c5ac  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000994  0800c5ac  00020994  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb3e  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b64  00000000  00000000  0002ed96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  00031900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a03  00000000  00000000  00032620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d026  00000000  00000000  00033023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cef  00000000  00000000  00050049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cfac  00000000  00000000  00062d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004948  00000000  00000000  000efce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000f462c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b7b4 	.word	0x0800b7b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800b7b4 	.word	0x0800b7b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4605      	mov	r5, r0
 8001068:	460c      	mov	r4, r1
 800106a:	2200      	movs	r2, #0
 800106c:	2300      	movs	r3, #0
 800106e:	4628      	mov	r0, r5
 8001070:	4621      	mov	r1, r4
 8001072:	f7ff fca3 	bl	80009bc <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff fa19 	bl	80004d8 <__aeabi_dmul>
 80010a6:	f7ff fcef 	bl	8000a88 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff f99a 	bl	80003e4 <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	f7ff fce0 	bl	8000a88 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000

080010d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_ADC1_Init+0x74>)
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <MX_ADC1_Init+0x78>)
 80010e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_ADC1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_ADC1_Init+0x74>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_ADC1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_ADC1_Init+0x74>)
 80010fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_ADC1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_ADC1_Init+0x74>)
 800110c:	2201      	movs	r2, #1
 800110e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_ADC1_Init+0x74>)
 8001112:	f001 fa3b 	bl	800258c <HAL_ADC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f000 fd94 	bl	8001c48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001120:	2308      	movs	r3, #8
 8001122:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001124:	2301      	movs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001128:	2303      	movs	r3, #3
 800112a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_ADC1_Init+0x74>)
 8001132:	f001 fbb1 	bl	8002898 <HAL_ADC_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800113c:	f000 fd84 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000208 	.word	0x20000208
 800114c:	40012400 	.word	0x40012400

08001150 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <HAL_ADC_MspInit+0x6c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d121      	bne.n	80011b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a0:	2301      	movs	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a4:	2303      	movs	r3, #3
 80011a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_ADC_MspInit+0x74>)
 80011b0:	f002 f886 	bl	80032c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40012400 	.word	0x40012400
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_DMA_Init+0x38>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <MX_DMA_Init+0x38>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_DMA_Init+0x38>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2010      	movs	r0, #16
 80011ec:	f001 fdbf 	bl	8002d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011f0:	2010      	movs	r0, #16
 80011f2:	f001 fdd8 	bl	8002da6 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_GPIO_Init+0xa8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a23      	ldr	r2, [pc, #140]	; (80012ac <MX_GPIO_Init+0xa8>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_GPIO_Init+0xa8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0320 	and.w	r3, r3, #32
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_GPIO_Init+0xa8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_GPIO_Init+0xa8>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_GPIO_Init+0xa8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800127e:	480c      	ldr	r0, [pc, #48]	; (80012b0 <MX_GPIO_Init+0xac>)
 8001280:	f002 f9a2 	bl	80035c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLU_Pin;
 8001284:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2302      	movs	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_GPIO_Init+0xac>)
 800129e:	f002 f80f 	bl	80032c0 <HAL_GPIO_Init>

}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40011000 	.word	0x40011000

080012b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2C1_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <MX_I2C1_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_I2C1_Init+0x50>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_I2C1_Init+0x58>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_I2C1_Init+0x50>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_I2C1_Init+0x50>)
 80012f2:	f002 f99b 	bl	800362c <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 fca4 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000238 	.word	0x20000238
 8001308:	40005400 	.word	0x40005400
 800130c:	00061a80 	.word	0x00061a80

08001310 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2C2_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_I2C2_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_I2C2_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_I2C2_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_I2C2_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_I2C2_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_I2C2_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_I2C2_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_I2C2_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_I2C2_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_I2C2_Init+0x50>)
 800134e:	f002 f96d 	bl	800362c <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 fc76 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000028c 	.word	0x2000028c
 8001364:	40005800 	.word	0x40005800
 8001368:	00061a80 	.word	0x00061a80

0800136c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a42      	ldr	r2, [pc, #264]	; (8001490 <HAL_I2C_MspInit+0x124>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d152      	bne.n	8001432 <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a40      	ldr	r2, [pc, #256]	; (8001494 <HAL_I2C_MspInit+0x128>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a4:	23c0      	movs	r3, #192	; 0xc0
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a8:	2312      	movs	r3, #18
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4838      	ldr	r0, [pc, #224]	; (8001498 <HAL_I2C_MspInit+0x12c>)
 80013b8:	f001 ff82 	bl	80032c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <HAL_I2C_MspInit+0x128>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	4a34      	ldr	r2, [pc, #208]	; (8001494 <HAL_I2C_MspInit+0x128>)
 80013c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c6:	61d3      	str	r3, [r2, #28]
 80013c8:	4b32      	ldr	r3, [pc, #200]	; (8001494 <HAL_I2C_MspInit+0x128>)
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80013d4:	4b31      	ldr	r3, [pc, #196]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013d6:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <HAL_I2C_MspInit+0x134>)
 80013d8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013da:	4b30      	ldr	r3, [pc, #192]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013dc:	2210      	movs	r2, #16
 80013de:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_I2C_MspInit+0x130>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001404:	4825      	ldr	r0, [pc, #148]	; (800149c <HAL_I2C_MspInit+0x130>)
 8001406:	f001 fce9 	bl	8002ddc <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001410:	f000 fc1a 	bl	8001c48 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <HAL_I2C_MspInit+0x130>)
 8001418:	635a      	str	r2, [r3, #52]	; 0x34
 800141a:	4a20      	ldr	r2, [pc, #128]	; (800149c <HAL_I2C_MspInit+0x130>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	201f      	movs	r0, #31
 8001426:	f001 fca2 	bl	8002d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800142a:	201f      	movs	r0, #31
 800142c:	f001 fcbb 	bl	8002da6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001430:	e029      	b.n	8001486 <HAL_I2C_MspInit+0x11a>
  else if(i2cHandle->Instance==I2C2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_I2C_MspInit+0x138>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d124      	bne.n	8001486 <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <HAL_I2C_MspInit+0x128>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001454:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	2312      	movs	r3, #18
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_I2C_MspInit+0x12c>)
 800146a:	f001 ff29 	bl	80032c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_I2C_MspInit+0x128>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_I2C_MspInit+0x128>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40005400 	.word	0x40005400
 8001494:	40021000 	.word	0x40021000
 8001498:	40010c00 	.word	0x40010c00
 800149c:	200002e0 	.word	0x200002e0
 80014a0:	4002006c 	.word	0x4002006c
 80014a4:	40005800 	.word	0x40005800

080014a8 <LTC2944_Init>:
#include "stdio.h"

ltc2944_data_t ltc2944_data;
uint16_t Prescaler_Table[] = {1, 4, 16, 64, 256, 1024, 4096};

HAL_StatusTypeDef LTC2944_Init(ltc2944_configuration_t ltc2944){
 80014a8:	b084      	sub	sp, #16
 80014aa:	b5b0      	push	{r4, r5, r7, lr}
 80014ac:	b088      	sub	sp, #32
 80014ae:	af04      	add	r7, sp, #16
 80014b0:	f107 0420 	add.w	r4, r7, #32
 80014b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ctrl_reg = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	71bb      	strb	r3, [r7, #6]
	uint16_t prescaler_value;
	float psc_temp;
	uint8_t status;

	// calculate prescalar value based on the battery parameters
	psc_temp = (4096.0 * ltc2944.batt_capacity * ltc2944.sense_resistor)
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ffb2 	bl	8000428 <__aeabi_f2d>
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <LTC2944_Init+0x188>)
 80014ca:	f7ff f805 	bl	80004d8 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4614      	mov	r4, r2
 80014d4:	461d      	mov	r5, r3
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffa5 	bl	8000428 <__aeabi_f2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4620      	mov	r0, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7fe fff7 	bl	80004d8 <__aeabi_dmul>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
					/ (65535.0 * FACTOR_CHARGE_QLSB * 50);
 80014f2:	a34b      	add	r3, pc, #300	; (adr r3, 8001620 <LTC2944_Init+0x178>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f918 	bl	800072c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
	psc_temp = (4096.0 * ltc2944.batt_capacity * ltc2944.sense_resistor)
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fae0 	bl	8000ac8 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	60bb      	str	r3, [r7, #8]
	// loop through the Prescaler_Table[] to find the best match of
	// prescalar based on battery and sense resistor values.
	for(uint8_t i = 0; i <= sizeof(Prescaler_Table); i++){
 800150c:	2300      	movs	r3, #0
 800150e:	737b      	strb	r3, [r7, #13]
 8001510:	e01b      	b.n	800154a <LTC2944_Init+0xa2>
		if((uint16_t)psc_temp <= Prescaler_Table[i]){
 8001512:	68b8      	ldr	r0, [r7, #8]
 8001514:	f7ff fd86 	bl	8001024 <__aeabi_f2uiz>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	7b7b      	ldrb	r3, [r7, #13]
 800151e:	4945      	ldr	r1, [pc, #276]	; (8001634 <LTC2944_Init+0x18c>)
 8001520:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001524:	429a      	cmp	r2, r3
 8001526:	d80d      	bhi.n	8001544 <LTC2944_Init+0x9c>
			if(i != 0){
 8001528:	7b7b      	ldrb	r3, [r7, #13]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <LTC2944_Init+0x98>
				if((uint16_t)psc_temp >= Prescaler_Table[i-1]);
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f7ff fd78 	bl	8001024 <__aeabi_f2uiz>
				prescaler_value = Prescaler_Table[i];
 8001534:	7b7b      	ldrb	r3, [r7, #13]
 8001536:	4a3f      	ldr	r2, [pc, #252]	; (8001634 <LTC2944_Init+0x18c>)
 8001538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153c:	81fb      	strh	r3, [r7, #14]
				break;			// break from the for loop when a
 800153e:	e007      	b.n	8001550 <LTC2944_Init+0xa8>
								// match is found, otherwise it will
								// loop through the whole table
			}
			else{
				prescaler_value = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i <= sizeof(Prescaler_Table); i++){
 8001544:	7b7b      	ldrb	r3, [r7, #13]
 8001546:	3301      	adds	r3, #1
 8001548:	737b      	strb	r3, [r7, #13]
 800154a:	7b7b      	ldrb	r3, [r7, #13]
 800154c:	2b0e      	cmp	r3, #14
 800154e:	d9e0      	bls.n	8001512 <LTC2944_Init+0x6a>
		}
	}

	// calculate the amount of charge represented by the
	// least significant bit (qLSB) of the accumulated charge registers
	ltc2944_data.qLSB = FACTOR_CHARGE_QLSB * (50.0 / ltc2944.sense_resistor)
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ff68 	bl	8000428 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	f04f 0000 	mov.w	r0, #0
 8001560:	4935      	ldr	r1, [pc, #212]	; (8001638 <LTC2944_Init+0x190>)
 8001562:	f7ff f8e3 	bl	800072c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	a32e      	add	r3, pc, #184	; (adr r3, 8001628 <LTC2944_Init+0x180>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7fe ffb0 	bl	80004d8 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
								* (prescaler_value / 4096.0);
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff3e 	bl	8000404 <__aeabi_i2d>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <LTC2944_Init+0x188>)
 800158e:	f7ff f8cd 	bl	800072c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4620      	mov	r0, r4
 8001598:	4629      	mov	r1, r5
 800159a:	f7fe ff9d 	bl	80004d8 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fa8f 	bl	8000ac8 <__aeabi_d2f>
 80015aa:	4603      	mov	r3, r0
	ltc2944_data.qLSB = FACTOR_CHARGE_QLSB * (50.0 / ltc2944.sense_resistor)
 80015ac:	4a23      	ldr	r2, [pc, #140]	; (800163c <LTC2944_Init+0x194>)
 80015ae:	6113      	str	r3, [r2, #16]

	// calculate the value to put in the control register
	ctrl_reg |= ltc2944.adc_mode << 6;
 80015b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b4:	019b      	lsls	r3, r3, #6
 80015b6:	b25a      	sxtb	r2, r3
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	71bb      	strb	r3, [r7, #6]
	ctrl_reg |= (uint8_t)prescaler_value << 3;
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	b25a      	sxtb	r2, r3
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	71bb      	strb	r3, [r7, #6]
	ctrl_reg |= ltc2944.alcc_mode << 1;
 80015d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	71bb      	strb	r3, [r7, #6]

	//
	status = HAL_I2C_Mem_Write(&(ltc2944.i2c_handle), LTC2944_ADDRESS,
 80015ec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80015f0:	230a      	movs	r3, #10
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2301      	movs	r3, #1
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	1dbb      	adds	r3, r7, #6
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	2201      	movs	r2, #1
 8001600:	21c8      	movs	r1, #200	; 0xc8
 8001602:	f002 f96b 	bl	80038dc <HAL_I2C_Mem_Write>
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
			CONTROL_REGISTER, 1, &ctrl_reg, 1, 10);

	return status;
 800160a:	79fb      	ldrb	r3, [r7, #7]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001616:	b004      	add	sp, #16
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	02fffd00 	.word	0x02fffd00
 8001624:	4130ffef 	.word	0x4130ffef
 8001628:	60000000 	.word	0x60000000
 800162c:	3fd5c28f 	.word	0x3fd5c28f
 8001630:	40b00000 	.word	0x40b00000
 8001634:	20000000 	.word	0x20000000
 8001638:	40490000 	.word	0x40490000
 800163c:	20000324 	.word	0x20000324

08001640 <LTC2944_Get_Battery_Data>:


uint8_t LTC2944_Get_Battery_Data(ltc2944_configuration_t *ltc2944){
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af04      	add	r7, sp, #16
 8001646:	6078      	str	r0, [r7, #4]
	float temp;
	uint8_t status;
	uint8_t data_buffer[NUMBER_OF_REGISTERS];

	status = HAL_I2C_Mem_Read(&(ltc2944->i2c_handle), LTC2944_ADDRESS, STATUS_REGISTER,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f103 000c 	add.w	r0, r3, #12
 800164e:	230a      	movs	r3, #10
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	2317      	movs	r3, #23
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	2200      	movs	r2, #0
 8001660:	21c8      	movs	r1, #200	; 0xc8
 8001662:	f002 fa35 	bl	8003ad0 <HAL_I2C_Mem_Read>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			1 , data_buffer, NUMBER_OF_REGISTERS, 10);

	if(status == HAL_OK){
 800166c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 8088 	bne.w	8001786 <LTC2944_Get_Battery_Data+0x146>

		temp = (data_buffer[ACCUMULATED_CHARGE_MSB]) << 8 | (data_buffer[ACCUMULATED_CHARGE_LSB]);
 8001676:	7abb      	ldrb	r3, [r7, #10]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	7afa      	ldrb	r2, [r7, #11]
 800167c:	4313      	orrs	r3, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fb2c 	bl	8000cdc <__aeabi_i2f>
 8001684:	4603      	mov	r3, r0
 8001686:	623b      	str	r3, [r7, #32]
		ltc2944_data.acc_charge = ltc2944_data.qLSB * temp;
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	6a39      	ldr	r1, [r7, #32]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fb78 	bl	8000d84 <__aeabi_fmul>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 800169a:	601a      	str	r2, [r3, #0]

		temp = (data_buffer[VOLTAGE_MSB] << 8) | (data_buffer[VOLTAGE_LSB]);
 800169c:	7c3b      	ldrb	r3, [r7, #16]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	7c7a      	ldrb	r2, [r7, #17]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fb19 	bl	8000cdc <__aeabi_i2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	623b      	str	r3, [r7, #32]
		ltc2944_data.voltage = 70.8 * (temp/65535.0);
 80016ae:	6a38      	ldr	r0, [r7, #32]
 80016b0:	f7fe feba 	bl	8000428 <__aeabi_f2d>
 80016b4:	a342      	add	r3, pc, #264	; (adr r3, 80017c0 <LTC2944_Get_Battery_Data+0x180>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7ff f837 	bl	800072c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	a340      	add	r3, pc, #256	; (adr r3, 80017c8 <LTC2944_Get_Battery_Data+0x188>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe ff04 	bl	80004d8 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff f9f6 	bl	8000ac8 <__aeabi_d2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a3e      	ldr	r2, [pc, #248]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 80016e0:	6053      	str	r3, [r2, #4]

		temp = (data_buffer[CURRENT_MSB] << 8) | (data_buffer)[CURRENT_LSB];
 80016e2:	7dbb      	ldrb	r3, [r7, #22]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	7dfa      	ldrb	r2, [r7, #23]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff faf6 	bl	8000cdc <__aeabi_i2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	623b      	str	r3, [r7, #32]
		ltc2944_data.current = (64 / ltc2944->sense_resistor) * ((temp - 32767.0) / 32767.0);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4085 	mov.w	r0, #1115684864	; 0x42800000
 80016fe:	f7ff fbf5 	bl	8000eec <__aeabi_fdiv>
 8001702:	4603      	mov	r3, r0
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fe8f 	bl	8000428 <__aeabi_f2d>
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	6a38      	ldr	r0, [r7, #32]
 8001710:	f7fe fe8a 	bl	8000428 <__aeabi_f2d>
 8001714:	a32e      	add	r3, pc, #184	; (adr r3, 80017d0 <LTC2944_Get_Battery_Data+0x190>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe fd25 	bl	8000168 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	a32a      	add	r3, pc, #168	; (adr r3, 80017d0 <LTC2944_Get_Battery_Data+0x190>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fffe 	bl	800072c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fece 	bl	80004d8 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff f9c0 	bl	8000ac8 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 800174c:	6093      	str	r3, [r2, #8]

		temp = (data_buffer[TEMPERATURE_MSB] << 8) | (data_buffer[TEMPERATURE_LSB]);
 800174e:	7f3b      	ldrb	r3, [r7, #28]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	7f7a      	ldrb	r2, [r7, #29]
 8001754:	4313      	orrs	r3, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fac0 	bl	8000cdc <__aeabi_i2f>
 800175c:	4603      	mov	r3, r0
 800175e:	623b      	str	r3, [r7, #32]
		ltc2944_data.temperature = (501 * (temp / 65535)) - 273;
 8001760:	491e      	ldr	r1, [pc, #120]	; (80017dc <LTC2944_Get_Battery_Data+0x19c>)
 8001762:	6a38      	ldr	r0, [r7, #32]
 8001764:	f7ff fbc2 	bl	8000eec <__aeabi_fdiv>
 8001768:	4603      	mov	r3, r0
 800176a:	491d      	ldr	r1, [pc, #116]	; (80017e0 <LTC2944_Get_Battery_Data+0x1a0>)
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fb09 	bl	8000d84 <__aeabi_fmul>
 8001772:	4603      	mov	r3, r0
 8001774:	491b      	ldr	r1, [pc, #108]	; (80017e4 <LTC2944_Get_Battery_Data+0x1a4>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f9fa 	bl	8000b70 <__aeabi_fsub>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	e013      	b.n	80017ae <LTC2944_Get_Battery_Data+0x16e>


	}
	else{
		ltc2944_data.acc_charge =	0;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
		ltc2944_data.current = 		0;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
		ltc2944_data.qLSB = 		0;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
		ltc2944_data.temperature = 	0;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
		ltc2944_data.voltage = 		0;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
	}

	return status;
 80017ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	00000000 	.word	0x00000000
 80017c4:	40efffe0 	.word	0x40efffe0
 80017c8:	33333333 	.word	0x33333333
 80017cc:	4051b333 	.word	0x4051b333
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40dfffc0 	.word	0x40dfffc0
 80017d8:	20000324 	.word	0x20000324
 80017dc:	477fff00 	.word	0x477fff00
 80017e0:	43fa8000 	.word	0x43fa8000
 80017e4:	43888000 	.word	0x43888000

080017e8 <LTC2944_Get_Voltage>:


float LTC2944_Get_Voltage(ltc2944_configuration_t *ltc2944){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	uint8_t status = LTC2944_Get_Battery_Data(ltc2944);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff25 	bl	8001640 <LTC2944_Get_Battery_Data>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d104      	bne.n	800180a <LTC2944_Get_Voltage+0x22>
		float data = ltc2944_data.voltage;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <LTC2944_Get_Voltage+0x30>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	60bb      	str	r3, [r7, #8]
		return data;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	e001      	b.n	800180e <LTC2944_Get_Voltage+0x26>
	}else{
		return 0;
 800180a:	f04f 0300 	mov.w	r3, #0
	}
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000324 	.word	0x20000324

0800181c <LTC2944_Get_Current>:

float LTC2944_Get_Current(ltc2944_configuration_t *ltc2944){
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	uint8_t status = LTC2944_Get_Battery_Data(ltc2944);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff0b 	bl	8001640 <LTC2944_Get_Battery_Data>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d104      	bne.n	800183e <LTC2944_Get_Current+0x22>
		float data = ltc2944_data.current;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <LTC2944_Get_Current+0x30>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	60bb      	str	r3, [r7, #8]
		return data;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	e001      	b.n	8001842 <LTC2944_Get_Current+0x26>
	}else{
		return 0;
 800183e:	f04f 0300 	mov.w	r3, #0
	}
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000324 	.word	0x20000324

08001850 <LTC2944_Get_Temperature>:


float LTC2944_Get_Temperature(ltc2944_configuration_t *ltc2944){
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	uint8_t status = LTC2944_Get_Battery_Data(ltc2944);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fef1 	bl	8001640 <LTC2944_Get_Battery_Data>
 800185e:	4603      	mov	r3, r0
 8001860:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d104      	bne.n	8001872 <LTC2944_Get_Temperature+0x22>
		float data = ltc2944_data.temperature;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <LTC2944_Get_Temperature+0x30>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
		return data;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	e001      	b.n	8001876 <LTC2944_Get_Temperature+0x26>
	}else{
		return 0;
 8001872:	f04f 0300 	mov.w	r3, #0
	}
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000324 	.word	0x20000324

08001884 <LTC2944_Get_Charge>:

float LTC2944_Get_Charge(ltc2944_configuration_t *ltc2944){
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	uint8_t status = LTC2944_Get_Battery_Data(ltc2944);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fed7 	bl	8001640 <LTC2944_Get_Battery_Data>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d104      	bne.n	80018a6 <LTC2944_Get_Charge+0x22>
		float data = ltc2944_data.acc_charge;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <LTC2944_Get_Charge+0x30>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60bb      	str	r3, [r7, #8]
		return data;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	e001      	b.n	80018aa <LTC2944_Get_Charge+0x26>
	}else{
		return 0;
 80018a6:	f04f 0300 	mov.w	r3, #0
	}
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000324 	.word	0x20000324

080018b8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80018c0:	1d39      	adds	r1, r7, #4
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	2201      	movs	r2, #1
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <__io_putchar+0x20>)
 80018ca:	f005 fa3d 	bl	8006d48 <HAL_UART_Transmit>
  return ch;
 80018ce:	687b      	ldr	r3, [r7, #4]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200007fc 	.word	0x200007fc

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b097      	sub	sp, #92	; 0x5c
 80018e0:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e2:	f000 fdcd 	bl	8002480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e6:	f000 f923 	bl	8001b30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemClock_Config();
 80018ea:	f000 f921 	bl	8001b30 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ee:	f7ff fc89 	bl	8001204 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f2:	f7ff fc69 	bl	80011c8 <MX_DMA_Init>
  MX_I2C2_Init();
 80018f6:	f7ff fd0b 	bl	8001310 <MX_I2C2_Init>
  MX_I2C1_Init();
 80018fa:	f7ff fcdb 	bl	80012b4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80018fe:	f7ff fbe9 	bl	80010d4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001902:	f000 fd23 	bl	800234c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001906:	f000 f9ef 	bl	8001ce8 <ssd1306_Init>
  HAL_ADC_Start(&hadc1);
 800190a:	4871      	ldr	r0, [pc, #452]	; (8001ad0 <main+0x1f4>)
 800190c:	f000 ff16 	bl	800273c <HAL_ADC_Start>
  state_t state = IDLE;
 8001910:	2300      	movs	r3, #0
 8001912:	71fb      	strb	r3, [r7, #7]

  Device_Config();
 8001914:	f000 f968 	bl	8001be8 <Device_Config>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  tick = HAL_GetTick();
 8001918:	f000 fe0a 	bl	8002530 <HAL_GetTick>
 800191c:	4603      	mov	r3, r0
 800191e:	4a6d      	ldr	r2, [pc, #436]	; (8001ad4 <main+0x1f8>)
 8001920:	6013      	str	r3, [r2, #0]
//	  printf(string_current);

	  prescaler_value = LTC2944_Init(ltc2944_struct);
 8001922:	4c6d      	ldr	r4, [pc, #436]	; (8001ad8 <main+0x1fc>)
 8001924:	4668      	mov	r0, sp
 8001926:	f104 0310 	add.w	r3, r4, #16
 800192a:	2250      	movs	r2, #80	; 0x50
 800192c:	4619      	mov	r1, r3
 800192e:	f006 fbc4 	bl	80080ba <memcpy>
 8001932:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001936:	f7ff fdb7 	bl	80014a8 <LTC2944_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f9c9 	bl	8000cd4 <__aeabi_ui2f>
 8001942:	4603      	mov	r3, r0
 8001944:	4a65      	ldr	r2, [pc, #404]	; (8001adc <main+0x200>)
 8001946:	6013      	str	r3, [r2, #0]

	  sprintf(stringTick, "%ld", tick);
 8001948:	4b62      	ldr	r3, [pc, #392]	; (8001ad4 <main+0x1f8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4964      	ldr	r1, [pc, #400]	; (8001ae0 <main+0x204>)
 8001950:	4864      	ldr	r0, [pc, #400]	; (8001ae4 <main+0x208>)
 8001952:	f006 faa7 	bl	8007ea4 <siprintf>
	  ssd1306_SetCursor(0, 0);
 8001956:	2100      	movs	r1, #0
 8001958:	2000      	movs	r0, #0
 800195a:	f000 fb79 	bl	8002050 <ssd1306_SetCursor>
	  ssd1306_WriteString(stringTick, Font_7x10, Black);
 800195e:	4a62      	ldr	r2, [pc, #392]	; (8001ae8 <main+0x20c>)
 8001960:	2300      	movs	r3, #0
 8001962:	ca06      	ldmia	r2, {r1, r2}
 8001964:	485f      	ldr	r0, [pc, #380]	; (8001ae4 <main+0x208>)
 8001966:	f000 fb4d 	bl	8002004 <ssd1306_WriteString>
//	  default:
//	  }
//
//	  status = HAL_I2C_Mem_Read(&hi2c2, LTC2944_ADDRESS, VOLTAGE_MSB, 1, buf, 2, 1000);

	  if(tick - prev_tick >= blink_delay){
 800196a:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <main+0x1f8>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <main+0x210>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a5e      	ldr	r2, [pc, #376]	; (8001af0 <main+0x214>)
 8001976:	8812      	ldrh	r2, [r2, #0]
 8001978:	4293      	cmp	r3, r2
 800197a:	f0c0 80a2 	bcc.w	8001ac2 <main+0x1e6>
		  prev_tick = tick;
 800197e:	4b55      	ldr	r3, [pc, #340]	; (8001ad4 <main+0x1f8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <main+0x210>)
 8001984:	6013      	str	r3, [r2, #0]
		  voltage = LTC2944_Get_Voltage(&ltc2944_struct);
 8001986:	4854      	ldr	r0, [pc, #336]	; (8001ad8 <main+0x1fc>)
 8001988:	f7ff ff2e 	bl	80017e8 <LTC2944_Get_Voltage>
 800198c:	4603      	mov	r3, r0
 800198e:	4a59      	ldr	r2, [pc, #356]	; (8001af4 <main+0x218>)
 8001990:	6013      	str	r3, [r2, #0]
		  current = LTC2944_Get_Current(&ltc2944_struct);
 8001992:	4851      	ldr	r0, [pc, #324]	; (8001ad8 <main+0x1fc>)
 8001994:	f7ff ff42 	bl	800181c <LTC2944_Get_Current>
 8001998:	4603      	mov	r3, r0
 800199a:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <main+0x21c>)
 800199c:	6013      	str	r3, [r2, #0]
		  charge = LTC2944_Get_Charge(&ltc2944_struct);
 800199e:	484e      	ldr	r0, [pc, #312]	; (8001ad8 <main+0x1fc>)
 80019a0:	f7ff ff70 	bl	8001884 <LTC2944_Get_Charge>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a55      	ldr	r2, [pc, #340]	; (8001afc <main+0x220>)
 80019a8:	6013      	str	r3, [r2, #0]
		  temperature = LTC2944_Get_Temperature(&ltc2944_struct);
 80019aa:	484b      	ldr	r0, [pc, #300]	; (8001ad8 <main+0x1fc>)
 80019ac:	f7ff ff50 	bl	8001850 <LTC2944_Get_Temperature>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a53      	ldr	r2, [pc, #332]	; (8001b00 <main+0x224>)
 80019b4:	6013      	str	r3, [r2, #0]

		  ssd1306_SetCursor(5, 20);
 80019b6:	2114      	movs	r1, #20
 80019b8:	2005      	movs	r0, #5
 80019ba:	f000 fb49 	bl	8002050 <ssd1306_SetCursor>
		  ssd1306_WriteString("V=", Font_7x10, Black);
 80019be:	4a4a      	ldr	r2, [pc, #296]	; (8001ae8 <main+0x20c>)
 80019c0:	2300      	movs	r3, #0
 80019c2:	ca06      	ldmia	r2, {r1, r2}
 80019c4:	484f      	ldr	r0, [pc, #316]	; (8001b04 <main+0x228>)
 80019c6:	f000 fb1d 	bl	8002004 <ssd1306_WriteString>
		  sprintf(string_voltage, "%.3f", voltage);
 80019ca:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <main+0x218>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd2a 	bl	8000428 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	494b      	ldr	r1, [pc, #300]	; (8001b08 <main+0x22c>)
 80019da:	484c      	ldr	r0, [pc, #304]	; (8001b0c <main+0x230>)
 80019dc:	f006 fa62 	bl	8007ea4 <siprintf>
		  ssd1306_SetCursor(20, 20);
 80019e0:	2114      	movs	r1, #20
 80019e2:	2014      	movs	r0, #20
 80019e4:	f000 fb34 	bl	8002050 <ssd1306_SetCursor>
		  ssd1306_WriteString(string_voltage, Font_7x10, Black);
 80019e8:	4a3f      	ldr	r2, [pc, #252]	; (8001ae8 <main+0x20c>)
 80019ea:	2300      	movs	r3, #0
 80019ec:	ca06      	ldmia	r2, {r1, r2}
 80019ee:	4847      	ldr	r0, [pc, #284]	; (8001b0c <main+0x230>)
 80019f0:	f000 fb08 	bl	8002004 <ssd1306_WriteString>

		  ssd1306_SetCursor(5, 30);
 80019f4:	211e      	movs	r1, #30
 80019f6:	2005      	movs	r0, #5
 80019f8:	f000 fb2a 	bl	8002050 <ssd1306_SetCursor>
		  ssd1306_WriteString("I=", Font_7x10, Black);
 80019fc:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <main+0x20c>)
 80019fe:	2300      	movs	r3, #0
 8001a00:	ca06      	ldmia	r2, {r1, r2}
 8001a02:	4843      	ldr	r0, [pc, #268]	; (8001b10 <main+0x234>)
 8001a04:	f000 fafe 	bl	8002004 <ssd1306_WriteString>
		  sprintf(string_current, "%.3f", current);
 8001a08:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <main+0x21c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fd0b 	bl	8000428 <__aeabi_f2d>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	493c      	ldr	r1, [pc, #240]	; (8001b08 <main+0x22c>)
 8001a18:	483e      	ldr	r0, [pc, #248]	; (8001b14 <main+0x238>)
 8001a1a:	f006 fa43 	bl	8007ea4 <siprintf>
		  ssd1306_SetCursor(20, 30);
 8001a1e:	211e      	movs	r1, #30
 8001a20:	2014      	movs	r0, #20
 8001a22:	f000 fb15 	bl	8002050 <ssd1306_SetCursor>
		  ssd1306_WriteString(string_current, Font_7x10, Black);
 8001a26:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <main+0x20c>)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	ca06      	ldmia	r2, {r1, r2}
 8001a2c:	4839      	ldr	r0, [pc, #228]	; (8001b14 <main+0x238>)
 8001a2e:	f000 fae9 	bl	8002004 <ssd1306_WriteString>

		  ssd1306_SetCursor(5,40);
 8001a32:	2128      	movs	r1, #40	; 0x28
 8001a34:	2005      	movs	r0, #5
 8001a36:	f000 fb0b 	bl	8002050 <ssd1306_SetCursor>
		  ssd1306_WriteString("C=", Font_7x10, Black);
 8001a3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ae8 <main+0x20c>)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	ca06      	ldmia	r2, {r1, r2}
 8001a40:	4835      	ldr	r0, [pc, #212]	; (8001b18 <main+0x23c>)
 8001a42:	f000 fadf 	bl	8002004 <ssd1306_WriteString>
		  sprintf(string_charge, "%.0f", charge);
 8001a46:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <main+0x220>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fcec 	bl	8000428 <__aeabi_f2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4931      	ldr	r1, [pc, #196]	; (8001b1c <main+0x240>)
 8001a56:	4832      	ldr	r0, [pc, #200]	; (8001b20 <main+0x244>)
 8001a58:	f006 fa24 	bl	8007ea4 <siprintf>
		  ssd1306_SetCursor(20, 40);
 8001a5c:	2128      	movs	r1, #40	; 0x28
 8001a5e:	2014      	movs	r0, #20
 8001a60:	f000 faf6 	bl	8002050 <ssd1306_SetCursor>
		  ssd1306_WriteString(string_charge, Font_7x10, Black);
 8001a64:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <main+0x20c>)
 8001a66:	2300      	movs	r3, #0
 8001a68:	ca06      	ldmia	r2, {r1, r2}
 8001a6a:	482d      	ldr	r0, [pc, #180]	; (8001b20 <main+0x244>)
 8001a6c:	f000 faca 	bl	8002004 <ssd1306_WriteString>

		  ssd1306_SetCursor(5,50);
 8001a70:	2132      	movs	r1, #50	; 0x32
 8001a72:	2005      	movs	r0, #5
 8001a74:	f000 faec 	bl	8002050 <ssd1306_SetCursor>
		  ssd1306_WriteString("T=", Font_7x10, Black);
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <main+0x20c>)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	ca06      	ldmia	r2, {r1, r2}
 8001a7e:	4829      	ldr	r0, [pc, #164]	; (8001b24 <main+0x248>)
 8001a80:	f000 fac0 	bl	8002004 <ssd1306_WriteString>
		  sprintf(string_temperature, "%.3f", temperature);
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <main+0x224>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fccd 	bl	8000428 <__aeabi_f2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	491d      	ldr	r1, [pc, #116]	; (8001b08 <main+0x22c>)
 8001a94:	4824      	ldr	r0, [pc, #144]	; (8001b28 <main+0x24c>)
 8001a96:	f006 fa05 	bl	8007ea4 <siprintf>
		  ssd1306_SetCursor(20, 50);
 8001a9a:	2132      	movs	r1, #50	; 0x32
 8001a9c:	2014      	movs	r0, #20
 8001a9e:	f000 fad7 	bl	8002050 <ssd1306_SetCursor>
		  ssd1306_WriteString(string_temperature, Font_7x10, Black);
 8001aa2:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <main+0x20c>)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	ca06      	ldmia	r2, {r1, r2}
 8001aa8:	481f      	ldr	r0, [pc, #124]	; (8001b28 <main+0x24c>)
 8001aaa:	f000 faab 	bl	8002004 <ssd1306_WriteString>

		  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 8001aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab2:	481e      	ldr	r0, [pc, #120]	; (8001b2c <main+0x250>)
 8001ab4:	f001 fda0 	bl	80035f8 <HAL_GPIO_TogglePin>
		  ssd1306_UpdateScreen();
 8001ab8:	f000 f9a2 	bl	8001e00 <ssd1306_UpdateScreen>
		  ssd1306_Fill(White);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f000 f97d 	bl	8001dbc <ssd1306_Fill>
//		  ssd1306_UpdateScreen();
//		  ssd1306_Fill(White);
	  }


	  ssd1306_UpdateScreen();
 8001ac2:	f000 f99d 	bl	8001e00 <ssd1306_UpdateScreen>
	  ssd1306_Fill(White);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f000 f978 	bl	8001dbc <ssd1306_Fill>
	  tick = HAL_GetTick();
 8001acc:	e724      	b.n	8001918 <main+0x3c>
 8001ace:	bf00      	nop
 8001ad0:	20000208 	.word	0x20000208
 8001ad4:	20000338 	.word	0x20000338
 8001ad8:	20000340 	.word	0x20000340
 8001adc:	200003ec 	.word	0x200003ec
 8001ae0:	0800b7d0 	.word	0x0800b7d0
 8001ae4:	200003b0 	.word	0x200003b0
 8001ae8:	20000010 	.word	0x20000010
 8001aec:	2000033c 	.word	0x2000033c
 8001af0:	2000000e 	.word	0x2000000e
 8001af4:	200003a0 	.word	0x200003a0
 8001af8:	200003a4 	.word	0x200003a4
 8001afc:	200003a8 	.word	0x200003a8
 8001b00:	200003ac 	.word	0x200003ac
 8001b04:	0800b7d4 	.word	0x0800b7d4
 8001b08:	0800b7d8 	.word	0x0800b7d8
 8001b0c:	200003bc 	.word	0x200003bc
 8001b10:	0800b7e0 	.word	0x0800b7e0
 8001b14:	200003c8 	.word	0x200003c8
 8001b18:	0800b7e4 	.word	0x0800b7e4
 8001b1c:	0800b7e8 	.word	0x0800b7e8
 8001b20:	200003d4 	.word	0x200003d4
 8001b24:	0800b7f0 	.word	0x0800b7f0
 8001b28:	200003e0 	.word	0x200003e0
 8001b2c:	40011000 	.word	0x40011000

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b094      	sub	sp, #80	; 0x50
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3a:	2228      	movs	r2, #40	; 0x28
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f006 fa2d 	bl	8007f9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b72:	2302      	movs	r3, #2
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fbc8 	bl	800631c <HAL_RCC_OscConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b92:	f000 f859 	bl	8001c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b96:	230f      	movs	r3, #15
 8001b98:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fe34 	bl	8006820 <HAL_RCC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001bbe:	f000 f843 	bl	8001c48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f004 ffb4 	bl	8006b3c <HAL_RCCEx_PeriphCLKConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bda:	f000 f835 	bl	8001c48 <Error_Handler>
  }
}
 8001bde:	bf00      	nop
 8001be0:	3750      	adds	r7, #80	; 0x50
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <Device_Config>:

/* USER CODE BEGIN 4 */
void Device_Config(void){
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b095      	sub	sp, #84	; 0x54
 8001bec:	af14      	add	r7, sp, #80	; 0x50
	ltc2944_struct.adc_mode = 			Automatic_Mode;
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <Device_Config+0x50>)
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	701a      	strb	r2, [r3, #0]
	ltc2944_struct.alcc_mode = 			ALCC_Disable;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <Device_Config+0x50>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	705a      	strb	r2, [r3, #1]
	ltc2944_struct.sense_resistor = 	5;
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <Device_Config+0x50>)
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <Device_Config+0x54>)
 8001bfe:	605a      	str	r2, [r3, #4]
	ltc2944_struct.batt_capacity =		3000;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <Device_Config+0x50>)
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <Device_Config+0x58>)
 8001c04:	609a      	str	r2, [r3, #8]
	ltc2944_struct.i2c_handle = 		hi2c2;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <Device_Config+0x50>)
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <Device_Config+0x5c>)
 8001c0a:	330c      	adds	r3, #12
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	2254      	movs	r2, #84	; 0x54
 8001c10:	4618      	mov	r0, r3
 8001c12:	f006 fa52 	bl	80080ba <memcpy>

	LTC2944_Init(ltc2944_struct);
 8001c16:	4c08      	ldr	r4, [pc, #32]	; (8001c38 <Device_Config+0x50>)
 8001c18:	4668      	mov	r0, sp
 8001c1a:	f104 0310 	add.w	r3, r4, #16
 8001c1e:	2250      	movs	r2, #80	; 0x50
 8001c20:	4619      	mov	r1, r3
 8001c22:	f006 fa4a 	bl	80080ba <memcpy>
 8001c26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c2a:	f7ff fc3d 	bl	80014a8 <LTC2944_Init>
}
 8001c2e:	bf00      	nop
 8001c30:	3704      	adds	r7, #4
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000340 	.word	0x20000340
 8001c3c:	40a00000 	.word	0x40a00000
 8001c40:	453b8000 	.word	0x453b8000
 8001c44:	2000028c 	.word	0x2000028c

08001c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <Error_Handler+0x8>

08001c52 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
	...

08001c60 <ssd1306_WriteCommand>:
/*
 * DMA settings
 * ADD I2Cx_TX in normal mode. Byte | Byte
 * In NVIC Settings, Enable "I2Cx event interrupt"
 */
void ssd1306_WriteCommand(uint8_t byte) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001c6a:	bf00      	nop
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <ssd1306_WriteCommand+0x34>)
 8001c6e:	f002 fc95 	bl	800459c <HAL_I2C_GetState>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d1f9      	bne.n	8001c6c <ssd1306_WriteCommand+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
 8001c78:	2301      	movs	r3, #1
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	1dfb      	adds	r3, r7, #7
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2301      	movs	r3, #1
 8001c82:	2200      	movs	r2, #0
 8001c84:	2178      	movs	r1, #120	; 0x78
 8001c86:	4803      	ldr	r0, [pc, #12]	; (8001c94 <ssd1306_WriteCommand+0x34>)
 8001c88:	f002 f98a 	bl	8003fa0 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
#endif
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000238 	.word	0x20000238

08001c98 <ssd1306_WriteData>:


void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001ca2:	bf00      	nop
 8001ca4:	480a      	ldr	r0, [pc, #40]	; (8001cd0 <ssd1306_WriteData+0x38>)
 8001ca6:	f002 fc79 	bl	800459c <HAL_I2C_GetState>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d1f9      	bne.n	8001ca4 <ssd1306_WriteData+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2178      	movs	r1, #120	; 0x78
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <ssd1306_WriteData+0x38>)
 8001cc2:	f002 f96d 	bl	8003fa0 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
#endif
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000238 	.word	0x20000238

08001cd4 <HAL_I2C_MemTxCpltCallback>:


#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
	...

08001ce8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001cec:	f7ff ffb1 	bl	8001c52 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001cf0:	2064      	movs	r0, #100	; 0x64
 8001cf2:	f000 fc27 	bl	8002544 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f000 f9d6 	bl	80020a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001cfc:	2020      	movs	r0, #32
 8001cfe:	f7ff ffaf 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff ffac 	bl	8001c60 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d08:	20b0      	movs	r0, #176	; 0xb0
 8001d0a:	f7ff ffa9 	bl	8001c60 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d0e:	20c8      	movs	r0, #200	; 0xc8
 8001d10:	f7ff ffa6 	bl	8001c60 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff ffa3 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d1a:	2010      	movs	r0, #16
 8001d1c:	f7ff ffa0 	bl	8001c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d20:	2040      	movs	r0, #64	; 0x40
 8001d22:	f7ff ff9d 	bl	8001c60 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d26:	20ff      	movs	r0, #255	; 0xff
 8001d28:	f000 f9aa 	bl	8002080 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d2c:	20a1      	movs	r0, #161	; 0xa1
 8001d2e:	f7ff ff97 	bl	8001c60 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d32:	20a6      	movs	r0, #166	; 0xa6
 8001d34:	f7ff ff94 	bl	8001c60 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d38:	20a8      	movs	r0, #168	; 0xa8
 8001d3a:	f7ff ff91 	bl	8001c60 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d3e:	203f      	movs	r0, #63	; 0x3f
 8001d40:	f7ff ff8e 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d44:	20a4      	movs	r0, #164	; 0xa4
 8001d46:	f7ff ff8b 	bl	8001c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d4a:	20d3      	movs	r0, #211	; 0xd3
 8001d4c:	f7ff ff88 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff ff85 	bl	8001c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d56:	20d5      	movs	r0, #213	; 0xd5
 8001d58:	f7ff ff82 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d5c:	20f0      	movs	r0, #240	; 0xf0
 8001d5e:	f7ff ff7f 	bl	8001c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d62:	20d9      	movs	r0, #217	; 0xd9
 8001d64:	f7ff ff7c 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d68:	2022      	movs	r0, #34	; 0x22
 8001d6a:	f7ff ff79 	bl	8001c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d6e:	20da      	movs	r0, #218	; 0xda
 8001d70:	f7ff ff76 	bl	8001c60 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001d74:	2012      	movs	r0, #18
 8001d76:	f7ff ff73 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d7a:	20db      	movs	r0, #219	; 0xdb
 8001d7c:	f7ff ff70 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d80:	2020      	movs	r0, #32
 8001d82:	f7ff ff6d 	bl	8001c60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d86:	208d      	movs	r0, #141	; 0x8d
 8001d88:	f7ff ff6a 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d8c:	2014      	movs	r0, #20
 8001d8e:	f7ff ff67 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d92:	2001      	movs	r0, #1
 8001d94:	f000 f988 	bl	80020a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f000 f80f 	bl	8001dbc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001d9e:	f000 f82f 	bl	8001e00 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <ssd1306_Init+0xd0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <ssd1306_Init+0xd0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001dae:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <ssd1306_Init+0xd0>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	711a      	strb	r2, [r3, #4]
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200007f0 	.word	0x200007f0

08001dbc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	e00d      	b.n	8001de8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <ssd1306_Fill+0x1a>
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	e000      	b.n	8001dd8 <ssd1306_Fill+0x1c>
 8001dd6:	21ff      	movs	r1, #255	; 0xff
 8001dd8:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <ssd1306_Fill+0x40>)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	460a      	mov	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3301      	adds	r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dee:	d3ed      	bcc.n	8001dcc <ssd1306_Fill+0x10>
    }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	200003f0 	.word	0x200003f0

08001e00 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e06:	2300      	movs	r3, #0
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	e016      	b.n	8001e3a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	3b50      	subs	r3, #80	; 0x50
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff24 	bl	8001c60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f7ff ff21 	bl	8001c60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e1e:	2010      	movs	r0, #16
 8001e20:	f7ff ff1e 	bl	8001c60 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	01db      	lsls	r3, r3, #7
 8001e28:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <ssd1306_UpdateScreen+0x4c>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff32 	bl	8001c98 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	3301      	adds	r3, #1
 8001e38:	71fb      	strb	r3, [r7, #7]
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	d9e5      	bls.n	8001e0c <ssd1306_UpdateScreen+0xc>
    }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200003f0 	.word	0x200003f0

08001e50 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	71bb      	strb	r3, [r7, #6]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db3d      	blt.n	8001ee6 <ssd1306_DrawPixel+0x96>
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e6e:	d83a      	bhi.n	8001ee6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001e70:	797b      	ldrb	r3, [r7, #5]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d11a      	bne.n	8001eac <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	08db      	lsrs	r3, r3, #3
 8001e7c:	b2d8      	uxtb	r0, r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	01db      	lsls	r3, r3, #7
 8001e82:	4413      	add	r3, r2
 8001e84:	4a1a      	ldr	r2, [pc, #104]	; (8001ef0 <ssd1306_DrawPixel+0xa0>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	b25a      	sxtb	r2, r3
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b259      	sxtb	r1, r3
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	01db      	lsls	r3, r3, #7
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2c9      	uxtb	r1, r1
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <ssd1306_DrawPixel+0xa0>)
 8001ea8:	54d1      	strb	r1, [r2, r3]
 8001eaa:	e01d      	b.n	8001ee8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001eac:	79fa      	ldrb	r2, [r7, #7]
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	08db      	lsrs	r3, r3, #3
 8001eb2:	b2d8      	uxtb	r0, r3
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	01db      	lsls	r3, r3, #7
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <ssd1306_DrawPixel+0xa0>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	b25a      	sxtb	r2, r3
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	b25b      	sxtb	r3, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	b259      	sxtb	r1, r3
 8001ed6:	79fa      	ldrb	r2, [r7, #7]
 8001ed8:	4603      	mov	r3, r0
 8001eda:	01db      	lsls	r3, r3, #7
 8001edc:	4413      	add	r3, r2
 8001ede:	b2c9      	uxtb	r1, r1
 8001ee0:	4a03      	ldr	r2, [pc, #12]	; (8001ef0 <ssd1306_DrawPixel+0xa0>)
 8001ee2:	54d1      	strb	r1, [r2, r3]
 8001ee4:	e000      	b.n	8001ee8 <ssd1306_DrawPixel+0x98>
        return;
 8001ee6:	bf00      	nop
    }
}
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	200003f0 	.word	0x200003f0

08001ef4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4604      	mov	r4, r0
 8001efc:	1d38      	adds	r0, r7, #4
 8001efe:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f02:	461a      	mov	r2, r3
 8001f04:	4623      	mov	r3, r4
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b1f      	cmp	r3, #31
 8001f10:	d902      	bls.n	8001f18 <ssd1306_WriteChar+0x24>
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	2b7e      	cmp	r3, #126	; 0x7e
 8001f16:	d901      	bls.n	8001f1c <ssd1306_WriteChar+0x28>
        return 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e06d      	b.n	8001ff8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <ssd1306_WriteChar+0x10c>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	793b      	ldrb	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	2b80      	cmp	r3, #128	; 0x80
 8001f28:	dc06      	bgt.n	8001f38 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001f2a:	4b35      	ldr	r3, [pc, #212]	; (8002000 <ssd1306_WriteChar+0x10c>)
 8001f2c:	885b      	ldrh	r3, [r3, #2]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	797b      	ldrb	r3, [r7, #5]
 8001f32:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	dd01      	ble.n	8001f3c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e05d      	b.n	8001ff8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	e04c      	b.n	8001fdc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	3b20      	subs	r3, #32
 8001f48:	7979      	ldrb	r1, [r7, #5]
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4619      	mov	r1, r3
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	440b      	add	r3, r1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	e034      	b.n	8001fcc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d012      	beq.n	8001f98 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <ssd1306_WriteChar+0x10c>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b2d8      	uxtb	r0, r3
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <ssd1306_WriteChar+0x10c>)
 8001f82:	885b      	ldrh	r3, [r3, #2]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	7bba      	ldrb	r2, [r7, #14]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7ff ff5d 	bl	8001e50 <ssd1306_DrawPixel>
 8001f96:	e016      	b.n	8001fc6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <ssd1306_WriteChar+0x10c>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	b2d8      	uxtb	r0, r3
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <ssd1306_WriteChar+0x10c>)
 8001fa8:	885b      	ldrh	r3, [r3, #2]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b2d9      	uxtb	r1, r3
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf0c      	ite	eq
 8001fba:	2301      	moveq	r3, #1
 8001fbc:	2300      	movne	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f7ff ff45 	bl	8001e50 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	793b      	ldrb	r3, [r7, #4]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d3c5      	bcc.n	8001f62 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	797b      	ldrb	r3, [r7, #5]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d3ad      	bcc.n	8001f42 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <ssd1306_WriteChar+0x10c>)
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	793b      	ldrb	r3, [r7, #4]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b03      	ldr	r3, [pc, #12]	; (8002000 <ssd1306_WriteChar+0x10c>)
 8001ff4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3724      	adds	r7, #36	; 0x24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}
 8002000:	200007f0 	.word	0x200007f0

08002004 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	1d38      	adds	r0, r7, #4
 800200e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002012:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002014:	e012      	b.n	800203c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	7818      	ldrb	r0, [r3, #0]
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	1d3a      	adds	r2, r7, #4
 800201e:	ca06      	ldmia	r2, {r1, r2}
 8002020:	f7ff ff68 	bl	8001ef4 <ssd1306_WriteChar>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d002      	beq.n	8002036 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	e008      	b.n	8002048 <ssd1306_WriteString+0x44>
        }
        str++;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3301      	adds	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e8      	bne.n	8002016 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	781b      	ldrb	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	460a      	mov	r2, r1
 800205a:	71fb      	strb	r3, [r7, #7]
 800205c:	4613      	mov	r3, r2
 800205e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <ssd1306_SetCursor+0x2c>)
 8002066:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002068:	79bb      	ldrb	r3, [r7, #6]
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <ssd1306_SetCursor+0x2c>)
 800206e:	805a      	strh	r2, [r3, #2]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	200007f0 	.word	0x200007f0

08002080 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800208a:	2381      	movs	r3, #129	; 0x81
 800208c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fde5 	bl	8001c60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fde1 	bl	8001c60 <ssd1306_WriteCommand>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80020b8:	23af      	movs	r3, #175	; 0xaf
 80020ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <ssd1306_SetDisplayOn+0x38>)
 80020be:	2201      	movs	r2, #1
 80020c0:	715a      	strb	r2, [r3, #5]
 80020c2:	e004      	b.n	80020ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80020c4:	23ae      	movs	r3, #174	; 0xae
 80020c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <ssd1306_SetDisplayOn+0x38>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fdc5 	bl	8001c60 <ssd1306_WriteCommand>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200007f0 	.word	0x200007f0

080020e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_MspInit+0x5c>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_MspInit+0x5c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6193      	str	r3, [r2, #24]
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_MspInit+0x5c>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_MspInit+0x5c>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <HAL_MspInit+0x5c>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_MspInit+0x5c>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_MspInit+0x60>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_MspInit+0x60>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000

08002148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800214c:	e7fe      	b.n	800214c <NMI_Handler+0x4>

0800214e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <HardFault_Handler+0x4>

08002154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <MemManage_Handler+0x4>

0800215a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <BusFault_Handler+0x4>

08002160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <UsageFault_Handler+0x4>

08002166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218e:	f000 f9bd 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <DMA1_Channel6_IRQHandler+0x10>)
 800219e:	f000 ff4f 	bl	8003040 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200002e0 	.word	0x200002e0

080021ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <I2C1_EV_IRQHandler+0x10>)
 80021b2:	f002 f84b 	bl	800424c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000238 	.word	0x20000238

080021c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return 1;
 80021c4:	2301      	movs	r3, #1
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <_kill>:

int _kill(int pid, int sig)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021d8:	f005 ff34 	bl	8008044 <__errno>
 80021dc:	4603      	mov	r3, r0
 80021de:	2216      	movs	r2, #22
 80021e0:	601a      	str	r2, [r3, #0]
  return -1;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_exit>:

void _exit (int status)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021f6:	f04f 31ff 	mov.w	r1, #4294967295
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffe7 	bl	80021ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8002200:	e7fe      	b.n	8002200 <_exit+0x12>

08002202 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e00a      	b.n	800222a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002214:	f3af 8000 	nop.w
 8002218:	4601      	mov	r1, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	60ba      	str	r2, [r7, #8]
 8002220:	b2ca      	uxtb	r2, r1
 8002222:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	dbf0      	blt.n	8002214 <_read+0x12>
  }

  return len;
 8002232:	687b      	ldr	r3, [r7, #4]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e009      	b.n	8002262 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	60ba      	str	r2, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fb2e 	bl	80018b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	dbf1      	blt.n	800224e <_write+0x12>
  }
  return len;
 800226a:	687b      	ldr	r3, [r7, #4]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_close>:

int _close(int file)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800229a:	605a      	str	r2, [r3, #4]
  return 0;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <_isatty>:

int _isatty(int file)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022b0:	2301      	movs	r3, #1
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f005 fe9e 	bl	8008044 <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20005000 	.word	0x20005000
 8002334:	00000400 	.word	0x00000400
 8002338:	200007f8 	.word	0x200007f8
 800233c:	20000998 	.word	0x20000998

08002340 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_USART2_UART_Init+0x4c>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <MX_USART2_UART_Init+0x50>)
 8002354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <MX_USART2_UART_Init+0x4c>)
 8002358:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800235c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_USART2_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_USART2_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <MX_USART2_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_USART2_UART_Init+0x4c>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <MX_USART2_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_USART2_UART_Init+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_USART2_UART_Init+0x4c>)
 8002384:	f004 fc90 	bl	8006ca8 <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800238e:	f7ff fc5b 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200007fc 	.word	0x200007fc
 800239c:	40004400 	.word	0x40004400

080023a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1b      	ldr	r2, [pc, #108]	; (8002428 <HAL_UART_MspInit+0x88>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d12f      	bne.n	8002420 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_UART_MspInit+0x8c>)
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	4a19      	ldr	r2, [pc, #100]	; (800242c <HAL_UART_MspInit+0x8c>)
 80023c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ca:	61d3      	str	r3, [r2, #28]
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_UART_MspInit+0x8c>)
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <HAL_UART_MspInit+0x8c>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a13      	ldr	r2, [pc, #76]	; (800242c <HAL_UART_MspInit+0x8c>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_UART_MspInit+0x8c>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023f0:	2304      	movs	r3, #4
 80023f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	4619      	mov	r1, r3
 8002402:	480b      	ldr	r0, [pc, #44]	; (8002430 <HAL_UART_MspInit+0x90>)
 8002404:	f000 ff5c 	bl	80032c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002408:	2308      	movs	r3, #8
 800240a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	4619      	mov	r1, r3
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_UART_MspInit+0x90>)
 800241c:	f000 ff50 	bl	80032c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002420:	bf00      	nop
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40004400 	.word	0x40004400
 800242c:	40021000 	.word	0x40021000
 8002430:	40010800 	.word	0x40010800

08002434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002434:	f7ff ff84 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002438:	480b      	ldr	r0, [pc, #44]	; (8002468 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800243a:	490c      	ldr	r1, [pc, #48]	; (800246c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800243c:	4a0c      	ldr	r2, [pc, #48]	; (8002470 <LoopFillZerobss+0x16>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002440:	e002      	b.n	8002448 <LoopCopyDataInit>

08002442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002446:	3304      	adds	r3, #4

08002448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800244c:	d3f9      	bcc.n	8002442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002450:	4c09      	ldr	r4, [pc, #36]	; (8002478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002454:	e001      	b.n	800245a <LoopFillZerobss>

08002456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002458:	3204      	adds	r2, #4

0800245a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800245e:	f005 fdf7 	bl	8008050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002462:	f7ff fa3b 	bl	80018dc <main>
  bx lr
 8002466:	4770      	bx	lr
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002470:	0800c3c0 	.word	0x0800c3c0
  ldr r2, =_sbss
 8002474:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002478:	20000994 	.word	0x20000994

0800247c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC1_2_IRQHandler>
	...

08002480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_Init+0x28>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_Init+0x28>)
 800248a:	f043 0310 	orr.w	r3, r3, #16
 800248e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002490:	2003      	movs	r0, #3
 8002492:	f000 fc61 	bl	8002d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002496:	200f      	movs	r0, #15
 8002498:	f000 f808 	bl	80024ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800249c:	f7ff fe22 	bl	80020e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40022000 	.word	0x40022000

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0x54>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x58>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fc79 	bl	8002dc2 <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00e      	b.n	80024f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b0f      	cmp	r3, #15
 80024de:	d80a      	bhi.n	80024f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e0:	2200      	movs	r2, #0
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f000 fc41 	bl	8002d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <HAL_InitTick+0x5c>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000018 	.word	0x20000018
 8002504:	20000020 	.word	0x20000020
 8002508:	2000001c 	.word	0x2000001c

0800250c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_IncTick+0x1c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x20>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_IncTick+0x20>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	20000020 	.word	0x20000020
 800252c:	20000844 	.word	0x20000844

08002530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b02      	ldr	r3, [pc, #8]	; (8002540 <HAL_GetTick+0x10>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	20000844 	.word	0x20000844

08002544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800254c:	f7ff fff0 	bl	8002530 <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d005      	beq.n	800256a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_Delay+0x44>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256a:	bf00      	nop
 800256c:	f7ff ffe0 	bl	8002530 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8f7      	bhi.n	800256c <HAL_Delay+0x28>
  {
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000020 	.word	0x20000020

0800258c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0be      	b.n	800272c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fdc0 	bl	8001150 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fab3 	bl	8002b3c <ADC_ConversionStop_Disable>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 8099 	bne.w	800271a <HAL_ADC_Init+0x18e>
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f040 8095 	bne.w	800271a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	f043 0202 	orr.w	r2, r3, #2
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800260c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7b1b      	ldrb	r3, [r3, #12]
 8002612:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002614:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	4313      	orrs	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002624:	d003      	beq.n	800262e <HAL_ADC_Init+0xa2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_ADC_Init+0xa8>
 800262e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002632:	e000      	b.n	8002636 <HAL_ADC_Init+0xaa>
 8002634:	2300      	movs	r3, #0
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7d1b      	ldrb	r3, [r3, #20]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d119      	bne.n	8002678 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7b1b      	ldrb	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d109      	bne.n	8002660 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	3b01      	subs	r3, #1
 8002652:	035a      	lsls	r2, r3, #13
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	e00b      	b.n	8002678 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	f043 0220 	orr.w	r2, r3, #32
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	4b28      	ldr	r3, [pc, #160]	; (8002734 <HAL_ADC_Init+0x1a8>)
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	430b      	orrs	r3, r1
 800269e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a8:	d003      	beq.n	80026b2 <HAL_ADC_Init+0x126>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d104      	bne.n	80026bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	051b      	lsls	r3, r3, #20
 80026ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_ADC_Init+0x1ac>)
 80026d8:	4013      	ands	r3, r2
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d10b      	bne.n	80026f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026f6:	e018      	b.n	800272a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f023 0312 	bic.w	r3, r3, #18
 8002700:	f043 0210 	orr.w	r2, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002718:	e007      	b.n	800272a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800272a:	7dfb      	ldrb	r3, [r7, #23]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	ffe1f7fd 	.word	0xffe1f7fd
 8002738:	ff1f0efe 	.word	0xff1f0efe

0800273c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_ADC_Start+0x1a>
 8002752:	2302      	movs	r3, #2
 8002754:	e098      	b.n	8002888 <HAL_ADC_Start+0x14c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f992 	bl	8002a88 <ADC_Enable>
 8002764:	4603      	mov	r3, r0
 8002766:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f040 8087 	bne.w	800287e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a41      	ldr	r2, [pc, #260]	; (8002890 <HAL_ADC_Start+0x154>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d105      	bne.n	800279a <HAL_ADC_Start+0x5e>
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_ADC_Start+0x158>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d115      	bne.n	80027c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d026      	beq.n	8002802 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027c4:	e01d      	b.n	8002802 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <HAL_ADC_Start+0x158>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_ADC_Start+0xaa>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <HAL_ADC_Start+0x154>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10d      	bne.n	8002802 <HAL_ADC_Start+0xc6>
 80027e6:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_ADC_Start+0x158>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	f023 0206 	bic.w	r2, r3, #6
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
 800281a:	e002      	b.n	8002822 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f06f 0202 	mvn.w	r2, #2
 8002832:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800283e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002842:	d113      	bne.n	800286c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_ADC_Start+0x154>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d105      	bne.n	800285a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_ADC_Start+0x158>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	e00c      	b.n	8002886 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	e003      	b.n	8002886 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40012800 	.word	0x40012800
 8002894:	40012400 	.word	0x40012400

08002898 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x20>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e0dc      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x1da>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b06      	cmp	r3, #6
 80028c6:	d81c      	bhi.n	8002902 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	3b05      	subs	r3, #5
 80028da:	221f      	movs	r2, #31
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	4019      	ands	r1, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	3b05      	subs	r3, #5
 80028f4:	fa00 f203 	lsl.w	r2, r0, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002900:	e03c      	b.n	800297c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d81c      	bhi.n	8002944 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b23      	subs	r3, #35	; 0x23
 800291c:	221f      	movs	r2, #31
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	4019      	ands	r1, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b23      	subs	r3, #35	; 0x23
 8002936:	fa00 f203 	lsl.w	r2, r0, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
 8002942:	e01b      	b.n	800297c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	3b41      	subs	r3, #65	; 0x41
 8002956:	221f      	movs	r2, #31
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	4019      	ands	r1, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	3b41      	subs	r3, #65	; 0x41
 8002970:	fa00 f203 	lsl.w	r2, r0, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b09      	cmp	r3, #9
 8002982:	d91c      	bls.n	80029be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68d9      	ldr	r1, [r3, #12]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	3b1e      	subs	r3, #30
 8002996:	2207      	movs	r2, #7
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	4019      	ands	r1, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6898      	ldr	r0, [r3, #8]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	3b1e      	subs	r3, #30
 80029b0:	fa00 f203 	lsl.w	r2, r0, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]
 80029bc:	e019      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6919      	ldr	r1, [r3, #16]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	2207      	movs	r2, #7
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	4019      	ands	r1, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6898      	ldr	r0, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d003      	beq.n	8002a02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029fe:	2b11      	cmp	r3, #17
 8002a00:	d132      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <HAL_ADC_ConfigChannel+0x1e4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d125      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d126      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d11a      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	0c9a      	lsrs	r2, r3, #18
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x1b2>
 8002a56:	e007      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	40012400 	.word	0x40012400
 8002a80:	20000018 	.word	0x20000018
 8002a84:	431bde83 	.word	0x431bde83

08002a88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d040      	beq.n	8002b28 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <ADC_Enable+0xac>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <ADC_Enable+0xb0>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	0c9b      	lsrs	r3, r3, #18
 8002ac2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ac4:	e002      	b.n	8002acc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f9      	bne.n	8002ac6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ad2:	f7ff fd2d 	bl	8002530 <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ad8:	e01f      	b.n	8002b1a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ada:	f7ff fd29 	bl	8002530 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d918      	bls.n	8002b1a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d011      	beq.n	8002b1a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	f043 0210 	orr.w	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	f043 0201 	orr.w	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e007      	b.n	8002b2a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d1d8      	bne.n	8002ada <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000018 	.word	0x20000018
 8002b38:	431bde83 	.word	0x431bde83

08002b3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d12e      	bne.n	8002bb4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b66:	f7ff fce3 	bl	8002530 <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b6c:	e01b      	b.n	8002ba6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b6e:	f7ff fcdf 	bl	8002530 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d914      	bls.n	8002ba6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d10d      	bne.n	8002ba6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e007      	b.n	8002bb6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d0dc      	beq.n	8002b6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf2:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	60d3      	str	r3, [r2, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <__NVIC_GetPriorityGrouping+0x18>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 0307 	and.w	r3, r3, #7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0b      	blt.n	8002c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4906      	ldr	r1, [pc, #24]	; (8002c58 <__NVIC_EnableIRQ+0x34>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2001      	movs	r0, #1
 8002c46:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	; (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	; 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf28      	it	cs
 8002cce:	2304      	movcs	r3, #4
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
         );
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	; 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d24:	d301      	bcc.n	8002d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00f      	b.n	8002d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <SysTick_Config+0x40>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d32:	210f      	movs	r1, #15
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f7ff ff90 	bl	8002c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <SysTick_Config+0x40>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <SysTick_Config+0x40>)
 8002d44:	2207      	movs	r2, #7
 8002d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	e000e010 	.word	0xe000e010

08002d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ff2d 	bl	8002bc0 <__NVIC_SetPriorityGrouping>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d80:	f7ff ff42 	bl	8002c08 <__NVIC_GetPriorityGrouping>
 8002d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f7ff ff90 	bl	8002cb0 <NVIC_EncodePriority>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff5f 	bl	8002c5c <__NVIC_SetPriority>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff35 	bl	8002c24 <__NVIC_EnableIRQ>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ffa2 	bl	8002d14 <SysTick_Config>
 8002dd0:	4603      	mov	r3, r0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e043      	b.n	8002e7a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_DMA_Init+0xa8>)
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a22      	ldr	r2, [pc, #136]	; (8002e88 <HAL_DMA_Init+0xac>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	009a      	lsls	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_DMA_Init+0xb0>)
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002e2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	bffdfff8 	.word	0xbffdfff8
 8002e88:	cccccccd 	.word	0xcccccccd
 8002e8c:	40020000 	.word	0x40020000

08002e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Start_IT+0x20>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e04b      	b.n	8002f48 <HAL_DMA_Start_IT+0xb8>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d13a      	bne.n	8002f3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f9bc 	bl	8003266 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 020e 	orr.w	r2, r2, #14
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e00f      	b.n	8002f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 020a 	orr.w	r2, r2, #10
 8002f26:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e005      	b.n	8002f46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d005      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
 8002f72:	e051      	b.n	8003018 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 020e 	bic.w	r2, r2, #14
 8002f82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_DMA_Abort_IT+0xd4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d029      	beq.n	8002ff2 <HAL_DMA_Abort_IT+0xa2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a21      	ldr	r2, [pc, #132]	; (8003028 <HAL_DMA_Abort_IT+0xd8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_Abort_IT+0x9e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1f      	ldr	r2, [pc, #124]	; (800302c <HAL_DMA_Abort_IT+0xdc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01a      	beq.n	8002fe8 <HAL_DMA_Abort_IT+0x98>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <HAL_DMA_Abort_IT+0xe0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d012      	beq.n	8002fe2 <HAL_DMA_Abort_IT+0x92>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_DMA_Abort_IT+0xe4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00a      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x8c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <HAL_DMA_Abort_IT+0xe8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d102      	bne.n	8002fd6 <HAL_DMA_Abort_IT+0x86>
 8002fd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fd4:	e00e      	b.n	8002ff4 <HAL_DMA_Abort_IT+0xa4>
 8002fd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fda:	e00b      	b.n	8002ff4 <HAL_DMA_Abort_IT+0xa4>
 8002fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe0:	e008      	b.n	8002ff4 <HAL_DMA_Abort_IT+0xa4>
 8002fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe6:	e005      	b.n	8002ff4 <HAL_DMA_Abort_IT+0xa4>
 8002fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fec:	e002      	b.n	8002ff4 <HAL_DMA_Abort_IT+0xa4>
 8002fee:	2310      	movs	r3, #16
 8002ff0:	e000      	b.n	8002ff4 <HAL_DMA_Abort_IT+0xa4>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_DMA_Abort_IT+0xec>)
 8002ff6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
    } 
  }
  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40020008 	.word	0x40020008
 8003028:	4002001c 	.word	0x4002001c
 800302c:	40020030 	.word	0x40020030
 8003030:	40020044 	.word	0x40020044
 8003034:	40020058 	.word	0x40020058
 8003038:	4002006c 	.word	0x4002006c
 800303c:	40020000 	.word	0x40020000

08003040 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2204      	movs	r2, #4
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d04f      	beq.n	8003108 <HAL_DMA_IRQHandler+0xc8>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d04a      	beq.n	8003108 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a66      	ldr	r2, [pc, #408]	; (8003230 <HAL_DMA_IRQHandler+0x1f0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d029      	beq.n	80030ee <HAL_DMA_IRQHandler+0xae>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a65      	ldr	r2, [pc, #404]	; (8003234 <HAL_DMA_IRQHandler+0x1f4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <HAL_DMA_IRQHandler+0xaa>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a63      	ldr	r2, [pc, #396]	; (8003238 <HAL_DMA_IRQHandler+0x1f8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01a      	beq.n	80030e4 <HAL_DMA_IRQHandler+0xa4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a62      	ldr	r2, [pc, #392]	; (800323c <HAL_DMA_IRQHandler+0x1fc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d012      	beq.n	80030de <HAL_DMA_IRQHandler+0x9e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a60      	ldr	r2, [pc, #384]	; (8003240 <HAL_DMA_IRQHandler+0x200>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00a      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x98>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5f      	ldr	r2, [pc, #380]	; (8003244 <HAL_DMA_IRQHandler+0x204>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d102      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x92>
 80030cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030d0:	e00e      	b.n	80030f0 <HAL_DMA_IRQHandler+0xb0>
 80030d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030d6:	e00b      	b.n	80030f0 <HAL_DMA_IRQHandler+0xb0>
 80030d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80030dc:	e008      	b.n	80030f0 <HAL_DMA_IRQHandler+0xb0>
 80030de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030e2:	e005      	b.n	80030f0 <HAL_DMA_IRQHandler+0xb0>
 80030e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e8:	e002      	b.n	80030f0 <HAL_DMA_IRQHandler+0xb0>
 80030ea:	2340      	movs	r3, #64	; 0x40
 80030ec:	e000      	b.n	80030f0 <HAL_DMA_IRQHandler+0xb0>
 80030ee:	2304      	movs	r3, #4
 80030f0:	4a55      	ldr	r2, [pc, #340]	; (8003248 <HAL_DMA_IRQHandler+0x208>)
 80030f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8094 	beq.w	8003226 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003106:	e08e      	b.n	8003226 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	2202      	movs	r2, #2
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d056      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x186>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d051      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 020a 	bic.w	r2, r2, #10
 800313e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a38      	ldr	r2, [pc, #224]	; (8003230 <HAL_DMA_IRQHandler+0x1f0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d029      	beq.n	80031a6 <HAL_DMA_IRQHandler+0x166>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a37      	ldr	r2, [pc, #220]	; (8003234 <HAL_DMA_IRQHandler+0x1f4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d022      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x162>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a35      	ldr	r2, [pc, #212]	; (8003238 <HAL_DMA_IRQHandler+0x1f8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01a      	beq.n	800319c <HAL_DMA_IRQHandler+0x15c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a34      	ldr	r2, [pc, #208]	; (800323c <HAL_DMA_IRQHandler+0x1fc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d012      	beq.n	8003196 <HAL_DMA_IRQHandler+0x156>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a32      	ldr	r2, [pc, #200]	; (8003240 <HAL_DMA_IRQHandler+0x200>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00a      	beq.n	8003190 <HAL_DMA_IRQHandler+0x150>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a31      	ldr	r2, [pc, #196]	; (8003244 <HAL_DMA_IRQHandler+0x204>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d102      	bne.n	800318a <HAL_DMA_IRQHandler+0x14a>
 8003184:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003188:	e00e      	b.n	80031a8 <HAL_DMA_IRQHandler+0x168>
 800318a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318e:	e00b      	b.n	80031a8 <HAL_DMA_IRQHandler+0x168>
 8003190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003194:	e008      	b.n	80031a8 <HAL_DMA_IRQHandler+0x168>
 8003196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800319a:	e005      	b.n	80031a8 <HAL_DMA_IRQHandler+0x168>
 800319c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a0:	e002      	b.n	80031a8 <HAL_DMA_IRQHandler+0x168>
 80031a2:	2320      	movs	r3, #32
 80031a4:	e000      	b.n	80031a8 <HAL_DMA_IRQHandler+0x168>
 80031a6:	2302      	movs	r3, #2
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <HAL_DMA_IRQHandler+0x208>)
 80031aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d034      	beq.n	8003226 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031c4:	e02f      	b.n	8003226 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2208      	movs	r2, #8
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d028      	beq.n	8003228 <HAL_DMA_IRQHandler+0x1e8>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d023      	beq.n	8003228 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 020e 	bic.w	r2, r2, #14
 80031ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
    }
  }
  return;
 8003226:	bf00      	nop
 8003228:	bf00      	nop
}
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40020008 	.word	0x40020008
 8003234:	4002001c 	.word	0x4002001c
 8003238:	40020030 	.word	0x40020030
 800323c:	40020044 	.word	0x40020044
 8003240:	40020058 	.word	0x40020058
 8003244:	4002006c 	.word	0x4002006c
 8003248:	40020000 	.word	0x40020000

0800324c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800325a:	b2db      	uxtb	r3, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	2101      	movs	r1, #1
 800327e:	fa01 f202 	lsl.w	r2, r1, r2
 8003282:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b10      	cmp	r3, #16
 8003292:	d108      	bne.n	80032a6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032a4:	e007      	b.n	80032b6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	60da      	str	r2, [r3, #12]
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b08b      	sub	sp, #44	; 0x2c
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d2:	e169      	b.n	80035a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032d4:	2201      	movs	r2, #1
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f040 8158 	bne.w	80035a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a9a      	ldr	r2, [pc, #616]	; (8003560 <HAL_GPIO_Init+0x2a0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d05e      	beq.n	80033ba <HAL_GPIO_Init+0xfa>
 80032fc:	4a98      	ldr	r2, [pc, #608]	; (8003560 <HAL_GPIO_Init+0x2a0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d875      	bhi.n	80033ee <HAL_GPIO_Init+0x12e>
 8003302:	4a98      	ldr	r2, [pc, #608]	; (8003564 <HAL_GPIO_Init+0x2a4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d058      	beq.n	80033ba <HAL_GPIO_Init+0xfa>
 8003308:	4a96      	ldr	r2, [pc, #600]	; (8003564 <HAL_GPIO_Init+0x2a4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d86f      	bhi.n	80033ee <HAL_GPIO_Init+0x12e>
 800330e:	4a96      	ldr	r2, [pc, #600]	; (8003568 <HAL_GPIO_Init+0x2a8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d052      	beq.n	80033ba <HAL_GPIO_Init+0xfa>
 8003314:	4a94      	ldr	r2, [pc, #592]	; (8003568 <HAL_GPIO_Init+0x2a8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d869      	bhi.n	80033ee <HAL_GPIO_Init+0x12e>
 800331a:	4a94      	ldr	r2, [pc, #592]	; (800356c <HAL_GPIO_Init+0x2ac>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d04c      	beq.n	80033ba <HAL_GPIO_Init+0xfa>
 8003320:	4a92      	ldr	r2, [pc, #584]	; (800356c <HAL_GPIO_Init+0x2ac>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d863      	bhi.n	80033ee <HAL_GPIO_Init+0x12e>
 8003326:	4a92      	ldr	r2, [pc, #584]	; (8003570 <HAL_GPIO_Init+0x2b0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d046      	beq.n	80033ba <HAL_GPIO_Init+0xfa>
 800332c:	4a90      	ldr	r2, [pc, #576]	; (8003570 <HAL_GPIO_Init+0x2b0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d85d      	bhi.n	80033ee <HAL_GPIO_Init+0x12e>
 8003332:	2b12      	cmp	r3, #18
 8003334:	d82a      	bhi.n	800338c <HAL_GPIO_Init+0xcc>
 8003336:	2b12      	cmp	r3, #18
 8003338:	d859      	bhi.n	80033ee <HAL_GPIO_Init+0x12e>
 800333a:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <HAL_GPIO_Init+0x80>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	080033bb 	.word	0x080033bb
 8003344:	08003395 	.word	0x08003395
 8003348:	080033a7 	.word	0x080033a7
 800334c:	080033e9 	.word	0x080033e9
 8003350:	080033ef 	.word	0x080033ef
 8003354:	080033ef 	.word	0x080033ef
 8003358:	080033ef 	.word	0x080033ef
 800335c:	080033ef 	.word	0x080033ef
 8003360:	080033ef 	.word	0x080033ef
 8003364:	080033ef 	.word	0x080033ef
 8003368:	080033ef 	.word	0x080033ef
 800336c:	080033ef 	.word	0x080033ef
 8003370:	080033ef 	.word	0x080033ef
 8003374:	080033ef 	.word	0x080033ef
 8003378:	080033ef 	.word	0x080033ef
 800337c:	080033ef 	.word	0x080033ef
 8003380:	080033ef 	.word	0x080033ef
 8003384:	0800339d 	.word	0x0800339d
 8003388:	080033b1 	.word	0x080033b1
 800338c:	4a79      	ldr	r2, [pc, #484]	; (8003574 <HAL_GPIO_Init+0x2b4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003392:	e02c      	b.n	80033ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	623b      	str	r3, [r7, #32]
          break;
 800339a:	e029      	b.n	80033f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	3304      	adds	r3, #4
 80033a2:	623b      	str	r3, [r7, #32]
          break;
 80033a4:	e024      	b.n	80033f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	3308      	adds	r3, #8
 80033ac:	623b      	str	r3, [r7, #32]
          break;
 80033ae:	e01f      	b.n	80033f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	330c      	adds	r3, #12
 80033b6:	623b      	str	r3, [r7, #32]
          break;
 80033b8:	e01a      	b.n	80033f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033c2:	2304      	movs	r3, #4
 80033c4:	623b      	str	r3, [r7, #32]
          break;
 80033c6:	e013      	b.n	80033f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033d0:	2308      	movs	r3, #8
 80033d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	611a      	str	r2, [r3, #16]
          break;
 80033da:	e009      	b.n	80033f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033dc:	2308      	movs	r3, #8
 80033de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	615a      	str	r2, [r3, #20]
          break;
 80033e6:	e003      	b.n	80033f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033e8:	2300      	movs	r3, #0
 80033ea:	623b      	str	r3, [r7, #32]
          break;
 80033ec:	e000      	b.n	80033f0 <HAL_GPIO_Init+0x130>
          break;
 80033ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2bff      	cmp	r3, #255	; 0xff
 80033f4:	d801      	bhi.n	80033fa <HAL_GPIO_Init+0x13a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	e001      	b.n	80033fe <HAL_GPIO_Init+0x13e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2bff      	cmp	r3, #255	; 0xff
 8003404:	d802      	bhi.n	800340c <HAL_GPIO_Init+0x14c>
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	e002      	b.n	8003412 <HAL_GPIO_Init+0x152>
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	3b08      	subs	r3, #8
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	210f      	movs	r1, #15
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	6a39      	ldr	r1, [r7, #32]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	431a      	orrs	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80b1 	beq.w	80035a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003440:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <HAL_GPIO_Init+0x2b8>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4a4c      	ldr	r2, [pc, #304]	; (8003578 <HAL_GPIO_Init+0x2b8>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6193      	str	r3, [r2, #24]
 800344c:	4b4a      	ldr	r3, [pc, #296]	; (8003578 <HAL_GPIO_Init+0x2b8>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003458:	4a48      	ldr	r2, [pc, #288]	; (800357c <HAL_GPIO_Init+0x2bc>)
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	3302      	adds	r3, #2
 8003460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	220f      	movs	r2, #15
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4013      	ands	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a40      	ldr	r2, [pc, #256]	; (8003580 <HAL_GPIO_Init+0x2c0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <HAL_GPIO_Init+0x1ec>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3f      	ldr	r2, [pc, #252]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00d      	beq.n	80034a8 <HAL_GPIO_Init+0x1e8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a3e      	ldr	r2, [pc, #248]	; (8003588 <HAL_GPIO_Init+0x2c8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <HAL_GPIO_Init+0x1e4>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a3d      	ldr	r2, [pc, #244]	; (800358c <HAL_GPIO_Init+0x2cc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_GPIO_Init+0x1e0>
 800349c:	2303      	movs	r3, #3
 800349e:	e006      	b.n	80034ae <HAL_GPIO_Init+0x1ee>
 80034a0:	2304      	movs	r3, #4
 80034a2:	e004      	b.n	80034ae <HAL_GPIO_Init+0x1ee>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e002      	b.n	80034ae <HAL_GPIO_Init+0x1ee>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <HAL_GPIO_Init+0x1ee>
 80034ac:	2300      	movs	r3, #0
 80034ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b0:	f002 0203 	and.w	r2, r2, #3
 80034b4:	0092      	lsls	r2, r2, #2
 80034b6:	4093      	lsls	r3, r2
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034be:	492f      	ldr	r1, [pc, #188]	; (800357c <HAL_GPIO_Init+0x2bc>)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d006      	beq.n	80034e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034d8:	4b2d      	ldr	r3, [pc, #180]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	492c      	ldr	r1, [pc, #176]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034e6:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	4928      	ldr	r1, [pc, #160]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	4922      	ldr	r1, [pc, #136]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	60cb      	str	r3, [r1, #12]
 800350c:	e006      	b.n	800351c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	43db      	mvns	r3, r3
 8003516:	491e      	ldr	r1, [pc, #120]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 8003518:	4013      	ands	r3, r2
 800351a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d006      	beq.n	8003536 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	4918      	ldr	r1, [pc, #96]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
 8003534:	e006      	b.n	8003544 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	43db      	mvns	r3, r3
 800353e:	4914      	ldr	r1, [pc, #80]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 8003540:	4013      	ands	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d021      	beq.n	8003594 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	490e      	ldr	r1, [pc, #56]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
 800355c:	e021      	b.n	80035a2 <HAL_GPIO_Init+0x2e2>
 800355e:	bf00      	nop
 8003560:	10320000 	.word	0x10320000
 8003564:	10310000 	.word	0x10310000
 8003568:	10220000 	.word	0x10220000
 800356c:	10210000 	.word	0x10210000
 8003570:	10120000 	.word	0x10120000
 8003574:	10110000 	.word	0x10110000
 8003578:	40021000 	.word	0x40021000
 800357c:	40010000 	.word	0x40010000
 8003580:	40010800 	.word	0x40010800
 8003584:	40010c00 	.word	0x40010c00
 8003588:	40011000 	.word	0x40011000
 800358c:	40011400 	.word	0x40011400
 8003590:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_GPIO_Init+0x304>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	43db      	mvns	r3, r3
 800359c:	4909      	ldr	r1, [pc, #36]	; (80035c4 <HAL_GPIO_Init+0x304>)
 800359e:	4013      	ands	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	3301      	adds	r3, #1
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f47f ae8e 	bne.w	80032d4 <HAL_GPIO_Init+0x14>
  }
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	372c      	adds	r7, #44	; 0x2c
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr
 80035c4:	40010400 	.word	0x40010400

080035c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
 80035d4:	4613      	mov	r3, r2
 80035d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035e4:	e003      	b.n	80035ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035e6:	887b      	ldrh	r3, [r7, #2]
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4013      	ands	r3, r2
 8003610:	041a      	lsls	r2, r3, #16
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43d9      	mvns	r1, r3
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	400b      	ands	r3, r1
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	611a      	str	r2, [r3, #16]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
	...

0800362c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e12b      	b.n	8003896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fe8a 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800367e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800368e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003690:	f003 fa0e 	bl	8006ab0 <HAL_RCC_GetPCLK1Freq>
 8003694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a81      	ldr	r2, [pc, #516]	; (80038a0 <HAL_I2C_Init+0x274>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d807      	bhi.n	80036b0 <HAL_I2C_Init+0x84>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a80      	ldr	r2, [pc, #512]	; (80038a4 <HAL_I2C_Init+0x278>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e006      	b.n	80036be <HAL_I2C_Init+0x92>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a7d      	ldr	r2, [pc, #500]	; (80038a8 <HAL_I2C_Init+0x27c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	bf94      	ite	ls
 80036b8:	2301      	movls	r3, #1
 80036ba:	2300      	movhi	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0e7      	b.n	8003896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a78      	ldr	r2, [pc, #480]	; (80038ac <HAL_I2C_Init+0x280>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0c9b      	lsrs	r3, r3, #18
 80036d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a6a      	ldr	r2, [pc, #424]	; (80038a0 <HAL_I2C_Init+0x274>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d802      	bhi.n	8003700 <HAL_I2C_Init+0xd4>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3301      	adds	r3, #1
 80036fe:	e009      	b.n	8003714 <HAL_I2C_Init+0xe8>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	4a69      	ldr	r2, [pc, #420]	; (80038b0 <HAL_I2C_Init+0x284>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	3301      	adds	r3, #1
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	430b      	orrs	r3, r1
 800371a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003726:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	495c      	ldr	r1, [pc, #368]	; (80038a0 <HAL_I2C_Init+0x274>)
 8003730:	428b      	cmp	r3, r1
 8003732:	d819      	bhi.n	8003768 <HAL_I2C_Init+0x13c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e59      	subs	r1, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003742:	1c59      	adds	r1, r3, #1
 8003744:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003748:	400b      	ands	r3, r1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_I2C_Init+0x138>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1e59      	subs	r1, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fbb1 f3f3 	udiv	r3, r1, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003762:	e051      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 8003764:	2304      	movs	r3, #4
 8003766:	e04f      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d111      	bne.n	8003794 <HAL_I2C_Init+0x168>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	440b      	add	r3, r1
 800377e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003782:	3301      	adds	r3, #1
 8003784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e012      	b.n	80037ba <HAL_I2C_Init+0x18e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e58      	subs	r0, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	0099      	lsls	r1, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Init+0x196>
 80037be:	2301      	movs	r3, #1
 80037c0:	e022      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10e      	bne.n	80037e8 <HAL_I2C_Init+0x1bc>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e58      	subs	r0, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	440b      	add	r3, r1
 80037d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e6:	e00f      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e58      	subs	r0, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	0099      	lsls	r1, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	6809      	ldr	r1, [r1, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6911      	ldr	r1, [r2, #16]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	4311      	orrs	r1, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	000186a0 	.word	0x000186a0
 80038a4:	001e847f 	.word	0x001e847f
 80038a8:	003d08ff 	.word	0x003d08ff
 80038ac:	431bde83 	.word	0x431bde83
 80038b0:	10624dd3 	.word	0x10624dd3

080038b4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b80      	cmp	r3, #128	; 0x80
 80038c8:	d103      	bne.n	80038d2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
  }
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	461a      	mov	r2, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	817b      	strh	r3, [r7, #10]
 80038ee:	460b      	mov	r3, r1
 80038f0:	813b      	strh	r3, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038f6:	f7fe fe1b 	bl	8002530 <HAL_GetTick>
 80038fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b20      	cmp	r3, #32
 8003906:	f040 80d9 	bne.w	8003abc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2319      	movs	r3, #25
 8003910:	2201      	movs	r2, #1
 8003912:	496d      	ldr	r1, [pc, #436]	; (8003ac8 <HAL_I2C_Mem_Write+0x1ec>)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f002 fa7f 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
 8003922:	e0cc      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_I2C_Mem_Write+0x56>
 800392e:	2302      	movs	r3, #2
 8003930:	e0c5      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d007      	beq.n	8003958 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2221      	movs	r2, #33	; 0x21
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a3a      	ldr	r2, [r7, #32]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4a4d      	ldr	r2, [pc, #308]	; (8003acc <HAL_I2C_Mem_Write+0x1f0>)
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800399a:	88f8      	ldrh	r0, [r7, #6]
 800399c:	893a      	ldrh	r2, [r7, #8]
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4603      	mov	r3, r0
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f001 ff02 	bl	80057b4 <I2C_RequestMemoryWrite>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d052      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e081      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f002 fb44 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d107      	bne.n	80039e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e06b      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d11b      	bne.n	8003a5c <HAL_I2C_Mem_Write+0x180>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d017      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1aa      	bne.n	80039ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f002 fb37 	bl	80060dc <I2C_WaitOnBTFFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00d      	beq.n	8003a90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d107      	bne.n	8003a8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e016      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	00100002 	.word	0x00100002
 8003acc:	ffff0000 	.word	0xffff0000

08003ad0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	813b      	strh	r3, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aee:	f7fe fd1f 	bl	8002530 <HAL_GetTick>
 8003af2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	f040 8244 	bne.w	8003f8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2319      	movs	r3, #25
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4982      	ldr	r1, [pc, #520]	; (8003d14 <HAL_I2C_Mem_Read+0x244>)
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f002 f983 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e237      	b.n	8003f8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_I2C_Mem_Read+0x5a>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e230      	b.n	8003f8c <HAL_I2C_Mem_Read+0x4bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d007      	beq.n	8003b50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2222      	movs	r2, #34	; 0x22
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a62      	ldr	r2, [pc, #392]	; (8003d18 <HAL_I2C_Mem_Read+0x248>)
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b92:	88f8      	ldrh	r0, [r7, #6]
 8003b94:	893a      	ldrh	r2, [r7, #8]
 8003b96:	8979      	ldrh	r1, [r7, #10]
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f001 fe9c 	bl	80058e0 <I2C_RequestMemoryRead>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e1ec      	b.n	8003f8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d113      	bne.n	8003be2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e1c0      	b.n	8003f64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d11e      	bne.n	8003c28 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bfa:	b672      	cpsid	i
}
 8003bfc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c24:	b662      	cpsie	i
}
 8003c26:	e035      	b.n	8003c94 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d11e      	bne.n	8003c6e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c40:	b672      	cpsid	i
}
 8003c42:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c6a:	b662      	cpsie	i
}
 8003c6c:	e012      	b.n	8003c94 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c7c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003c94:	e166      	b.n	8003f64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	f200 811f 	bhi.w	8003ede <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d123      	bne.n	8003cf0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f002 fa8f 	bl	80061d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e167      	b.n	8003f8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cee:	e139      	b.n	8003f64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d152      	bne.n	8003d9e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfe:	2200      	movs	r2, #0
 8003d00:	4906      	ldr	r1, [pc, #24]	; (8003d1c <HAL_I2C_Mem_Read+0x24c>)
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f002 f888 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e13c      	b.n	8003f8c <HAL_I2C_Mem_Read+0x4bc>
 8003d12:	bf00      	nop
 8003d14:	00100002 	.word	0x00100002
 8003d18:	ffff0000 	.word	0xffff0000
 8003d1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d20:	b672      	cpsid	i
}
 8003d22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d66:	b662      	cpsie	i
}
 8003d68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d9c:	e0e2      	b.n	8003f64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	2200      	movs	r2, #0
 8003da6:	497b      	ldr	r1, [pc, #492]	; (8003f94 <HAL_I2C_Mem_Read+0x4c4>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f002 f835 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0e9      	b.n	8003f8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc8:	b672      	cpsid	i
}
 8003dca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dfe:	4b66      	ldr	r3, [pc, #408]	; (8003f98 <HAL_I2C_Mem_Read+0x4c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	08db      	lsrs	r3, r3, #3
 8003e04:	4a65      	ldr	r2, [pc, #404]	; (8003f9c <HAL_I2C_Mem_Read+0x4cc>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	0a1a      	lsrs	r2, r3, #8
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	00da      	lsls	r2, r3, #3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d118      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003e46:	b662      	cpsie	i
}
 8003e48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e09a      	b.n	8003f8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d1d9      	bne.n	8003e18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ea6:	b662      	cpsie	i
}
 8003ea8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003edc:	e042      	b.n	8003f64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f002 f974 	bl	80061d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e04c      	b.n	8003f8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d118      	bne.n	8003f64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f47f ae94 	bne.w	8003c96 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3728      	adds	r7, #40	; 0x28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	00010004 	.word	0x00010004
 8003f98:	20000018 	.word	0x20000018
 8003f9c:	14f8b589 	.word	0x14f8b589

08003fa0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	4608      	mov	r0, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	461a      	mov	r2, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	817b      	strh	r3, [r7, #10]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	813b      	strh	r3, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fbe:	f7fe fab7 	bl	8002530 <HAL_GetTick>
 8003fc2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	f040 812e 	bne.w	800422e <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fd2:	4b99      	ldr	r3, [pc, #612]	; (8004238 <HAL_I2C_Mem_Write_DMA+0x298>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	08db      	lsrs	r3, r3, #3
 8003fd8:	4a98      	ldr	r2, [pc, #608]	; (800423c <HAL_I2C_Mem_Write_DMA+0x29c>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	0a1a      	lsrs	r2, r3, #8
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009a      	lsls	r2, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d112      	bne.n	800401e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0220 	orr.w	r2, r3, #32
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
 800401c:	e108      	b.n	8004230 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d0df      	beq.n	8003fec <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_I2C_Mem_Write_DMA+0x9a>
 8004036:	2302      	movs	r3, #2
 8004038:	e0fa      	b.n	8004230 <HAL_I2C_Mem_Write_DMA+0x290>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d007      	beq.n	8004060 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800406e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2221      	movs	r2, #33	; 0x21
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2240      	movs	r2, #64	; 0x40
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a68      	ldr	r2, [pc, #416]	; (8004240 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80040a2:	897a      	ldrh	r2, [r7, #10]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80040a8:	893a      	ldrh	r2, [r7, #8]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80a1 	beq.w	8004206 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d022      	beq.n	8004112 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	4a5c      	ldr	r2, [pc, #368]	; (8004244 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	4a5b      	ldr	r2, [pc, #364]	; (8004248 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80040da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e0:	2200      	movs	r2, #0
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e8:	2200      	movs	r2, #0
 80040ea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	4619      	mov	r1, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3310      	adds	r3, #16
 80040fc:	461a      	mov	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	f7fe fec5 	bl	8002e90 <HAL_DMA_Start_IT>
 8004106:	4603      	mov	r3, r0
 8004108:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800410a:	7efb      	ldrb	r3, [r7, #27]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d166      	bne.n	80041de <HAL_I2C_Mem_Write_DMA+0x23e>
 8004110:	e013      	b.n	800413a <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e07a      	b.n	8004230 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800413a:	88f8      	ldrh	r0, [r7, #6]
 800413c:	893a      	ldrh	r2, [r7, #8]
 800413e:	8979      	ldrh	r1, [r7, #10]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	2323      	movs	r3, #35	; 0x23
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4603      	mov	r3, r0
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f001 fb32 	bl	80057b4 <I2C_RequestMemoryWrite>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d022      	beq.n	800419c <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fef8 	bl	8002f50 <HAL_DMA_Abort_IT>
 8004160:	4603      	mov	r3, r0
 8004162:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	2200      	movs	r2, #0
 800416a:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e049      	b.n	8004230 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e028      	b.n	8004230 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f043 0210 	orr.w	r2, r3, #16
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e014      	b.n	8004230 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 800422e:	2302      	movs	r3, #2
  }
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000018 	.word	0x20000018
 800423c:	14f8b589 	.word	0x14f8b589
 8004240:	ffff0000 	.word	0xffff0000
 8004244:	08005ab1 	.word	0x08005ab1
 8004248:	08005c5b 	.word	0x08005c5b

0800424c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800426c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b10      	cmp	r3, #16
 800427a:	d003      	beq.n	8004284 <HAL_I2C_EV_IRQHandler+0x38>
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	f040 80b1 	bne.w	80043e6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10d      	bne.n	80042ba <HAL_I2C_EV_IRQHandler+0x6e>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80042a4:	d003      	beq.n	80042ae <HAL_I2C_EV_IRQHandler+0x62>
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80042ac:	d101      	bne.n	80042b2 <HAL_I2C_EV_IRQHandler+0x66>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x68>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	f000 8114 	beq.w	80044e2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_I2C_EV_IRQHandler+0x90>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d006      	beq.n	80042dc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f002 f809 	bl	80062e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fcbd 	bl	8004c54 <I2C_Master_SB>
 80042da:	e083      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_I2C_EV_IRQHandler+0xac>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fd34 	bl	8004d5e <I2C_Master_ADD10>
 80042f6:	e075      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_I2C_EV_IRQHandler+0xc8>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fd4f 	bl	8004db0 <I2C_Master_ADDR>
 8004312:	e067      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d036      	beq.n	800438c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	f000 80db 	beq.w	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <HAL_I2C_EV_IRQHandler+0x10a>
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_I2C_EV_IRQHandler+0x10a>
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f931 	bl	80045b6 <I2C_MasterTransmit_TXE>
 8004354:	e046      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80c2 	beq.w	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80bc 	beq.w	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800436e:	7bbb      	ldrb	r3, [r7, #14]
 8004370:	2b21      	cmp	r3, #33	; 0x21
 8004372:	d103      	bne.n	800437c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f9ba 	bl	80046ee <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800437a:	e0b4      	b.n	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b40      	cmp	r3, #64	; 0x40
 8004380:	f040 80b1 	bne.w	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fa28 	bl	80047da <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438a:	e0ac      	b.n	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439a:	f000 80a4 	beq.w	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00d      	beq.n	80043c4 <HAL_I2C_EV_IRQHandler+0x178>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_I2C_EV_IRQHandler+0x178>
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 faa4 	bl	800490a <I2C_MasterReceive_RXNE>
 80043c2:	e00f      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 808b 	beq.w	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8085 	beq.w	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fb4f 	bl	8004a80 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e2:	e080      	b.n	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
 80043e4:	e07f      	b.n	80044e6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	61fb      	str	r3, [r7, #28]
 80043f6:	e007      	b.n	8004408 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d011      	beq.n	8004436 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800442c:	69b9      	ldr	r1, [r7, #24]
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 ff15 	bl	800525e <I2C_Slave_ADDR>
 8004434:	e05a      	b.n	80044ec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_I2C_EV_IRQHandler+0x206>
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 ff50 	bl	80052f0 <I2C_Slave_STOPF>
 8004450:	e04c      	b.n	80044ec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004452:	7bbb      	ldrb	r3, [r7, #14]
 8004454:	2b21      	cmp	r3, #33	; 0x21
 8004456:	d002      	beq.n	800445e <HAL_I2C_EV_IRQHandler+0x212>
 8004458:	7bbb      	ldrb	r3, [r7, #14]
 800445a:	2b29      	cmp	r3, #41	; 0x29
 800445c:	d120      	bne.n	80044a0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00d      	beq.n	8004484 <HAL_I2C_EV_IRQHandler+0x238>
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_I2C_EV_IRQHandler+0x238>
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d103      	bne.n	8004484 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fe32 	bl	80050e6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004482:	e032      	b.n	80044ea <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d02d      	beq.n	80044ea <HAL_I2C_EV_IRQHandler+0x29e>
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004494:	2b00      	cmp	r3, #0
 8004496:	d028      	beq.n	80044ea <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fe61 	bl	8005160 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800449e:	e024      	b.n	80044ea <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <HAL_I2C_EV_IRQHandler+0x27a>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_I2C_EV_IRQHandler+0x27a>
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fe6e 	bl	80051a0 <I2C_SlaveReceive_RXNE>
 80044c4:	e012      	b.n	80044ec <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <HAL_I2C_EV_IRQHandler+0x2a0>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fe9e 	bl	800521c <I2C_SlaveReceive_BTF>
 80044e0:	e004      	b.n	80044ec <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	70fb      	strb	r3, [r7, #3]
 8004546:	4613      	mov	r3, r2
 8004548:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045aa:	b2db      	uxtb	r3, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr

080045b6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045cc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d150      	bne.n	800467e <I2C_MasterTransmit_TXE+0xc8>
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b21      	cmp	r3, #33	; 0x21
 80045e0:	d14d      	bne.n	800467e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d01d      	beq.n	8004624 <I2C_MasterTransmit_TXE+0x6e>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d01a      	beq.n	8004624 <I2C_MasterTransmit_TXE+0x6e>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045f4:	d016      	beq.n	8004624 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004604:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2211      	movs	r2, #17
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7ff ff68 	bl	80044f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004622:	e060      	b.n	80046e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004632:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	d107      	bne.n	800466e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fd fb34 	bl	8001cd4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800466c:	e03b      	b.n	80046e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff ff3b 	bl	80044f2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800467c:	e033      	b.n	80046e6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b21      	cmp	r3, #33	; 0x21
 8004682:	d005      	beq.n	8004690 <I2C_MasterTransmit_TXE+0xda>
 8004684:	7bbb      	ldrb	r3, [r7, #14]
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d12d      	bne.n	80046e6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b22      	cmp	r3, #34	; 0x22
 800468e:	d12a      	bne.n	80046e6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d108      	bne.n	80046ac <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80046aa:	e01c      	b.n	80046e6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d103      	bne.n	80046c0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f88e 	bl	80047da <I2C_MemoryTransmit_TXE_BTF>
}
 80046be:	e012      	b.n	80046e6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046e4:	e7ff      	b.n	80046e6 <I2C_MasterTransmit_TXE+0x130>
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b21      	cmp	r3, #33	; 0x21
 8004706:	d164      	bne.n	80047d2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d012      	beq.n	8004738 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004736:	e04c      	b.n	80047d2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b08      	cmp	r3, #8
 800473c:	d01d      	beq.n	800477a <I2C_MasterTransmit_BTF+0x8c>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b20      	cmp	r3, #32
 8004742:	d01a      	beq.n	800477a <I2C_MasterTransmit_BTF+0x8c>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800474a:	d016      	beq.n	800477a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800475a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2211      	movs	r2, #17
 8004760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff febd 	bl	80044f2 <HAL_I2C_MasterTxCpltCallback>
}
 8004778:	e02b      	b.n	80047d2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004788:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004798:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b40      	cmp	r3, #64	; 0x40
 80047b2:	d107      	bne.n	80047c4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fd fa89 	bl	8001cd4 <HAL_I2C_MemTxCpltCallback>
}
 80047c2:	e006      	b.n	80047d2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff fe90 	bl	80044f2 <HAL_I2C_MasterTxCpltCallback>
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11d      	bne.n	800482e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10b      	bne.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480a:	1c9a      	adds	r2, r3, #2
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004810:	e077      	b.n	8004902 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004816:	b29b      	uxth	r3, r3
 8004818:	121b      	asrs	r3, r3, #8
 800481a:	b2da      	uxtb	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800482c:	e069      	b.n	8004902 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004832:	2b01      	cmp	r3, #1
 8004834:	d10b      	bne.n	800484e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483a:	b2da      	uxtb	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800484c:	e059      	b.n	8004902 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004852:	2b02      	cmp	r3, #2
 8004854:	d152      	bne.n	80048fc <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b22      	cmp	r3, #34	; 0x22
 800485a:	d10d      	bne.n	8004878 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800486a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004876:	e044      	b.n	8004902 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d015      	beq.n	80048ae <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b21      	cmp	r3, #33	; 0x21
 8004886:	d112      	bne.n	80048ae <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048ac:	e029      	b.n	8004902 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d124      	bne.n	8004902 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	2b21      	cmp	r3, #33	; 0x21
 80048bc:	d121      	bne.n	8004902 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048cc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048dc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fd f9ed 	bl	8001cd4 <HAL_I2C_MemTxCpltCallback>
}
 80048fa:	e002      	b.n	8004902 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fe ffd9 	bl	80038b4 <I2C_Flush_DR>
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b22      	cmp	r3, #34	; 0x22
 800491c:	f040 80ac 	bne.w	8004a78 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d921      	bls.n	8004972 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b03      	cmp	r3, #3
 800495c:	f040 808c 	bne.w	8004a78 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004970:	e082      	b.n	8004a78 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	2b02      	cmp	r3, #2
 8004978:	d075      	beq.n	8004a66 <I2C_MasterReceive_RXNE+0x15c>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d002      	beq.n	8004986 <I2C_MasterReceive_RXNE+0x7c>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d16f      	bne.n	8004a66 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 fbf0 	bl	800616c <I2C_WaitOnSTOPRequestThroughIT>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d142      	bne.n	8004a18 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d10a      	bne.n	8004a02 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fdb3 	bl	8004566 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a00:	e03a      	b.n	8004a78 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2212      	movs	r2, #18
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fd77 	bl	8004504 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a16:	e02f      	b.n	8004a78 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a26:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff fd8a 	bl	8004578 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a64:	e008      	b.n	8004a78 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a74:	605a      	str	r2, [r3, #4]
}
 8004a76:	e7ff      	b.n	8004a78 <I2C_MasterReceive_RXNE+0x16e>
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d11b      	bne.n	8004ad0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004ace:	e0bd      	b.n	8004c4c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d129      	bne.n	8004b2e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d00a      	beq.n	8004b06 <I2C_MasterReceive_BTF+0x86>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d007      	beq.n	8004b06 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b2c:	e08e      	b.n	8004c4c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d176      	bne.n	8004c26 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d002      	beq.n	8004b44 <I2C_MasterReceive_BTF+0xc4>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d108      	bne.n	8004b56 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e019      	b.n	8004b8a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d002      	beq.n	8004b62 <I2C_MasterReceive_BTF+0xe2>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d108      	bne.n	8004b74 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e00a      	b.n	8004b8a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d007      	beq.n	8004b8a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004be4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d10a      	bne.n	8004c10 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fcac 	bl	8004566 <HAL_I2C_MemRxCpltCallback>
}
 8004c0e:	e01d      	b.n	8004c4c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2212      	movs	r2, #18
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fc70 	bl	8004504 <HAL_I2C_MasterRxCpltCallback>
}
 8004c24:	e012      	b.n	8004c4c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d117      	bne.n	8004c98 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c80:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c82:	e067      	b.n	8004d54 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	611a      	str	r2, [r3, #16]
}
 8004c96:	e05d      	b.n	8004d54 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca0:	d133      	bne.n	8004d0a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b21      	cmp	r3, #33	; 0x21
 8004cac:	d109      	bne.n	8004cc2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cbe:	611a      	str	r2, [r3, #16]
 8004cc0:	e008      	b.n	8004cd4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <I2C_Master_SB+0x92>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d032      	beq.n	8004d54 <I2C_Master_SB+0x100>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02d      	beq.n	8004d54 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d06:	605a      	str	r2, [r3, #4]
}
 8004d08:	e024      	b.n	8004d54 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10e      	bne.n	8004d30 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	11db      	asrs	r3, r3, #7
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 0306 	and.w	r3, r3, #6
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f063 030f 	orn	r3, r3, #15
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	611a      	str	r2, [r3, #16]
}
 8004d2e:	e011      	b.n	8004d54 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10d      	bne.n	8004d54 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	11db      	asrs	r3, r3, #7
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0306 	and.w	r3, r3, #6
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f063 030e 	orn	r3, r3, #14
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	611a      	str	r2, [r3, #16]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <I2C_Master_ADD10+0x26>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d108      	bne.n	8004d96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <I2C_Master_ADD10+0x48>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da4:	605a      	str	r2, [r3, #4]
  }
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b091      	sub	sp, #68	; 0x44
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b22      	cmp	r3, #34	; 0x22
 8004dd8:	f040 8174 	bne.w	80050c4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10f      	bne.n	8004e04 <I2C_Master_ADDR+0x54>
 8004de4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d10b      	bne.n	8004e04 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dec:	2300      	movs	r3, #0
 8004dee:	633b      	str	r3, [r7, #48]	; 0x30
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	e16b      	b.n	80050dc <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d11d      	bne.n	8004e48 <I2C_Master_ADDR+0x98>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e14:	d118      	bne.n	8004e48 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e16:	2300      	movs	r3, #0
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	651a      	str	r2, [r3, #80]	; 0x50
 8004e46:	e149      	b.n	80050dc <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d113      	bne.n	8004e7a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e120      	b.n	80050bc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	f040 808a 	bne.w	8004f9a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e8c:	d137      	bne.n	8004efe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eac:	d113      	bne.n	8004ed6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	e0f2      	b.n	80050bc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	623b      	str	r3, [r7, #32]
 8004eea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e0de      	b.n	80050bc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d02e      	beq.n	8004f62 <I2C_Master_ADDR+0x1b2>
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d02b      	beq.n	8004f62 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0c:	2b12      	cmp	r3, #18
 8004f0e:	d102      	bne.n	8004f16 <I2C_Master_ADDR+0x166>
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d125      	bne.n	8004f62 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d00e      	beq.n	8004f3a <I2C_Master_ADDR+0x18a>
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d00b      	beq.n	8004f3a <I2C_Master_ADDR+0x18a>
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d008      	beq.n	8004f3a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e007      	b.n	8004f4a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f48:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	e0ac      	b.n	80050bc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f70:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e090      	b.n	80050bc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d158      	bne.n	8005056 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d021      	beq.n	8004fee <I2C_Master_ADDR+0x23e>
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d01e      	beq.n	8004fee <I2C_Master_ADDR+0x23e>
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d01b      	beq.n	8004fee <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e012      	b.n	8005014 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ffc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d14b      	bne.n	80050bc <I2C_Master_ADDR+0x30c>
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800502a:	d00b      	beq.n	8005044 <I2C_Master_ADDR+0x294>
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	2b01      	cmp	r3, #1
 8005030:	d008      	beq.n	8005044 <I2C_Master_ADDR+0x294>
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b08      	cmp	r3, #8
 8005036:	d005      	beq.n	8005044 <I2C_Master_ADDR+0x294>
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	2b10      	cmp	r3, #16
 800503c:	d002      	beq.n	8005044 <I2C_Master_ADDR+0x294>
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2b20      	cmp	r3, #32
 8005042:	d13b      	bne.n	80050bc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005052:	605a      	str	r2, [r3, #4]
 8005054:	e032      	b.n	80050bc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005064:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005074:	d117      	bne.n	80050a6 <I2C_Master_ADDR+0x2f6>
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800507c:	d00b      	beq.n	8005096 <I2C_Master_ADDR+0x2e6>
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	2b01      	cmp	r3, #1
 8005082:	d008      	beq.n	8005096 <I2C_Master_ADDR+0x2e6>
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	2b08      	cmp	r3, #8
 8005088:	d005      	beq.n	8005096 <I2C_Master_ADDR+0x2e6>
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	2b10      	cmp	r3, #16
 800508e:	d002      	beq.n	8005096 <I2C_Master_ADDR+0x2e6>
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	2b20      	cmp	r3, #32
 8005094:	d107      	bne.n	80050a6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80050c2:	e00b      	b.n	80050dc <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c4:	2300      	movs	r3, #0
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
}
 80050da:	e7ff      	b.n	80050dc <I2C_Master_ADDR+0x32c>
 80050dc:	bf00      	nop
 80050de:	3744      	adds	r7, #68	; 0x44
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d02b      	beq.n	8005158 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	781a      	ldrb	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d114      	bne.n	8005158 <I2C_SlaveTransmit_TXE+0x72>
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2b29      	cmp	r3, #41	; 0x29
 8005132:	d111      	bne.n	8005158 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005142:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2221      	movs	r2, #33	; 0x21
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2228      	movs	r2, #40	; 0x28
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff f9df 	bl	8004516 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d011      	beq.n	8005196 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	781a      	ldrb	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d02c      	beq.n	8005214 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d114      	bne.n	8005214 <I2C_SlaveReceive_RXNE+0x74>
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b2a      	cmp	r3, #42	; 0x2a
 80051ee:	d111      	bne.n	8005214 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2222      	movs	r2, #34	; 0x22
 8005204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2228      	movs	r2, #40	; 0x28
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff f98a 	bl	8004528 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d012      	beq.n	8005254 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr

0800525e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005278:	2b28      	cmp	r3, #40	; 0x28
 800527a:	d125      	bne.n	80052c8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	81bb      	strh	r3, [r7, #12]
 80052aa:	e002      	b.n	80052b2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80052ba:	89ba      	ldrh	r2, [r7, #12]
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	4619      	mov	r1, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff f93a 	bl	800453a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80052c6:	e00e      	b.n	80052e6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	60bb      	str	r3, [r7, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800530e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005310:	2300      	movs	r3, #0
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534c:	d172      	bne.n	8005434 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	2b22      	cmp	r3, #34	; 0x22
 8005352:	d002      	beq.n	800535a <I2C_Slave_STOPF+0x6a>
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	2b2a      	cmp	r3, #42	; 0x2a
 8005358:	d135      	bne.n	80053c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	b29a      	uxth	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f043 0204 	orr.w	r2, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800538c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	4618      	mov	r0, r3
 8005394:	f7fd ff5a 	bl	800324c <HAL_DMA_GetState>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d049      	beq.n	8005432 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	4a69      	ldr	r2, [pc, #420]	; (8005548 <I2C_Slave_STOPF+0x258>)
 80053a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fd fdd0 	bl	8002f50 <HAL_DMA_Abort_IT>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d03d      	beq.n	8005432 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053c0:	4610      	mov	r0, r2
 80053c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053c4:	e035      	b.n	8005432 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f043 0204 	orr.w	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fd ff24 	bl	800324c <HAL_DMA_GetState>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d014      	beq.n	8005434 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	4a4e      	ldr	r2, [pc, #312]	; (8005548 <I2C_Slave_STOPF+0x258>)
 8005410:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	4618      	mov	r0, r3
 8005418:	f7fd fd9a 	bl	8002f50 <HAL_DMA_Abort_IT>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800542c:	4610      	mov	r0, r2
 800542e:	4798      	blx	r3
 8005430:	e000      	b.n	8005434 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005432:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d03e      	beq.n	80054bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b04      	cmp	r3, #4
 800544a:	d112      	bne.n	8005472 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547c:	2b40      	cmp	r3, #64	; 0x40
 800547e:	d112      	bne.n	80054a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691a      	ldr	r2, [r3, #16]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f043 0204 	orr.w	r2, r3, #4
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f843 	bl	8005550 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80054ca:	e039      	b.n	8005540 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b2a      	cmp	r3, #42	; 0x2a
 80054d0:	d109      	bne.n	80054e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2228      	movs	r2, #40	; 0x28
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff f821 	bl	8004528 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b28      	cmp	r3, #40	; 0x28
 80054f0:	d111      	bne.n	8005516 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a15      	ldr	r2, [pc, #84]	; (800554c <I2C_Slave_STOPF+0x25c>)
 80054f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff f820 	bl	8004554 <HAL_I2C_ListenCpltCallback>
}
 8005514:	e014      	b.n	8005540 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	2b22      	cmp	r3, #34	; 0x22
 800551c:	d002      	beq.n	8005524 <I2C_Slave_STOPF+0x234>
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b22      	cmp	r3, #34	; 0x22
 8005522:	d10d      	bne.n	8005540 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fe fff4 	bl	8004528 <HAL_I2C_SlaveRxCpltCallback>
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	08005cc9 	.word	0x08005cc9
 800554c:	ffff0000 	.word	0xffff0000

08005550 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005566:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005568:	7bbb      	ldrb	r3, [r7, #14]
 800556a:	2b10      	cmp	r3, #16
 800556c:	d002      	beq.n	8005574 <I2C_ITError+0x24>
 800556e:	7bbb      	ldrb	r3, [r7, #14]
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d10a      	bne.n	800558a <I2C_ITError+0x3a>
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b22      	cmp	r3, #34	; 0x22
 8005578:	d107      	bne.n	800558a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005588:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005590:	2b28      	cmp	r3, #40	; 0x28
 8005592:	d107      	bne.n	80055a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2228      	movs	r2, #40	; 0x28
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055a2:	e015      	b.n	80055d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b2:	d00a      	beq.n	80055ca <I2C_ITError+0x7a>
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b60      	cmp	r3, #96	; 0x60
 80055b8:	d007      	beq.n	80055ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055de:	d162      	bne.n	80056a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d020      	beq.n	8005640 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	4a6a      	ldr	r2, [pc, #424]	; (80057ac <I2C_ITError+0x25c>)
 8005604:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	4618      	mov	r0, r3
 800560c:	f7fd fca0 	bl	8002f50 <HAL_DMA_Abort_IT>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8089 	beq.w	800572a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800563a:	4610      	mov	r0, r2
 800563c:	4798      	blx	r3
 800563e:	e074      	b.n	800572a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	4a59      	ldr	r2, [pc, #356]	; (80057ac <I2C_ITError+0x25c>)
 8005646:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	4618      	mov	r0, r3
 800564e:	f7fd fc7f 	bl	8002f50 <HAL_DMA_Abort_IT>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d068      	beq.n	800572a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005662:	2b40      	cmp	r3, #64	; 0x40
 8005664:	d10b      	bne.n	800567e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056a0:	4610      	mov	r0, r2
 80056a2:	4798      	blx	r3
 80056a4:	e041      	b.n	800572a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b60      	cmp	r3, #96	; 0x60
 80056b0:	d125      	bne.n	80056fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d10b      	bne.n	80056e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0201 	bic.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fe ff47 	bl	800458a <HAL_I2C_AbortCpltCallback>
 80056fc:	e015      	b.n	800572a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d10b      	bne.n	8005724 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7fe ff27 	bl	8004578 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10e      	bne.n	8005758 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005766:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b04      	cmp	r3, #4
 800577a:	d113      	bne.n	80057a4 <I2C_ITError+0x254>
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b28      	cmp	r3, #40	; 0x28
 8005780:	d110      	bne.n	80057a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <I2C_ITError+0x260>)
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fe fed8 	bl	8004554 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	08005cc9 	.word	0x08005cc9
 80057b0:	ffff0000 	.word	0xffff0000

080057b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	4608      	mov	r0, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	461a      	mov	r2, r3
 80057c2:	4603      	mov	r3, r0
 80057c4:	817b      	strh	r3, [r7, #10]
 80057c6:	460b      	mov	r3, r1
 80057c8:	813b      	strh	r3, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fb14 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00d      	beq.n	8005812 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005804:	d103      	bne.n	800580e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e05f      	b.n	80058d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005812:	897b      	ldrh	r3, [r7, #10]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	6a3a      	ldr	r2, [r7, #32]
 8005826:	492d      	ldr	r1, [pc, #180]	; (80058dc <I2C_RequestMemoryWrite+0x128>)
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 fb6f 	bl	8005f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e04c      	b.n	80058d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005850:	6a39      	ldr	r1, [r7, #32]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fbfa 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2b04      	cmp	r3, #4
 8005864:	d107      	bne.n	8005876 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e02b      	b.n	80058d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d105      	bne.n	800588c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005880:	893b      	ldrh	r3, [r7, #8]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	611a      	str	r2, [r3, #16]
 800588a:	e021      	b.n	80058d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800588c:	893b      	ldrh	r3, [r7, #8]
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b29b      	uxth	r3, r3
 8005892:	b2da      	uxtb	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	6a39      	ldr	r1, [r7, #32]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fbd4 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00d      	beq.n	80058c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d107      	bne.n	80058c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e005      	b.n	80058d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058c6:	893b      	ldrh	r3, [r7, #8]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	00010002 	.word	0x00010002

080058e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	4608      	mov	r0, r1
 80058ea:	4611      	mov	r1, r2
 80058ec:	461a      	mov	r2, r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	817b      	strh	r3, [r7, #10]
 80058f2:	460b      	mov	r3, r1
 80058f4:	813b      	strh	r3, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005908:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005918:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	2200      	movs	r2, #0
 8005922:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fa76 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00d      	beq.n	800594e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005940:	d103      	bne.n	800594a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e0aa      	b.n	8005aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800594e:	897b      	ldrh	r3, [r7, #10]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800595c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	4952      	ldr	r1, [pc, #328]	; (8005aac <I2C_RequestMemoryRead+0x1cc>)
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 fad1 	bl	8005f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e097      	b.n	8005aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598c:	6a39      	ldr	r1, [r7, #32]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fb5c 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00d      	beq.n	80059b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d107      	bne.n	80059b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e076      	b.n	8005aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059b6:	88fb      	ldrh	r3, [r7, #6]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d105      	bne.n	80059c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059bc:	893b      	ldrh	r3, [r7, #8]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	611a      	str	r2, [r3, #16]
 80059c6:	e021      	b.n	8005a0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059c8:	893b      	ldrh	r3, [r7, #8]
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d8:	6a39      	ldr	r1, [r7, #32]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fb36 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00d      	beq.n	8005a02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d107      	bne.n	80059fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e050      	b.n	8005aa4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a02:	893b      	ldrh	r3, [r7, #8]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0e:	6a39      	ldr	r1, [r7, #32]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fb1b 	bl	800604c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d107      	bne.n	8005a34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e035      	b.n	8005aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 f9df 	bl	8005e18 <I2C_WaitOnFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00d      	beq.n	8005a7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6e:	d103      	bne.n	8005a78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e013      	b.n	8005aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a7c:	897b      	ldrh	r3, [r7, #10]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	6a3a      	ldr	r2, [r7, #32]
 8005a90:	4906      	ldr	r1, [pc, #24]	; (8005aac <I2C_RequestMemoryRead+0x1cc>)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fa3a 	bl	8005f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	00010002 	.word	0x00010002

08005ab0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005acc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ae2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af0:	2200      	movs	r2, #0
 8005af2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	2200      	movs	r2, #0
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005b04:	7cfb      	ldrb	r3, [r7, #19]
 8005b06:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005b0a:	2b21      	cmp	r3, #33	; 0x21
 8005b0c:	d007      	beq.n	8005b1e <I2C_DMAXferCplt+0x6e>
 8005b0e:	7cfb      	ldrb	r3, [r7, #19]
 8005b10:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005b14:	2b22      	cmp	r3, #34	; 0x22
 8005b16:	d131      	bne.n	8005b7c <I2C_DMAXferCplt+0xcc>
 8005b18:	7cbb      	ldrb	r3, [r7, #18]
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d12e      	bne.n	8005b7c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b2c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	2b29      	cmp	r3, #41	; 0x29
 8005b38:	d10a      	bne.n	8005b50 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2221      	movs	r2, #33	; 0x21
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2228      	movs	r2, #40	; 0x28
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b48:	6978      	ldr	r0, [r7, #20]
 8005b4a:	f7fe fce4 	bl	8004516 <HAL_I2C_SlaveTxCpltCallback>
 8005b4e:	e00c      	b.n	8005b6a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	2b2a      	cmp	r3, #42	; 0x2a
 8005b54:	d109      	bne.n	8005b6a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2222      	movs	r2, #34	; 0x22
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2228      	movs	r2, #40	; 0x28
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b64:	6978      	ldr	r0, [r7, #20]
 8005b66:	f7fe fcdf 	bl	8004528 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005b78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005b7a:	e06a      	b.n	8005c52 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d064      	beq.n	8005c52 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d107      	bne.n	8005ba2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bb0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bb8:	d009      	beq.n	8005bce <I2C_DMAXferCplt+0x11e>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d006      	beq.n	8005bce <I2C_DMAXferCplt+0x11e>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005bc6:	d002      	beq.n	8005bce <I2C_DMAXferCplt+0x11e>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d107      	bne.n	8005bde <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bdc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bec:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bfc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2200      	movs	r2, #0
 8005c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005c0c:	6978      	ldr	r0, [r7, #20]
 8005c0e:	f7fe fcb3 	bl	8004578 <HAL_I2C_ErrorCallback>
}
 8005c12:	e01e      	b.n	8005c52 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d10a      	bne.n	8005c3e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005c36:	6978      	ldr	r0, [r7, #20]
 8005c38:	f7fe fc95 	bl	8004566 <HAL_I2C_MemRxCpltCallback>
}
 8005c3c:	e009      	b.n	8005c52 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2212      	movs	r2, #18
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c4c:	6978      	ldr	r0, [r7, #20]
 8005c4e:	f7fe fc59 	bl	8004504 <HAL_I2C_MasterRxCpltCallback>
}
 8005c52:	bf00      	nop
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	2200      	movs	r2, #0
 8005c76:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	2200      	movs	r2, #0
 8005c86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c96:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f043 0210 	orr.w	r2, r3, #16
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7fe fc5c 	bl	8004578 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ce2:	4b4b      	ldr	r3, [pc, #300]	; (8005e10 <I2C_DMAAbort+0x148>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	08db      	lsrs	r3, r3, #3
 8005ce8:	4a4a      	ldr	r2, [pc, #296]	; (8005e14 <I2C_DMAAbort+0x14c>)
 8005cea:	fba2 2303 	umull	r2, r3, r2, r3
 8005cee:	0a1a      	lsrs	r2, r3, #8
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	00da      	lsls	r2, r3, #3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005d0e:	e00a      	b.n	8005d26 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d24:	d0ea      	beq.n	8005cfc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	2200      	movs	r2, #0
 8005d34:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	2200      	movs	r2, #0
 8005d44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d54:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	2200      	movs	r2, #0
 8005d6a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	2200      	movs	r2, #0
 8005d7a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b60      	cmp	r3, #96	; 0x60
 8005d96:	d10e      	bne.n	8005db6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2200      	movs	r2, #0
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dae:	6978      	ldr	r0, [r7, #20]
 8005db0:	f7fe fbeb 	bl	800458a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005db4:	e027      	b.n	8005e06 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005db6:	7cfb      	ldrb	r3, [r7, #19]
 8005db8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dbc:	2b28      	cmp	r3, #40	; 0x28
 8005dbe:	d117      	bne.n	8005df0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2200      	movs	r2, #0
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2228      	movs	r2, #40	; 0x28
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dee:	e007      	b.n	8005e00 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005e00:	6978      	ldr	r0, [r7, #20]
 8005e02:	f7fe fbb9 	bl	8004578 <HAL_I2C_ErrorCallback>
}
 8005e06:	bf00      	nop
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000018 	.word	0x20000018
 8005e14:	14f8b589 	.word	0x14f8b589

08005e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e28:	e048      	b.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d044      	beq.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e32:	f7fc fb7d 	bl	8002530 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d302      	bcc.n	8005e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d139      	bne.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	0c1b      	lsrs	r3, r3, #16
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d10d      	bne.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	43da      	mvns	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf0c      	ite	eq
 8005e64:	2301      	moveq	r3, #1
 8005e66:	2300      	movne	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	e00c      	b.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	43da      	mvns	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d116      	bne.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	f043 0220 	orr.w	r2, r3, #32
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e023      	b.n	8005f04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	0c1b      	lsrs	r3, r3, #16
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d10d      	bne.n	8005ee2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	43da      	mvns	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	bf0c      	ite	eq
 8005ed8:	2301      	moveq	r3, #1
 8005eda:	2300      	movne	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	e00c      	b.n	8005efc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	43da      	mvns	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4013      	ands	r3, r2
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2301      	moveq	r3, #1
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	461a      	mov	r2, r3
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d093      	beq.n	8005e2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f1a:	e071      	b.n	8006000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f2a:	d123      	bne.n	8005f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	f043 0204 	orr.w	r2, r3, #4
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e067      	b.n	8006044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d041      	beq.n	8006000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7c:	f7fc fad8 	bl	8002530 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d136      	bne.n	8006000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	0c1b      	lsrs	r3, r3, #16
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d10c      	bne.n	8005fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	43da      	mvns	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bf14      	ite	ne
 8005fae:	2301      	movne	r3, #1
 8005fb0:	2300      	moveq	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	e00b      	b.n	8005fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	43da      	mvns	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bf14      	ite	ne
 8005fc8:	2301      	movne	r3, #1
 8005fca:	2300      	moveq	r3, #0
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e021      	b.n	8006044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	0c1b      	lsrs	r3, r3, #16
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b01      	cmp	r3, #1
 8006008:	d10c      	bne.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	43da      	mvns	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4013      	ands	r3, r2
 8006016:	b29b      	uxth	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf14      	ite	ne
 800601c:	2301      	movne	r3, #1
 800601e:	2300      	moveq	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	e00b      	b.n	800603c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	43da      	mvns	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4013      	ands	r3, r2
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	bf14      	ite	ne
 8006036:	2301      	movne	r3, #1
 8006038:	2300      	moveq	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	f47f af6d 	bne.w	8005f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006058:	e034      	b.n	80060c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f915 	bl	800628a <I2C_IsAcknowledgeFailed>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e034      	b.n	80060d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d028      	beq.n	80060c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006072:	f7fc fa5d 	bl	8002530 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11d      	bne.n	80060c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006092:	2b80      	cmp	r3, #128	; 0x80
 8006094:	d016      	beq.n	80060c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	f043 0220 	orr.w	r2, r3, #32
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e007      	b.n	80060d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b80      	cmp	r3, #128	; 0x80
 80060d0:	d1c3      	bne.n	800605a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060e8:	e034      	b.n	8006154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f8cd 	bl	800628a <I2C_IsAcknowledgeFailed>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e034      	b.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d028      	beq.n	8006154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006102:	f7fc fa15 	bl	8002530 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	429a      	cmp	r2, r3
 8006110:	d302      	bcc.n	8006118 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d11d      	bne.n	8006154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b04      	cmp	r3, #4
 8006124:	d016      	beq.n	8006154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f043 0220 	orr.w	r2, r3, #32
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e007      	b.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b04      	cmp	r3, #4
 8006160:	d1c3      	bne.n	80060ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006178:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	08db      	lsrs	r3, r3, #3
 800617e:	4a13      	ldr	r2, [pc, #76]	; (80061cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	0a1a      	lsrs	r2, r3, #8
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3b01      	subs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d107      	bne.n	80061aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e008      	b.n	80061bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b8:	d0e9      	beq.n	800618e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000018 	.word	0x20000018
 80061cc:	14f8b589 	.word	0x14f8b589

080061d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061dc:	e049      	b.n	8006272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b10      	cmp	r3, #16
 80061ea:	d119      	bne.n	8006220 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0210 	mvn.w	r2, #16
 80061f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e030      	b.n	8006282 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006220:	f7fc f986 	bl	8002530 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	d302      	bcc.n	8006236 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d11d      	bne.n	8006272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d016      	beq.n	8006272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f043 0220 	orr.w	r2, r3, #32
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e007      	b.n	8006282 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	d1ae      	bne.n	80061de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a0:	d11b      	bne.n	80062da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f043 0204 	orr.w	r2, r3, #4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80062f6:	d103      	bne.n	8006300 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80062fe:	e007      	b.n	8006310 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006308:	d102      	bne.n	8006310 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2208      	movs	r2, #8
 800630e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
	...

0800631c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e272      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8087 	beq.w	800644a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800633c:	4b92      	ldr	r3, [pc, #584]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f003 030c 	and.w	r3, r3, #12
 8006344:	2b04      	cmp	r3, #4
 8006346:	d00c      	beq.n	8006362 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006348:	4b8f      	ldr	r3, [pc, #572]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 030c 	and.w	r3, r3, #12
 8006350:	2b08      	cmp	r3, #8
 8006352:	d112      	bne.n	800637a <HAL_RCC_OscConfig+0x5e>
 8006354:	4b8c      	ldr	r3, [pc, #560]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006360:	d10b      	bne.n	800637a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006362:	4b89      	ldr	r3, [pc, #548]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d06c      	beq.n	8006448 <HAL_RCC_OscConfig+0x12c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d168      	bne.n	8006448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e24c      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006382:	d106      	bne.n	8006392 <HAL_RCC_OscConfig+0x76>
 8006384:	4b80      	ldr	r3, [pc, #512]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a7f      	ldr	r2, [pc, #508]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 800638a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	e02e      	b.n	80063f0 <HAL_RCC_OscConfig+0xd4>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10c      	bne.n	80063b4 <HAL_RCC_OscConfig+0x98>
 800639a:	4b7b      	ldr	r3, [pc, #492]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a7a      	ldr	r2, [pc, #488]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	4b78      	ldr	r3, [pc, #480]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a77      	ldr	r2, [pc, #476]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e01d      	b.n	80063f0 <HAL_RCC_OscConfig+0xd4>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCC_OscConfig+0xbc>
 80063be:	4b72      	ldr	r3, [pc, #456]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a71      	ldr	r2, [pc, #452]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	4b6f      	ldr	r3, [pc, #444]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a6e      	ldr	r2, [pc, #440]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	e00b      	b.n	80063f0 <HAL_RCC_OscConfig+0xd4>
 80063d8:	4b6b      	ldr	r3, [pc, #428]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a6a      	ldr	r2, [pc, #424]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	4b68      	ldr	r3, [pc, #416]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a67      	ldr	r2, [pc, #412]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80063ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d013      	beq.n	8006420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f8:	f7fc f89a 	bl	8002530 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006400:	f7fc f896 	bl	8002530 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b64      	cmp	r3, #100	; 0x64
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e200      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006412:	4b5d      	ldr	r3, [pc, #372]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0xe4>
 800641e:	e014      	b.n	800644a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006420:	f7fc f886 	bl	8002530 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006428:	f7fc f882 	bl	8002530 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b64      	cmp	r3, #100	; 0x64
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e1ec      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800643a:	4b53      	ldr	r3, [pc, #332]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f0      	bne.n	8006428 <HAL_RCC_OscConfig+0x10c>
 8006446:	e000      	b.n	800644a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d063      	beq.n	800651e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006456:	4b4c      	ldr	r3, [pc, #304]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006462:	4b49      	ldr	r3, [pc, #292]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f003 030c 	and.w	r3, r3, #12
 800646a:	2b08      	cmp	r3, #8
 800646c:	d11c      	bne.n	80064a8 <HAL_RCC_OscConfig+0x18c>
 800646e:	4b46      	ldr	r3, [pc, #280]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d116      	bne.n	80064a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800647a:	4b43      	ldr	r3, [pc, #268]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <HAL_RCC_OscConfig+0x176>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d001      	beq.n	8006492 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e1c0      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006492:	4b3d      	ldr	r3, [pc, #244]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	4939      	ldr	r1, [pc, #228]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a6:	e03a      	b.n	800651e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d020      	beq.n	80064f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064b0:	4b36      	ldr	r3, [pc, #216]	; (800658c <HAL_RCC_OscConfig+0x270>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b6:	f7fc f83b 	bl	8002530 <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064be:	f7fc f837 	bl	8002530 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e1a1      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d0:	4b2d      	ldr	r3, [pc, #180]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f0      	beq.n	80064be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064dc:	4b2a      	ldr	r3, [pc, #168]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4927      	ldr	r1, [pc, #156]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	600b      	str	r3, [r1, #0]
 80064f0:	e015      	b.n	800651e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064f2:	4b26      	ldr	r3, [pc, #152]	; (800658c <HAL_RCC_OscConfig+0x270>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f8:	f7fc f81a 	bl	8002530 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006500:	f7fc f816 	bl	8002530 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e180      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006512:	4b1d      	ldr	r3, [pc, #116]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f0      	bne.n	8006500 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d03a      	beq.n	80065a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d019      	beq.n	8006566 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006532:	4b17      	ldr	r3, [pc, #92]	; (8006590 <HAL_RCC_OscConfig+0x274>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006538:	f7fb fffa 	bl	8002530 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006540:	f7fb fff6 	bl	8002530 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e160      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006552:	4b0d      	ldr	r3, [pc, #52]	; (8006588 <HAL_RCC_OscConfig+0x26c>)
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800655e:	2001      	movs	r0, #1
 8006560:	f000 face 	bl	8006b00 <RCC_Delay>
 8006564:	e01c      	b.n	80065a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006566:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <HAL_RCC_OscConfig+0x274>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800656c:	f7fb ffe0 	bl	8002530 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006572:	e00f      	b.n	8006594 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006574:	f7fb ffdc 	bl	8002530 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d908      	bls.n	8006594 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e146      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
 8006586:	bf00      	nop
 8006588:	40021000 	.word	0x40021000
 800658c:	42420000 	.word	0x42420000
 8006590:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006594:	4b92      	ldr	r3, [pc, #584]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1e9      	bne.n	8006574 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 80a6 	beq.w	80066fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ae:	2300      	movs	r3, #0
 80065b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065b2:	4b8b      	ldr	r3, [pc, #556]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10d      	bne.n	80065da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065be:	4b88      	ldr	r3, [pc, #544]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	4a87      	ldr	r2, [pc, #540]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 80065c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c8:	61d3      	str	r3, [r2, #28]
 80065ca:	4b85      	ldr	r3, [pc, #532]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d2:	60bb      	str	r3, [r7, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065d6:	2301      	movs	r3, #1
 80065d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065da:	4b82      	ldr	r3, [pc, #520]	; (80067e4 <HAL_RCC_OscConfig+0x4c8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d118      	bne.n	8006618 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065e6:	4b7f      	ldr	r3, [pc, #508]	; (80067e4 <HAL_RCC_OscConfig+0x4c8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a7e      	ldr	r2, [pc, #504]	; (80067e4 <HAL_RCC_OscConfig+0x4c8>)
 80065ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065f2:	f7fb ff9d 	bl	8002530 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f8:	e008      	b.n	800660c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065fa:	f7fb ff99 	bl	8002530 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b64      	cmp	r3, #100	; 0x64
 8006606:	d901      	bls.n	800660c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e103      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	4b75      	ldr	r3, [pc, #468]	; (80067e4 <HAL_RCC_OscConfig+0x4c8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d106      	bne.n	800662e <HAL_RCC_OscConfig+0x312>
 8006620:	4b6f      	ldr	r3, [pc, #444]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	4a6e      	ldr	r2, [pc, #440]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6213      	str	r3, [r2, #32]
 800662c:	e02d      	b.n	800668a <HAL_RCC_OscConfig+0x36e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10c      	bne.n	8006650 <HAL_RCC_OscConfig+0x334>
 8006636:	4b6a      	ldr	r3, [pc, #424]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	4a69      	ldr	r2, [pc, #420]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	6213      	str	r3, [r2, #32]
 8006642:	4b67      	ldr	r3, [pc, #412]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	4a66      	ldr	r2, [pc, #408]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006648:	f023 0304 	bic.w	r3, r3, #4
 800664c:	6213      	str	r3, [r2, #32]
 800664e:	e01c      	b.n	800668a <HAL_RCC_OscConfig+0x36e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b05      	cmp	r3, #5
 8006656:	d10c      	bne.n	8006672 <HAL_RCC_OscConfig+0x356>
 8006658:	4b61      	ldr	r3, [pc, #388]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	4a60      	ldr	r2, [pc, #384]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 800665e:	f043 0304 	orr.w	r3, r3, #4
 8006662:	6213      	str	r3, [r2, #32]
 8006664:	4b5e      	ldr	r3, [pc, #376]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	4a5d      	ldr	r2, [pc, #372]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	6213      	str	r3, [r2, #32]
 8006670:	e00b      	b.n	800668a <HAL_RCC_OscConfig+0x36e>
 8006672:	4b5b      	ldr	r3, [pc, #364]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	4a5a      	ldr	r2, [pc, #360]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006678:	f023 0301 	bic.w	r3, r3, #1
 800667c:	6213      	str	r3, [r2, #32]
 800667e:	4b58      	ldr	r3, [pc, #352]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	4a57      	ldr	r2, [pc, #348]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006684:	f023 0304 	bic.w	r3, r3, #4
 8006688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d015      	beq.n	80066be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006692:	f7fb ff4d 	bl	8002530 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006698:	e00a      	b.n	80066b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669a:	f7fb ff49 	bl	8002530 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e0b1      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b0:	4b4b      	ldr	r3, [pc, #300]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0ee      	beq.n	800669a <HAL_RCC_OscConfig+0x37e>
 80066bc:	e014      	b.n	80066e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066be:	f7fb ff37 	bl	8002530 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c4:	e00a      	b.n	80066dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c6:	f7fb ff33 	bl	8002530 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e09b      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066dc:	4b40      	ldr	r3, [pc, #256]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1ee      	bne.n	80066c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d105      	bne.n	80066fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066ee:	4b3c      	ldr	r3, [pc, #240]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	4a3b      	ldr	r2, [pc, #236]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 80066f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 8087 	beq.w	8006812 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006704:	4b36      	ldr	r3, [pc, #216]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f003 030c 	and.w	r3, r3, #12
 800670c:	2b08      	cmp	r3, #8
 800670e:	d061      	beq.n	80067d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d146      	bne.n	80067a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006718:	4b33      	ldr	r3, [pc, #204]	; (80067e8 <HAL_RCC_OscConfig+0x4cc>)
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800671e:	f7fb ff07 	bl	8002530 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006726:	f7fb ff03 	bl	8002530 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e06d      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006738:	4b29      	ldr	r3, [pc, #164]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1f0      	bne.n	8006726 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674c:	d108      	bne.n	8006760 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800674e:	4b24      	ldr	r3, [pc, #144]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	4921      	ldr	r1, [pc, #132]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 800675c:	4313      	orrs	r3, r2
 800675e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006760:	4b1f      	ldr	r3, [pc, #124]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a19      	ldr	r1, [r3, #32]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	430b      	orrs	r3, r1
 8006772:	491b      	ldr	r1, [pc, #108]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 8006774:	4313      	orrs	r3, r2
 8006776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006778:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <HAL_RCC_OscConfig+0x4cc>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fb fed7 	bl	8002530 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006786:	f7fb fed3 	bl	8002530 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e03d      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006798:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCC_OscConfig+0x46a>
 80067a4:	e035      	b.n	8006812 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a6:	4b10      	ldr	r3, [pc, #64]	; (80067e8 <HAL_RCC_OscConfig+0x4cc>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ac:	f7fb fec0 	bl	8002530 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fb febc 	bl	8002530 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e026      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_RCC_OscConfig+0x4c4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x498>
 80067d2:	e01e      	b.n	8006812 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e019      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40007000 	.word	0x40007000
 80067e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067ec:	4b0b      	ldr	r3, [pc, #44]	; (800681c <HAL_RCC_OscConfig+0x500>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d106      	bne.n	800680e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d001      	beq.n	8006812 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40021000 	.word	0x40021000

08006820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e0d0      	b.n	80069d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006834:	4b6a      	ldr	r3, [pc, #424]	; (80069e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d910      	bls.n	8006864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006842:	4b67      	ldr	r3, [pc, #412]	; (80069e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f023 0207 	bic.w	r2, r3, #7
 800684a:	4965      	ldr	r1, [pc, #404]	; (80069e0 <HAL_RCC_ClockConfig+0x1c0>)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	4313      	orrs	r3, r2
 8006850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006852:	4b63      	ldr	r3, [pc, #396]	; (80069e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	429a      	cmp	r2, r3
 800685e:	d001      	beq.n	8006864 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e0b8      	b.n	80069d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d020      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800687c:	4b59      	ldr	r3, [pc, #356]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4a58      	ldr	r2, [pc, #352]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006886:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006894:	4b53      	ldr	r3, [pc, #332]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	4a52      	ldr	r2, [pc, #328]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 800689a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800689e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068a0:	4b50      	ldr	r3, [pc, #320]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	494d      	ldr	r1, [pc, #308]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d040      	beq.n	8006940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d107      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c6:	4b47      	ldr	r3, [pc, #284]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d115      	bne.n	80068fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e07f      	b.n	80069d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d107      	bne.n	80068ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068de:	4b41      	ldr	r3, [pc, #260]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e073      	b.n	80069d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ee:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e06b      	b.n	80069d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068fe:	4b39      	ldr	r3, [pc, #228]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f023 0203 	bic.w	r2, r3, #3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	4936      	ldr	r1, [pc, #216]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 800690c:	4313      	orrs	r3, r2
 800690e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006910:	f7fb fe0e 	bl	8002530 <HAL_GetTick>
 8006914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006916:	e00a      	b.n	800692e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006918:	f7fb fe0a 	bl	8002530 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	f241 3288 	movw	r2, #5000	; 0x1388
 8006926:	4293      	cmp	r3, r2
 8006928:	d901      	bls.n	800692e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e053      	b.n	80069d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800692e:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f003 020c 	and.w	r2, r3, #12
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	429a      	cmp	r2, r3
 800693e:	d1eb      	bne.n	8006918 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d210      	bcs.n	8006970 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694e:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f023 0207 	bic.w	r2, r3, #7
 8006956:	4922      	ldr	r1, [pc, #136]	; (80069e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	4313      	orrs	r3, r2
 800695c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800695e:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d001      	beq.n	8006970 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e032      	b.n	80069d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800697c:	4b19      	ldr	r3, [pc, #100]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4916      	ldr	r1, [pc, #88]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 800698a:	4313      	orrs	r3, r2
 800698c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800699a:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	490e      	ldr	r1, [pc, #56]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069ae:	f000 f821 	bl	80069f4 <HAL_RCC_GetSysClockFreq>
 80069b2:	4602      	mov	r2, r0
 80069b4:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <HAL_RCC_ClockConfig+0x1c4>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	490a      	ldr	r1, [pc, #40]	; (80069e8 <HAL_RCC_ClockConfig+0x1c8>)
 80069c0:	5ccb      	ldrb	r3, [r1, r3]
 80069c2:	fa22 f303 	lsr.w	r3, r2, r3
 80069c6:	4a09      	ldr	r2, [pc, #36]	; (80069ec <HAL_RCC_ClockConfig+0x1cc>)
 80069c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069ca:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <HAL_RCC_ClockConfig+0x1d0>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fb fd6c 	bl	80024ac <HAL_InitTick>

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40022000 	.word	0x40022000
 80069e4:	40021000 	.word	0x40021000
 80069e8:	0800bf60 	.word	0x0800bf60
 80069ec:	20000018 	.word	0x20000018
 80069f0:	2000001c 	.word	0x2000001c

080069f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	2300      	movs	r3, #0
 8006a00:	60bb      	str	r3, [r7, #8]
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	2300      	movs	r3, #0
 8006a08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a0e:	4b1e      	ldr	r3, [pc, #120]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 030c 	and.w	r3, r3, #12
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d002      	beq.n	8006a24 <HAL_RCC_GetSysClockFreq+0x30>
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d003      	beq.n	8006a2a <HAL_RCC_GetSysClockFreq+0x36>
 8006a22:	e027      	b.n	8006a74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a24:	4b19      	ldr	r3, [pc, #100]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8006a26:	613b      	str	r3, [r7, #16]
      break;
 8006a28:	e027      	b.n	8006a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	0c9b      	lsrs	r3, r3, #18
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	4a17      	ldr	r2, [pc, #92]	; (8006a90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006a34:	5cd3      	ldrb	r3, [r2, r3]
 8006a36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d010      	beq.n	8006a64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a42:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	0c5b      	lsrs	r3, r3, #17
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	4a11      	ldr	r2, [pc, #68]	; (8006a94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006a4e:	5cd3      	ldrb	r3, [r2, r3]
 8006a50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a0d      	ldr	r2, [pc, #52]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8006a56:	fb03 f202 	mul.w	r2, r3, r2
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	e004      	b.n	8006a6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a0c      	ldr	r2, [pc, #48]	; (8006a98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006a68:	fb02 f303 	mul.w	r3, r2, r3
 8006a6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	613b      	str	r3, [r7, #16]
      break;
 8006a72:	e002      	b.n	8006a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a74:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8006a76:	613b      	str	r3, [r7, #16]
      break;
 8006a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a7a:	693b      	ldr	r3, [r7, #16]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	007a1200 	.word	0x007a1200
 8006a90:	0800bf78 	.word	0x0800bf78
 8006a94:	0800bf88 	.word	0x0800bf88
 8006a98:	003d0900 	.word	0x003d0900

08006a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aa0:	4b02      	ldr	r3, [pc, #8]	; (8006aac <HAL_RCC_GetHCLKFreq+0x10>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr
 8006aac:	20000018 	.word	0x20000018

08006ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ab4:	f7ff fff2 	bl	8006a9c <HAL_RCC_GetHCLKFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	4903      	ldr	r1, [pc, #12]	; (8006ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	0800bf70 	.word	0x0800bf70

08006ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006adc:	f7ff ffde 	bl	8006a9c <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	0adb      	lsrs	r3, r3, #11
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4903      	ldr	r1, [pc, #12]	; (8006afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40021000 	.word	0x40021000
 8006afc:	0800bf70 	.word	0x0800bf70

08006b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <RCC_Delay+0x34>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a0a      	ldr	r2, [pc, #40]	; (8006b38 <RCC_Delay+0x38>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	0a5b      	lsrs	r3, r3, #9
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	fb02 f303 	mul.w	r3, r2, r3
 8006b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b1c:	bf00      	nop
  }
  while (Delay --);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	1e5a      	subs	r2, r3, #1
 8006b22:	60fa      	str	r2, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f9      	bne.n	8006b1c <RCC_Delay+0x1c>
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr
 8006b34:	20000018 	.word	0x20000018
 8006b38:	10624dd3 	.word	0x10624dd3

08006b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d07d      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b5c:	4b4f      	ldr	r3, [pc, #316]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10d      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b68:	4b4c      	ldr	r3, [pc, #304]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	4a4b      	ldr	r2, [pc, #300]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b72:	61d3      	str	r3, [r2, #28]
 8006b74:	4b49      	ldr	r3, [pc, #292]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b80:	2301      	movs	r3, #1
 8006b82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b84:	4b46      	ldr	r3, [pc, #280]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d118      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b90:	4b43      	ldr	r3, [pc, #268]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a42      	ldr	r2, [pc, #264]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b9c:	f7fb fcc8 	bl	8002530 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba4:	f7fb fcc4 	bl	8002530 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b64      	cmp	r3, #100	; 0x64
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e06d      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb6:	4b3a      	ldr	r3, [pc, #232]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bc2:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d02e      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d027      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be0:	4b2e      	ldr	r3, [pc, #184]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bea:	4b2e      	ldr	r3, [pc, #184]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf0:	4b2c      	ldr	r3, [pc, #176]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006bf6:	4a29      	ldr	r2, [pc, #164]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d014      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c06:	f7fb fc93 	bl	8002530 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7fb fc8f 	bl	8002530 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e036      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c24:	4b1d      	ldr	r3, [pc, #116]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0ee      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c30:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	4917      	ldr	r1, [pc, #92]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d105      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c48:	4b14      	ldr	r3, [pc, #80]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	4a13      	ldr	r2, [pc, #76]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d008      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c60:	4b0e      	ldr	r3, [pc, #56]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	490b      	ldr	r1, [pc, #44]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c7e:	4b07      	ldr	r3, [pc, #28]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	4904      	ldr	r1, [pc, #16]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	40007000 	.word	0x40007000
 8006ca4:	42420440 	.word	0x42420440

08006ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e042      	b.n	8006d40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fb fb66 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2224      	movs	r2, #36	; 0x24
 8006cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f91d 	bl	8006f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695a      	ldr	r2, [r3, #20]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	; 0x28
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d16d      	bne.n	8006e44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HAL_UART_Transmit+0x2c>
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e066      	b.n	8006e46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2221      	movs	r2, #33	; 0x21
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d86:	f7fb fbd3 	bl	8002530 <HAL_GetTick>
 8006d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	88fa      	ldrh	r2, [r7, #6]
 8006d96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da0:	d108      	bne.n	8006db4 <HAL_UART_Transmit+0x6c>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	e003      	b.n	8006dbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dbc:	e02a      	b.n	8006e14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2180      	movs	r1, #128	; 0x80
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f840 	bl	8006e4e <UART_WaitOnFlagUntilTimeout>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e036      	b.n	8006e46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10b      	bne.n	8006df6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	3302      	adds	r3, #2
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	e007      	b.n	8006e06 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	781a      	ldrb	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	3301      	adds	r3, #1
 8006e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1cf      	bne.n	8006dbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2200      	movs	r2, #0
 8006e26:	2140      	movs	r1, #64	; 0x40
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f810 	bl	8006e4e <UART_WaitOnFlagUntilTimeout>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e006      	b.n	8006e46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	e000      	b.n	8006e46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006e44:	2302      	movs	r3, #2
  }
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3720      	adds	r7, #32
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b090      	sub	sp, #64	; 0x40
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	603b      	str	r3, [r7, #0]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5e:	e050      	b.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d04c      	beq.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x30>
 8006e6e:	f7fb fb5f 	bl	8002530 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d241      	bcs.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	330c      	adds	r3, #12
 8006e9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e9e:	637a      	str	r2, [r7, #52]	; 0x34
 8006ea0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e5      	bne.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3314      	adds	r3, #20
 8006eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3314      	adds	r3, #20
 8006ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ed2:	623a      	str	r2, [r7, #32]
 8006ed4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	69f9      	ldr	r1, [r7, #28]
 8006ed8:	6a3a      	ldr	r2, [r7, #32]
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e5      	bne.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e00f      	b.n	8006f22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	bf0c      	ite	eq
 8006f12:	2301      	moveq	r3, #1
 8006f14:	2300      	movne	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d09f      	beq.n	8006e60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3740      	adds	r7, #64	; 0x40
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
	...

08006f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f66:	f023 030c 	bic.w	r3, r3, #12
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	68b9      	ldr	r1, [r7, #8]
 8006f70:	430b      	orrs	r3, r1
 8006f72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2c      	ldr	r2, [pc, #176]	; (8007040 <UART_SetConfig+0x114>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d103      	bne.n	8006f9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f94:	f7ff fda0 	bl	8006ad8 <HAL_RCC_GetPCLK2Freq>
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	e002      	b.n	8006fa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f9c:	f7ff fd88 	bl	8006ab0 <HAL_RCC_GetPCLK1Freq>
 8006fa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	009a      	lsls	r2, r3, #2
 8006fac:	441a      	add	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb8:	4a22      	ldr	r2, [pc, #136]	; (8007044 <UART_SetConfig+0x118>)
 8006fba:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	0119      	lsls	r1, r3, #4
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009a      	lsls	r2, r3, #2
 8006fcc:	441a      	add	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <UART_SetConfig+0x118>)
 8006fda:	fba3 0302 	umull	r0, r3, r3, r2
 8006fde:	095b      	lsrs	r3, r3, #5
 8006fe0:	2064      	movs	r0, #100	; 0x64
 8006fe2:	fb00 f303 	mul.w	r3, r0, r3
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	3332      	adds	r3, #50	; 0x32
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <UART_SetConfig+0x118>)
 8006fee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ff8:	4419      	add	r1, r3
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009a      	lsls	r2, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007010:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <UART_SetConfig+0x118>)
 8007012:	fba3 0302 	umull	r0, r3, r3, r2
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	2064      	movs	r0, #100	; 0x64
 800701a:	fb00 f303 	mul.w	r3, r0, r3
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	3332      	adds	r3, #50	; 0x32
 8007024:	4a07      	ldr	r2, [pc, #28]	; (8007044 <UART_SetConfig+0x118>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	f003 020f 	and.w	r2, r3, #15
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	440a      	add	r2, r1
 8007036:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40013800 	.word	0x40013800
 8007044:	51eb851f 	.word	0x51eb851f

08007048 <__cvt>:
 8007048:	2b00      	cmp	r3, #0
 800704a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704e:	461f      	mov	r7, r3
 8007050:	bfbb      	ittet	lt
 8007052:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007056:	461f      	movlt	r7, r3
 8007058:	2300      	movge	r3, #0
 800705a:	232d      	movlt	r3, #45	; 0x2d
 800705c:	b088      	sub	sp, #32
 800705e:	4614      	mov	r4, r2
 8007060:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007062:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007064:	7013      	strb	r3, [r2, #0]
 8007066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007068:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800706c:	f023 0820 	bic.w	r8, r3, #32
 8007070:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007074:	d005      	beq.n	8007082 <__cvt+0x3a>
 8007076:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800707a:	d100      	bne.n	800707e <__cvt+0x36>
 800707c:	3501      	adds	r5, #1
 800707e:	2302      	movs	r3, #2
 8007080:	e000      	b.n	8007084 <__cvt+0x3c>
 8007082:	2303      	movs	r3, #3
 8007084:	aa07      	add	r2, sp, #28
 8007086:	9204      	str	r2, [sp, #16]
 8007088:	aa06      	add	r2, sp, #24
 800708a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800708e:	e9cd 3500 	strd	r3, r5, [sp]
 8007092:	4622      	mov	r2, r4
 8007094:	463b      	mov	r3, r7
 8007096:	f001 f8af 	bl	80081f8 <_dtoa_r>
 800709a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800709e:	4606      	mov	r6, r0
 80070a0:	d102      	bne.n	80070a8 <__cvt+0x60>
 80070a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070a4:	07db      	lsls	r3, r3, #31
 80070a6:	d522      	bpl.n	80070ee <__cvt+0xa6>
 80070a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070ac:	eb06 0905 	add.w	r9, r6, r5
 80070b0:	d110      	bne.n	80070d4 <__cvt+0x8c>
 80070b2:	7833      	ldrb	r3, [r6, #0]
 80070b4:	2b30      	cmp	r3, #48	; 0x30
 80070b6:	d10a      	bne.n	80070ce <__cvt+0x86>
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	4620      	mov	r0, r4
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 fc72 	bl	80009a8 <__aeabi_dcmpeq>
 80070c4:	b918      	cbnz	r0, 80070ce <__cvt+0x86>
 80070c6:	f1c5 0501 	rsb	r5, r5, #1
 80070ca:	f8ca 5000 	str.w	r5, [sl]
 80070ce:	f8da 3000 	ldr.w	r3, [sl]
 80070d2:	4499      	add	r9, r3
 80070d4:	2200      	movs	r2, #0
 80070d6:	2300      	movs	r3, #0
 80070d8:	4620      	mov	r0, r4
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 fc64 	bl	80009a8 <__aeabi_dcmpeq>
 80070e0:	b108      	cbz	r0, 80070e6 <__cvt+0x9e>
 80070e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80070e6:	2230      	movs	r2, #48	; 0x30
 80070e8:	9b07      	ldr	r3, [sp, #28]
 80070ea:	454b      	cmp	r3, r9
 80070ec:	d307      	bcc.n	80070fe <__cvt+0xb6>
 80070ee:	4630      	mov	r0, r6
 80070f0:	9b07      	ldr	r3, [sp, #28]
 80070f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80070f4:	1b9b      	subs	r3, r3, r6
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	b008      	add	sp, #32
 80070fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fe:	1c59      	adds	r1, r3, #1
 8007100:	9107      	str	r1, [sp, #28]
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	e7f0      	b.n	80070e8 <__cvt+0xa0>

08007106 <__exponent>:
 8007106:	4603      	mov	r3, r0
 8007108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800710a:	2900      	cmp	r1, #0
 800710c:	f803 2b02 	strb.w	r2, [r3], #2
 8007110:	bfb6      	itet	lt
 8007112:	222d      	movlt	r2, #45	; 0x2d
 8007114:	222b      	movge	r2, #43	; 0x2b
 8007116:	4249      	neglt	r1, r1
 8007118:	2909      	cmp	r1, #9
 800711a:	7042      	strb	r2, [r0, #1]
 800711c:	dd2a      	ble.n	8007174 <__exponent+0x6e>
 800711e:	f10d 0207 	add.w	r2, sp, #7
 8007122:	4617      	mov	r7, r2
 8007124:	260a      	movs	r6, #10
 8007126:	fb91 f5f6 	sdiv	r5, r1, r6
 800712a:	4694      	mov	ip, r2
 800712c:	fb06 1415 	mls	r4, r6, r5, r1
 8007130:	3430      	adds	r4, #48	; 0x30
 8007132:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007136:	460c      	mov	r4, r1
 8007138:	2c63      	cmp	r4, #99	; 0x63
 800713a:	4629      	mov	r1, r5
 800713c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007140:	dcf1      	bgt.n	8007126 <__exponent+0x20>
 8007142:	3130      	adds	r1, #48	; 0x30
 8007144:	f1ac 0402 	sub.w	r4, ip, #2
 8007148:	f802 1c01 	strb.w	r1, [r2, #-1]
 800714c:	4622      	mov	r2, r4
 800714e:	1c41      	adds	r1, r0, #1
 8007150:	42ba      	cmp	r2, r7
 8007152:	d30a      	bcc.n	800716a <__exponent+0x64>
 8007154:	f10d 0209 	add.w	r2, sp, #9
 8007158:	eba2 020c 	sub.w	r2, r2, ip
 800715c:	42bc      	cmp	r4, r7
 800715e:	bf88      	it	hi
 8007160:	2200      	movhi	r2, #0
 8007162:	4413      	add	r3, r2
 8007164:	1a18      	subs	r0, r3, r0
 8007166:	b003      	add	sp, #12
 8007168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800716a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800716e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007172:	e7ed      	b.n	8007150 <__exponent+0x4a>
 8007174:	2330      	movs	r3, #48	; 0x30
 8007176:	3130      	adds	r1, #48	; 0x30
 8007178:	7083      	strb	r3, [r0, #2]
 800717a:	70c1      	strb	r1, [r0, #3]
 800717c:	1d03      	adds	r3, r0, #4
 800717e:	e7f1      	b.n	8007164 <__exponent+0x5e>

08007180 <_printf_float>:
 8007180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007184:	b091      	sub	sp, #68	; 0x44
 8007186:	460c      	mov	r4, r1
 8007188:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800718c:	4616      	mov	r6, r2
 800718e:	461f      	mov	r7, r3
 8007190:	4605      	mov	r5, r0
 8007192:	f000 ff0d 	bl	8007fb0 <_localeconv_r>
 8007196:	6803      	ldr	r3, [r0, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	9309      	str	r3, [sp, #36]	; 0x24
 800719c:	f7f8 ffd8 	bl	8000150 <strlen>
 80071a0:	2300      	movs	r3, #0
 80071a2:	930e      	str	r3, [sp, #56]	; 0x38
 80071a4:	f8d8 3000 	ldr.w	r3, [r8]
 80071a8:	900a      	str	r0, [sp, #40]	; 0x28
 80071aa:	3307      	adds	r3, #7
 80071ac:	f023 0307 	bic.w	r3, r3, #7
 80071b0:	f103 0208 	add.w	r2, r3, #8
 80071b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80071b8:	f8d4 b000 	ldr.w	fp, [r4]
 80071bc:	f8c8 2000 	str.w	r2, [r8]
 80071c0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80071c4:	4652      	mov	r2, sl
 80071c6:	4643      	mov	r3, r8
 80071c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071cc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80071d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80071d2:	f04f 32ff 	mov.w	r2, #4294967295
 80071d6:	4650      	mov	r0, sl
 80071d8:	4b9c      	ldr	r3, [pc, #624]	; (800744c <_printf_float+0x2cc>)
 80071da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071dc:	f7f9 fc16 	bl	8000a0c <__aeabi_dcmpun>
 80071e0:	bb70      	cbnz	r0, 8007240 <_printf_float+0xc0>
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295
 80071e6:	4650      	mov	r0, sl
 80071e8:	4b98      	ldr	r3, [pc, #608]	; (800744c <_printf_float+0x2cc>)
 80071ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071ec:	f7f9 fbf0 	bl	80009d0 <__aeabi_dcmple>
 80071f0:	bb30      	cbnz	r0, 8007240 <_printf_float+0xc0>
 80071f2:	2200      	movs	r2, #0
 80071f4:	2300      	movs	r3, #0
 80071f6:	4650      	mov	r0, sl
 80071f8:	4641      	mov	r1, r8
 80071fa:	f7f9 fbdf 	bl	80009bc <__aeabi_dcmplt>
 80071fe:	b110      	cbz	r0, 8007206 <_printf_float+0x86>
 8007200:	232d      	movs	r3, #45	; 0x2d
 8007202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007206:	4a92      	ldr	r2, [pc, #584]	; (8007450 <_printf_float+0x2d0>)
 8007208:	4b92      	ldr	r3, [pc, #584]	; (8007454 <_printf_float+0x2d4>)
 800720a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800720e:	bf94      	ite	ls
 8007210:	4690      	movls	r8, r2
 8007212:	4698      	movhi	r8, r3
 8007214:	2303      	movs	r3, #3
 8007216:	f04f 0a00 	mov.w	sl, #0
 800721a:	6123      	str	r3, [r4, #16]
 800721c:	f02b 0304 	bic.w	r3, fp, #4
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	4633      	mov	r3, r6
 8007224:	4621      	mov	r1, r4
 8007226:	4628      	mov	r0, r5
 8007228:	9700      	str	r7, [sp, #0]
 800722a:	aa0f      	add	r2, sp, #60	; 0x3c
 800722c:	f000 f9d6 	bl	80075dc <_printf_common>
 8007230:	3001      	adds	r0, #1
 8007232:	f040 8090 	bne.w	8007356 <_printf_float+0x1d6>
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	b011      	add	sp, #68	; 0x44
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	4652      	mov	r2, sl
 8007242:	4643      	mov	r3, r8
 8007244:	4650      	mov	r0, sl
 8007246:	4641      	mov	r1, r8
 8007248:	f7f9 fbe0 	bl	8000a0c <__aeabi_dcmpun>
 800724c:	b148      	cbz	r0, 8007262 <_printf_float+0xe2>
 800724e:	f1b8 0f00 	cmp.w	r8, #0
 8007252:	bfb8      	it	lt
 8007254:	232d      	movlt	r3, #45	; 0x2d
 8007256:	4a80      	ldr	r2, [pc, #512]	; (8007458 <_printf_float+0x2d8>)
 8007258:	bfb8      	it	lt
 800725a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800725e:	4b7f      	ldr	r3, [pc, #508]	; (800745c <_printf_float+0x2dc>)
 8007260:	e7d3      	b.n	800720a <_printf_float+0x8a>
 8007262:	6863      	ldr	r3, [r4, #4]
 8007264:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	d142      	bne.n	80072f2 <_printf_float+0x172>
 800726c:	2306      	movs	r3, #6
 800726e:	6063      	str	r3, [r4, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	9206      	str	r2, [sp, #24]
 8007274:	aa0e      	add	r2, sp, #56	; 0x38
 8007276:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800727a:	aa0d      	add	r2, sp, #52	; 0x34
 800727c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007280:	9203      	str	r2, [sp, #12]
 8007282:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007286:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	6863      	ldr	r3, [r4, #4]
 800728e:	4652      	mov	r2, sl
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	4628      	mov	r0, r5
 8007294:	4643      	mov	r3, r8
 8007296:	910b      	str	r1, [sp, #44]	; 0x2c
 8007298:	f7ff fed6 	bl	8007048 <__cvt>
 800729c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800729e:	4680      	mov	r8, r0
 80072a0:	2947      	cmp	r1, #71	; 0x47
 80072a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80072a4:	d108      	bne.n	80072b8 <_printf_float+0x138>
 80072a6:	1cc8      	adds	r0, r1, #3
 80072a8:	db02      	blt.n	80072b0 <_printf_float+0x130>
 80072aa:	6863      	ldr	r3, [r4, #4]
 80072ac:	4299      	cmp	r1, r3
 80072ae:	dd40      	ble.n	8007332 <_printf_float+0x1b2>
 80072b0:	f1a9 0902 	sub.w	r9, r9, #2
 80072b4:	fa5f f989 	uxtb.w	r9, r9
 80072b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80072bc:	d81f      	bhi.n	80072fe <_printf_float+0x17e>
 80072be:	464a      	mov	r2, r9
 80072c0:	3901      	subs	r1, #1
 80072c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072c6:	910d      	str	r1, [sp, #52]	; 0x34
 80072c8:	f7ff ff1d 	bl	8007106 <__exponent>
 80072cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072ce:	4682      	mov	sl, r0
 80072d0:	1813      	adds	r3, r2, r0
 80072d2:	2a01      	cmp	r2, #1
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	dc02      	bgt.n	80072de <_printf_float+0x15e>
 80072d8:	6822      	ldr	r2, [r4, #0]
 80072da:	07d2      	lsls	r2, r2, #31
 80072dc:	d501      	bpl.n	80072e2 <_printf_float+0x162>
 80072de:	3301      	adds	r3, #1
 80072e0:	6123      	str	r3, [r4, #16]
 80072e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d09b      	beq.n	8007222 <_printf_float+0xa2>
 80072ea:	232d      	movs	r3, #45	; 0x2d
 80072ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072f0:	e797      	b.n	8007222 <_printf_float+0xa2>
 80072f2:	2947      	cmp	r1, #71	; 0x47
 80072f4:	d1bc      	bne.n	8007270 <_printf_float+0xf0>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1ba      	bne.n	8007270 <_printf_float+0xf0>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e7b7      	b.n	800726e <_printf_float+0xee>
 80072fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007302:	d118      	bne.n	8007336 <_printf_float+0x1b6>
 8007304:	2900      	cmp	r1, #0
 8007306:	6863      	ldr	r3, [r4, #4]
 8007308:	dd0b      	ble.n	8007322 <_printf_float+0x1a2>
 800730a:	6121      	str	r1, [r4, #16]
 800730c:	b913      	cbnz	r3, 8007314 <_printf_float+0x194>
 800730e:	6822      	ldr	r2, [r4, #0]
 8007310:	07d0      	lsls	r0, r2, #31
 8007312:	d502      	bpl.n	800731a <_printf_float+0x19a>
 8007314:	3301      	adds	r3, #1
 8007316:	440b      	add	r3, r1
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	f04f 0a00 	mov.w	sl, #0
 800731e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007320:	e7df      	b.n	80072e2 <_printf_float+0x162>
 8007322:	b913      	cbnz	r3, 800732a <_printf_float+0x1aa>
 8007324:	6822      	ldr	r2, [r4, #0]
 8007326:	07d2      	lsls	r2, r2, #31
 8007328:	d501      	bpl.n	800732e <_printf_float+0x1ae>
 800732a:	3302      	adds	r3, #2
 800732c:	e7f4      	b.n	8007318 <_printf_float+0x198>
 800732e:	2301      	movs	r3, #1
 8007330:	e7f2      	b.n	8007318 <_printf_float+0x198>
 8007332:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007338:	4299      	cmp	r1, r3
 800733a:	db05      	blt.n	8007348 <_printf_float+0x1c8>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	6121      	str	r1, [r4, #16]
 8007340:	07d8      	lsls	r0, r3, #31
 8007342:	d5ea      	bpl.n	800731a <_printf_float+0x19a>
 8007344:	1c4b      	adds	r3, r1, #1
 8007346:	e7e7      	b.n	8007318 <_printf_float+0x198>
 8007348:	2900      	cmp	r1, #0
 800734a:	bfcc      	ite	gt
 800734c:	2201      	movgt	r2, #1
 800734e:	f1c1 0202 	rsble	r2, r1, #2
 8007352:	4413      	add	r3, r2
 8007354:	e7e0      	b.n	8007318 <_printf_float+0x198>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	055a      	lsls	r2, r3, #21
 800735a:	d407      	bmi.n	800736c <_printf_float+0x1ec>
 800735c:	6923      	ldr	r3, [r4, #16]
 800735e:	4642      	mov	r2, r8
 8007360:	4631      	mov	r1, r6
 8007362:	4628      	mov	r0, r5
 8007364:	47b8      	blx	r7
 8007366:	3001      	adds	r0, #1
 8007368:	d12b      	bne.n	80073c2 <_printf_float+0x242>
 800736a:	e764      	b.n	8007236 <_printf_float+0xb6>
 800736c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007370:	f240 80dd 	bls.w	800752e <_printf_float+0x3ae>
 8007374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007378:	2200      	movs	r2, #0
 800737a:	2300      	movs	r3, #0
 800737c:	f7f9 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8007380:	2800      	cmp	r0, #0
 8007382:	d033      	beq.n	80073ec <_printf_float+0x26c>
 8007384:	2301      	movs	r3, #1
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	4a35      	ldr	r2, [pc, #212]	; (8007460 <_printf_float+0x2e0>)
 800738c:	47b8      	blx	r7
 800738e:	3001      	adds	r0, #1
 8007390:	f43f af51 	beq.w	8007236 <_printf_float+0xb6>
 8007394:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007398:	429a      	cmp	r2, r3
 800739a:	db02      	blt.n	80073a2 <_printf_float+0x222>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	07d8      	lsls	r0, r3, #31
 80073a0:	d50f      	bpl.n	80073c2 <_printf_float+0x242>
 80073a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f af42 	beq.w	8007236 <_printf_float+0xb6>
 80073b2:	f04f 0800 	mov.w	r8, #0
 80073b6:	f104 091a 	add.w	r9, r4, #26
 80073ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073bc:	3b01      	subs	r3, #1
 80073be:	4543      	cmp	r3, r8
 80073c0:	dc09      	bgt.n	80073d6 <_printf_float+0x256>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	079b      	lsls	r3, r3, #30
 80073c6:	f100 8104 	bmi.w	80075d2 <_printf_float+0x452>
 80073ca:	68e0      	ldr	r0, [r4, #12]
 80073cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073ce:	4298      	cmp	r0, r3
 80073d0:	bfb8      	it	lt
 80073d2:	4618      	movlt	r0, r3
 80073d4:	e731      	b.n	800723a <_printf_float+0xba>
 80073d6:	2301      	movs	r3, #1
 80073d8:	464a      	mov	r2, r9
 80073da:	4631      	mov	r1, r6
 80073dc:	4628      	mov	r0, r5
 80073de:	47b8      	blx	r7
 80073e0:	3001      	adds	r0, #1
 80073e2:	f43f af28 	beq.w	8007236 <_printf_float+0xb6>
 80073e6:	f108 0801 	add.w	r8, r8, #1
 80073ea:	e7e6      	b.n	80073ba <_printf_float+0x23a>
 80073ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	dc38      	bgt.n	8007464 <_printf_float+0x2e4>
 80073f2:	2301      	movs	r3, #1
 80073f4:	4631      	mov	r1, r6
 80073f6:	4628      	mov	r0, r5
 80073f8:	4a19      	ldr	r2, [pc, #100]	; (8007460 <_printf_float+0x2e0>)
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	f43f af1a 	beq.w	8007236 <_printf_float+0xb6>
 8007402:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007406:	4313      	orrs	r3, r2
 8007408:	d102      	bne.n	8007410 <_printf_float+0x290>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	07d9      	lsls	r1, r3, #31
 800740e:	d5d8      	bpl.n	80073c2 <_printf_float+0x242>
 8007410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	f43f af0b 	beq.w	8007236 <_printf_float+0xb6>
 8007420:	f04f 0900 	mov.w	r9, #0
 8007424:	f104 0a1a 	add.w	sl, r4, #26
 8007428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800742a:	425b      	negs	r3, r3
 800742c:	454b      	cmp	r3, r9
 800742e:	dc01      	bgt.n	8007434 <_printf_float+0x2b4>
 8007430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007432:	e794      	b.n	800735e <_printf_float+0x1de>
 8007434:	2301      	movs	r3, #1
 8007436:	4652      	mov	r2, sl
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	47b8      	blx	r7
 800743e:	3001      	adds	r0, #1
 8007440:	f43f aef9 	beq.w	8007236 <_printf_float+0xb6>
 8007444:	f109 0901 	add.w	r9, r9, #1
 8007448:	e7ee      	b.n	8007428 <_printf_float+0x2a8>
 800744a:	bf00      	nop
 800744c:	7fefffff 	.word	0x7fefffff
 8007450:	0800bf8a 	.word	0x0800bf8a
 8007454:	0800bf8e 	.word	0x0800bf8e
 8007458:	0800bf92 	.word	0x0800bf92
 800745c:	0800bf96 	.word	0x0800bf96
 8007460:	0800bf9a 	.word	0x0800bf9a
 8007464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007468:	429a      	cmp	r2, r3
 800746a:	bfa8      	it	ge
 800746c:	461a      	movge	r2, r3
 800746e:	2a00      	cmp	r2, #0
 8007470:	4691      	mov	r9, r2
 8007472:	dc37      	bgt.n	80074e4 <_printf_float+0x364>
 8007474:	f04f 0b00 	mov.w	fp, #0
 8007478:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800747c:	f104 021a 	add.w	r2, r4, #26
 8007480:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007484:	ebaa 0309 	sub.w	r3, sl, r9
 8007488:	455b      	cmp	r3, fp
 800748a:	dc33      	bgt.n	80074f4 <_printf_float+0x374>
 800748c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007490:	429a      	cmp	r2, r3
 8007492:	db3b      	blt.n	800750c <_printf_float+0x38c>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	07da      	lsls	r2, r3, #31
 8007498:	d438      	bmi.n	800750c <_printf_float+0x38c>
 800749a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800749e:	eba2 0903 	sub.w	r9, r2, r3
 80074a2:	eba2 020a 	sub.w	r2, r2, sl
 80074a6:	4591      	cmp	r9, r2
 80074a8:	bfa8      	it	ge
 80074aa:	4691      	movge	r9, r2
 80074ac:	f1b9 0f00 	cmp.w	r9, #0
 80074b0:	dc34      	bgt.n	800751c <_printf_float+0x39c>
 80074b2:	f04f 0800 	mov.w	r8, #0
 80074b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074ba:	f104 0a1a 	add.w	sl, r4, #26
 80074be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80074c2:	1a9b      	subs	r3, r3, r2
 80074c4:	eba3 0309 	sub.w	r3, r3, r9
 80074c8:	4543      	cmp	r3, r8
 80074ca:	f77f af7a 	ble.w	80073c2 <_printf_float+0x242>
 80074ce:	2301      	movs	r3, #1
 80074d0:	4652      	mov	r2, sl
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	f43f aeac 	beq.w	8007236 <_printf_float+0xb6>
 80074de:	f108 0801 	add.w	r8, r8, #1
 80074e2:	e7ec      	b.n	80074be <_printf_float+0x33e>
 80074e4:	4613      	mov	r3, r2
 80074e6:	4631      	mov	r1, r6
 80074e8:	4642      	mov	r2, r8
 80074ea:	4628      	mov	r0, r5
 80074ec:	47b8      	blx	r7
 80074ee:	3001      	adds	r0, #1
 80074f0:	d1c0      	bne.n	8007474 <_printf_float+0x2f4>
 80074f2:	e6a0      	b.n	8007236 <_printf_float+0xb6>
 80074f4:	2301      	movs	r3, #1
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80074fc:	47b8      	blx	r7
 80074fe:	3001      	adds	r0, #1
 8007500:	f43f ae99 	beq.w	8007236 <_printf_float+0xb6>
 8007504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007506:	f10b 0b01 	add.w	fp, fp, #1
 800750a:	e7b9      	b.n	8007480 <_printf_float+0x300>
 800750c:	4631      	mov	r1, r6
 800750e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007512:	4628      	mov	r0, r5
 8007514:	47b8      	blx	r7
 8007516:	3001      	adds	r0, #1
 8007518:	d1bf      	bne.n	800749a <_printf_float+0x31a>
 800751a:	e68c      	b.n	8007236 <_printf_float+0xb6>
 800751c:	464b      	mov	r3, r9
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	eb08 020a 	add.w	r2, r8, sl
 8007526:	47b8      	blx	r7
 8007528:	3001      	adds	r0, #1
 800752a:	d1c2      	bne.n	80074b2 <_printf_float+0x332>
 800752c:	e683      	b.n	8007236 <_printf_float+0xb6>
 800752e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007530:	2a01      	cmp	r2, #1
 8007532:	dc01      	bgt.n	8007538 <_printf_float+0x3b8>
 8007534:	07db      	lsls	r3, r3, #31
 8007536:	d539      	bpl.n	80075ac <_printf_float+0x42c>
 8007538:	2301      	movs	r3, #1
 800753a:	4642      	mov	r2, r8
 800753c:	4631      	mov	r1, r6
 800753e:	4628      	mov	r0, r5
 8007540:	47b8      	blx	r7
 8007542:	3001      	adds	r0, #1
 8007544:	f43f ae77 	beq.w	8007236 <_printf_float+0xb6>
 8007548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800754c:	4631      	mov	r1, r6
 800754e:	4628      	mov	r0, r5
 8007550:	47b8      	blx	r7
 8007552:	3001      	adds	r0, #1
 8007554:	f43f ae6f 	beq.w	8007236 <_printf_float+0xb6>
 8007558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800755c:	2200      	movs	r2, #0
 800755e:	2300      	movs	r3, #0
 8007560:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007564:	f7f9 fa20 	bl	80009a8 <__aeabi_dcmpeq>
 8007568:	b9d8      	cbnz	r0, 80075a2 <_printf_float+0x422>
 800756a:	f109 33ff 	add.w	r3, r9, #4294967295
 800756e:	f108 0201 	add.w	r2, r8, #1
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	d10e      	bne.n	800759a <_printf_float+0x41a>
 800757c:	e65b      	b.n	8007236 <_printf_float+0xb6>
 800757e:	2301      	movs	r3, #1
 8007580:	464a      	mov	r2, r9
 8007582:	4631      	mov	r1, r6
 8007584:	4628      	mov	r0, r5
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	f43f ae54 	beq.w	8007236 <_printf_float+0xb6>
 800758e:	f108 0801 	add.w	r8, r8, #1
 8007592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007594:	3b01      	subs	r3, #1
 8007596:	4543      	cmp	r3, r8
 8007598:	dcf1      	bgt.n	800757e <_printf_float+0x3fe>
 800759a:	4653      	mov	r3, sl
 800759c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075a0:	e6de      	b.n	8007360 <_printf_float+0x1e0>
 80075a2:	f04f 0800 	mov.w	r8, #0
 80075a6:	f104 091a 	add.w	r9, r4, #26
 80075aa:	e7f2      	b.n	8007592 <_printf_float+0x412>
 80075ac:	2301      	movs	r3, #1
 80075ae:	4642      	mov	r2, r8
 80075b0:	e7df      	b.n	8007572 <_printf_float+0x3f2>
 80075b2:	2301      	movs	r3, #1
 80075b4:	464a      	mov	r2, r9
 80075b6:	4631      	mov	r1, r6
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b8      	blx	r7
 80075bc:	3001      	adds	r0, #1
 80075be:	f43f ae3a 	beq.w	8007236 <_printf_float+0xb6>
 80075c2:	f108 0801 	add.w	r8, r8, #1
 80075c6:	68e3      	ldr	r3, [r4, #12]
 80075c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80075ca:	1a5b      	subs	r3, r3, r1
 80075cc:	4543      	cmp	r3, r8
 80075ce:	dcf0      	bgt.n	80075b2 <_printf_float+0x432>
 80075d0:	e6fb      	b.n	80073ca <_printf_float+0x24a>
 80075d2:	f04f 0800 	mov.w	r8, #0
 80075d6:	f104 0919 	add.w	r9, r4, #25
 80075da:	e7f4      	b.n	80075c6 <_printf_float+0x446>

080075dc <_printf_common>:
 80075dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e0:	4616      	mov	r6, r2
 80075e2:	4699      	mov	r9, r3
 80075e4:	688a      	ldr	r2, [r1, #8]
 80075e6:	690b      	ldr	r3, [r1, #16]
 80075e8:	4607      	mov	r7, r0
 80075ea:	4293      	cmp	r3, r2
 80075ec:	bfb8      	it	lt
 80075ee:	4613      	movlt	r3, r2
 80075f0:	6033      	str	r3, [r6, #0]
 80075f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075f6:	460c      	mov	r4, r1
 80075f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075fc:	b10a      	cbz	r2, 8007602 <_printf_common+0x26>
 80075fe:	3301      	adds	r3, #1
 8007600:	6033      	str	r3, [r6, #0]
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	0699      	lsls	r1, r3, #26
 8007606:	bf42      	ittt	mi
 8007608:	6833      	ldrmi	r3, [r6, #0]
 800760a:	3302      	addmi	r3, #2
 800760c:	6033      	strmi	r3, [r6, #0]
 800760e:	6825      	ldr	r5, [r4, #0]
 8007610:	f015 0506 	ands.w	r5, r5, #6
 8007614:	d106      	bne.n	8007624 <_printf_common+0x48>
 8007616:	f104 0a19 	add.w	sl, r4, #25
 800761a:	68e3      	ldr	r3, [r4, #12]
 800761c:	6832      	ldr	r2, [r6, #0]
 800761e:	1a9b      	subs	r3, r3, r2
 8007620:	42ab      	cmp	r3, r5
 8007622:	dc2b      	bgt.n	800767c <_printf_common+0xa0>
 8007624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007628:	1e13      	subs	r3, r2, #0
 800762a:	6822      	ldr	r2, [r4, #0]
 800762c:	bf18      	it	ne
 800762e:	2301      	movne	r3, #1
 8007630:	0692      	lsls	r2, r2, #26
 8007632:	d430      	bmi.n	8007696 <_printf_common+0xba>
 8007634:	4649      	mov	r1, r9
 8007636:	4638      	mov	r0, r7
 8007638:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800763c:	47c0      	blx	r8
 800763e:	3001      	adds	r0, #1
 8007640:	d023      	beq.n	800768a <_printf_common+0xae>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	6922      	ldr	r2, [r4, #16]
 8007646:	f003 0306 	and.w	r3, r3, #6
 800764a:	2b04      	cmp	r3, #4
 800764c:	bf14      	ite	ne
 800764e:	2500      	movne	r5, #0
 8007650:	6833      	ldreq	r3, [r6, #0]
 8007652:	f04f 0600 	mov.w	r6, #0
 8007656:	bf08      	it	eq
 8007658:	68e5      	ldreq	r5, [r4, #12]
 800765a:	f104 041a 	add.w	r4, r4, #26
 800765e:	bf08      	it	eq
 8007660:	1aed      	subeq	r5, r5, r3
 8007662:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007666:	bf08      	it	eq
 8007668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800766c:	4293      	cmp	r3, r2
 800766e:	bfc4      	itt	gt
 8007670:	1a9b      	subgt	r3, r3, r2
 8007672:	18ed      	addgt	r5, r5, r3
 8007674:	42b5      	cmp	r5, r6
 8007676:	d11a      	bne.n	80076ae <_printf_common+0xd2>
 8007678:	2000      	movs	r0, #0
 800767a:	e008      	b.n	800768e <_printf_common+0xb2>
 800767c:	2301      	movs	r3, #1
 800767e:	4652      	mov	r2, sl
 8007680:	4649      	mov	r1, r9
 8007682:	4638      	mov	r0, r7
 8007684:	47c0      	blx	r8
 8007686:	3001      	adds	r0, #1
 8007688:	d103      	bne.n	8007692 <_printf_common+0xb6>
 800768a:	f04f 30ff 	mov.w	r0, #4294967295
 800768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007692:	3501      	adds	r5, #1
 8007694:	e7c1      	b.n	800761a <_printf_common+0x3e>
 8007696:	2030      	movs	r0, #48	; 0x30
 8007698:	18e1      	adds	r1, r4, r3
 800769a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076a4:	4422      	add	r2, r4
 80076a6:	3302      	adds	r3, #2
 80076a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ac:	e7c2      	b.n	8007634 <_printf_common+0x58>
 80076ae:	2301      	movs	r3, #1
 80076b0:	4622      	mov	r2, r4
 80076b2:	4649      	mov	r1, r9
 80076b4:	4638      	mov	r0, r7
 80076b6:	47c0      	blx	r8
 80076b8:	3001      	adds	r0, #1
 80076ba:	d0e6      	beq.n	800768a <_printf_common+0xae>
 80076bc:	3601      	adds	r6, #1
 80076be:	e7d9      	b.n	8007674 <_printf_common+0x98>

080076c0 <_printf_i>:
 80076c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076c4:	7e0f      	ldrb	r7, [r1, #24]
 80076c6:	4691      	mov	r9, r2
 80076c8:	2f78      	cmp	r7, #120	; 0x78
 80076ca:	4680      	mov	r8, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	469a      	mov	sl, r3
 80076d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076d6:	d807      	bhi.n	80076e8 <_printf_i+0x28>
 80076d8:	2f62      	cmp	r7, #98	; 0x62
 80076da:	d80a      	bhi.n	80076f2 <_printf_i+0x32>
 80076dc:	2f00      	cmp	r7, #0
 80076de:	f000 80d5 	beq.w	800788c <_printf_i+0x1cc>
 80076e2:	2f58      	cmp	r7, #88	; 0x58
 80076e4:	f000 80c1 	beq.w	800786a <_printf_i+0x1aa>
 80076e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076f0:	e03a      	b.n	8007768 <_printf_i+0xa8>
 80076f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076f6:	2b15      	cmp	r3, #21
 80076f8:	d8f6      	bhi.n	80076e8 <_printf_i+0x28>
 80076fa:	a101      	add	r1, pc, #4	; (adr r1, 8007700 <_printf_i+0x40>)
 80076fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007700:	08007759 	.word	0x08007759
 8007704:	0800776d 	.word	0x0800776d
 8007708:	080076e9 	.word	0x080076e9
 800770c:	080076e9 	.word	0x080076e9
 8007710:	080076e9 	.word	0x080076e9
 8007714:	080076e9 	.word	0x080076e9
 8007718:	0800776d 	.word	0x0800776d
 800771c:	080076e9 	.word	0x080076e9
 8007720:	080076e9 	.word	0x080076e9
 8007724:	080076e9 	.word	0x080076e9
 8007728:	080076e9 	.word	0x080076e9
 800772c:	08007873 	.word	0x08007873
 8007730:	08007799 	.word	0x08007799
 8007734:	0800782d 	.word	0x0800782d
 8007738:	080076e9 	.word	0x080076e9
 800773c:	080076e9 	.word	0x080076e9
 8007740:	08007895 	.word	0x08007895
 8007744:	080076e9 	.word	0x080076e9
 8007748:	08007799 	.word	0x08007799
 800774c:	080076e9 	.word	0x080076e9
 8007750:	080076e9 	.word	0x080076e9
 8007754:	08007835 	.word	0x08007835
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	1d1a      	adds	r2, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	602a      	str	r2, [r5, #0]
 8007760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007768:	2301      	movs	r3, #1
 800776a:	e0a0      	b.n	80078ae <_printf_i+0x1ee>
 800776c:	6820      	ldr	r0, [r4, #0]
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	0607      	lsls	r7, r0, #24
 8007772:	f103 0104 	add.w	r1, r3, #4
 8007776:	6029      	str	r1, [r5, #0]
 8007778:	d501      	bpl.n	800777e <_printf_i+0xbe>
 800777a:	681e      	ldr	r6, [r3, #0]
 800777c:	e003      	b.n	8007786 <_printf_i+0xc6>
 800777e:	0646      	lsls	r6, r0, #25
 8007780:	d5fb      	bpl.n	800777a <_printf_i+0xba>
 8007782:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007786:	2e00      	cmp	r6, #0
 8007788:	da03      	bge.n	8007792 <_printf_i+0xd2>
 800778a:	232d      	movs	r3, #45	; 0x2d
 800778c:	4276      	negs	r6, r6
 800778e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007792:	230a      	movs	r3, #10
 8007794:	4859      	ldr	r0, [pc, #356]	; (80078fc <_printf_i+0x23c>)
 8007796:	e012      	b.n	80077be <_printf_i+0xfe>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	6820      	ldr	r0, [r4, #0]
 800779c:	1d19      	adds	r1, r3, #4
 800779e:	6029      	str	r1, [r5, #0]
 80077a0:	0605      	lsls	r5, r0, #24
 80077a2:	d501      	bpl.n	80077a8 <_printf_i+0xe8>
 80077a4:	681e      	ldr	r6, [r3, #0]
 80077a6:	e002      	b.n	80077ae <_printf_i+0xee>
 80077a8:	0641      	lsls	r1, r0, #25
 80077aa:	d5fb      	bpl.n	80077a4 <_printf_i+0xe4>
 80077ac:	881e      	ldrh	r6, [r3, #0]
 80077ae:	2f6f      	cmp	r7, #111	; 0x6f
 80077b0:	bf0c      	ite	eq
 80077b2:	2308      	moveq	r3, #8
 80077b4:	230a      	movne	r3, #10
 80077b6:	4851      	ldr	r0, [pc, #324]	; (80078fc <_printf_i+0x23c>)
 80077b8:	2100      	movs	r1, #0
 80077ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077be:	6865      	ldr	r5, [r4, #4]
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	bfa8      	it	ge
 80077c4:	6821      	ldrge	r1, [r4, #0]
 80077c6:	60a5      	str	r5, [r4, #8]
 80077c8:	bfa4      	itt	ge
 80077ca:	f021 0104 	bicge.w	r1, r1, #4
 80077ce:	6021      	strge	r1, [r4, #0]
 80077d0:	b90e      	cbnz	r6, 80077d6 <_printf_i+0x116>
 80077d2:	2d00      	cmp	r5, #0
 80077d4:	d04b      	beq.n	800786e <_printf_i+0x1ae>
 80077d6:	4615      	mov	r5, r2
 80077d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80077dc:	fb03 6711 	mls	r7, r3, r1, r6
 80077e0:	5dc7      	ldrb	r7, [r0, r7]
 80077e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077e6:	4637      	mov	r7, r6
 80077e8:	42bb      	cmp	r3, r7
 80077ea:	460e      	mov	r6, r1
 80077ec:	d9f4      	bls.n	80077d8 <_printf_i+0x118>
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d10b      	bne.n	800780a <_printf_i+0x14a>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	07de      	lsls	r6, r3, #31
 80077f6:	d508      	bpl.n	800780a <_printf_i+0x14a>
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	6861      	ldr	r1, [r4, #4]
 80077fc:	4299      	cmp	r1, r3
 80077fe:	bfde      	ittt	le
 8007800:	2330      	movle	r3, #48	; 0x30
 8007802:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007806:	f105 35ff 	addle.w	r5, r5, #4294967295
 800780a:	1b52      	subs	r2, r2, r5
 800780c:	6122      	str	r2, [r4, #16]
 800780e:	464b      	mov	r3, r9
 8007810:	4621      	mov	r1, r4
 8007812:	4640      	mov	r0, r8
 8007814:	f8cd a000 	str.w	sl, [sp]
 8007818:	aa03      	add	r2, sp, #12
 800781a:	f7ff fedf 	bl	80075dc <_printf_common>
 800781e:	3001      	adds	r0, #1
 8007820:	d14a      	bne.n	80078b8 <_printf_i+0x1f8>
 8007822:	f04f 30ff 	mov.w	r0, #4294967295
 8007826:	b004      	add	sp, #16
 8007828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	f043 0320 	orr.w	r3, r3, #32
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	2778      	movs	r7, #120	; 0x78
 8007836:	4832      	ldr	r0, [pc, #200]	; (8007900 <_printf_i+0x240>)
 8007838:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	6829      	ldr	r1, [r5, #0]
 8007840:	061f      	lsls	r7, r3, #24
 8007842:	f851 6b04 	ldr.w	r6, [r1], #4
 8007846:	d402      	bmi.n	800784e <_printf_i+0x18e>
 8007848:	065f      	lsls	r7, r3, #25
 800784a:	bf48      	it	mi
 800784c:	b2b6      	uxthmi	r6, r6
 800784e:	07df      	lsls	r7, r3, #31
 8007850:	bf48      	it	mi
 8007852:	f043 0320 	orrmi.w	r3, r3, #32
 8007856:	6029      	str	r1, [r5, #0]
 8007858:	bf48      	it	mi
 800785a:	6023      	strmi	r3, [r4, #0]
 800785c:	b91e      	cbnz	r6, 8007866 <_printf_i+0x1a6>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	f023 0320 	bic.w	r3, r3, #32
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	2310      	movs	r3, #16
 8007868:	e7a6      	b.n	80077b8 <_printf_i+0xf8>
 800786a:	4824      	ldr	r0, [pc, #144]	; (80078fc <_printf_i+0x23c>)
 800786c:	e7e4      	b.n	8007838 <_printf_i+0x178>
 800786e:	4615      	mov	r5, r2
 8007870:	e7bd      	b.n	80077ee <_printf_i+0x12e>
 8007872:	682b      	ldr	r3, [r5, #0]
 8007874:	6826      	ldr	r6, [r4, #0]
 8007876:	1d18      	adds	r0, r3, #4
 8007878:	6961      	ldr	r1, [r4, #20]
 800787a:	6028      	str	r0, [r5, #0]
 800787c:	0635      	lsls	r5, r6, #24
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	d501      	bpl.n	8007886 <_printf_i+0x1c6>
 8007882:	6019      	str	r1, [r3, #0]
 8007884:	e002      	b.n	800788c <_printf_i+0x1cc>
 8007886:	0670      	lsls	r0, r6, #25
 8007888:	d5fb      	bpl.n	8007882 <_printf_i+0x1c2>
 800788a:	8019      	strh	r1, [r3, #0]
 800788c:	2300      	movs	r3, #0
 800788e:	4615      	mov	r5, r2
 8007890:	6123      	str	r3, [r4, #16]
 8007892:	e7bc      	b.n	800780e <_printf_i+0x14e>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	2100      	movs	r1, #0
 8007898:	1d1a      	adds	r2, r3, #4
 800789a:	602a      	str	r2, [r5, #0]
 800789c:	681d      	ldr	r5, [r3, #0]
 800789e:	6862      	ldr	r2, [r4, #4]
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 fbfc 	bl	800809e <memchr>
 80078a6:	b108      	cbz	r0, 80078ac <_printf_i+0x1ec>
 80078a8:	1b40      	subs	r0, r0, r5
 80078aa:	6060      	str	r0, [r4, #4]
 80078ac:	6863      	ldr	r3, [r4, #4]
 80078ae:	6123      	str	r3, [r4, #16]
 80078b0:	2300      	movs	r3, #0
 80078b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078b6:	e7aa      	b.n	800780e <_printf_i+0x14e>
 80078b8:	462a      	mov	r2, r5
 80078ba:	4649      	mov	r1, r9
 80078bc:	4640      	mov	r0, r8
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	47d0      	blx	sl
 80078c2:	3001      	adds	r0, #1
 80078c4:	d0ad      	beq.n	8007822 <_printf_i+0x162>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	079b      	lsls	r3, r3, #30
 80078ca:	d413      	bmi.n	80078f4 <_printf_i+0x234>
 80078cc:	68e0      	ldr	r0, [r4, #12]
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	4298      	cmp	r0, r3
 80078d2:	bfb8      	it	lt
 80078d4:	4618      	movlt	r0, r3
 80078d6:	e7a6      	b.n	8007826 <_printf_i+0x166>
 80078d8:	2301      	movs	r3, #1
 80078da:	4632      	mov	r2, r6
 80078dc:	4649      	mov	r1, r9
 80078de:	4640      	mov	r0, r8
 80078e0:	47d0      	blx	sl
 80078e2:	3001      	adds	r0, #1
 80078e4:	d09d      	beq.n	8007822 <_printf_i+0x162>
 80078e6:	3501      	adds	r5, #1
 80078e8:	68e3      	ldr	r3, [r4, #12]
 80078ea:	9903      	ldr	r1, [sp, #12]
 80078ec:	1a5b      	subs	r3, r3, r1
 80078ee:	42ab      	cmp	r3, r5
 80078f0:	dcf2      	bgt.n	80078d8 <_printf_i+0x218>
 80078f2:	e7eb      	b.n	80078cc <_printf_i+0x20c>
 80078f4:	2500      	movs	r5, #0
 80078f6:	f104 0619 	add.w	r6, r4, #25
 80078fa:	e7f5      	b.n	80078e8 <_printf_i+0x228>
 80078fc:	0800bf9c 	.word	0x0800bf9c
 8007900:	0800bfad 	.word	0x0800bfad

08007904 <_scanf_float>:
 8007904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007908:	b087      	sub	sp, #28
 800790a:	9303      	str	r3, [sp, #12]
 800790c:	688b      	ldr	r3, [r1, #8]
 800790e:	4617      	mov	r7, r2
 8007910:	1e5a      	subs	r2, r3, #1
 8007912:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007916:	bf85      	ittet	hi
 8007918:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800791c:	195b      	addhi	r3, r3, r5
 800791e:	2300      	movls	r3, #0
 8007920:	9302      	strhi	r3, [sp, #8]
 8007922:	bf88      	it	hi
 8007924:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007928:	468b      	mov	fp, r1
 800792a:	f04f 0500 	mov.w	r5, #0
 800792e:	bf8c      	ite	hi
 8007930:	608b      	strhi	r3, [r1, #8]
 8007932:	9302      	strls	r3, [sp, #8]
 8007934:	680b      	ldr	r3, [r1, #0]
 8007936:	4680      	mov	r8, r0
 8007938:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800793c:	f84b 3b1c 	str.w	r3, [fp], #28
 8007940:	460c      	mov	r4, r1
 8007942:	465e      	mov	r6, fp
 8007944:	46aa      	mov	sl, r5
 8007946:	46a9      	mov	r9, r5
 8007948:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800794c:	9501      	str	r5, [sp, #4]
 800794e:	68a2      	ldr	r2, [r4, #8]
 8007950:	b152      	cbz	r2, 8007968 <_scanf_float+0x64>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b4e      	cmp	r3, #78	; 0x4e
 8007958:	d864      	bhi.n	8007a24 <_scanf_float+0x120>
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d83c      	bhi.n	80079d8 <_scanf_float+0xd4>
 800795e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007962:	b2c8      	uxtb	r0, r1
 8007964:	280e      	cmp	r0, #14
 8007966:	d93a      	bls.n	80079de <_scanf_float+0xda>
 8007968:	f1b9 0f00 	cmp.w	r9, #0
 800796c:	d003      	beq.n	8007976 <_scanf_float+0x72>
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800797a:	f1ba 0f01 	cmp.w	sl, #1
 800797e:	f200 8113 	bhi.w	8007ba8 <_scanf_float+0x2a4>
 8007982:	455e      	cmp	r6, fp
 8007984:	f200 8105 	bhi.w	8007b92 <_scanf_float+0x28e>
 8007988:	2501      	movs	r5, #1
 800798a:	4628      	mov	r0, r5
 800798c:	b007      	add	sp, #28
 800798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007992:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007996:	2a0d      	cmp	r2, #13
 8007998:	d8e6      	bhi.n	8007968 <_scanf_float+0x64>
 800799a:	a101      	add	r1, pc, #4	; (adr r1, 80079a0 <_scanf_float+0x9c>)
 800799c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80079a0:	08007adf 	.word	0x08007adf
 80079a4:	08007969 	.word	0x08007969
 80079a8:	08007969 	.word	0x08007969
 80079ac:	08007969 	.word	0x08007969
 80079b0:	08007b3f 	.word	0x08007b3f
 80079b4:	08007b17 	.word	0x08007b17
 80079b8:	08007969 	.word	0x08007969
 80079bc:	08007969 	.word	0x08007969
 80079c0:	08007aed 	.word	0x08007aed
 80079c4:	08007969 	.word	0x08007969
 80079c8:	08007969 	.word	0x08007969
 80079cc:	08007969 	.word	0x08007969
 80079d0:	08007969 	.word	0x08007969
 80079d4:	08007aa5 	.word	0x08007aa5
 80079d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80079dc:	e7db      	b.n	8007996 <_scanf_float+0x92>
 80079de:	290e      	cmp	r1, #14
 80079e0:	d8c2      	bhi.n	8007968 <_scanf_float+0x64>
 80079e2:	a001      	add	r0, pc, #4	; (adr r0, 80079e8 <_scanf_float+0xe4>)
 80079e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80079e8:	08007a97 	.word	0x08007a97
 80079ec:	08007969 	.word	0x08007969
 80079f0:	08007a97 	.word	0x08007a97
 80079f4:	08007b2b 	.word	0x08007b2b
 80079f8:	08007969 	.word	0x08007969
 80079fc:	08007a45 	.word	0x08007a45
 8007a00:	08007a81 	.word	0x08007a81
 8007a04:	08007a81 	.word	0x08007a81
 8007a08:	08007a81 	.word	0x08007a81
 8007a0c:	08007a81 	.word	0x08007a81
 8007a10:	08007a81 	.word	0x08007a81
 8007a14:	08007a81 	.word	0x08007a81
 8007a18:	08007a81 	.word	0x08007a81
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007a81 	.word	0x08007a81
 8007a24:	2b6e      	cmp	r3, #110	; 0x6e
 8007a26:	d809      	bhi.n	8007a3c <_scanf_float+0x138>
 8007a28:	2b60      	cmp	r3, #96	; 0x60
 8007a2a:	d8b2      	bhi.n	8007992 <_scanf_float+0x8e>
 8007a2c:	2b54      	cmp	r3, #84	; 0x54
 8007a2e:	d077      	beq.n	8007b20 <_scanf_float+0x21c>
 8007a30:	2b59      	cmp	r3, #89	; 0x59
 8007a32:	d199      	bne.n	8007968 <_scanf_float+0x64>
 8007a34:	2d07      	cmp	r5, #7
 8007a36:	d197      	bne.n	8007968 <_scanf_float+0x64>
 8007a38:	2508      	movs	r5, #8
 8007a3a:	e029      	b.n	8007a90 <_scanf_float+0x18c>
 8007a3c:	2b74      	cmp	r3, #116	; 0x74
 8007a3e:	d06f      	beq.n	8007b20 <_scanf_float+0x21c>
 8007a40:	2b79      	cmp	r3, #121	; 0x79
 8007a42:	e7f6      	b.n	8007a32 <_scanf_float+0x12e>
 8007a44:	6821      	ldr	r1, [r4, #0]
 8007a46:	05c8      	lsls	r0, r1, #23
 8007a48:	d51a      	bpl.n	8007a80 <_scanf_float+0x17c>
 8007a4a:	9b02      	ldr	r3, [sp, #8]
 8007a4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007a50:	6021      	str	r1, [r4, #0]
 8007a52:	f109 0901 	add.w	r9, r9, #1
 8007a56:	b11b      	cbz	r3, 8007a60 <_scanf_float+0x15c>
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	3201      	adds	r2, #1
 8007a5c:	9302      	str	r3, [sp, #8]
 8007a5e:	60a2      	str	r2, [r4, #8]
 8007a60:	68a3      	ldr	r3, [r4, #8]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	60a3      	str	r3, [r4, #8]
 8007a66:	6923      	ldr	r3, [r4, #16]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	6123      	str	r3, [r4, #16]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	607b      	str	r3, [r7, #4]
 8007a74:	f340 8084 	ble.w	8007b80 <_scanf_float+0x27c>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	e766      	b.n	800794e <_scanf_float+0x4a>
 8007a80:	eb1a 0f05 	cmn.w	sl, r5
 8007a84:	f47f af70 	bne.w	8007968 <_scanf_float+0x64>
 8007a88:	6822      	ldr	r2, [r4, #0]
 8007a8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007a8e:	6022      	str	r2, [r4, #0]
 8007a90:	f806 3b01 	strb.w	r3, [r6], #1
 8007a94:	e7e4      	b.n	8007a60 <_scanf_float+0x15c>
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	0610      	lsls	r0, r2, #24
 8007a9a:	f57f af65 	bpl.w	8007968 <_scanf_float+0x64>
 8007a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aa2:	e7f4      	b.n	8007a8e <_scanf_float+0x18a>
 8007aa4:	f1ba 0f00 	cmp.w	sl, #0
 8007aa8:	d10e      	bne.n	8007ac8 <_scanf_float+0x1c4>
 8007aaa:	f1b9 0f00 	cmp.w	r9, #0
 8007aae:	d10e      	bne.n	8007ace <_scanf_float+0x1ca>
 8007ab0:	6822      	ldr	r2, [r4, #0]
 8007ab2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ab6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007aba:	d108      	bne.n	8007ace <_scanf_float+0x1ca>
 8007abc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ac0:	f04f 0a01 	mov.w	sl, #1
 8007ac4:	6022      	str	r2, [r4, #0]
 8007ac6:	e7e3      	b.n	8007a90 <_scanf_float+0x18c>
 8007ac8:	f1ba 0f02 	cmp.w	sl, #2
 8007acc:	d055      	beq.n	8007b7a <_scanf_float+0x276>
 8007ace:	2d01      	cmp	r5, #1
 8007ad0:	d002      	beq.n	8007ad8 <_scanf_float+0x1d4>
 8007ad2:	2d04      	cmp	r5, #4
 8007ad4:	f47f af48 	bne.w	8007968 <_scanf_float+0x64>
 8007ad8:	3501      	adds	r5, #1
 8007ada:	b2ed      	uxtb	r5, r5
 8007adc:	e7d8      	b.n	8007a90 <_scanf_float+0x18c>
 8007ade:	f1ba 0f01 	cmp.w	sl, #1
 8007ae2:	f47f af41 	bne.w	8007968 <_scanf_float+0x64>
 8007ae6:	f04f 0a02 	mov.w	sl, #2
 8007aea:	e7d1      	b.n	8007a90 <_scanf_float+0x18c>
 8007aec:	b97d      	cbnz	r5, 8007b0e <_scanf_float+0x20a>
 8007aee:	f1b9 0f00 	cmp.w	r9, #0
 8007af2:	f47f af3c 	bne.w	800796e <_scanf_float+0x6a>
 8007af6:	6822      	ldr	r2, [r4, #0]
 8007af8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007afc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b00:	f47f af39 	bne.w	8007976 <_scanf_float+0x72>
 8007b04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b08:	2501      	movs	r5, #1
 8007b0a:	6022      	str	r2, [r4, #0]
 8007b0c:	e7c0      	b.n	8007a90 <_scanf_float+0x18c>
 8007b0e:	2d03      	cmp	r5, #3
 8007b10:	d0e2      	beq.n	8007ad8 <_scanf_float+0x1d4>
 8007b12:	2d05      	cmp	r5, #5
 8007b14:	e7de      	b.n	8007ad4 <_scanf_float+0x1d0>
 8007b16:	2d02      	cmp	r5, #2
 8007b18:	f47f af26 	bne.w	8007968 <_scanf_float+0x64>
 8007b1c:	2503      	movs	r5, #3
 8007b1e:	e7b7      	b.n	8007a90 <_scanf_float+0x18c>
 8007b20:	2d06      	cmp	r5, #6
 8007b22:	f47f af21 	bne.w	8007968 <_scanf_float+0x64>
 8007b26:	2507      	movs	r5, #7
 8007b28:	e7b2      	b.n	8007a90 <_scanf_float+0x18c>
 8007b2a:	6822      	ldr	r2, [r4, #0]
 8007b2c:	0591      	lsls	r1, r2, #22
 8007b2e:	f57f af1b 	bpl.w	8007968 <_scanf_float+0x64>
 8007b32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007b36:	6022      	str	r2, [r4, #0]
 8007b38:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b3c:	e7a8      	b.n	8007a90 <_scanf_float+0x18c>
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007b44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007b48:	d006      	beq.n	8007b58 <_scanf_float+0x254>
 8007b4a:	0550      	lsls	r0, r2, #21
 8007b4c:	f57f af0c 	bpl.w	8007968 <_scanf_float+0x64>
 8007b50:	f1b9 0f00 	cmp.w	r9, #0
 8007b54:	f43f af0f 	beq.w	8007976 <_scanf_float+0x72>
 8007b58:	0591      	lsls	r1, r2, #22
 8007b5a:	bf58      	it	pl
 8007b5c:	9901      	ldrpl	r1, [sp, #4]
 8007b5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b62:	bf58      	it	pl
 8007b64:	eba9 0101 	subpl.w	r1, r9, r1
 8007b68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007b6c:	f04f 0900 	mov.w	r9, #0
 8007b70:	bf58      	it	pl
 8007b72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b76:	6022      	str	r2, [r4, #0]
 8007b78:	e78a      	b.n	8007a90 <_scanf_float+0x18c>
 8007b7a:	f04f 0a03 	mov.w	sl, #3
 8007b7e:	e787      	b.n	8007a90 <_scanf_float+0x18c>
 8007b80:	4639      	mov	r1, r7
 8007b82:	4640      	mov	r0, r8
 8007b84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b88:	4798      	blx	r3
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	f43f aedf 	beq.w	800794e <_scanf_float+0x4a>
 8007b90:	e6ea      	b.n	8007968 <_scanf_float+0x64>
 8007b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b96:	463a      	mov	r2, r7
 8007b98:	4640      	mov	r0, r8
 8007b9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b9e:	4798      	blx	r3
 8007ba0:	6923      	ldr	r3, [r4, #16]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	6123      	str	r3, [r4, #16]
 8007ba6:	e6ec      	b.n	8007982 <_scanf_float+0x7e>
 8007ba8:	1e6b      	subs	r3, r5, #1
 8007baa:	2b06      	cmp	r3, #6
 8007bac:	d825      	bhi.n	8007bfa <_scanf_float+0x2f6>
 8007bae:	2d02      	cmp	r5, #2
 8007bb0:	d836      	bhi.n	8007c20 <_scanf_float+0x31c>
 8007bb2:	455e      	cmp	r6, fp
 8007bb4:	f67f aee8 	bls.w	8007988 <_scanf_float+0x84>
 8007bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bbc:	463a      	mov	r2, r7
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bc4:	4798      	blx	r3
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	6123      	str	r3, [r4, #16]
 8007bcc:	e7f1      	b.n	8007bb2 <_scanf_float+0x2ae>
 8007bce:	9802      	ldr	r0, [sp, #8]
 8007bd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bd4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007bd8:	463a      	mov	r2, r7
 8007bda:	9002      	str	r0, [sp, #8]
 8007bdc:	4640      	mov	r0, r8
 8007bde:	4798      	blx	r3
 8007be0:	6923      	ldr	r3, [r4, #16]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	6123      	str	r3, [r4, #16]
 8007be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bea:	fa5f fa8a 	uxtb.w	sl, sl
 8007bee:	f1ba 0f02 	cmp.w	sl, #2
 8007bf2:	d1ec      	bne.n	8007bce <_scanf_float+0x2ca>
 8007bf4:	3d03      	subs	r5, #3
 8007bf6:	b2ed      	uxtb	r5, r5
 8007bf8:	1b76      	subs	r6, r6, r5
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	05da      	lsls	r2, r3, #23
 8007bfe:	d52f      	bpl.n	8007c60 <_scanf_float+0x35c>
 8007c00:	055b      	lsls	r3, r3, #21
 8007c02:	d510      	bpl.n	8007c26 <_scanf_float+0x322>
 8007c04:	455e      	cmp	r6, fp
 8007c06:	f67f aebf 	bls.w	8007988 <_scanf_float+0x84>
 8007c0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c0e:	463a      	mov	r2, r7
 8007c10:	4640      	mov	r0, r8
 8007c12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c16:	4798      	blx	r3
 8007c18:	6923      	ldr	r3, [r4, #16]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	6123      	str	r3, [r4, #16]
 8007c1e:	e7f1      	b.n	8007c04 <_scanf_float+0x300>
 8007c20:	46aa      	mov	sl, r5
 8007c22:	9602      	str	r6, [sp, #8]
 8007c24:	e7df      	b.n	8007be6 <_scanf_float+0x2e2>
 8007c26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	2965      	cmp	r1, #101	; 0x65
 8007c2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c32:	f106 35ff 	add.w	r5, r6, #4294967295
 8007c36:	6123      	str	r3, [r4, #16]
 8007c38:	d00c      	beq.n	8007c54 <_scanf_float+0x350>
 8007c3a:	2945      	cmp	r1, #69	; 0x45
 8007c3c:	d00a      	beq.n	8007c54 <_scanf_float+0x350>
 8007c3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c42:	463a      	mov	r2, r7
 8007c44:	4640      	mov	r0, r8
 8007c46:	4798      	blx	r3
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	1eb5      	subs	r5, r6, #2
 8007c52:	6123      	str	r3, [r4, #16]
 8007c54:	463a      	mov	r2, r7
 8007c56:	4640      	mov	r0, r8
 8007c58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c5c:	4798      	blx	r3
 8007c5e:	462e      	mov	r6, r5
 8007c60:	6825      	ldr	r5, [r4, #0]
 8007c62:	f015 0510 	ands.w	r5, r5, #16
 8007c66:	d155      	bne.n	8007d14 <_scanf_float+0x410>
 8007c68:	7035      	strb	r5, [r6, #0]
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c74:	d11d      	bne.n	8007cb2 <_scanf_float+0x3ae>
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	454b      	cmp	r3, r9
 8007c7a:	eba3 0209 	sub.w	r2, r3, r9
 8007c7e:	d125      	bne.n	8007ccc <_scanf_float+0x3c8>
 8007c80:	2200      	movs	r2, #0
 8007c82:	4659      	mov	r1, fp
 8007c84:	4640      	mov	r0, r8
 8007c86:	f002 fc4b 	bl	800a520 <_strtod_r>
 8007c8a:	9b03      	ldr	r3, [sp, #12]
 8007c8c:	f8d4 c000 	ldr.w	ip, [r4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f01c 0f02 	tst.w	ip, #2
 8007c96:	4606      	mov	r6, r0
 8007c98:	460f      	mov	r7, r1
 8007c9a:	f103 0204 	add.w	r2, r3, #4
 8007c9e:	d020      	beq.n	8007ce2 <_scanf_float+0x3de>
 8007ca0:	9903      	ldr	r1, [sp, #12]
 8007ca2:	600a      	str	r2, [r1, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	e9c3 6700 	strd	r6, r7, [r3]
 8007caa:	68e3      	ldr	r3, [r4, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60e3      	str	r3, [r4, #12]
 8007cb0:	e66b      	b.n	800798a <_scanf_float+0x86>
 8007cb2:	9b04      	ldr	r3, [sp, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0e3      	beq.n	8007c80 <_scanf_float+0x37c>
 8007cb8:	9905      	ldr	r1, [sp, #20]
 8007cba:	230a      	movs	r3, #10
 8007cbc:	462a      	mov	r2, r5
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	3101      	adds	r1, #1
 8007cc2:	f002 fcb1 	bl	800a628 <_strtol_r>
 8007cc6:	9b04      	ldr	r3, [sp, #16]
 8007cc8:	9e05      	ldr	r6, [sp, #20]
 8007cca:	1ac2      	subs	r2, r0, r3
 8007ccc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007cd0:	429e      	cmp	r6, r3
 8007cd2:	bf28      	it	cs
 8007cd4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007cd8:	4630      	mov	r0, r6
 8007cda:	490f      	ldr	r1, [pc, #60]	; (8007d18 <_scanf_float+0x414>)
 8007cdc:	f000 f8e2 	bl	8007ea4 <siprintf>
 8007ce0:	e7ce      	b.n	8007c80 <_scanf_float+0x37c>
 8007ce2:	f01c 0f04 	tst.w	ip, #4
 8007ce6:	d1db      	bne.n	8007ca0 <_scanf_float+0x39c>
 8007ce8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007cec:	f8cc 2000 	str.w	r2, [ip]
 8007cf0:	f8d3 8000 	ldr.w	r8, [r3]
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	f7f8 fe88 	bl	8000a0c <__aeabi_dcmpun>
 8007cfc:	b128      	cbz	r0, 8007d0a <_scanf_float+0x406>
 8007cfe:	4807      	ldr	r0, [pc, #28]	; (8007d1c <_scanf_float+0x418>)
 8007d00:	f000 f9ea 	bl	80080d8 <nanf>
 8007d04:	f8c8 0000 	str.w	r0, [r8]
 8007d08:	e7cf      	b.n	8007caa <_scanf_float+0x3a6>
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	f7f8 fedb 	bl	8000ac8 <__aeabi_d2f>
 8007d12:	e7f7      	b.n	8007d04 <_scanf_float+0x400>
 8007d14:	2500      	movs	r5, #0
 8007d16:	e638      	b.n	800798a <_scanf_float+0x86>
 8007d18:	0800bfbe 	.word	0x0800bfbe
 8007d1c:	0800c355 	.word	0x0800c355

08007d20 <std>:
 8007d20:	2300      	movs	r3, #0
 8007d22:	b510      	push	{r4, lr}
 8007d24:	4604      	mov	r4, r0
 8007d26:	e9c0 3300 	strd	r3, r3, [r0]
 8007d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d2e:	6083      	str	r3, [r0, #8]
 8007d30:	8181      	strh	r1, [r0, #12]
 8007d32:	6643      	str	r3, [r0, #100]	; 0x64
 8007d34:	81c2      	strh	r2, [r0, #14]
 8007d36:	6183      	str	r3, [r0, #24]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	305c      	adds	r0, #92	; 0x5c
 8007d3e:	f000 f92e 	bl	8007f9e <memset>
 8007d42:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <std+0x58>)
 8007d44:	6224      	str	r4, [r4, #32]
 8007d46:	6263      	str	r3, [r4, #36]	; 0x24
 8007d48:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <std+0x5c>)
 8007d4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d4c:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <std+0x60>)
 8007d4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d50:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <std+0x64>)
 8007d52:	6323      	str	r3, [r4, #48]	; 0x30
 8007d54:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <std+0x68>)
 8007d56:	429c      	cmp	r4, r3
 8007d58:	d006      	beq.n	8007d68 <std+0x48>
 8007d5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007d5e:	4294      	cmp	r4, r2
 8007d60:	d002      	beq.n	8007d68 <std+0x48>
 8007d62:	33d0      	adds	r3, #208	; 0xd0
 8007d64:	429c      	cmp	r4, r3
 8007d66:	d105      	bne.n	8007d74 <std+0x54>
 8007d68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d70:	f000 b992 	b.w	8008098 <__retarget_lock_init_recursive>
 8007d74:	bd10      	pop	{r4, pc}
 8007d76:	bf00      	nop
 8007d78:	08007ee5 	.word	0x08007ee5
 8007d7c:	08007f07 	.word	0x08007f07
 8007d80:	08007f3f 	.word	0x08007f3f
 8007d84:	08007f63 	.word	0x08007f63
 8007d88:	20000848 	.word	0x20000848

08007d8c <stdio_exit_handler>:
 8007d8c:	4a02      	ldr	r2, [pc, #8]	; (8007d98 <stdio_exit_handler+0xc>)
 8007d8e:	4903      	ldr	r1, [pc, #12]	; (8007d9c <stdio_exit_handler+0x10>)
 8007d90:	4803      	ldr	r0, [pc, #12]	; (8007da0 <stdio_exit_handler+0x14>)
 8007d92:	f000 b869 	b.w	8007e68 <_fwalk_sglue>
 8007d96:	bf00      	nop
 8007d98:	20000024 	.word	0x20000024
 8007d9c:	0800a9e1 	.word	0x0800a9e1
 8007da0:	20000030 	.word	0x20000030

08007da4 <cleanup_stdio>:
 8007da4:	6841      	ldr	r1, [r0, #4]
 8007da6:	4b0c      	ldr	r3, [pc, #48]	; (8007dd8 <cleanup_stdio+0x34>)
 8007da8:	b510      	push	{r4, lr}
 8007daa:	4299      	cmp	r1, r3
 8007dac:	4604      	mov	r4, r0
 8007dae:	d001      	beq.n	8007db4 <cleanup_stdio+0x10>
 8007db0:	f002 fe16 	bl	800a9e0 <_fflush_r>
 8007db4:	68a1      	ldr	r1, [r4, #8]
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <cleanup_stdio+0x38>)
 8007db8:	4299      	cmp	r1, r3
 8007dba:	d002      	beq.n	8007dc2 <cleanup_stdio+0x1e>
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f002 fe0f 	bl	800a9e0 <_fflush_r>
 8007dc2:	68e1      	ldr	r1, [r4, #12]
 8007dc4:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <cleanup_stdio+0x3c>)
 8007dc6:	4299      	cmp	r1, r3
 8007dc8:	d004      	beq.n	8007dd4 <cleanup_stdio+0x30>
 8007dca:	4620      	mov	r0, r4
 8007dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd0:	f002 be06 	b.w	800a9e0 <_fflush_r>
 8007dd4:	bd10      	pop	{r4, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000848 	.word	0x20000848
 8007ddc:	200008b0 	.word	0x200008b0
 8007de0:	20000918 	.word	0x20000918

08007de4 <global_stdio_init.part.0>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <global_stdio_init.part.0+0x30>)
 8007de8:	4c0b      	ldr	r4, [pc, #44]	; (8007e18 <global_stdio_init.part.0+0x34>)
 8007dea:	4a0c      	ldr	r2, [pc, #48]	; (8007e1c <global_stdio_init.part.0+0x38>)
 8007dec:	4620      	mov	r0, r4
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	2104      	movs	r1, #4
 8007df2:	2200      	movs	r2, #0
 8007df4:	f7ff ff94 	bl	8007d20 <std>
 8007df8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	2109      	movs	r1, #9
 8007e00:	f7ff ff8e 	bl	8007d20 <std>
 8007e04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007e08:	2202      	movs	r2, #2
 8007e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e0e:	2112      	movs	r1, #18
 8007e10:	f7ff bf86 	b.w	8007d20 <std>
 8007e14:	20000980 	.word	0x20000980
 8007e18:	20000848 	.word	0x20000848
 8007e1c:	08007d8d 	.word	0x08007d8d

08007e20 <__sfp_lock_acquire>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__sfp_lock_acquire+0x8>)
 8007e22:	f000 b93a 	b.w	800809a <__retarget_lock_acquire_recursive>
 8007e26:	bf00      	nop
 8007e28:	20000989 	.word	0x20000989

08007e2c <__sfp_lock_release>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	; (8007e34 <__sfp_lock_release+0x8>)
 8007e2e:	f000 b935 	b.w	800809c <__retarget_lock_release_recursive>
 8007e32:	bf00      	nop
 8007e34:	20000989 	.word	0x20000989

08007e38 <__sinit>:
 8007e38:	b510      	push	{r4, lr}
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	f7ff fff0 	bl	8007e20 <__sfp_lock_acquire>
 8007e40:	6a23      	ldr	r3, [r4, #32]
 8007e42:	b11b      	cbz	r3, 8007e4c <__sinit+0x14>
 8007e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e48:	f7ff bff0 	b.w	8007e2c <__sfp_lock_release>
 8007e4c:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <__sinit+0x28>)
 8007e4e:	6223      	str	r3, [r4, #32]
 8007e50:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <__sinit+0x2c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f5      	bne.n	8007e44 <__sinit+0xc>
 8007e58:	f7ff ffc4 	bl	8007de4 <global_stdio_init.part.0>
 8007e5c:	e7f2      	b.n	8007e44 <__sinit+0xc>
 8007e5e:	bf00      	nop
 8007e60:	08007da5 	.word	0x08007da5
 8007e64:	20000980 	.word	0x20000980

08007e68 <_fwalk_sglue>:
 8007e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	4688      	mov	r8, r1
 8007e70:	4614      	mov	r4, r2
 8007e72:	2600      	movs	r6, #0
 8007e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e78:	f1b9 0901 	subs.w	r9, r9, #1
 8007e7c:	d505      	bpl.n	8007e8a <_fwalk_sglue+0x22>
 8007e7e:	6824      	ldr	r4, [r4, #0]
 8007e80:	2c00      	cmp	r4, #0
 8007e82:	d1f7      	bne.n	8007e74 <_fwalk_sglue+0xc>
 8007e84:	4630      	mov	r0, r6
 8007e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8a:	89ab      	ldrh	r3, [r5, #12]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d907      	bls.n	8007ea0 <_fwalk_sglue+0x38>
 8007e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e94:	3301      	adds	r3, #1
 8007e96:	d003      	beq.n	8007ea0 <_fwalk_sglue+0x38>
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	47c0      	blx	r8
 8007e9e:	4306      	orrs	r6, r0
 8007ea0:	3568      	adds	r5, #104	; 0x68
 8007ea2:	e7e9      	b.n	8007e78 <_fwalk_sglue+0x10>

08007ea4 <siprintf>:
 8007ea4:	b40e      	push	{r1, r2, r3}
 8007ea6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eaa:	b500      	push	{lr}
 8007eac:	b09c      	sub	sp, #112	; 0x70
 8007eae:	ab1d      	add	r3, sp, #116	; 0x74
 8007eb0:	9002      	str	r0, [sp, #8]
 8007eb2:	9006      	str	r0, [sp, #24]
 8007eb4:	9107      	str	r1, [sp, #28]
 8007eb6:	9104      	str	r1, [sp, #16]
 8007eb8:	4808      	ldr	r0, [pc, #32]	; (8007edc <siprintf+0x38>)
 8007eba:	4909      	ldr	r1, [pc, #36]	; (8007ee0 <siprintf+0x3c>)
 8007ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec0:	9105      	str	r1, [sp, #20]
 8007ec2:	6800      	ldr	r0, [r0, #0]
 8007ec4:	a902      	add	r1, sp, #8
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	f002 fc0a 	bl	800a6e0 <_svfiprintf_r>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	9b02      	ldr	r3, [sp, #8]
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	b01c      	add	sp, #112	; 0x70
 8007ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed8:	b003      	add	sp, #12
 8007eda:	4770      	bx	lr
 8007edc:	2000007c 	.word	0x2000007c
 8007ee0:	ffff0208 	.word	0xffff0208

08007ee4 <__sread>:
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eec:	f000 f886 	bl	8007ffc <_read_r>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	bfab      	itete	ge
 8007ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ef8:	181b      	addge	r3, r3, r0
 8007efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007efe:	bfac      	ite	ge
 8007f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f02:	81a3      	strhlt	r3, [r4, #12]
 8007f04:	bd10      	pop	{r4, pc}

08007f06 <__swrite>:
 8007f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0a:	461f      	mov	r7, r3
 8007f0c:	898b      	ldrh	r3, [r1, #12]
 8007f0e:	4605      	mov	r5, r0
 8007f10:	05db      	lsls	r3, r3, #23
 8007f12:	460c      	mov	r4, r1
 8007f14:	4616      	mov	r6, r2
 8007f16:	d505      	bpl.n	8007f24 <__swrite+0x1e>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f20:	f000 f85a 	bl	8007fd8 <_lseek_r>
 8007f24:	89a3      	ldrh	r3, [r4, #12]
 8007f26:	4632      	mov	r2, r6
 8007f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	4628      	mov	r0, r5
 8007f30:	463b      	mov	r3, r7
 8007f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3a:	f000 b871 	b.w	8008020 <_write_r>

08007f3e <__sseek>:
 8007f3e:	b510      	push	{r4, lr}
 8007f40:	460c      	mov	r4, r1
 8007f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f46:	f000 f847 	bl	8007fd8 <_lseek_r>
 8007f4a:	1c43      	adds	r3, r0, #1
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	bf15      	itete	ne
 8007f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f5a:	81a3      	strheq	r3, [r4, #12]
 8007f5c:	bf18      	it	ne
 8007f5e:	81a3      	strhne	r3, [r4, #12]
 8007f60:	bd10      	pop	{r4, pc}

08007f62 <__sclose>:
 8007f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f66:	f000 b827 	b.w	8007fb8 <_close_r>

08007f6a <memmove>:
 8007f6a:	4288      	cmp	r0, r1
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	eb01 0402 	add.w	r4, r1, r2
 8007f72:	d902      	bls.n	8007f7a <memmove+0x10>
 8007f74:	4284      	cmp	r4, r0
 8007f76:	4623      	mov	r3, r4
 8007f78:	d807      	bhi.n	8007f8a <memmove+0x20>
 8007f7a:	1e43      	subs	r3, r0, #1
 8007f7c:	42a1      	cmp	r1, r4
 8007f7e:	d008      	beq.n	8007f92 <memmove+0x28>
 8007f80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f88:	e7f8      	b.n	8007f7c <memmove+0x12>
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	4402      	add	r2, r0
 8007f8e:	428a      	cmp	r2, r1
 8007f90:	d100      	bne.n	8007f94 <memmove+0x2a>
 8007f92:	bd10      	pop	{r4, pc}
 8007f94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f98:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f9c:	e7f7      	b.n	8007f8e <memmove+0x24>

08007f9e <memset>:
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4402      	add	r2, r0
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d100      	bne.n	8007fa8 <memset+0xa>
 8007fa6:	4770      	bx	lr
 8007fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8007fac:	e7f9      	b.n	8007fa2 <memset+0x4>
	...

08007fb0 <_localeconv_r>:
 8007fb0:	4800      	ldr	r0, [pc, #0]	; (8007fb4 <_localeconv_r+0x4>)
 8007fb2:	4770      	bx	lr
 8007fb4:	20000170 	.word	0x20000170

08007fb8 <_close_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	2300      	movs	r3, #0
 8007fbc:	4d05      	ldr	r5, [pc, #20]	; (8007fd4 <_close_r+0x1c>)
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	f7fa f956 	bl	8002274 <_close>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_close_r+0x1a>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_close_r+0x1a>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	20000984 	.word	0x20000984

08007fd8 <_lseek_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4604      	mov	r4, r0
 8007fdc:	4608      	mov	r0, r1
 8007fde:	4611      	mov	r1, r2
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	4d05      	ldr	r5, [pc, #20]	; (8007ff8 <_lseek_r+0x20>)
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7fa f968 	bl	80022bc <_lseek>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_lseek_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_lseek_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	20000984 	.word	0x20000984

08007ffc <_read_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4604      	mov	r4, r0
 8008000:	4608      	mov	r0, r1
 8008002:	4611      	mov	r1, r2
 8008004:	2200      	movs	r2, #0
 8008006:	4d05      	ldr	r5, [pc, #20]	; (800801c <_read_r+0x20>)
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7fa f8f9 	bl	8002202 <_read>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_read_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_read_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20000984 	.word	0x20000984

08008020 <_write_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	2200      	movs	r2, #0
 800802a:	4d05      	ldr	r5, [pc, #20]	; (8008040 <_write_r+0x20>)
 800802c:	602a      	str	r2, [r5, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	f7fa f904 	bl	800223c <_write>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_write_r+0x1e>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_write_r+0x1e>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	20000984 	.word	0x20000984

08008044 <__errno>:
 8008044:	4b01      	ldr	r3, [pc, #4]	; (800804c <__errno+0x8>)
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	2000007c 	.word	0x2000007c

08008050 <__libc_init_array>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	2600      	movs	r6, #0
 8008054:	4d0c      	ldr	r5, [pc, #48]	; (8008088 <__libc_init_array+0x38>)
 8008056:	4c0d      	ldr	r4, [pc, #52]	; (800808c <__libc_init_array+0x3c>)
 8008058:	1b64      	subs	r4, r4, r5
 800805a:	10a4      	asrs	r4, r4, #2
 800805c:	42a6      	cmp	r6, r4
 800805e:	d109      	bne.n	8008074 <__libc_init_array+0x24>
 8008060:	f003 fba8 	bl	800b7b4 <_init>
 8008064:	2600      	movs	r6, #0
 8008066:	4d0a      	ldr	r5, [pc, #40]	; (8008090 <__libc_init_array+0x40>)
 8008068:	4c0a      	ldr	r4, [pc, #40]	; (8008094 <__libc_init_array+0x44>)
 800806a:	1b64      	subs	r4, r4, r5
 800806c:	10a4      	asrs	r4, r4, #2
 800806e:	42a6      	cmp	r6, r4
 8008070:	d105      	bne.n	800807e <__libc_init_array+0x2e>
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	f855 3b04 	ldr.w	r3, [r5], #4
 8008078:	4798      	blx	r3
 800807a:	3601      	adds	r6, #1
 800807c:	e7ee      	b.n	800805c <__libc_init_array+0xc>
 800807e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008082:	4798      	blx	r3
 8008084:	3601      	adds	r6, #1
 8008086:	e7f2      	b.n	800806e <__libc_init_array+0x1e>
 8008088:	0800c3b8 	.word	0x0800c3b8
 800808c:	0800c3b8 	.word	0x0800c3b8
 8008090:	0800c3b8 	.word	0x0800c3b8
 8008094:	0800c3bc 	.word	0x0800c3bc

08008098 <__retarget_lock_init_recursive>:
 8008098:	4770      	bx	lr

0800809a <__retarget_lock_acquire_recursive>:
 800809a:	4770      	bx	lr

0800809c <__retarget_lock_release_recursive>:
 800809c:	4770      	bx	lr

0800809e <memchr>:
 800809e:	4603      	mov	r3, r0
 80080a0:	b510      	push	{r4, lr}
 80080a2:	b2c9      	uxtb	r1, r1
 80080a4:	4402      	add	r2, r0
 80080a6:	4293      	cmp	r3, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	d101      	bne.n	80080b0 <memchr+0x12>
 80080ac:	2000      	movs	r0, #0
 80080ae:	e003      	b.n	80080b8 <memchr+0x1a>
 80080b0:	7804      	ldrb	r4, [r0, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	428c      	cmp	r4, r1
 80080b6:	d1f6      	bne.n	80080a6 <memchr+0x8>
 80080b8:	bd10      	pop	{r4, pc}

080080ba <memcpy>:
 80080ba:	440a      	add	r2, r1
 80080bc:	4291      	cmp	r1, r2
 80080be:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c2:	d100      	bne.n	80080c6 <memcpy+0xc>
 80080c4:	4770      	bx	lr
 80080c6:	b510      	push	{r4, lr}
 80080c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080cc:	4291      	cmp	r1, r2
 80080ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d2:	d1f9      	bne.n	80080c8 <memcpy+0xe>
 80080d4:	bd10      	pop	{r4, pc}
	...

080080d8 <nanf>:
 80080d8:	4800      	ldr	r0, [pc, #0]	; (80080dc <nanf+0x4>)
 80080da:	4770      	bx	lr
 80080dc:	7fc00000 	.word	0x7fc00000

080080e0 <quorem>:
 80080e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	6903      	ldr	r3, [r0, #16]
 80080e6:	690c      	ldr	r4, [r1, #16]
 80080e8:	4607      	mov	r7, r0
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	db7f      	blt.n	80081ee <quorem+0x10e>
 80080ee:	3c01      	subs	r4, #1
 80080f0:	f100 0514 	add.w	r5, r0, #20
 80080f4:	f101 0814 	add.w	r8, r1, #20
 80080f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080fc:	9301      	str	r3, [sp, #4]
 80080fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008102:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008106:	3301      	adds	r3, #1
 8008108:	429a      	cmp	r2, r3
 800810a:	fbb2 f6f3 	udiv	r6, r2, r3
 800810e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008112:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008116:	d331      	bcc.n	800817c <quorem+0x9c>
 8008118:	f04f 0e00 	mov.w	lr, #0
 800811c:	4640      	mov	r0, r8
 800811e:	46ac      	mov	ip, r5
 8008120:	46f2      	mov	sl, lr
 8008122:	f850 2b04 	ldr.w	r2, [r0], #4
 8008126:	b293      	uxth	r3, r2
 8008128:	fb06 e303 	mla	r3, r6, r3, lr
 800812c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008130:	0c1a      	lsrs	r2, r3, #16
 8008132:	b29b      	uxth	r3, r3
 8008134:	fb06 220e 	mla	r2, r6, lr, r2
 8008138:	ebaa 0303 	sub.w	r3, sl, r3
 800813c:	f8dc a000 	ldr.w	sl, [ip]
 8008140:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008144:	fa1f fa8a 	uxth.w	sl, sl
 8008148:	4453      	add	r3, sl
 800814a:	f8dc a000 	ldr.w	sl, [ip]
 800814e:	b292      	uxth	r2, r2
 8008150:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008154:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008158:	b29b      	uxth	r3, r3
 800815a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800815e:	4581      	cmp	r9, r0
 8008160:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008164:	f84c 3b04 	str.w	r3, [ip], #4
 8008168:	d2db      	bcs.n	8008122 <quorem+0x42>
 800816a:	f855 300b 	ldr.w	r3, [r5, fp]
 800816e:	b92b      	cbnz	r3, 800817c <quorem+0x9c>
 8008170:	9b01      	ldr	r3, [sp, #4]
 8008172:	3b04      	subs	r3, #4
 8008174:	429d      	cmp	r5, r3
 8008176:	461a      	mov	r2, r3
 8008178:	d32d      	bcc.n	80081d6 <quorem+0xf6>
 800817a:	613c      	str	r4, [r7, #16]
 800817c:	4638      	mov	r0, r7
 800817e:	f001 f9df 	bl	8009540 <__mcmp>
 8008182:	2800      	cmp	r0, #0
 8008184:	db23      	blt.n	80081ce <quorem+0xee>
 8008186:	4629      	mov	r1, r5
 8008188:	2000      	movs	r0, #0
 800818a:	3601      	adds	r6, #1
 800818c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008190:	f8d1 c000 	ldr.w	ip, [r1]
 8008194:	b293      	uxth	r3, r2
 8008196:	1ac3      	subs	r3, r0, r3
 8008198:	0c12      	lsrs	r2, r2, #16
 800819a:	fa1f f08c 	uxth.w	r0, ip
 800819e:	4403      	add	r3, r0
 80081a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80081a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ae:	45c1      	cmp	r9, r8
 80081b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081b4:	f841 3b04 	str.w	r3, [r1], #4
 80081b8:	d2e8      	bcs.n	800818c <quorem+0xac>
 80081ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081c2:	b922      	cbnz	r2, 80081ce <quorem+0xee>
 80081c4:	3b04      	subs	r3, #4
 80081c6:	429d      	cmp	r5, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	d30a      	bcc.n	80081e2 <quorem+0x102>
 80081cc:	613c      	str	r4, [r7, #16]
 80081ce:	4630      	mov	r0, r6
 80081d0:	b003      	add	sp, #12
 80081d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	3b04      	subs	r3, #4
 80081da:	2a00      	cmp	r2, #0
 80081dc:	d1cd      	bne.n	800817a <quorem+0x9a>
 80081de:	3c01      	subs	r4, #1
 80081e0:	e7c8      	b.n	8008174 <quorem+0x94>
 80081e2:	6812      	ldr	r2, [r2, #0]
 80081e4:	3b04      	subs	r3, #4
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d1f0      	bne.n	80081cc <quorem+0xec>
 80081ea:	3c01      	subs	r4, #1
 80081ec:	e7eb      	b.n	80081c6 <quorem+0xe6>
 80081ee:	2000      	movs	r0, #0
 80081f0:	e7ee      	b.n	80081d0 <quorem+0xf0>
 80081f2:	0000      	movs	r0, r0
 80081f4:	0000      	movs	r0, r0
	...

080081f8 <_dtoa_r>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	4616      	mov	r6, r2
 80081fe:	461f      	mov	r7, r3
 8008200:	69c4      	ldr	r4, [r0, #28]
 8008202:	b099      	sub	sp, #100	; 0x64
 8008204:	4605      	mov	r5, r0
 8008206:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800820a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800820e:	b974      	cbnz	r4, 800822e <_dtoa_r+0x36>
 8008210:	2010      	movs	r0, #16
 8008212:	f000 fe1d 	bl	8008e50 <malloc>
 8008216:	4602      	mov	r2, r0
 8008218:	61e8      	str	r0, [r5, #28]
 800821a:	b920      	cbnz	r0, 8008226 <_dtoa_r+0x2e>
 800821c:	21ef      	movs	r1, #239	; 0xef
 800821e:	4bac      	ldr	r3, [pc, #688]	; (80084d0 <_dtoa_r+0x2d8>)
 8008220:	48ac      	ldr	r0, [pc, #688]	; (80084d4 <_dtoa_r+0x2dc>)
 8008222:	f002 fc2d 	bl	800aa80 <__assert_func>
 8008226:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800822a:	6004      	str	r4, [r0, #0]
 800822c:	60c4      	str	r4, [r0, #12]
 800822e:	69eb      	ldr	r3, [r5, #28]
 8008230:	6819      	ldr	r1, [r3, #0]
 8008232:	b151      	cbz	r1, 800824a <_dtoa_r+0x52>
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	2301      	movs	r3, #1
 8008238:	4093      	lsls	r3, r2
 800823a:	604a      	str	r2, [r1, #4]
 800823c:	608b      	str	r3, [r1, #8]
 800823e:	4628      	mov	r0, r5
 8008240:	f000 fefa 	bl	8009038 <_Bfree>
 8008244:	2200      	movs	r2, #0
 8008246:	69eb      	ldr	r3, [r5, #28]
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	1e3b      	subs	r3, r7, #0
 800824c:	bfaf      	iteee	ge
 800824e:	2300      	movge	r3, #0
 8008250:	2201      	movlt	r2, #1
 8008252:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008256:	9305      	strlt	r3, [sp, #20]
 8008258:	bfa8      	it	ge
 800825a:	f8c8 3000 	strge.w	r3, [r8]
 800825e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008262:	4b9d      	ldr	r3, [pc, #628]	; (80084d8 <_dtoa_r+0x2e0>)
 8008264:	bfb8      	it	lt
 8008266:	f8c8 2000 	strlt.w	r2, [r8]
 800826a:	ea33 0309 	bics.w	r3, r3, r9
 800826e:	d119      	bne.n	80082a4 <_dtoa_r+0xac>
 8008270:	f242 730f 	movw	r3, #9999	; 0x270f
 8008274:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800827c:	4333      	orrs	r3, r6
 800827e:	f000 8589 	beq.w	8008d94 <_dtoa_r+0xb9c>
 8008282:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008284:	b953      	cbnz	r3, 800829c <_dtoa_r+0xa4>
 8008286:	4b95      	ldr	r3, [pc, #596]	; (80084dc <_dtoa_r+0x2e4>)
 8008288:	e023      	b.n	80082d2 <_dtoa_r+0xda>
 800828a:	4b95      	ldr	r3, [pc, #596]	; (80084e0 <_dtoa_r+0x2e8>)
 800828c:	9303      	str	r3, [sp, #12]
 800828e:	3308      	adds	r3, #8
 8008290:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	9803      	ldr	r0, [sp, #12]
 8008296:	b019      	add	sp, #100	; 0x64
 8008298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829c:	4b8f      	ldr	r3, [pc, #572]	; (80084dc <_dtoa_r+0x2e4>)
 800829e:	9303      	str	r3, [sp, #12]
 80082a0:	3303      	adds	r3, #3
 80082a2:	e7f5      	b.n	8008290 <_dtoa_r+0x98>
 80082a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80082a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80082ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082b0:	2200      	movs	r2, #0
 80082b2:	2300      	movs	r3, #0
 80082b4:	f7f8 fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80082b8:	4680      	mov	r8, r0
 80082ba:	b160      	cbz	r0, 80082d6 <_dtoa_r+0xde>
 80082bc:	2301      	movs	r3, #1
 80082be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8562 	beq.w	8008d8e <_dtoa_r+0xb96>
 80082ca:	4b86      	ldr	r3, [pc, #536]	; (80084e4 <_dtoa_r+0x2ec>)
 80082cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	9303      	str	r3, [sp, #12]
 80082d4:	e7de      	b.n	8008294 <_dtoa_r+0x9c>
 80082d6:	ab16      	add	r3, sp, #88	; 0x58
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	ab17      	add	r3, sp, #92	; 0x5c
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	4628      	mov	r0, r5
 80082e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082e4:	f001 fa3c 	bl	8009760 <__d2b>
 80082e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80082ec:	4682      	mov	sl, r0
 80082ee:	2c00      	cmp	r4, #0
 80082f0:	d07e      	beq.n	80083f0 <_dtoa_r+0x1f8>
 80082f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80082fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008300:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008304:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008308:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800830c:	4619      	mov	r1, r3
 800830e:	2200      	movs	r2, #0
 8008310:	4b75      	ldr	r3, [pc, #468]	; (80084e8 <_dtoa_r+0x2f0>)
 8008312:	f7f7 ff29 	bl	8000168 <__aeabi_dsub>
 8008316:	a368      	add	r3, pc, #416	; (adr r3, 80084b8 <_dtoa_r+0x2c0>)
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f7f8 f8dc 	bl	80004d8 <__aeabi_dmul>
 8008320:	a367      	add	r3, pc, #412	; (adr r3, 80084c0 <_dtoa_r+0x2c8>)
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	f7f7 ff21 	bl	800016c <__adddf3>
 800832a:	4606      	mov	r6, r0
 800832c:	4620      	mov	r0, r4
 800832e:	460f      	mov	r7, r1
 8008330:	f7f8 f868 	bl	8000404 <__aeabi_i2d>
 8008334:	a364      	add	r3, pc, #400	; (adr r3, 80084c8 <_dtoa_r+0x2d0>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f7f8 f8cd 	bl	80004d8 <__aeabi_dmul>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4630      	mov	r0, r6
 8008344:	4639      	mov	r1, r7
 8008346:	f7f7 ff11 	bl	800016c <__adddf3>
 800834a:	4606      	mov	r6, r0
 800834c:	460f      	mov	r7, r1
 800834e:	f7f8 fb73 	bl	8000a38 <__aeabi_d2iz>
 8008352:	2200      	movs	r2, #0
 8008354:	4683      	mov	fp, r0
 8008356:	2300      	movs	r3, #0
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fb2e 	bl	80009bc <__aeabi_dcmplt>
 8008360:	b148      	cbz	r0, 8008376 <_dtoa_r+0x17e>
 8008362:	4658      	mov	r0, fp
 8008364:	f7f8 f84e 	bl	8000404 <__aeabi_i2d>
 8008368:	4632      	mov	r2, r6
 800836a:	463b      	mov	r3, r7
 800836c:	f7f8 fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8008370:	b908      	cbnz	r0, 8008376 <_dtoa_r+0x17e>
 8008372:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008376:	f1bb 0f16 	cmp.w	fp, #22
 800837a:	d857      	bhi.n	800842c <_dtoa_r+0x234>
 800837c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008380:	4b5a      	ldr	r3, [pc, #360]	; (80084ec <_dtoa_r+0x2f4>)
 8008382:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	f7f8 fb17 	bl	80009bc <__aeabi_dcmplt>
 800838e:	2800      	cmp	r0, #0
 8008390:	d04e      	beq.n	8008430 <_dtoa_r+0x238>
 8008392:	2300      	movs	r3, #0
 8008394:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008398:	930f      	str	r3, [sp, #60]	; 0x3c
 800839a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800839c:	1b1b      	subs	r3, r3, r4
 800839e:	1e5a      	subs	r2, r3, #1
 80083a0:	bf46      	itte	mi
 80083a2:	f1c3 0901 	rsbmi	r9, r3, #1
 80083a6:	2300      	movmi	r3, #0
 80083a8:	f04f 0900 	movpl.w	r9, #0
 80083ac:	9209      	str	r2, [sp, #36]	; 0x24
 80083ae:	bf48      	it	mi
 80083b0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80083b2:	f1bb 0f00 	cmp.w	fp, #0
 80083b6:	db3d      	blt.n	8008434 <_dtoa_r+0x23c>
 80083b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80083be:	445b      	add	r3, fp
 80083c0:	9309      	str	r3, [sp, #36]	; 0x24
 80083c2:	2300      	movs	r3, #0
 80083c4:	930a      	str	r3, [sp, #40]	; 0x28
 80083c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083c8:	2b09      	cmp	r3, #9
 80083ca:	d867      	bhi.n	800849c <_dtoa_r+0x2a4>
 80083cc:	2b05      	cmp	r3, #5
 80083ce:	bfc4      	itt	gt
 80083d0:	3b04      	subgt	r3, #4
 80083d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80083d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083d6:	bfc8      	it	gt
 80083d8:	2400      	movgt	r4, #0
 80083da:	f1a3 0302 	sub.w	r3, r3, #2
 80083de:	bfd8      	it	le
 80083e0:	2401      	movle	r4, #1
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	f200 8086 	bhi.w	80084f4 <_dtoa_r+0x2fc>
 80083e8:	e8df f003 	tbb	[pc, r3]
 80083ec:	5637392c 	.word	0x5637392c
 80083f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80083f4:	441c      	add	r4, r3
 80083f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	bfc1      	itttt	gt
 80083fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008402:	fa09 f903 	lslgt.w	r9, r9, r3
 8008406:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800840a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800840e:	bfd6      	itet	le
 8008410:	f1c3 0320 	rsble	r3, r3, #32
 8008414:	ea49 0003 	orrgt.w	r0, r9, r3
 8008418:	fa06 f003 	lslle.w	r0, r6, r3
 800841c:	f7f7 ffe2 	bl	80003e4 <__aeabi_ui2d>
 8008420:	2201      	movs	r2, #1
 8008422:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008426:	3c01      	subs	r4, #1
 8008428:	9213      	str	r2, [sp, #76]	; 0x4c
 800842a:	e76f      	b.n	800830c <_dtoa_r+0x114>
 800842c:	2301      	movs	r3, #1
 800842e:	e7b3      	b.n	8008398 <_dtoa_r+0x1a0>
 8008430:	900f      	str	r0, [sp, #60]	; 0x3c
 8008432:	e7b2      	b.n	800839a <_dtoa_r+0x1a2>
 8008434:	f1cb 0300 	rsb	r3, fp, #0
 8008438:	930a      	str	r3, [sp, #40]	; 0x28
 800843a:	2300      	movs	r3, #0
 800843c:	eba9 090b 	sub.w	r9, r9, fp
 8008440:	930e      	str	r3, [sp, #56]	; 0x38
 8008442:	e7c0      	b.n	80083c6 <_dtoa_r+0x1ce>
 8008444:	2300      	movs	r3, #0
 8008446:	930b      	str	r3, [sp, #44]	; 0x2c
 8008448:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800844a:	2b00      	cmp	r3, #0
 800844c:	dc55      	bgt.n	80084fa <_dtoa_r+0x302>
 800844e:	2301      	movs	r3, #1
 8008450:	461a      	mov	r2, r3
 8008452:	9306      	str	r3, [sp, #24]
 8008454:	9308      	str	r3, [sp, #32]
 8008456:	9223      	str	r2, [sp, #140]	; 0x8c
 8008458:	e00b      	b.n	8008472 <_dtoa_r+0x27a>
 800845a:	2301      	movs	r3, #1
 800845c:	e7f3      	b.n	8008446 <_dtoa_r+0x24e>
 800845e:	2300      	movs	r3, #0
 8008460:	930b      	str	r3, [sp, #44]	; 0x2c
 8008462:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008464:	445b      	add	r3, fp
 8008466:	9306      	str	r3, [sp, #24]
 8008468:	3301      	adds	r3, #1
 800846a:	2b01      	cmp	r3, #1
 800846c:	9308      	str	r3, [sp, #32]
 800846e:	bfb8      	it	lt
 8008470:	2301      	movlt	r3, #1
 8008472:	2100      	movs	r1, #0
 8008474:	2204      	movs	r2, #4
 8008476:	69e8      	ldr	r0, [r5, #28]
 8008478:	f102 0614 	add.w	r6, r2, #20
 800847c:	429e      	cmp	r6, r3
 800847e:	d940      	bls.n	8008502 <_dtoa_r+0x30a>
 8008480:	6041      	str	r1, [r0, #4]
 8008482:	4628      	mov	r0, r5
 8008484:	f000 fd98 	bl	8008fb8 <_Balloc>
 8008488:	9003      	str	r0, [sp, #12]
 800848a:	2800      	cmp	r0, #0
 800848c:	d13c      	bne.n	8008508 <_dtoa_r+0x310>
 800848e:	4602      	mov	r2, r0
 8008490:	f240 11af 	movw	r1, #431	; 0x1af
 8008494:	4b16      	ldr	r3, [pc, #88]	; (80084f0 <_dtoa_r+0x2f8>)
 8008496:	e6c3      	b.n	8008220 <_dtoa_r+0x28>
 8008498:	2301      	movs	r3, #1
 800849a:	e7e1      	b.n	8008460 <_dtoa_r+0x268>
 800849c:	2401      	movs	r4, #1
 800849e:	2300      	movs	r3, #0
 80084a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80084a2:	9322      	str	r3, [sp, #136]	; 0x88
 80084a4:	f04f 33ff 	mov.w	r3, #4294967295
 80084a8:	2200      	movs	r2, #0
 80084aa:	9306      	str	r3, [sp, #24]
 80084ac:	9308      	str	r3, [sp, #32]
 80084ae:	2312      	movs	r3, #18
 80084b0:	e7d1      	b.n	8008456 <_dtoa_r+0x25e>
 80084b2:	bf00      	nop
 80084b4:	f3af 8000 	nop.w
 80084b8:	636f4361 	.word	0x636f4361
 80084bc:	3fd287a7 	.word	0x3fd287a7
 80084c0:	8b60c8b3 	.word	0x8b60c8b3
 80084c4:	3fc68a28 	.word	0x3fc68a28
 80084c8:	509f79fb 	.word	0x509f79fb
 80084cc:	3fd34413 	.word	0x3fd34413
 80084d0:	0800bfd0 	.word	0x0800bfd0
 80084d4:	0800bfe7 	.word	0x0800bfe7
 80084d8:	7ff00000 	.word	0x7ff00000
 80084dc:	0800bfcc 	.word	0x0800bfcc
 80084e0:	0800bfc3 	.word	0x0800bfc3
 80084e4:	0800bf9b 	.word	0x0800bf9b
 80084e8:	3ff80000 	.word	0x3ff80000
 80084ec:	0800c0d8 	.word	0x0800c0d8
 80084f0:	0800c03f 	.word	0x0800c03f
 80084f4:	2301      	movs	r3, #1
 80084f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80084f8:	e7d4      	b.n	80084a4 <_dtoa_r+0x2ac>
 80084fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084fc:	9306      	str	r3, [sp, #24]
 80084fe:	9308      	str	r3, [sp, #32]
 8008500:	e7b7      	b.n	8008472 <_dtoa_r+0x27a>
 8008502:	3101      	adds	r1, #1
 8008504:	0052      	lsls	r2, r2, #1
 8008506:	e7b7      	b.n	8008478 <_dtoa_r+0x280>
 8008508:	69eb      	ldr	r3, [r5, #28]
 800850a:	9a03      	ldr	r2, [sp, #12]
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	9b08      	ldr	r3, [sp, #32]
 8008510:	2b0e      	cmp	r3, #14
 8008512:	f200 80a8 	bhi.w	8008666 <_dtoa_r+0x46e>
 8008516:	2c00      	cmp	r4, #0
 8008518:	f000 80a5 	beq.w	8008666 <_dtoa_r+0x46e>
 800851c:	f1bb 0f00 	cmp.w	fp, #0
 8008520:	dd34      	ble.n	800858c <_dtoa_r+0x394>
 8008522:	4b9a      	ldr	r3, [pc, #616]	; (800878c <_dtoa_r+0x594>)
 8008524:	f00b 020f 	and.w	r2, fp, #15
 8008528:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800852c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008530:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008534:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008538:	ea4f 142b 	mov.w	r4, fp, asr #4
 800853c:	d016      	beq.n	800856c <_dtoa_r+0x374>
 800853e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008542:	4b93      	ldr	r3, [pc, #588]	; (8008790 <_dtoa_r+0x598>)
 8008544:	2703      	movs	r7, #3
 8008546:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800854a:	f7f8 f8ef 	bl	800072c <__aeabi_ddiv>
 800854e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008552:	f004 040f 	and.w	r4, r4, #15
 8008556:	4e8e      	ldr	r6, [pc, #568]	; (8008790 <_dtoa_r+0x598>)
 8008558:	b954      	cbnz	r4, 8008570 <_dtoa_r+0x378>
 800855a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800855e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008562:	f7f8 f8e3 	bl	800072c <__aeabi_ddiv>
 8008566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800856a:	e029      	b.n	80085c0 <_dtoa_r+0x3c8>
 800856c:	2702      	movs	r7, #2
 800856e:	e7f2      	b.n	8008556 <_dtoa_r+0x35e>
 8008570:	07e1      	lsls	r1, r4, #31
 8008572:	d508      	bpl.n	8008586 <_dtoa_r+0x38e>
 8008574:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008578:	e9d6 2300 	ldrd	r2, r3, [r6]
 800857c:	f7f7 ffac 	bl	80004d8 <__aeabi_dmul>
 8008580:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008584:	3701      	adds	r7, #1
 8008586:	1064      	asrs	r4, r4, #1
 8008588:	3608      	adds	r6, #8
 800858a:	e7e5      	b.n	8008558 <_dtoa_r+0x360>
 800858c:	f000 80a5 	beq.w	80086da <_dtoa_r+0x4e2>
 8008590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008594:	f1cb 0400 	rsb	r4, fp, #0
 8008598:	4b7c      	ldr	r3, [pc, #496]	; (800878c <_dtoa_r+0x594>)
 800859a:	f004 020f 	and.w	r2, r4, #15
 800859e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	f7f7 ff97 	bl	80004d8 <__aeabi_dmul>
 80085aa:	2702      	movs	r7, #2
 80085ac:	2300      	movs	r3, #0
 80085ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085b2:	4e77      	ldr	r6, [pc, #476]	; (8008790 <_dtoa_r+0x598>)
 80085b4:	1124      	asrs	r4, r4, #4
 80085b6:	2c00      	cmp	r4, #0
 80085b8:	f040 8084 	bne.w	80086c4 <_dtoa_r+0x4cc>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1d2      	bne.n	8008566 <_dtoa_r+0x36e>
 80085c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80085c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80085c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 8087 	beq.w	80086de <_dtoa_r+0x4e6>
 80085d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085d4:	2200      	movs	r2, #0
 80085d6:	4b6f      	ldr	r3, [pc, #444]	; (8008794 <_dtoa_r+0x59c>)
 80085d8:	f7f8 f9f0 	bl	80009bc <__aeabi_dcmplt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d07e      	beq.n	80086de <_dtoa_r+0x4e6>
 80085e0:	9b08      	ldr	r3, [sp, #32]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d07b      	beq.n	80086de <_dtoa_r+0x4e6>
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	dd38      	ble.n	800865e <_dtoa_r+0x466>
 80085ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085f0:	2200      	movs	r2, #0
 80085f2:	4b69      	ldr	r3, [pc, #420]	; (8008798 <_dtoa_r+0x5a0>)
 80085f4:	f7f7 ff70 	bl	80004d8 <__aeabi_dmul>
 80085f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085fc:	9c06      	ldr	r4, [sp, #24]
 80085fe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008602:	3701      	adds	r7, #1
 8008604:	4638      	mov	r0, r7
 8008606:	f7f7 fefd 	bl	8000404 <__aeabi_i2d>
 800860a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800860e:	f7f7 ff63 	bl	80004d8 <__aeabi_dmul>
 8008612:	2200      	movs	r2, #0
 8008614:	4b61      	ldr	r3, [pc, #388]	; (800879c <_dtoa_r+0x5a4>)
 8008616:	f7f7 fda9 	bl	800016c <__adddf3>
 800861a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800861e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008622:	9611      	str	r6, [sp, #68]	; 0x44
 8008624:	2c00      	cmp	r4, #0
 8008626:	d15d      	bne.n	80086e4 <_dtoa_r+0x4ec>
 8008628:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800862c:	2200      	movs	r2, #0
 800862e:	4b5c      	ldr	r3, [pc, #368]	; (80087a0 <_dtoa_r+0x5a8>)
 8008630:	f7f7 fd9a 	bl	8000168 <__aeabi_dsub>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800863c:	4633      	mov	r3, r6
 800863e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008640:	f7f8 f9da 	bl	80009f8 <__aeabi_dcmpgt>
 8008644:	2800      	cmp	r0, #0
 8008646:	f040 8295 	bne.w	8008b74 <_dtoa_r+0x97c>
 800864a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800864e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008650:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008654:	f7f8 f9b2 	bl	80009bc <__aeabi_dcmplt>
 8008658:	2800      	cmp	r0, #0
 800865a:	f040 8289 	bne.w	8008b70 <_dtoa_r+0x978>
 800865e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008662:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008666:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008668:	2b00      	cmp	r3, #0
 800866a:	f2c0 8151 	blt.w	8008910 <_dtoa_r+0x718>
 800866e:	f1bb 0f0e 	cmp.w	fp, #14
 8008672:	f300 814d 	bgt.w	8008910 <_dtoa_r+0x718>
 8008676:	4b45      	ldr	r3, [pc, #276]	; (800878c <_dtoa_r+0x594>)
 8008678:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800867c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008680:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008684:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008686:	2b00      	cmp	r3, #0
 8008688:	f280 80da 	bge.w	8008840 <_dtoa_r+0x648>
 800868c:	9b08      	ldr	r3, [sp, #32]
 800868e:	2b00      	cmp	r3, #0
 8008690:	f300 80d6 	bgt.w	8008840 <_dtoa_r+0x648>
 8008694:	f040 826b 	bne.w	8008b6e <_dtoa_r+0x976>
 8008698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800869c:	2200      	movs	r2, #0
 800869e:	4b40      	ldr	r3, [pc, #256]	; (80087a0 <_dtoa_r+0x5a8>)
 80086a0:	f7f7 ff1a 	bl	80004d8 <__aeabi_dmul>
 80086a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a8:	f7f8 f99c 	bl	80009e4 <__aeabi_dcmpge>
 80086ac:	9c08      	ldr	r4, [sp, #32]
 80086ae:	4626      	mov	r6, r4
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f040 8241 	bne.w	8008b38 <_dtoa_r+0x940>
 80086b6:	2331      	movs	r3, #49	; 0x31
 80086b8:	9f03      	ldr	r7, [sp, #12]
 80086ba:	f10b 0b01 	add.w	fp, fp, #1
 80086be:	f807 3b01 	strb.w	r3, [r7], #1
 80086c2:	e23d      	b.n	8008b40 <_dtoa_r+0x948>
 80086c4:	07e2      	lsls	r2, r4, #31
 80086c6:	d505      	bpl.n	80086d4 <_dtoa_r+0x4dc>
 80086c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086cc:	f7f7 ff04 	bl	80004d8 <__aeabi_dmul>
 80086d0:	2301      	movs	r3, #1
 80086d2:	3701      	adds	r7, #1
 80086d4:	1064      	asrs	r4, r4, #1
 80086d6:	3608      	adds	r6, #8
 80086d8:	e76d      	b.n	80085b6 <_dtoa_r+0x3be>
 80086da:	2702      	movs	r7, #2
 80086dc:	e770      	b.n	80085c0 <_dtoa_r+0x3c8>
 80086de:	46d8      	mov	r8, fp
 80086e0:	9c08      	ldr	r4, [sp, #32]
 80086e2:	e78f      	b.n	8008604 <_dtoa_r+0x40c>
 80086e4:	9903      	ldr	r1, [sp, #12]
 80086e6:	4b29      	ldr	r3, [pc, #164]	; (800878c <_dtoa_r+0x594>)
 80086e8:	4421      	add	r1, r4
 80086ea:	9112      	str	r1, [sp, #72]	; 0x48
 80086ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80086f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086fa:	2900      	cmp	r1, #0
 80086fc:	d054      	beq.n	80087a8 <_dtoa_r+0x5b0>
 80086fe:	2000      	movs	r0, #0
 8008700:	4928      	ldr	r1, [pc, #160]	; (80087a4 <_dtoa_r+0x5ac>)
 8008702:	f7f8 f813 	bl	800072c <__aeabi_ddiv>
 8008706:	463b      	mov	r3, r7
 8008708:	4632      	mov	r2, r6
 800870a:	f7f7 fd2d 	bl	8000168 <__aeabi_dsub>
 800870e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008712:	9f03      	ldr	r7, [sp, #12]
 8008714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008718:	f7f8 f98e 	bl	8000a38 <__aeabi_d2iz>
 800871c:	4604      	mov	r4, r0
 800871e:	f7f7 fe71 	bl	8000404 <__aeabi_i2d>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800872a:	f7f7 fd1d 	bl	8000168 <__aeabi_dsub>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	3430      	adds	r4, #48	; 0x30
 8008734:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008738:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800873c:	f807 4b01 	strb.w	r4, [r7], #1
 8008740:	f7f8 f93c 	bl	80009bc <__aeabi_dcmplt>
 8008744:	2800      	cmp	r0, #0
 8008746:	d173      	bne.n	8008830 <_dtoa_r+0x638>
 8008748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800874c:	2000      	movs	r0, #0
 800874e:	4911      	ldr	r1, [pc, #68]	; (8008794 <_dtoa_r+0x59c>)
 8008750:	f7f7 fd0a 	bl	8000168 <__aeabi_dsub>
 8008754:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008758:	f7f8 f930 	bl	80009bc <__aeabi_dcmplt>
 800875c:	2800      	cmp	r0, #0
 800875e:	f040 80b6 	bne.w	80088ce <_dtoa_r+0x6d6>
 8008762:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008764:	429f      	cmp	r7, r3
 8008766:	f43f af7a 	beq.w	800865e <_dtoa_r+0x466>
 800876a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800876e:	2200      	movs	r2, #0
 8008770:	4b09      	ldr	r3, [pc, #36]	; (8008798 <_dtoa_r+0x5a0>)
 8008772:	f7f7 feb1 	bl	80004d8 <__aeabi_dmul>
 8008776:	2200      	movs	r2, #0
 8008778:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800877c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008780:	4b05      	ldr	r3, [pc, #20]	; (8008798 <_dtoa_r+0x5a0>)
 8008782:	f7f7 fea9 	bl	80004d8 <__aeabi_dmul>
 8008786:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800878a:	e7c3      	b.n	8008714 <_dtoa_r+0x51c>
 800878c:	0800c0d8 	.word	0x0800c0d8
 8008790:	0800c0b0 	.word	0x0800c0b0
 8008794:	3ff00000 	.word	0x3ff00000
 8008798:	40240000 	.word	0x40240000
 800879c:	401c0000 	.word	0x401c0000
 80087a0:	40140000 	.word	0x40140000
 80087a4:	3fe00000 	.word	0x3fe00000
 80087a8:	4630      	mov	r0, r6
 80087aa:	4639      	mov	r1, r7
 80087ac:	f7f7 fe94 	bl	80004d8 <__aeabi_dmul>
 80087b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087b6:	9c03      	ldr	r4, [sp, #12]
 80087b8:	9314      	str	r3, [sp, #80]	; 0x50
 80087ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087be:	f7f8 f93b 	bl	8000a38 <__aeabi_d2iz>
 80087c2:	9015      	str	r0, [sp, #84]	; 0x54
 80087c4:	f7f7 fe1e 	bl	8000404 <__aeabi_i2d>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d0:	f7f7 fcca 	bl	8000168 <__aeabi_dsub>
 80087d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087d6:	4606      	mov	r6, r0
 80087d8:	3330      	adds	r3, #48	; 0x30
 80087da:	f804 3b01 	strb.w	r3, [r4], #1
 80087de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087e0:	460f      	mov	r7, r1
 80087e2:	429c      	cmp	r4, r3
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	d124      	bne.n	8008834 <_dtoa_r+0x63c>
 80087ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087ee:	4baf      	ldr	r3, [pc, #700]	; (8008aac <_dtoa_r+0x8b4>)
 80087f0:	f7f7 fcbc 	bl	800016c <__adddf3>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4630      	mov	r0, r6
 80087fa:	4639      	mov	r1, r7
 80087fc:	f7f8 f8fc 	bl	80009f8 <__aeabi_dcmpgt>
 8008800:	2800      	cmp	r0, #0
 8008802:	d163      	bne.n	80088cc <_dtoa_r+0x6d4>
 8008804:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008808:	2000      	movs	r0, #0
 800880a:	49a8      	ldr	r1, [pc, #672]	; (8008aac <_dtoa_r+0x8b4>)
 800880c:	f7f7 fcac 	bl	8000168 <__aeabi_dsub>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4630      	mov	r0, r6
 8008816:	4639      	mov	r1, r7
 8008818:	f7f8 f8d0 	bl	80009bc <__aeabi_dcmplt>
 800881c:	2800      	cmp	r0, #0
 800881e:	f43f af1e 	beq.w	800865e <_dtoa_r+0x466>
 8008822:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008824:	1e7b      	subs	r3, r7, #1
 8008826:	9314      	str	r3, [sp, #80]	; 0x50
 8008828:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800882c:	2b30      	cmp	r3, #48	; 0x30
 800882e:	d0f8      	beq.n	8008822 <_dtoa_r+0x62a>
 8008830:	46c3      	mov	fp, r8
 8008832:	e03b      	b.n	80088ac <_dtoa_r+0x6b4>
 8008834:	4b9e      	ldr	r3, [pc, #632]	; (8008ab0 <_dtoa_r+0x8b8>)
 8008836:	f7f7 fe4f 	bl	80004d8 <__aeabi_dmul>
 800883a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800883e:	e7bc      	b.n	80087ba <_dtoa_r+0x5c2>
 8008840:	9f03      	ldr	r7, [sp, #12]
 8008842:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	f7f7 ff6d 	bl	800072c <__aeabi_ddiv>
 8008852:	f7f8 f8f1 	bl	8000a38 <__aeabi_d2iz>
 8008856:	4604      	mov	r4, r0
 8008858:	f7f7 fdd4 	bl	8000404 <__aeabi_i2d>
 800885c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008860:	f7f7 fe3a 	bl	80004d8 <__aeabi_dmul>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4640      	mov	r0, r8
 800886a:	4649      	mov	r1, r9
 800886c:	f7f7 fc7c 	bl	8000168 <__aeabi_dsub>
 8008870:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008874:	f807 6b01 	strb.w	r6, [r7], #1
 8008878:	9e03      	ldr	r6, [sp, #12]
 800887a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800887e:	1bbe      	subs	r6, r7, r6
 8008880:	45b4      	cmp	ip, r6
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	d136      	bne.n	80088f6 <_dtoa_r+0x6fe>
 8008888:	f7f7 fc70 	bl	800016c <__adddf3>
 800888c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008890:	4680      	mov	r8, r0
 8008892:	4689      	mov	r9, r1
 8008894:	f7f8 f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 8008898:	bb58      	cbnz	r0, 80088f2 <_dtoa_r+0x6fa>
 800889a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800889e:	4640      	mov	r0, r8
 80088a0:	4649      	mov	r1, r9
 80088a2:	f7f8 f881 	bl	80009a8 <__aeabi_dcmpeq>
 80088a6:	b108      	cbz	r0, 80088ac <_dtoa_r+0x6b4>
 80088a8:	07e3      	lsls	r3, r4, #31
 80088aa:	d422      	bmi.n	80088f2 <_dtoa_r+0x6fa>
 80088ac:	4651      	mov	r1, sl
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 fbc2 	bl	8009038 <_Bfree>
 80088b4:	2300      	movs	r3, #0
 80088b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088b8:	703b      	strb	r3, [r7, #0]
 80088ba:	f10b 0301 	add.w	r3, fp, #1
 80088be:	6013      	str	r3, [r2, #0]
 80088c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f43f ace6 	beq.w	8008294 <_dtoa_r+0x9c>
 80088c8:	601f      	str	r7, [r3, #0]
 80088ca:	e4e3      	b.n	8008294 <_dtoa_r+0x9c>
 80088cc:	4627      	mov	r7, r4
 80088ce:	463b      	mov	r3, r7
 80088d0:	461f      	mov	r7, r3
 80088d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088d6:	2a39      	cmp	r2, #57	; 0x39
 80088d8:	d107      	bne.n	80088ea <_dtoa_r+0x6f2>
 80088da:	9a03      	ldr	r2, [sp, #12]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d1f7      	bne.n	80088d0 <_dtoa_r+0x6d8>
 80088e0:	2230      	movs	r2, #48	; 0x30
 80088e2:	9903      	ldr	r1, [sp, #12]
 80088e4:	f108 0801 	add.w	r8, r8, #1
 80088e8:	700a      	strb	r2, [r1, #0]
 80088ea:	781a      	ldrb	r2, [r3, #0]
 80088ec:	3201      	adds	r2, #1
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	e79e      	b.n	8008830 <_dtoa_r+0x638>
 80088f2:	46d8      	mov	r8, fp
 80088f4:	e7eb      	b.n	80088ce <_dtoa_r+0x6d6>
 80088f6:	2200      	movs	r2, #0
 80088f8:	4b6d      	ldr	r3, [pc, #436]	; (8008ab0 <_dtoa_r+0x8b8>)
 80088fa:	f7f7 fded 	bl	80004d8 <__aeabi_dmul>
 80088fe:	2200      	movs	r2, #0
 8008900:	2300      	movs	r3, #0
 8008902:	4680      	mov	r8, r0
 8008904:	4689      	mov	r9, r1
 8008906:	f7f8 f84f 	bl	80009a8 <__aeabi_dcmpeq>
 800890a:	2800      	cmp	r0, #0
 800890c:	d09b      	beq.n	8008846 <_dtoa_r+0x64e>
 800890e:	e7cd      	b.n	80088ac <_dtoa_r+0x6b4>
 8008910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008912:	2a00      	cmp	r2, #0
 8008914:	f000 80c4 	beq.w	8008aa0 <_dtoa_r+0x8a8>
 8008918:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800891a:	2a01      	cmp	r2, #1
 800891c:	f300 80a8 	bgt.w	8008a70 <_dtoa_r+0x878>
 8008920:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008922:	2a00      	cmp	r2, #0
 8008924:	f000 80a0 	beq.w	8008a68 <_dtoa_r+0x870>
 8008928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800892c:	464f      	mov	r7, r9
 800892e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008932:	2101      	movs	r1, #1
 8008934:	441a      	add	r2, r3
 8008936:	4628      	mov	r0, r5
 8008938:	4499      	add	r9, r3
 800893a:	9209      	str	r2, [sp, #36]	; 0x24
 800893c:	f000 fc7c 	bl	8009238 <__i2b>
 8008940:	4606      	mov	r6, r0
 8008942:	b15f      	cbz	r7, 800895c <_dtoa_r+0x764>
 8008944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	dd08      	ble.n	800895c <_dtoa_r+0x764>
 800894a:	42bb      	cmp	r3, r7
 800894c:	bfa8      	it	ge
 800894e:	463b      	movge	r3, r7
 8008950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008952:	eba9 0903 	sub.w	r9, r9, r3
 8008956:	1aff      	subs	r7, r7, r3
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	9309      	str	r3, [sp, #36]	; 0x24
 800895c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800895e:	b1f3      	cbz	r3, 800899e <_dtoa_r+0x7a6>
 8008960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 80a0 	beq.w	8008aa8 <_dtoa_r+0x8b0>
 8008968:	2c00      	cmp	r4, #0
 800896a:	dd10      	ble.n	800898e <_dtoa_r+0x796>
 800896c:	4631      	mov	r1, r6
 800896e:	4622      	mov	r2, r4
 8008970:	4628      	mov	r0, r5
 8008972:	f000 fd1f 	bl	80093b4 <__pow5mult>
 8008976:	4652      	mov	r2, sl
 8008978:	4601      	mov	r1, r0
 800897a:	4606      	mov	r6, r0
 800897c:	4628      	mov	r0, r5
 800897e:	f000 fc71 	bl	8009264 <__multiply>
 8008982:	4680      	mov	r8, r0
 8008984:	4651      	mov	r1, sl
 8008986:	4628      	mov	r0, r5
 8008988:	f000 fb56 	bl	8009038 <_Bfree>
 800898c:	46c2      	mov	sl, r8
 800898e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008990:	1b1a      	subs	r2, r3, r4
 8008992:	d004      	beq.n	800899e <_dtoa_r+0x7a6>
 8008994:	4651      	mov	r1, sl
 8008996:	4628      	mov	r0, r5
 8008998:	f000 fd0c 	bl	80093b4 <__pow5mult>
 800899c:	4682      	mov	sl, r0
 800899e:	2101      	movs	r1, #1
 80089a0:	4628      	mov	r0, r5
 80089a2:	f000 fc49 	bl	8009238 <__i2b>
 80089a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a8:	4604      	mov	r4, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f340 8082 	ble.w	8008ab4 <_dtoa_r+0x8bc>
 80089b0:	461a      	mov	r2, r3
 80089b2:	4601      	mov	r1, r0
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 fcfd 	bl	80093b4 <__pow5mult>
 80089ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089bc:	4604      	mov	r4, r0
 80089be:	2b01      	cmp	r3, #1
 80089c0:	dd7b      	ble.n	8008aba <_dtoa_r+0x8c2>
 80089c2:	f04f 0800 	mov.w	r8, #0
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089cc:	6918      	ldr	r0, [r3, #16]
 80089ce:	f000 fbe5 	bl	800919c <__hi0bits>
 80089d2:	f1c0 0020 	rsb	r0, r0, #32
 80089d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d8:	4418      	add	r0, r3
 80089da:	f010 001f 	ands.w	r0, r0, #31
 80089de:	f000 8092 	beq.w	8008b06 <_dtoa_r+0x90e>
 80089e2:	f1c0 0320 	rsb	r3, r0, #32
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	f340 8085 	ble.w	8008af6 <_dtoa_r+0x8fe>
 80089ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ee:	f1c0 001c 	rsb	r0, r0, #28
 80089f2:	4403      	add	r3, r0
 80089f4:	4481      	add	r9, r0
 80089f6:	4407      	add	r7, r0
 80089f8:	9309      	str	r3, [sp, #36]	; 0x24
 80089fa:	f1b9 0f00 	cmp.w	r9, #0
 80089fe:	dd05      	ble.n	8008a0c <_dtoa_r+0x814>
 8008a00:	4651      	mov	r1, sl
 8008a02:	464a      	mov	r2, r9
 8008a04:	4628      	mov	r0, r5
 8008a06:	f000 fd2f 	bl	8009468 <__lshift>
 8008a0a:	4682      	mov	sl, r0
 8008a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dd05      	ble.n	8008a1e <_dtoa_r+0x826>
 8008a12:	4621      	mov	r1, r4
 8008a14:	461a      	mov	r2, r3
 8008a16:	4628      	mov	r0, r5
 8008a18:	f000 fd26 	bl	8009468 <__lshift>
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d072      	beq.n	8008b0a <_dtoa_r+0x912>
 8008a24:	4621      	mov	r1, r4
 8008a26:	4650      	mov	r0, sl
 8008a28:	f000 fd8a 	bl	8009540 <__mcmp>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	da6c      	bge.n	8008b0a <_dtoa_r+0x912>
 8008a30:	2300      	movs	r3, #0
 8008a32:	4651      	mov	r1, sl
 8008a34:	220a      	movs	r2, #10
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 fb20 	bl	800907c <__multadd>
 8008a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a3e:	4682      	mov	sl, r0
 8008a40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 81ac 	beq.w	8008da2 <_dtoa_r+0xbaa>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	220a      	movs	r2, #10
 8008a50:	4628      	mov	r0, r5
 8008a52:	f000 fb13 	bl	800907c <__multadd>
 8008a56:	9b06      	ldr	r3, [sp, #24]
 8008a58:	4606      	mov	r6, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f300 8093 	bgt.w	8008b86 <_dtoa_r+0x98e>
 8008a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	dc59      	bgt.n	8008b1a <_dtoa_r+0x922>
 8008a66:	e08e      	b.n	8008b86 <_dtoa_r+0x98e>
 8008a68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a6e:	e75d      	b.n	800892c <_dtoa_r+0x734>
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	1e5c      	subs	r4, r3, #1
 8008a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a76:	42a3      	cmp	r3, r4
 8008a78:	bfbf      	itttt	lt
 8008a7a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a7c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008a7e:	1ae3      	sublt	r3, r4, r3
 8008a80:	18d2      	addlt	r2, r2, r3
 8008a82:	bfa8      	it	ge
 8008a84:	1b1c      	subge	r4, r3, r4
 8008a86:	9b08      	ldr	r3, [sp, #32]
 8008a88:	bfbe      	ittt	lt
 8008a8a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008a8c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008a8e:	2400      	movlt	r4, #0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bfb5      	itete	lt
 8008a94:	eba9 0703 	sublt.w	r7, r9, r3
 8008a98:	464f      	movge	r7, r9
 8008a9a:	2300      	movlt	r3, #0
 8008a9c:	9b08      	ldrge	r3, [sp, #32]
 8008a9e:	e747      	b.n	8008930 <_dtoa_r+0x738>
 8008aa0:	464f      	mov	r7, r9
 8008aa2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008aa4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008aa6:	e74c      	b.n	8008942 <_dtoa_r+0x74a>
 8008aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aaa:	e773      	b.n	8008994 <_dtoa_r+0x79c>
 8008aac:	3fe00000 	.word	0x3fe00000
 8008ab0:	40240000 	.word	0x40240000
 8008ab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	dc18      	bgt.n	8008aec <_dtoa_r+0x8f4>
 8008aba:	9b04      	ldr	r3, [sp, #16]
 8008abc:	b9b3      	cbnz	r3, 8008aec <_dtoa_r+0x8f4>
 8008abe:	9b05      	ldr	r3, [sp, #20]
 8008ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ac4:	b993      	cbnz	r3, 8008aec <_dtoa_r+0x8f4>
 8008ac6:	9b05      	ldr	r3, [sp, #20]
 8008ac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008acc:	0d1b      	lsrs	r3, r3, #20
 8008ace:	051b      	lsls	r3, r3, #20
 8008ad0:	b17b      	cbz	r3, 8008af2 <_dtoa_r+0x8fa>
 8008ad2:	f04f 0801 	mov.w	r8, #1
 8008ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad8:	f109 0901 	add.w	r9, r9, #1
 8008adc:	3301      	adds	r3, #1
 8008ade:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f47f af6f 	bne.w	80089c6 <_dtoa_r+0x7ce>
 8008ae8:	2001      	movs	r0, #1
 8008aea:	e774      	b.n	80089d6 <_dtoa_r+0x7de>
 8008aec:	f04f 0800 	mov.w	r8, #0
 8008af0:	e7f6      	b.n	8008ae0 <_dtoa_r+0x8e8>
 8008af2:	4698      	mov	r8, r3
 8008af4:	e7f4      	b.n	8008ae0 <_dtoa_r+0x8e8>
 8008af6:	d080      	beq.n	80089fa <_dtoa_r+0x802>
 8008af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008afa:	331c      	adds	r3, #28
 8008afc:	441a      	add	r2, r3
 8008afe:	4499      	add	r9, r3
 8008b00:	441f      	add	r7, r3
 8008b02:	9209      	str	r2, [sp, #36]	; 0x24
 8008b04:	e779      	b.n	80089fa <_dtoa_r+0x802>
 8008b06:	4603      	mov	r3, r0
 8008b08:	e7f6      	b.n	8008af8 <_dtoa_r+0x900>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	dc34      	bgt.n	8008b7a <_dtoa_r+0x982>
 8008b10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	dd31      	ble.n	8008b7a <_dtoa_r+0x982>
 8008b16:	9b08      	ldr	r3, [sp, #32]
 8008b18:	9306      	str	r3, [sp, #24]
 8008b1a:	9b06      	ldr	r3, [sp, #24]
 8008b1c:	b963      	cbnz	r3, 8008b38 <_dtoa_r+0x940>
 8008b1e:	4621      	mov	r1, r4
 8008b20:	2205      	movs	r2, #5
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 faaa 	bl	800907c <__multadd>
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4650      	mov	r0, sl
 8008b2e:	f000 fd07 	bl	8009540 <__mcmp>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	f73f adbf 	bgt.w	80086b6 <_dtoa_r+0x4be>
 8008b38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b3a:	9f03      	ldr	r7, [sp, #12]
 8008b3c:	ea6f 0b03 	mvn.w	fp, r3
 8008b40:	f04f 0800 	mov.w	r8, #0
 8008b44:	4621      	mov	r1, r4
 8008b46:	4628      	mov	r0, r5
 8008b48:	f000 fa76 	bl	8009038 <_Bfree>
 8008b4c:	2e00      	cmp	r6, #0
 8008b4e:	f43f aead 	beq.w	80088ac <_dtoa_r+0x6b4>
 8008b52:	f1b8 0f00 	cmp.w	r8, #0
 8008b56:	d005      	beq.n	8008b64 <_dtoa_r+0x96c>
 8008b58:	45b0      	cmp	r8, r6
 8008b5a:	d003      	beq.n	8008b64 <_dtoa_r+0x96c>
 8008b5c:	4641      	mov	r1, r8
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 fa6a 	bl	8009038 <_Bfree>
 8008b64:	4631      	mov	r1, r6
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fa66 	bl	8009038 <_Bfree>
 8008b6c:	e69e      	b.n	80088ac <_dtoa_r+0x6b4>
 8008b6e:	2400      	movs	r4, #0
 8008b70:	4626      	mov	r6, r4
 8008b72:	e7e1      	b.n	8008b38 <_dtoa_r+0x940>
 8008b74:	46c3      	mov	fp, r8
 8008b76:	4626      	mov	r6, r4
 8008b78:	e59d      	b.n	80086b6 <_dtoa_r+0x4be>
 8008b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80c8 	beq.w	8008d12 <_dtoa_r+0xb1a>
 8008b82:	9b08      	ldr	r3, [sp, #32]
 8008b84:	9306      	str	r3, [sp, #24]
 8008b86:	2f00      	cmp	r7, #0
 8008b88:	dd05      	ble.n	8008b96 <_dtoa_r+0x99e>
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	463a      	mov	r2, r7
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 fc6a 	bl	8009468 <__lshift>
 8008b94:	4606      	mov	r6, r0
 8008b96:	f1b8 0f00 	cmp.w	r8, #0
 8008b9a:	d05b      	beq.n	8008c54 <_dtoa_r+0xa5c>
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	6871      	ldr	r1, [r6, #4]
 8008ba0:	f000 fa0a 	bl	8008fb8 <_Balloc>
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	b928      	cbnz	r0, 8008bb4 <_dtoa_r+0x9bc>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008bae:	4b81      	ldr	r3, [pc, #516]	; (8008db4 <_dtoa_r+0xbbc>)
 8008bb0:	f7ff bb36 	b.w	8008220 <_dtoa_r+0x28>
 8008bb4:	6932      	ldr	r2, [r6, #16]
 8008bb6:	f106 010c 	add.w	r1, r6, #12
 8008bba:	3202      	adds	r2, #2
 8008bbc:	0092      	lsls	r2, r2, #2
 8008bbe:	300c      	adds	r0, #12
 8008bc0:	f7ff fa7b 	bl	80080ba <memcpy>
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f000 fc4d 	bl	8009468 <__lshift>
 8008bce:	46b0      	mov	r8, r6
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	9b03      	ldr	r3, [sp, #12]
 8008bd4:	9a03      	ldr	r2, [sp, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	9308      	str	r3, [sp, #32]
 8008bda:	9b06      	ldr	r3, [sp, #24]
 8008bdc:	4413      	add	r3, r2
 8008bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8008be0:	9b04      	ldr	r3, [sp, #16]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	930a      	str	r3, [sp, #40]	; 0x28
 8008be8:	9b08      	ldr	r3, [sp, #32]
 8008bea:	4621      	mov	r1, r4
 8008bec:	3b01      	subs	r3, #1
 8008bee:	4650      	mov	r0, sl
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	f7ff fa75 	bl	80080e0 <quorem>
 8008bf6:	4641      	mov	r1, r8
 8008bf8:	9006      	str	r0, [sp, #24]
 8008bfa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008bfe:	4650      	mov	r0, sl
 8008c00:	f000 fc9e 	bl	8009540 <__mcmp>
 8008c04:	4632      	mov	r2, r6
 8008c06:	9009      	str	r0, [sp, #36]	; 0x24
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 fcb4 	bl	8009578 <__mdiff>
 8008c10:	68c2      	ldr	r2, [r0, #12]
 8008c12:	4607      	mov	r7, r0
 8008c14:	bb02      	cbnz	r2, 8008c58 <_dtoa_r+0xa60>
 8008c16:	4601      	mov	r1, r0
 8008c18:	4650      	mov	r0, sl
 8008c1a:	f000 fc91 	bl	8009540 <__mcmp>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	4639      	mov	r1, r7
 8008c22:	4628      	mov	r0, r5
 8008c24:	920c      	str	r2, [sp, #48]	; 0x30
 8008c26:	f000 fa07 	bl	8009038 <_Bfree>
 8008c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c2e:	9f08      	ldr	r7, [sp, #32]
 8008c30:	ea43 0102 	orr.w	r1, r3, r2
 8008c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c36:	4319      	orrs	r1, r3
 8008c38:	d110      	bne.n	8008c5c <_dtoa_r+0xa64>
 8008c3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c3e:	d029      	beq.n	8008c94 <_dtoa_r+0xa9c>
 8008c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dd02      	ble.n	8008c4c <_dtoa_r+0xa54>
 8008c46:	9b06      	ldr	r3, [sp, #24]
 8008c48:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	f883 9000 	strb.w	r9, [r3]
 8008c52:	e777      	b.n	8008b44 <_dtoa_r+0x94c>
 8008c54:	4630      	mov	r0, r6
 8008c56:	e7ba      	b.n	8008bce <_dtoa_r+0x9d6>
 8008c58:	2201      	movs	r2, #1
 8008c5a:	e7e1      	b.n	8008c20 <_dtoa_r+0xa28>
 8008c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	db04      	blt.n	8008c6c <_dtoa_r+0xa74>
 8008c62:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008c64:	430b      	orrs	r3, r1
 8008c66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c68:	430b      	orrs	r3, r1
 8008c6a:	d120      	bne.n	8008cae <_dtoa_r+0xab6>
 8008c6c:	2a00      	cmp	r2, #0
 8008c6e:	dded      	ble.n	8008c4c <_dtoa_r+0xa54>
 8008c70:	4651      	mov	r1, sl
 8008c72:	2201      	movs	r2, #1
 8008c74:	4628      	mov	r0, r5
 8008c76:	f000 fbf7 	bl	8009468 <__lshift>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4682      	mov	sl, r0
 8008c7e:	f000 fc5f 	bl	8009540 <__mcmp>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	dc03      	bgt.n	8008c8e <_dtoa_r+0xa96>
 8008c86:	d1e1      	bne.n	8008c4c <_dtoa_r+0xa54>
 8008c88:	f019 0f01 	tst.w	r9, #1
 8008c8c:	d0de      	beq.n	8008c4c <_dtoa_r+0xa54>
 8008c8e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c92:	d1d8      	bne.n	8008c46 <_dtoa_r+0xa4e>
 8008c94:	2339      	movs	r3, #57	; 0x39
 8008c96:	9a04      	ldr	r2, [sp, #16]
 8008c98:	7013      	strb	r3, [r2, #0]
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	461f      	mov	r7, r3
 8008c9e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	2a39      	cmp	r2, #57	; 0x39
 8008ca6:	d06b      	beq.n	8008d80 <_dtoa_r+0xb88>
 8008ca8:	3201      	adds	r2, #1
 8008caa:	701a      	strb	r2, [r3, #0]
 8008cac:	e74a      	b.n	8008b44 <_dtoa_r+0x94c>
 8008cae:	2a00      	cmp	r2, #0
 8008cb0:	dd07      	ble.n	8008cc2 <_dtoa_r+0xaca>
 8008cb2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cb6:	d0ed      	beq.n	8008c94 <_dtoa_r+0xa9c>
 8008cb8:	9a04      	ldr	r2, [sp, #16]
 8008cba:	f109 0301 	add.w	r3, r9, #1
 8008cbe:	7013      	strb	r3, [r2, #0]
 8008cc0:	e740      	b.n	8008b44 <_dtoa_r+0x94c>
 8008cc2:	9b08      	ldr	r3, [sp, #32]
 8008cc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cc6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d042      	beq.n	8008d54 <_dtoa_r+0xb5c>
 8008cce:	4651      	mov	r1, sl
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	220a      	movs	r2, #10
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f000 f9d1 	bl	800907c <__multadd>
 8008cda:	45b0      	cmp	r8, r6
 8008cdc:	4682      	mov	sl, r0
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	f04f 020a 	mov.w	r2, #10
 8008ce6:	4641      	mov	r1, r8
 8008ce8:	4628      	mov	r0, r5
 8008cea:	d107      	bne.n	8008cfc <_dtoa_r+0xb04>
 8008cec:	f000 f9c6 	bl	800907c <__multadd>
 8008cf0:	4680      	mov	r8, r0
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	9b08      	ldr	r3, [sp, #32]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	9308      	str	r3, [sp, #32]
 8008cfa:	e775      	b.n	8008be8 <_dtoa_r+0x9f0>
 8008cfc:	f000 f9be 	bl	800907c <__multadd>
 8008d00:	4631      	mov	r1, r6
 8008d02:	4680      	mov	r8, r0
 8008d04:	2300      	movs	r3, #0
 8008d06:	220a      	movs	r2, #10
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f000 f9b7 	bl	800907c <__multadd>
 8008d0e:	4606      	mov	r6, r0
 8008d10:	e7f0      	b.n	8008cf4 <_dtoa_r+0xafc>
 8008d12:	9b08      	ldr	r3, [sp, #32]
 8008d14:	9306      	str	r3, [sp, #24]
 8008d16:	9f03      	ldr	r7, [sp, #12]
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4650      	mov	r0, sl
 8008d1c:	f7ff f9e0 	bl	80080e0 <quorem>
 8008d20:	9b03      	ldr	r3, [sp, #12]
 8008d22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d26:	f807 9b01 	strb.w	r9, [r7], #1
 8008d2a:	1afa      	subs	r2, r7, r3
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	dd07      	ble.n	8008d42 <_dtoa_r+0xb4a>
 8008d32:	4651      	mov	r1, sl
 8008d34:	2300      	movs	r3, #0
 8008d36:	220a      	movs	r2, #10
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 f99f 	bl	800907c <__multadd>
 8008d3e:	4682      	mov	sl, r0
 8008d40:	e7ea      	b.n	8008d18 <_dtoa_r+0xb20>
 8008d42:	9b06      	ldr	r3, [sp, #24]
 8008d44:	f04f 0800 	mov.w	r8, #0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bfcc      	ite	gt
 8008d4c:	461f      	movgt	r7, r3
 8008d4e:	2701      	movle	r7, #1
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	441f      	add	r7, r3
 8008d54:	4651      	mov	r1, sl
 8008d56:	2201      	movs	r2, #1
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f000 fb85 	bl	8009468 <__lshift>
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4682      	mov	sl, r0
 8008d62:	f000 fbed 	bl	8009540 <__mcmp>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	dc97      	bgt.n	8008c9a <_dtoa_r+0xaa2>
 8008d6a:	d102      	bne.n	8008d72 <_dtoa_r+0xb7a>
 8008d6c:	f019 0f01 	tst.w	r9, #1
 8008d70:	d193      	bne.n	8008c9a <_dtoa_r+0xaa2>
 8008d72:	463b      	mov	r3, r7
 8008d74:	461f      	mov	r7, r3
 8008d76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d7a:	2a30      	cmp	r2, #48	; 0x30
 8008d7c:	d0fa      	beq.n	8008d74 <_dtoa_r+0xb7c>
 8008d7e:	e6e1      	b.n	8008b44 <_dtoa_r+0x94c>
 8008d80:	9a03      	ldr	r2, [sp, #12]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d18a      	bne.n	8008c9c <_dtoa_r+0xaa4>
 8008d86:	2331      	movs	r3, #49	; 0x31
 8008d88:	f10b 0b01 	add.w	fp, fp, #1
 8008d8c:	e797      	b.n	8008cbe <_dtoa_r+0xac6>
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <_dtoa_r+0xbc0>)
 8008d90:	f7ff ba9f 	b.w	80082d2 <_dtoa_r+0xda>
 8008d94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f47f aa77 	bne.w	800828a <_dtoa_r+0x92>
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <_dtoa_r+0xbc4>)
 8008d9e:	f7ff ba98 	b.w	80082d2 <_dtoa_r+0xda>
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dcb6      	bgt.n	8008d16 <_dtoa_r+0xb1e>
 8008da8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	f73f aeb5 	bgt.w	8008b1a <_dtoa_r+0x922>
 8008db0:	e7b1      	b.n	8008d16 <_dtoa_r+0xb1e>
 8008db2:	bf00      	nop
 8008db4:	0800c03f 	.word	0x0800c03f
 8008db8:	0800bf9a 	.word	0x0800bf9a
 8008dbc:	0800bfc3 	.word	0x0800bfc3

08008dc0 <_free_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	d040      	beq.n	8008e4a <_free_r+0x8a>
 8008dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dcc:	1f0c      	subs	r4, r1, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bfb8      	it	lt
 8008dd2:	18e4      	addlt	r4, r4, r3
 8008dd4:	f000 f8e4 	bl	8008fa0 <__malloc_lock>
 8008dd8:	4a1c      	ldr	r2, [pc, #112]	; (8008e4c <_free_r+0x8c>)
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	b933      	cbnz	r3, 8008dec <_free_r+0x2c>
 8008dde:	6063      	str	r3, [r4, #4]
 8008de0:	6014      	str	r4, [r2, #0]
 8008de2:	4628      	mov	r0, r5
 8008de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008de8:	f000 b8e0 	b.w	8008fac <__malloc_unlock>
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d908      	bls.n	8008e02 <_free_r+0x42>
 8008df0:	6820      	ldr	r0, [r4, #0]
 8008df2:	1821      	adds	r1, r4, r0
 8008df4:	428b      	cmp	r3, r1
 8008df6:	bf01      	itttt	eq
 8008df8:	6819      	ldreq	r1, [r3, #0]
 8008dfa:	685b      	ldreq	r3, [r3, #4]
 8008dfc:	1809      	addeq	r1, r1, r0
 8008dfe:	6021      	streq	r1, [r4, #0]
 8008e00:	e7ed      	b.n	8008dde <_free_r+0x1e>
 8008e02:	461a      	mov	r2, r3
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b10b      	cbz	r3, 8008e0c <_free_r+0x4c>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d9fa      	bls.n	8008e02 <_free_r+0x42>
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	1850      	adds	r0, r2, r1
 8008e10:	42a0      	cmp	r0, r4
 8008e12:	d10b      	bne.n	8008e2c <_free_r+0x6c>
 8008e14:	6820      	ldr	r0, [r4, #0]
 8008e16:	4401      	add	r1, r0
 8008e18:	1850      	adds	r0, r2, r1
 8008e1a:	4283      	cmp	r3, r0
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	d1e0      	bne.n	8008de2 <_free_r+0x22>
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4408      	add	r0, r1
 8008e26:	6010      	str	r0, [r2, #0]
 8008e28:	6053      	str	r3, [r2, #4]
 8008e2a:	e7da      	b.n	8008de2 <_free_r+0x22>
 8008e2c:	d902      	bls.n	8008e34 <_free_r+0x74>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	e7d6      	b.n	8008de2 <_free_r+0x22>
 8008e34:	6820      	ldr	r0, [r4, #0]
 8008e36:	1821      	adds	r1, r4, r0
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf01      	itttt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	1809      	addeq	r1, r1, r0
 8008e42:	6021      	streq	r1, [r4, #0]
 8008e44:	6063      	str	r3, [r4, #4]
 8008e46:	6054      	str	r4, [r2, #4]
 8008e48:	e7cb      	b.n	8008de2 <_free_r+0x22>
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	2000098c 	.word	0x2000098c

08008e50 <malloc>:
 8008e50:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <malloc+0xc>)
 8008e52:	4601      	mov	r1, r0
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f000 b823 	b.w	8008ea0 <_malloc_r>
 8008e5a:	bf00      	nop
 8008e5c:	2000007c 	.word	0x2000007c

08008e60 <sbrk_aligned>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	4e0e      	ldr	r6, [pc, #56]	; (8008e9c <sbrk_aligned+0x3c>)
 8008e64:	460c      	mov	r4, r1
 8008e66:	6831      	ldr	r1, [r6, #0]
 8008e68:	4605      	mov	r5, r0
 8008e6a:	b911      	cbnz	r1, 8008e72 <sbrk_aligned+0x12>
 8008e6c:	f001 fdf2 	bl	800aa54 <_sbrk_r>
 8008e70:	6030      	str	r0, [r6, #0]
 8008e72:	4621      	mov	r1, r4
 8008e74:	4628      	mov	r0, r5
 8008e76:	f001 fded 	bl	800aa54 <_sbrk_r>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d00a      	beq.n	8008e94 <sbrk_aligned+0x34>
 8008e7e:	1cc4      	adds	r4, r0, #3
 8008e80:	f024 0403 	bic.w	r4, r4, #3
 8008e84:	42a0      	cmp	r0, r4
 8008e86:	d007      	beq.n	8008e98 <sbrk_aligned+0x38>
 8008e88:	1a21      	subs	r1, r4, r0
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f001 fde2 	bl	800aa54 <_sbrk_r>
 8008e90:	3001      	adds	r0, #1
 8008e92:	d101      	bne.n	8008e98 <sbrk_aligned+0x38>
 8008e94:	f04f 34ff 	mov.w	r4, #4294967295
 8008e98:	4620      	mov	r0, r4
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	20000990 	.word	0x20000990

08008ea0 <_malloc_r>:
 8008ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea4:	1ccd      	adds	r5, r1, #3
 8008ea6:	f025 0503 	bic.w	r5, r5, #3
 8008eaa:	3508      	adds	r5, #8
 8008eac:	2d0c      	cmp	r5, #12
 8008eae:	bf38      	it	cc
 8008eb0:	250c      	movcc	r5, #12
 8008eb2:	2d00      	cmp	r5, #0
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	db01      	blt.n	8008ebc <_malloc_r+0x1c>
 8008eb8:	42a9      	cmp	r1, r5
 8008eba:	d905      	bls.n	8008ec8 <_malloc_r+0x28>
 8008ebc:	230c      	movs	r3, #12
 8008ebe:	2600      	movs	r6, #0
 8008ec0:	603b      	str	r3, [r7, #0]
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f9c <_malloc_r+0xfc>
 8008ecc:	f000 f868 	bl	8008fa0 <__malloc_lock>
 8008ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed4:	461c      	mov	r4, r3
 8008ed6:	bb5c      	cbnz	r4, 8008f30 <_malloc_r+0x90>
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4638      	mov	r0, r7
 8008edc:	f7ff ffc0 	bl	8008e60 <sbrk_aligned>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	d155      	bne.n	8008f92 <_malloc_r+0xf2>
 8008ee6:	f8d8 4000 	ldr.w	r4, [r8]
 8008eea:	4626      	mov	r6, r4
 8008eec:	2e00      	cmp	r6, #0
 8008eee:	d145      	bne.n	8008f7c <_malloc_r+0xdc>
 8008ef0:	2c00      	cmp	r4, #0
 8008ef2:	d048      	beq.n	8008f86 <_malloc_r+0xe6>
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4638      	mov	r0, r7
 8008efa:	eb04 0903 	add.w	r9, r4, r3
 8008efe:	f001 fda9 	bl	800aa54 <_sbrk_r>
 8008f02:	4581      	cmp	r9, r0
 8008f04:	d13f      	bne.n	8008f86 <_malloc_r+0xe6>
 8008f06:	6821      	ldr	r1, [r4, #0]
 8008f08:	4638      	mov	r0, r7
 8008f0a:	1a6d      	subs	r5, r5, r1
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f7ff ffa7 	bl	8008e60 <sbrk_aligned>
 8008f12:	3001      	adds	r0, #1
 8008f14:	d037      	beq.n	8008f86 <_malloc_r+0xe6>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	442b      	add	r3, r5
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d038      	beq.n	8008f96 <_malloc_r+0xf6>
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	42a2      	cmp	r2, r4
 8008f28:	d12b      	bne.n	8008f82 <_malloc_r+0xe2>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
 8008f2e:	e00f      	b.n	8008f50 <_malloc_r+0xb0>
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	1b52      	subs	r2, r2, r5
 8008f34:	d41f      	bmi.n	8008f76 <_malloc_r+0xd6>
 8008f36:	2a0b      	cmp	r2, #11
 8008f38:	d917      	bls.n	8008f6a <_malloc_r+0xca>
 8008f3a:	1961      	adds	r1, r4, r5
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	6025      	str	r5, [r4, #0]
 8008f40:	bf18      	it	ne
 8008f42:	6059      	strne	r1, [r3, #4]
 8008f44:	6863      	ldr	r3, [r4, #4]
 8008f46:	bf08      	it	eq
 8008f48:	f8c8 1000 	streq.w	r1, [r8]
 8008f4c:	5162      	str	r2, [r4, r5]
 8008f4e:	604b      	str	r3, [r1, #4]
 8008f50:	4638      	mov	r0, r7
 8008f52:	f104 060b 	add.w	r6, r4, #11
 8008f56:	f000 f829 	bl	8008fac <__malloc_unlock>
 8008f5a:	f026 0607 	bic.w	r6, r6, #7
 8008f5e:	1d23      	adds	r3, r4, #4
 8008f60:	1af2      	subs	r2, r6, r3
 8008f62:	d0ae      	beq.n	8008ec2 <_malloc_r+0x22>
 8008f64:	1b9b      	subs	r3, r3, r6
 8008f66:	50a3      	str	r3, [r4, r2]
 8008f68:	e7ab      	b.n	8008ec2 <_malloc_r+0x22>
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	6862      	ldr	r2, [r4, #4]
 8008f6e:	d1dd      	bne.n	8008f2c <_malloc_r+0x8c>
 8008f70:	f8c8 2000 	str.w	r2, [r8]
 8008f74:	e7ec      	b.n	8008f50 <_malloc_r+0xb0>
 8008f76:	4623      	mov	r3, r4
 8008f78:	6864      	ldr	r4, [r4, #4]
 8008f7a:	e7ac      	b.n	8008ed6 <_malloc_r+0x36>
 8008f7c:	4634      	mov	r4, r6
 8008f7e:	6876      	ldr	r6, [r6, #4]
 8008f80:	e7b4      	b.n	8008eec <_malloc_r+0x4c>
 8008f82:	4613      	mov	r3, r2
 8008f84:	e7cc      	b.n	8008f20 <_malloc_r+0x80>
 8008f86:	230c      	movs	r3, #12
 8008f88:	4638      	mov	r0, r7
 8008f8a:	603b      	str	r3, [r7, #0]
 8008f8c:	f000 f80e 	bl	8008fac <__malloc_unlock>
 8008f90:	e797      	b.n	8008ec2 <_malloc_r+0x22>
 8008f92:	6025      	str	r5, [r4, #0]
 8008f94:	e7dc      	b.n	8008f50 <_malloc_r+0xb0>
 8008f96:	605b      	str	r3, [r3, #4]
 8008f98:	deff      	udf	#255	; 0xff
 8008f9a:	bf00      	nop
 8008f9c:	2000098c 	.word	0x2000098c

08008fa0 <__malloc_lock>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__malloc_lock+0x8>)
 8008fa2:	f7ff b87a 	b.w	800809a <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20000988 	.word	0x20000988

08008fac <__malloc_unlock>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__malloc_unlock+0x8>)
 8008fae:	f7ff b875 	b.w	800809c <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20000988 	.word	0x20000988

08008fb8 <_Balloc>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	69c6      	ldr	r6, [r0, #28]
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	460d      	mov	r5, r1
 8008fc0:	b976      	cbnz	r6, 8008fe0 <_Balloc+0x28>
 8008fc2:	2010      	movs	r0, #16
 8008fc4:	f7ff ff44 	bl	8008e50 <malloc>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	61e0      	str	r0, [r4, #28]
 8008fcc:	b920      	cbnz	r0, 8008fd8 <_Balloc+0x20>
 8008fce:	216b      	movs	r1, #107	; 0x6b
 8008fd0:	4b17      	ldr	r3, [pc, #92]	; (8009030 <_Balloc+0x78>)
 8008fd2:	4818      	ldr	r0, [pc, #96]	; (8009034 <_Balloc+0x7c>)
 8008fd4:	f001 fd54 	bl	800aa80 <__assert_func>
 8008fd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fdc:	6006      	str	r6, [r0, #0]
 8008fde:	60c6      	str	r6, [r0, #12]
 8008fe0:	69e6      	ldr	r6, [r4, #28]
 8008fe2:	68f3      	ldr	r3, [r6, #12]
 8008fe4:	b183      	cbz	r3, 8009008 <_Balloc+0x50>
 8008fe6:	69e3      	ldr	r3, [r4, #28]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fee:	b9b8      	cbnz	r0, 8009020 <_Balloc+0x68>
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ff6:	1d72      	adds	r2, r6, #5
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	0092      	lsls	r2, r2, #2
 8008ffc:	f001 fd5e 	bl	800aabc <_calloc_r>
 8009000:	b160      	cbz	r0, 800901c <_Balloc+0x64>
 8009002:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009006:	e00e      	b.n	8009026 <_Balloc+0x6e>
 8009008:	2221      	movs	r2, #33	; 0x21
 800900a:	2104      	movs	r1, #4
 800900c:	4620      	mov	r0, r4
 800900e:	f001 fd55 	bl	800aabc <_calloc_r>
 8009012:	69e3      	ldr	r3, [r4, #28]
 8009014:	60f0      	str	r0, [r6, #12]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e4      	bne.n	8008fe6 <_Balloc+0x2e>
 800901c:	2000      	movs	r0, #0
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	6802      	ldr	r2, [r0, #0]
 8009022:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009026:	2300      	movs	r3, #0
 8009028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800902c:	e7f7      	b.n	800901e <_Balloc+0x66>
 800902e:	bf00      	nop
 8009030:	0800bfd0 	.word	0x0800bfd0
 8009034:	0800c050 	.word	0x0800c050

08009038 <_Bfree>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	69c6      	ldr	r6, [r0, #28]
 800903c:	4605      	mov	r5, r0
 800903e:	460c      	mov	r4, r1
 8009040:	b976      	cbnz	r6, 8009060 <_Bfree+0x28>
 8009042:	2010      	movs	r0, #16
 8009044:	f7ff ff04 	bl	8008e50 <malloc>
 8009048:	4602      	mov	r2, r0
 800904a:	61e8      	str	r0, [r5, #28]
 800904c:	b920      	cbnz	r0, 8009058 <_Bfree+0x20>
 800904e:	218f      	movs	r1, #143	; 0x8f
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <_Bfree+0x3c>)
 8009052:	4809      	ldr	r0, [pc, #36]	; (8009078 <_Bfree+0x40>)
 8009054:	f001 fd14 	bl	800aa80 <__assert_func>
 8009058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800905c:	6006      	str	r6, [r0, #0]
 800905e:	60c6      	str	r6, [r0, #12]
 8009060:	b13c      	cbz	r4, 8009072 <_Bfree+0x3a>
 8009062:	69eb      	ldr	r3, [r5, #28]
 8009064:	6862      	ldr	r2, [r4, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800906c:	6021      	str	r1, [r4, #0]
 800906e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009072:	bd70      	pop	{r4, r5, r6, pc}
 8009074:	0800bfd0 	.word	0x0800bfd0
 8009078:	0800c050 	.word	0x0800c050

0800907c <__multadd>:
 800907c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009080:	4607      	mov	r7, r0
 8009082:	460c      	mov	r4, r1
 8009084:	461e      	mov	r6, r3
 8009086:	2000      	movs	r0, #0
 8009088:	690d      	ldr	r5, [r1, #16]
 800908a:	f101 0c14 	add.w	ip, r1, #20
 800908e:	f8dc 3000 	ldr.w	r3, [ip]
 8009092:	3001      	adds	r0, #1
 8009094:	b299      	uxth	r1, r3
 8009096:	fb02 6101 	mla	r1, r2, r1, r6
 800909a:	0c1e      	lsrs	r6, r3, #16
 800909c:	0c0b      	lsrs	r3, r1, #16
 800909e:	fb02 3306 	mla	r3, r2, r6, r3
 80090a2:	b289      	uxth	r1, r1
 80090a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090a8:	4285      	cmp	r5, r0
 80090aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090ae:	f84c 1b04 	str.w	r1, [ip], #4
 80090b2:	dcec      	bgt.n	800908e <__multadd+0x12>
 80090b4:	b30e      	cbz	r6, 80090fa <__multadd+0x7e>
 80090b6:	68a3      	ldr	r3, [r4, #8]
 80090b8:	42ab      	cmp	r3, r5
 80090ba:	dc19      	bgt.n	80090f0 <__multadd+0x74>
 80090bc:	6861      	ldr	r1, [r4, #4]
 80090be:	4638      	mov	r0, r7
 80090c0:	3101      	adds	r1, #1
 80090c2:	f7ff ff79 	bl	8008fb8 <_Balloc>
 80090c6:	4680      	mov	r8, r0
 80090c8:	b928      	cbnz	r0, 80090d6 <__multadd+0x5a>
 80090ca:	4602      	mov	r2, r0
 80090cc:	21ba      	movs	r1, #186	; 0xba
 80090ce:	4b0c      	ldr	r3, [pc, #48]	; (8009100 <__multadd+0x84>)
 80090d0:	480c      	ldr	r0, [pc, #48]	; (8009104 <__multadd+0x88>)
 80090d2:	f001 fcd5 	bl	800aa80 <__assert_func>
 80090d6:	6922      	ldr	r2, [r4, #16]
 80090d8:	f104 010c 	add.w	r1, r4, #12
 80090dc:	3202      	adds	r2, #2
 80090de:	0092      	lsls	r2, r2, #2
 80090e0:	300c      	adds	r0, #12
 80090e2:	f7fe ffea 	bl	80080ba <memcpy>
 80090e6:	4621      	mov	r1, r4
 80090e8:	4638      	mov	r0, r7
 80090ea:	f7ff ffa5 	bl	8009038 <_Bfree>
 80090ee:	4644      	mov	r4, r8
 80090f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090f4:	3501      	adds	r5, #1
 80090f6:	615e      	str	r6, [r3, #20]
 80090f8:	6125      	str	r5, [r4, #16]
 80090fa:	4620      	mov	r0, r4
 80090fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009100:	0800c03f 	.word	0x0800c03f
 8009104:	0800c050 	.word	0x0800c050

08009108 <__s2b>:
 8009108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800910c:	4615      	mov	r5, r2
 800910e:	2209      	movs	r2, #9
 8009110:	461f      	mov	r7, r3
 8009112:	3308      	adds	r3, #8
 8009114:	460c      	mov	r4, r1
 8009116:	fb93 f3f2 	sdiv	r3, r3, r2
 800911a:	4606      	mov	r6, r0
 800911c:	2201      	movs	r2, #1
 800911e:	2100      	movs	r1, #0
 8009120:	429a      	cmp	r2, r3
 8009122:	db09      	blt.n	8009138 <__s2b+0x30>
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff ff47 	bl	8008fb8 <_Balloc>
 800912a:	b940      	cbnz	r0, 800913e <__s2b+0x36>
 800912c:	4602      	mov	r2, r0
 800912e:	21d3      	movs	r1, #211	; 0xd3
 8009130:	4b18      	ldr	r3, [pc, #96]	; (8009194 <__s2b+0x8c>)
 8009132:	4819      	ldr	r0, [pc, #100]	; (8009198 <__s2b+0x90>)
 8009134:	f001 fca4 	bl	800aa80 <__assert_func>
 8009138:	0052      	lsls	r2, r2, #1
 800913a:	3101      	adds	r1, #1
 800913c:	e7f0      	b.n	8009120 <__s2b+0x18>
 800913e:	9b08      	ldr	r3, [sp, #32]
 8009140:	2d09      	cmp	r5, #9
 8009142:	6143      	str	r3, [r0, #20]
 8009144:	f04f 0301 	mov.w	r3, #1
 8009148:	6103      	str	r3, [r0, #16]
 800914a:	dd16      	ble.n	800917a <__s2b+0x72>
 800914c:	f104 0909 	add.w	r9, r4, #9
 8009150:	46c8      	mov	r8, r9
 8009152:	442c      	add	r4, r5
 8009154:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009158:	4601      	mov	r1, r0
 800915a:	220a      	movs	r2, #10
 800915c:	4630      	mov	r0, r6
 800915e:	3b30      	subs	r3, #48	; 0x30
 8009160:	f7ff ff8c 	bl	800907c <__multadd>
 8009164:	45a0      	cmp	r8, r4
 8009166:	d1f5      	bne.n	8009154 <__s2b+0x4c>
 8009168:	f1a5 0408 	sub.w	r4, r5, #8
 800916c:	444c      	add	r4, r9
 800916e:	1b2d      	subs	r5, r5, r4
 8009170:	1963      	adds	r3, r4, r5
 8009172:	42bb      	cmp	r3, r7
 8009174:	db04      	blt.n	8009180 <__s2b+0x78>
 8009176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917a:	2509      	movs	r5, #9
 800917c:	340a      	adds	r4, #10
 800917e:	e7f6      	b.n	800916e <__s2b+0x66>
 8009180:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009184:	4601      	mov	r1, r0
 8009186:	220a      	movs	r2, #10
 8009188:	4630      	mov	r0, r6
 800918a:	3b30      	subs	r3, #48	; 0x30
 800918c:	f7ff ff76 	bl	800907c <__multadd>
 8009190:	e7ee      	b.n	8009170 <__s2b+0x68>
 8009192:	bf00      	nop
 8009194:	0800c03f 	.word	0x0800c03f
 8009198:	0800c050 	.word	0x0800c050

0800919c <__hi0bits>:
 800919c:	0c02      	lsrs	r2, r0, #16
 800919e:	0412      	lsls	r2, r2, #16
 80091a0:	4603      	mov	r3, r0
 80091a2:	b9ca      	cbnz	r2, 80091d8 <__hi0bits+0x3c>
 80091a4:	0403      	lsls	r3, r0, #16
 80091a6:	2010      	movs	r0, #16
 80091a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80091ac:	bf04      	itt	eq
 80091ae:	021b      	lsleq	r3, r3, #8
 80091b0:	3008      	addeq	r0, #8
 80091b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80091b6:	bf04      	itt	eq
 80091b8:	011b      	lsleq	r3, r3, #4
 80091ba:	3004      	addeq	r0, #4
 80091bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80091c0:	bf04      	itt	eq
 80091c2:	009b      	lsleq	r3, r3, #2
 80091c4:	3002      	addeq	r0, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	db05      	blt.n	80091d6 <__hi0bits+0x3a>
 80091ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80091ce:	f100 0001 	add.w	r0, r0, #1
 80091d2:	bf08      	it	eq
 80091d4:	2020      	moveq	r0, #32
 80091d6:	4770      	bx	lr
 80091d8:	2000      	movs	r0, #0
 80091da:	e7e5      	b.n	80091a8 <__hi0bits+0xc>

080091dc <__lo0bits>:
 80091dc:	6803      	ldr	r3, [r0, #0]
 80091de:	4602      	mov	r2, r0
 80091e0:	f013 0007 	ands.w	r0, r3, #7
 80091e4:	d00b      	beq.n	80091fe <__lo0bits+0x22>
 80091e6:	07d9      	lsls	r1, r3, #31
 80091e8:	d421      	bmi.n	800922e <__lo0bits+0x52>
 80091ea:	0798      	lsls	r0, r3, #30
 80091ec:	bf49      	itett	mi
 80091ee:	085b      	lsrmi	r3, r3, #1
 80091f0:	089b      	lsrpl	r3, r3, #2
 80091f2:	2001      	movmi	r0, #1
 80091f4:	6013      	strmi	r3, [r2, #0]
 80091f6:	bf5c      	itt	pl
 80091f8:	2002      	movpl	r0, #2
 80091fa:	6013      	strpl	r3, [r2, #0]
 80091fc:	4770      	bx	lr
 80091fe:	b299      	uxth	r1, r3
 8009200:	b909      	cbnz	r1, 8009206 <__lo0bits+0x2a>
 8009202:	2010      	movs	r0, #16
 8009204:	0c1b      	lsrs	r3, r3, #16
 8009206:	b2d9      	uxtb	r1, r3
 8009208:	b909      	cbnz	r1, 800920e <__lo0bits+0x32>
 800920a:	3008      	adds	r0, #8
 800920c:	0a1b      	lsrs	r3, r3, #8
 800920e:	0719      	lsls	r1, r3, #28
 8009210:	bf04      	itt	eq
 8009212:	091b      	lsreq	r3, r3, #4
 8009214:	3004      	addeq	r0, #4
 8009216:	0799      	lsls	r1, r3, #30
 8009218:	bf04      	itt	eq
 800921a:	089b      	lsreq	r3, r3, #2
 800921c:	3002      	addeq	r0, #2
 800921e:	07d9      	lsls	r1, r3, #31
 8009220:	d403      	bmi.n	800922a <__lo0bits+0x4e>
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	f100 0001 	add.w	r0, r0, #1
 8009228:	d003      	beq.n	8009232 <__lo0bits+0x56>
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	4770      	bx	lr
 800922e:	2000      	movs	r0, #0
 8009230:	4770      	bx	lr
 8009232:	2020      	movs	r0, #32
 8009234:	4770      	bx	lr
	...

08009238 <__i2b>:
 8009238:	b510      	push	{r4, lr}
 800923a:	460c      	mov	r4, r1
 800923c:	2101      	movs	r1, #1
 800923e:	f7ff febb 	bl	8008fb8 <_Balloc>
 8009242:	4602      	mov	r2, r0
 8009244:	b928      	cbnz	r0, 8009252 <__i2b+0x1a>
 8009246:	f240 1145 	movw	r1, #325	; 0x145
 800924a:	4b04      	ldr	r3, [pc, #16]	; (800925c <__i2b+0x24>)
 800924c:	4804      	ldr	r0, [pc, #16]	; (8009260 <__i2b+0x28>)
 800924e:	f001 fc17 	bl	800aa80 <__assert_func>
 8009252:	2301      	movs	r3, #1
 8009254:	6144      	str	r4, [r0, #20]
 8009256:	6103      	str	r3, [r0, #16]
 8009258:	bd10      	pop	{r4, pc}
 800925a:	bf00      	nop
 800925c:	0800c03f 	.word	0x0800c03f
 8009260:	0800c050 	.word	0x0800c050

08009264 <__multiply>:
 8009264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	4691      	mov	r9, r2
 800926a:	690a      	ldr	r2, [r1, #16]
 800926c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009270:	460c      	mov	r4, r1
 8009272:	429a      	cmp	r2, r3
 8009274:	bfbe      	ittt	lt
 8009276:	460b      	movlt	r3, r1
 8009278:	464c      	movlt	r4, r9
 800927a:	4699      	movlt	r9, r3
 800927c:	6927      	ldr	r7, [r4, #16]
 800927e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009282:	68a3      	ldr	r3, [r4, #8]
 8009284:	6861      	ldr	r1, [r4, #4]
 8009286:	eb07 060a 	add.w	r6, r7, sl
 800928a:	42b3      	cmp	r3, r6
 800928c:	b085      	sub	sp, #20
 800928e:	bfb8      	it	lt
 8009290:	3101      	addlt	r1, #1
 8009292:	f7ff fe91 	bl	8008fb8 <_Balloc>
 8009296:	b930      	cbnz	r0, 80092a6 <__multiply+0x42>
 8009298:	4602      	mov	r2, r0
 800929a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800929e:	4b43      	ldr	r3, [pc, #268]	; (80093ac <__multiply+0x148>)
 80092a0:	4843      	ldr	r0, [pc, #268]	; (80093b0 <__multiply+0x14c>)
 80092a2:	f001 fbed 	bl	800aa80 <__assert_func>
 80092a6:	f100 0514 	add.w	r5, r0, #20
 80092aa:	462b      	mov	r3, r5
 80092ac:	2200      	movs	r2, #0
 80092ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092b2:	4543      	cmp	r3, r8
 80092b4:	d321      	bcc.n	80092fa <__multiply+0x96>
 80092b6:	f104 0314 	add.w	r3, r4, #20
 80092ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092be:	f109 0314 	add.w	r3, r9, #20
 80092c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092c6:	9202      	str	r2, [sp, #8]
 80092c8:	1b3a      	subs	r2, r7, r4
 80092ca:	3a15      	subs	r2, #21
 80092cc:	f022 0203 	bic.w	r2, r2, #3
 80092d0:	3204      	adds	r2, #4
 80092d2:	f104 0115 	add.w	r1, r4, #21
 80092d6:	428f      	cmp	r7, r1
 80092d8:	bf38      	it	cc
 80092da:	2204      	movcc	r2, #4
 80092dc:	9201      	str	r2, [sp, #4]
 80092de:	9a02      	ldr	r2, [sp, #8]
 80092e0:	9303      	str	r3, [sp, #12]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d80c      	bhi.n	8009300 <__multiply+0x9c>
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	dd03      	ble.n	80092f2 <__multiply+0x8e>
 80092ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d05a      	beq.n	80093a8 <__multiply+0x144>
 80092f2:	6106      	str	r6, [r0, #16]
 80092f4:	b005      	add	sp, #20
 80092f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fa:	f843 2b04 	str.w	r2, [r3], #4
 80092fe:	e7d8      	b.n	80092b2 <__multiply+0x4e>
 8009300:	f8b3 a000 	ldrh.w	sl, [r3]
 8009304:	f1ba 0f00 	cmp.w	sl, #0
 8009308:	d023      	beq.n	8009352 <__multiply+0xee>
 800930a:	46a9      	mov	r9, r5
 800930c:	f04f 0c00 	mov.w	ip, #0
 8009310:	f104 0e14 	add.w	lr, r4, #20
 8009314:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009318:	f8d9 1000 	ldr.w	r1, [r9]
 800931c:	fa1f fb82 	uxth.w	fp, r2
 8009320:	b289      	uxth	r1, r1
 8009322:	fb0a 110b 	mla	r1, sl, fp, r1
 8009326:	4461      	add	r1, ip
 8009328:	f8d9 c000 	ldr.w	ip, [r9]
 800932c:	0c12      	lsrs	r2, r2, #16
 800932e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009332:	fb0a c202 	mla	r2, sl, r2, ip
 8009336:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800933a:	b289      	uxth	r1, r1
 800933c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009340:	4577      	cmp	r7, lr
 8009342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009346:	f849 1b04 	str.w	r1, [r9], #4
 800934a:	d8e3      	bhi.n	8009314 <__multiply+0xb0>
 800934c:	9a01      	ldr	r2, [sp, #4]
 800934e:	f845 c002 	str.w	ip, [r5, r2]
 8009352:	9a03      	ldr	r2, [sp, #12]
 8009354:	3304      	adds	r3, #4
 8009356:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800935a:	f1b9 0f00 	cmp.w	r9, #0
 800935e:	d021      	beq.n	80093a4 <__multiply+0x140>
 8009360:	46ae      	mov	lr, r5
 8009362:	f04f 0a00 	mov.w	sl, #0
 8009366:	6829      	ldr	r1, [r5, #0]
 8009368:	f104 0c14 	add.w	ip, r4, #20
 800936c:	f8bc b000 	ldrh.w	fp, [ip]
 8009370:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009374:	b289      	uxth	r1, r1
 8009376:	fb09 220b 	mla	r2, r9, fp, r2
 800937a:	4452      	add	r2, sl
 800937c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009380:	f84e 1b04 	str.w	r1, [lr], #4
 8009384:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009388:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800938c:	f8be 1000 	ldrh.w	r1, [lr]
 8009390:	4567      	cmp	r7, ip
 8009392:	fb09 110a 	mla	r1, r9, sl, r1
 8009396:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800939a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800939e:	d8e5      	bhi.n	800936c <__multiply+0x108>
 80093a0:	9a01      	ldr	r2, [sp, #4]
 80093a2:	50a9      	str	r1, [r5, r2]
 80093a4:	3504      	adds	r5, #4
 80093a6:	e79a      	b.n	80092de <__multiply+0x7a>
 80093a8:	3e01      	subs	r6, #1
 80093aa:	e79c      	b.n	80092e6 <__multiply+0x82>
 80093ac:	0800c03f 	.word	0x0800c03f
 80093b0:	0800c050 	.word	0x0800c050

080093b4 <__pow5mult>:
 80093b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b8:	4615      	mov	r5, r2
 80093ba:	f012 0203 	ands.w	r2, r2, #3
 80093be:	4606      	mov	r6, r0
 80093c0:	460f      	mov	r7, r1
 80093c2:	d007      	beq.n	80093d4 <__pow5mult+0x20>
 80093c4:	4c25      	ldr	r4, [pc, #148]	; (800945c <__pow5mult+0xa8>)
 80093c6:	3a01      	subs	r2, #1
 80093c8:	2300      	movs	r3, #0
 80093ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093ce:	f7ff fe55 	bl	800907c <__multadd>
 80093d2:	4607      	mov	r7, r0
 80093d4:	10ad      	asrs	r5, r5, #2
 80093d6:	d03d      	beq.n	8009454 <__pow5mult+0xa0>
 80093d8:	69f4      	ldr	r4, [r6, #28]
 80093da:	b97c      	cbnz	r4, 80093fc <__pow5mult+0x48>
 80093dc:	2010      	movs	r0, #16
 80093de:	f7ff fd37 	bl	8008e50 <malloc>
 80093e2:	4602      	mov	r2, r0
 80093e4:	61f0      	str	r0, [r6, #28]
 80093e6:	b928      	cbnz	r0, 80093f4 <__pow5mult+0x40>
 80093e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80093ec:	4b1c      	ldr	r3, [pc, #112]	; (8009460 <__pow5mult+0xac>)
 80093ee:	481d      	ldr	r0, [pc, #116]	; (8009464 <__pow5mult+0xb0>)
 80093f0:	f001 fb46 	bl	800aa80 <__assert_func>
 80093f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093f8:	6004      	str	r4, [r0, #0]
 80093fa:	60c4      	str	r4, [r0, #12]
 80093fc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009400:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009404:	b94c      	cbnz	r4, 800941a <__pow5mult+0x66>
 8009406:	f240 2171 	movw	r1, #625	; 0x271
 800940a:	4630      	mov	r0, r6
 800940c:	f7ff ff14 	bl	8009238 <__i2b>
 8009410:	2300      	movs	r3, #0
 8009412:	4604      	mov	r4, r0
 8009414:	f8c8 0008 	str.w	r0, [r8, #8]
 8009418:	6003      	str	r3, [r0, #0]
 800941a:	f04f 0900 	mov.w	r9, #0
 800941e:	07eb      	lsls	r3, r5, #31
 8009420:	d50a      	bpl.n	8009438 <__pow5mult+0x84>
 8009422:	4639      	mov	r1, r7
 8009424:	4622      	mov	r2, r4
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff ff1c 	bl	8009264 <__multiply>
 800942c:	4680      	mov	r8, r0
 800942e:	4639      	mov	r1, r7
 8009430:	4630      	mov	r0, r6
 8009432:	f7ff fe01 	bl	8009038 <_Bfree>
 8009436:	4647      	mov	r7, r8
 8009438:	106d      	asrs	r5, r5, #1
 800943a:	d00b      	beq.n	8009454 <__pow5mult+0xa0>
 800943c:	6820      	ldr	r0, [r4, #0]
 800943e:	b938      	cbnz	r0, 8009450 <__pow5mult+0x9c>
 8009440:	4622      	mov	r2, r4
 8009442:	4621      	mov	r1, r4
 8009444:	4630      	mov	r0, r6
 8009446:	f7ff ff0d 	bl	8009264 <__multiply>
 800944a:	6020      	str	r0, [r4, #0]
 800944c:	f8c0 9000 	str.w	r9, [r0]
 8009450:	4604      	mov	r4, r0
 8009452:	e7e4      	b.n	800941e <__pow5mult+0x6a>
 8009454:	4638      	mov	r0, r7
 8009456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945a:	bf00      	nop
 800945c:	0800c1a0 	.word	0x0800c1a0
 8009460:	0800bfd0 	.word	0x0800bfd0
 8009464:	0800c050 	.word	0x0800c050

08009468 <__lshift>:
 8009468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800946c:	460c      	mov	r4, r1
 800946e:	4607      	mov	r7, r0
 8009470:	4691      	mov	r9, r2
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	6849      	ldr	r1, [r1, #4]
 8009476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800947a:	68a3      	ldr	r3, [r4, #8]
 800947c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009480:	f108 0601 	add.w	r6, r8, #1
 8009484:	42b3      	cmp	r3, r6
 8009486:	db0b      	blt.n	80094a0 <__lshift+0x38>
 8009488:	4638      	mov	r0, r7
 800948a:	f7ff fd95 	bl	8008fb8 <_Balloc>
 800948e:	4605      	mov	r5, r0
 8009490:	b948      	cbnz	r0, 80094a6 <__lshift+0x3e>
 8009492:	4602      	mov	r2, r0
 8009494:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009498:	4b27      	ldr	r3, [pc, #156]	; (8009538 <__lshift+0xd0>)
 800949a:	4828      	ldr	r0, [pc, #160]	; (800953c <__lshift+0xd4>)
 800949c:	f001 faf0 	bl	800aa80 <__assert_func>
 80094a0:	3101      	adds	r1, #1
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	e7ee      	b.n	8009484 <__lshift+0x1c>
 80094a6:	2300      	movs	r3, #0
 80094a8:	f100 0114 	add.w	r1, r0, #20
 80094ac:	f100 0210 	add.w	r2, r0, #16
 80094b0:	4618      	mov	r0, r3
 80094b2:	4553      	cmp	r3, sl
 80094b4:	db33      	blt.n	800951e <__lshift+0xb6>
 80094b6:	6920      	ldr	r0, [r4, #16]
 80094b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094bc:	f104 0314 	add.w	r3, r4, #20
 80094c0:	f019 091f 	ands.w	r9, r9, #31
 80094c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094cc:	d02b      	beq.n	8009526 <__lshift+0xbe>
 80094ce:	468a      	mov	sl, r1
 80094d0:	2200      	movs	r2, #0
 80094d2:	f1c9 0e20 	rsb	lr, r9, #32
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	fa00 f009 	lsl.w	r0, r0, r9
 80094dc:	4310      	orrs	r0, r2
 80094de:	f84a 0b04 	str.w	r0, [sl], #4
 80094e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e6:	459c      	cmp	ip, r3
 80094e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80094ec:	d8f3      	bhi.n	80094d6 <__lshift+0x6e>
 80094ee:	ebac 0304 	sub.w	r3, ip, r4
 80094f2:	3b15      	subs	r3, #21
 80094f4:	f023 0303 	bic.w	r3, r3, #3
 80094f8:	3304      	adds	r3, #4
 80094fa:	f104 0015 	add.w	r0, r4, #21
 80094fe:	4584      	cmp	ip, r0
 8009500:	bf38      	it	cc
 8009502:	2304      	movcc	r3, #4
 8009504:	50ca      	str	r2, [r1, r3]
 8009506:	b10a      	cbz	r2, 800950c <__lshift+0xa4>
 8009508:	f108 0602 	add.w	r6, r8, #2
 800950c:	3e01      	subs	r6, #1
 800950e:	4638      	mov	r0, r7
 8009510:	4621      	mov	r1, r4
 8009512:	612e      	str	r6, [r5, #16]
 8009514:	f7ff fd90 	bl	8009038 <_Bfree>
 8009518:	4628      	mov	r0, r5
 800951a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800951e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009522:	3301      	adds	r3, #1
 8009524:	e7c5      	b.n	80094b2 <__lshift+0x4a>
 8009526:	3904      	subs	r1, #4
 8009528:	f853 2b04 	ldr.w	r2, [r3], #4
 800952c:	459c      	cmp	ip, r3
 800952e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009532:	d8f9      	bhi.n	8009528 <__lshift+0xc0>
 8009534:	e7ea      	b.n	800950c <__lshift+0xa4>
 8009536:	bf00      	nop
 8009538:	0800c03f 	.word	0x0800c03f
 800953c:	0800c050 	.word	0x0800c050

08009540 <__mcmp>:
 8009540:	4603      	mov	r3, r0
 8009542:	690a      	ldr	r2, [r1, #16]
 8009544:	6900      	ldr	r0, [r0, #16]
 8009546:	b530      	push	{r4, r5, lr}
 8009548:	1a80      	subs	r0, r0, r2
 800954a:	d10d      	bne.n	8009568 <__mcmp+0x28>
 800954c:	3314      	adds	r3, #20
 800954e:	3114      	adds	r1, #20
 8009550:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009554:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009558:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800955c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009560:	4295      	cmp	r5, r2
 8009562:	d002      	beq.n	800956a <__mcmp+0x2a>
 8009564:	d304      	bcc.n	8009570 <__mcmp+0x30>
 8009566:	2001      	movs	r0, #1
 8009568:	bd30      	pop	{r4, r5, pc}
 800956a:	42a3      	cmp	r3, r4
 800956c:	d3f4      	bcc.n	8009558 <__mcmp+0x18>
 800956e:	e7fb      	b.n	8009568 <__mcmp+0x28>
 8009570:	f04f 30ff 	mov.w	r0, #4294967295
 8009574:	e7f8      	b.n	8009568 <__mcmp+0x28>
	...

08009578 <__mdiff>:
 8009578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	460d      	mov	r5, r1
 800957e:	4607      	mov	r7, r0
 8009580:	4611      	mov	r1, r2
 8009582:	4628      	mov	r0, r5
 8009584:	4614      	mov	r4, r2
 8009586:	f7ff ffdb 	bl	8009540 <__mcmp>
 800958a:	1e06      	subs	r6, r0, #0
 800958c:	d111      	bne.n	80095b2 <__mdiff+0x3a>
 800958e:	4631      	mov	r1, r6
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff fd11 	bl	8008fb8 <_Balloc>
 8009596:	4602      	mov	r2, r0
 8009598:	b928      	cbnz	r0, 80095a6 <__mdiff+0x2e>
 800959a:	f240 2137 	movw	r1, #567	; 0x237
 800959e:	4b3a      	ldr	r3, [pc, #232]	; (8009688 <__mdiff+0x110>)
 80095a0:	483a      	ldr	r0, [pc, #232]	; (800968c <__mdiff+0x114>)
 80095a2:	f001 fa6d 	bl	800aa80 <__assert_func>
 80095a6:	2301      	movs	r3, #1
 80095a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80095ac:	4610      	mov	r0, r2
 80095ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b2:	bfa4      	itt	ge
 80095b4:	4623      	movge	r3, r4
 80095b6:	462c      	movge	r4, r5
 80095b8:	4638      	mov	r0, r7
 80095ba:	6861      	ldr	r1, [r4, #4]
 80095bc:	bfa6      	itte	ge
 80095be:	461d      	movge	r5, r3
 80095c0:	2600      	movge	r6, #0
 80095c2:	2601      	movlt	r6, #1
 80095c4:	f7ff fcf8 	bl	8008fb8 <_Balloc>
 80095c8:	4602      	mov	r2, r0
 80095ca:	b918      	cbnz	r0, 80095d4 <__mdiff+0x5c>
 80095cc:	f240 2145 	movw	r1, #581	; 0x245
 80095d0:	4b2d      	ldr	r3, [pc, #180]	; (8009688 <__mdiff+0x110>)
 80095d2:	e7e5      	b.n	80095a0 <__mdiff+0x28>
 80095d4:	f102 0814 	add.w	r8, r2, #20
 80095d8:	46c2      	mov	sl, r8
 80095da:	f04f 0c00 	mov.w	ip, #0
 80095de:	6927      	ldr	r7, [r4, #16]
 80095e0:	60c6      	str	r6, [r0, #12]
 80095e2:	692e      	ldr	r6, [r5, #16]
 80095e4:	f104 0014 	add.w	r0, r4, #20
 80095e8:	f105 0914 	add.w	r9, r5, #20
 80095ec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80095f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095f4:	3410      	adds	r4, #16
 80095f6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80095fa:	f859 3b04 	ldr.w	r3, [r9], #4
 80095fe:	fa1f f18b 	uxth.w	r1, fp
 8009602:	4461      	add	r1, ip
 8009604:	fa1f fc83 	uxth.w	ip, r3
 8009608:	0c1b      	lsrs	r3, r3, #16
 800960a:	eba1 010c 	sub.w	r1, r1, ip
 800960e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009612:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009616:	b289      	uxth	r1, r1
 8009618:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800961c:	454e      	cmp	r6, r9
 800961e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009622:	f84a 1b04 	str.w	r1, [sl], #4
 8009626:	d8e6      	bhi.n	80095f6 <__mdiff+0x7e>
 8009628:	1b73      	subs	r3, r6, r5
 800962a:	3b15      	subs	r3, #21
 800962c:	f023 0303 	bic.w	r3, r3, #3
 8009630:	3515      	adds	r5, #21
 8009632:	3304      	adds	r3, #4
 8009634:	42ae      	cmp	r6, r5
 8009636:	bf38      	it	cc
 8009638:	2304      	movcc	r3, #4
 800963a:	4418      	add	r0, r3
 800963c:	4443      	add	r3, r8
 800963e:	461e      	mov	r6, r3
 8009640:	4605      	mov	r5, r0
 8009642:	4575      	cmp	r5, lr
 8009644:	d30e      	bcc.n	8009664 <__mdiff+0xec>
 8009646:	f10e 0103 	add.w	r1, lr, #3
 800964a:	1a09      	subs	r1, r1, r0
 800964c:	f021 0103 	bic.w	r1, r1, #3
 8009650:	3803      	subs	r0, #3
 8009652:	4586      	cmp	lr, r0
 8009654:	bf38      	it	cc
 8009656:	2100      	movcc	r1, #0
 8009658:	440b      	add	r3, r1
 800965a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800965e:	b189      	cbz	r1, 8009684 <__mdiff+0x10c>
 8009660:	6117      	str	r7, [r2, #16]
 8009662:	e7a3      	b.n	80095ac <__mdiff+0x34>
 8009664:	f855 8b04 	ldr.w	r8, [r5], #4
 8009668:	fa1f f188 	uxth.w	r1, r8
 800966c:	4461      	add	r1, ip
 800966e:	140c      	asrs	r4, r1, #16
 8009670:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009674:	b289      	uxth	r1, r1
 8009676:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800967a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800967e:	f846 1b04 	str.w	r1, [r6], #4
 8009682:	e7de      	b.n	8009642 <__mdiff+0xca>
 8009684:	3f01      	subs	r7, #1
 8009686:	e7e8      	b.n	800965a <__mdiff+0xe2>
 8009688:	0800c03f 	.word	0x0800c03f
 800968c:	0800c050 	.word	0x0800c050

08009690 <__ulp>:
 8009690:	4b0e      	ldr	r3, [pc, #56]	; (80096cc <__ulp+0x3c>)
 8009692:	400b      	ands	r3, r1
 8009694:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009698:	2b00      	cmp	r3, #0
 800969a:	dc08      	bgt.n	80096ae <__ulp+0x1e>
 800969c:	425b      	negs	r3, r3
 800969e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80096a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80096a6:	da04      	bge.n	80096b2 <__ulp+0x22>
 80096a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80096ac:	4113      	asrs	r3, r2
 80096ae:	2200      	movs	r2, #0
 80096b0:	e008      	b.n	80096c4 <__ulp+0x34>
 80096b2:	f1a2 0314 	sub.w	r3, r2, #20
 80096b6:	2b1e      	cmp	r3, #30
 80096b8:	bfd6      	itet	le
 80096ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80096be:	2201      	movgt	r2, #1
 80096c0:	40da      	lsrle	r2, r3
 80096c2:	2300      	movs	r3, #0
 80096c4:	4619      	mov	r1, r3
 80096c6:	4610      	mov	r0, r2
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	7ff00000 	.word	0x7ff00000

080096d0 <__b2d>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	6905      	ldr	r5, [r0, #16]
 80096d4:	f100 0714 	add.w	r7, r0, #20
 80096d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80096dc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80096e0:	1f2e      	subs	r6, r5, #4
 80096e2:	4620      	mov	r0, r4
 80096e4:	f7ff fd5a 	bl	800919c <__hi0bits>
 80096e8:	f1c0 0220 	rsb	r2, r0, #32
 80096ec:	280a      	cmp	r0, #10
 80096ee:	4603      	mov	r3, r0
 80096f0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800975c <__b2d+0x8c>
 80096f4:	600a      	str	r2, [r1, #0]
 80096f6:	dc12      	bgt.n	800971e <__b2d+0x4e>
 80096f8:	f1c0 0e0b 	rsb	lr, r0, #11
 80096fc:	fa24 f20e 	lsr.w	r2, r4, lr
 8009700:	42b7      	cmp	r7, r6
 8009702:	ea42 010c 	orr.w	r1, r2, ip
 8009706:	bf2c      	ite	cs
 8009708:	2200      	movcs	r2, #0
 800970a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800970e:	3315      	adds	r3, #21
 8009710:	fa04 f303 	lsl.w	r3, r4, r3
 8009714:	fa22 f20e 	lsr.w	r2, r2, lr
 8009718:	431a      	orrs	r2, r3
 800971a:	4610      	mov	r0, r2
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800971e:	42b7      	cmp	r7, r6
 8009720:	bf2e      	itee	cs
 8009722:	2200      	movcs	r2, #0
 8009724:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009728:	f1a5 0608 	subcc.w	r6, r5, #8
 800972c:	3b0b      	subs	r3, #11
 800972e:	d012      	beq.n	8009756 <__b2d+0x86>
 8009730:	f1c3 0520 	rsb	r5, r3, #32
 8009734:	fa22 f105 	lsr.w	r1, r2, r5
 8009738:	409c      	lsls	r4, r3
 800973a:	430c      	orrs	r4, r1
 800973c:	42be      	cmp	r6, r7
 800973e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8009742:	bf94      	ite	ls
 8009744:	2400      	movls	r4, #0
 8009746:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800974a:	409a      	lsls	r2, r3
 800974c:	40ec      	lsrs	r4, r5
 800974e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009752:	4322      	orrs	r2, r4
 8009754:	e7e1      	b.n	800971a <__b2d+0x4a>
 8009756:	ea44 010c 	orr.w	r1, r4, ip
 800975a:	e7de      	b.n	800971a <__b2d+0x4a>
 800975c:	3ff00000 	.word	0x3ff00000

08009760 <__d2b>:
 8009760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009762:	2101      	movs	r1, #1
 8009764:	4617      	mov	r7, r2
 8009766:	461c      	mov	r4, r3
 8009768:	9e08      	ldr	r6, [sp, #32]
 800976a:	f7ff fc25 	bl	8008fb8 <_Balloc>
 800976e:	4605      	mov	r5, r0
 8009770:	b930      	cbnz	r0, 8009780 <__d2b+0x20>
 8009772:	4602      	mov	r2, r0
 8009774:	f240 310f 	movw	r1, #783	; 0x30f
 8009778:	4b22      	ldr	r3, [pc, #136]	; (8009804 <__d2b+0xa4>)
 800977a:	4823      	ldr	r0, [pc, #140]	; (8009808 <__d2b+0xa8>)
 800977c:	f001 f980 	bl	800aa80 <__assert_func>
 8009780:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009784:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009788:	bb24      	cbnz	r4, 80097d4 <__d2b+0x74>
 800978a:	2f00      	cmp	r7, #0
 800978c:	9301      	str	r3, [sp, #4]
 800978e:	d026      	beq.n	80097de <__d2b+0x7e>
 8009790:	4668      	mov	r0, sp
 8009792:	9700      	str	r7, [sp, #0]
 8009794:	f7ff fd22 	bl	80091dc <__lo0bits>
 8009798:	e9dd 1200 	ldrd	r1, r2, [sp]
 800979c:	b1e8      	cbz	r0, 80097da <__d2b+0x7a>
 800979e:	f1c0 0320 	rsb	r3, r0, #32
 80097a2:	fa02 f303 	lsl.w	r3, r2, r3
 80097a6:	430b      	orrs	r3, r1
 80097a8:	40c2      	lsrs	r2, r0
 80097aa:	616b      	str	r3, [r5, #20]
 80097ac:	9201      	str	r2, [sp, #4]
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bf14      	ite	ne
 80097b4:	2102      	movne	r1, #2
 80097b6:	2101      	moveq	r1, #1
 80097b8:	61ab      	str	r3, [r5, #24]
 80097ba:	6129      	str	r1, [r5, #16]
 80097bc:	b1bc      	cbz	r4, 80097ee <__d2b+0x8e>
 80097be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80097c2:	4404      	add	r4, r0
 80097c4:	6034      	str	r4, [r6, #0]
 80097c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097cc:	6018      	str	r0, [r3, #0]
 80097ce:	4628      	mov	r0, r5
 80097d0:	b003      	add	sp, #12
 80097d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097d8:	e7d7      	b.n	800978a <__d2b+0x2a>
 80097da:	6169      	str	r1, [r5, #20]
 80097dc:	e7e7      	b.n	80097ae <__d2b+0x4e>
 80097de:	a801      	add	r0, sp, #4
 80097e0:	f7ff fcfc 	bl	80091dc <__lo0bits>
 80097e4:	9b01      	ldr	r3, [sp, #4]
 80097e6:	2101      	movs	r1, #1
 80097e8:	616b      	str	r3, [r5, #20]
 80097ea:	3020      	adds	r0, #32
 80097ec:	e7e5      	b.n	80097ba <__d2b+0x5a>
 80097ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097f2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80097f6:	6030      	str	r0, [r6, #0]
 80097f8:	6918      	ldr	r0, [r3, #16]
 80097fa:	f7ff fccf 	bl	800919c <__hi0bits>
 80097fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009802:	e7e2      	b.n	80097ca <__d2b+0x6a>
 8009804:	0800c03f 	.word	0x0800c03f
 8009808:	0800c050 	.word	0x0800c050

0800980c <__ratio>:
 800980c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4688      	mov	r8, r1
 8009812:	4669      	mov	r1, sp
 8009814:	4681      	mov	r9, r0
 8009816:	f7ff ff5b 	bl	80096d0 <__b2d>
 800981a:	460f      	mov	r7, r1
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	4640      	mov	r0, r8
 8009822:	a901      	add	r1, sp, #4
 8009824:	f7ff ff54 	bl	80096d0 <__b2d>
 8009828:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800982c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009830:	468b      	mov	fp, r1
 8009832:	eba3 0c02 	sub.w	ip, r3, r2
 8009836:	e9dd 3200 	ldrd	r3, r2, [sp]
 800983a:	1a9b      	subs	r3, r3, r2
 800983c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009840:	2b00      	cmp	r3, #0
 8009842:	bfd5      	itete	le
 8009844:	460a      	movle	r2, r1
 8009846:	462a      	movgt	r2, r5
 8009848:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800984c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009850:	bfd8      	it	le
 8009852:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009856:	465b      	mov	r3, fp
 8009858:	4602      	mov	r2, r0
 800985a:	4639      	mov	r1, r7
 800985c:	4620      	mov	r0, r4
 800985e:	f7f6 ff65 	bl	800072c <__aeabi_ddiv>
 8009862:	b003      	add	sp, #12
 8009864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009868 <__copybits>:
 8009868:	3901      	subs	r1, #1
 800986a:	b570      	push	{r4, r5, r6, lr}
 800986c:	1149      	asrs	r1, r1, #5
 800986e:	6914      	ldr	r4, [r2, #16]
 8009870:	3101      	adds	r1, #1
 8009872:	f102 0314 	add.w	r3, r2, #20
 8009876:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800987a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800987e:	1f05      	subs	r5, r0, #4
 8009880:	42a3      	cmp	r3, r4
 8009882:	d30c      	bcc.n	800989e <__copybits+0x36>
 8009884:	1aa3      	subs	r3, r4, r2
 8009886:	3b11      	subs	r3, #17
 8009888:	f023 0303 	bic.w	r3, r3, #3
 800988c:	3211      	adds	r2, #17
 800988e:	42a2      	cmp	r2, r4
 8009890:	bf88      	it	hi
 8009892:	2300      	movhi	r3, #0
 8009894:	4418      	add	r0, r3
 8009896:	2300      	movs	r3, #0
 8009898:	4288      	cmp	r0, r1
 800989a:	d305      	bcc.n	80098a8 <__copybits+0x40>
 800989c:	bd70      	pop	{r4, r5, r6, pc}
 800989e:	f853 6b04 	ldr.w	r6, [r3], #4
 80098a2:	f845 6f04 	str.w	r6, [r5, #4]!
 80098a6:	e7eb      	b.n	8009880 <__copybits+0x18>
 80098a8:	f840 3b04 	str.w	r3, [r0], #4
 80098ac:	e7f4      	b.n	8009898 <__copybits+0x30>

080098ae <__any_on>:
 80098ae:	f100 0214 	add.w	r2, r0, #20
 80098b2:	6900      	ldr	r0, [r0, #16]
 80098b4:	114b      	asrs	r3, r1, #5
 80098b6:	4298      	cmp	r0, r3
 80098b8:	b510      	push	{r4, lr}
 80098ba:	db11      	blt.n	80098e0 <__any_on+0x32>
 80098bc:	dd0a      	ble.n	80098d4 <__any_on+0x26>
 80098be:	f011 011f 	ands.w	r1, r1, #31
 80098c2:	d007      	beq.n	80098d4 <__any_on+0x26>
 80098c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098c8:	fa24 f001 	lsr.w	r0, r4, r1
 80098cc:	fa00 f101 	lsl.w	r1, r0, r1
 80098d0:	428c      	cmp	r4, r1
 80098d2:	d10b      	bne.n	80098ec <__any_on+0x3e>
 80098d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098d8:	4293      	cmp	r3, r2
 80098da:	d803      	bhi.n	80098e4 <__any_on+0x36>
 80098dc:	2000      	movs	r0, #0
 80098de:	bd10      	pop	{r4, pc}
 80098e0:	4603      	mov	r3, r0
 80098e2:	e7f7      	b.n	80098d4 <__any_on+0x26>
 80098e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098e8:	2900      	cmp	r1, #0
 80098ea:	d0f5      	beq.n	80098d8 <__any_on+0x2a>
 80098ec:	2001      	movs	r0, #1
 80098ee:	e7f6      	b.n	80098de <__any_on+0x30>

080098f0 <sulp>:
 80098f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f4:	460f      	mov	r7, r1
 80098f6:	4690      	mov	r8, r2
 80098f8:	f7ff feca 	bl	8009690 <__ulp>
 80098fc:	4604      	mov	r4, r0
 80098fe:	460d      	mov	r5, r1
 8009900:	f1b8 0f00 	cmp.w	r8, #0
 8009904:	d011      	beq.n	800992a <sulp+0x3a>
 8009906:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800990a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800990e:	2b00      	cmp	r3, #0
 8009910:	dd0b      	ble.n	800992a <sulp+0x3a>
 8009912:	2400      	movs	r4, #0
 8009914:	051b      	lsls	r3, r3, #20
 8009916:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800991a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800991e:	4622      	mov	r2, r4
 8009920:	462b      	mov	r3, r5
 8009922:	f7f6 fdd9 	bl	80004d8 <__aeabi_dmul>
 8009926:	4604      	mov	r4, r0
 8009928:	460d      	mov	r5, r1
 800992a:	4620      	mov	r0, r4
 800992c:	4629      	mov	r1, r5
 800992e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009932:	0000      	movs	r0, r0
 8009934:	0000      	movs	r0, r0
	...

08009938 <_strtod_l>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	b09f      	sub	sp, #124	; 0x7c
 800993e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009940:	2200      	movs	r2, #0
 8009942:	4604      	mov	r4, r0
 8009944:	921a      	str	r2, [sp, #104]	; 0x68
 8009946:	460d      	mov	r5, r1
 8009948:	f04f 0800 	mov.w	r8, #0
 800994c:	f04f 0900 	mov.w	r9, #0
 8009950:	460a      	mov	r2, r1
 8009952:	9219      	str	r2, [sp, #100]	; 0x64
 8009954:	7811      	ldrb	r1, [r2, #0]
 8009956:	292b      	cmp	r1, #43	; 0x2b
 8009958:	d04a      	beq.n	80099f0 <_strtod_l+0xb8>
 800995a:	d838      	bhi.n	80099ce <_strtod_l+0x96>
 800995c:	290d      	cmp	r1, #13
 800995e:	d832      	bhi.n	80099c6 <_strtod_l+0x8e>
 8009960:	2908      	cmp	r1, #8
 8009962:	d832      	bhi.n	80099ca <_strtod_l+0x92>
 8009964:	2900      	cmp	r1, #0
 8009966:	d03b      	beq.n	80099e0 <_strtod_l+0xa8>
 8009968:	2200      	movs	r2, #0
 800996a:	920e      	str	r2, [sp, #56]	; 0x38
 800996c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800996e:	7832      	ldrb	r2, [r6, #0]
 8009970:	2a30      	cmp	r2, #48	; 0x30
 8009972:	f040 80b2 	bne.w	8009ada <_strtod_l+0x1a2>
 8009976:	7872      	ldrb	r2, [r6, #1]
 8009978:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800997c:	2a58      	cmp	r2, #88	; 0x58
 800997e:	d16e      	bne.n	8009a5e <_strtod_l+0x126>
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009984:	4620      	mov	r0, r4
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	ab1a      	add	r3, sp, #104	; 0x68
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	4a8c      	ldr	r2, [pc, #560]	; (8009bc0 <_strtod_l+0x288>)
 800998e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009990:	a919      	add	r1, sp, #100	; 0x64
 8009992:	f001 f90f 	bl	800abb4 <__gethex>
 8009996:	f010 070f 	ands.w	r7, r0, #15
 800999a:	4605      	mov	r5, r0
 800999c:	d005      	beq.n	80099aa <_strtod_l+0x72>
 800999e:	2f06      	cmp	r7, #6
 80099a0:	d128      	bne.n	80099f4 <_strtod_l+0xbc>
 80099a2:	2300      	movs	r3, #0
 80099a4:	3601      	adds	r6, #1
 80099a6:	9619      	str	r6, [sp, #100]	; 0x64
 80099a8:	930e      	str	r3, [sp, #56]	; 0x38
 80099aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f040 85a0 	bne.w	800a4f2 <_strtod_l+0xbba>
 80099b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099b4:	b1cb      	cbz	r3, 80099ea <_strtod_l+0xb2>
 80099b6:	4642      	mov	r2, r8
 80099b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80099bc:	4610      	mov	r0, r2
 80099be:	4619      	mov	r1, r3
 80099c0:	b01f      	add	sp, #124	; 0x7c
 80099c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c6:	2920      	cmp	r1, #32
 80099c8:	d1ce      	bne.n	8009968 <_strtod_l+0x30>
 80099ca:	3201      	adds	r2, #1
 80099cc:	e7c1      	b.n	8009952 <_strtod_l+0x1a>
 80099ce:	292d      	cmp	r1, #45	; 0x2d
 80099d0:	d1ca      	bne.n	8009968 <_strtod_l+0x30>
 80099d2:	2101      	movs	r1, #1
 80099d4:	910e      	str	r1, [sp, #56]	; 0x38
 80099d6:	1c51      	adds	r1, r2, #1
 80099d8:	9119      	str	r1, [sp, #100]	; 0x64
 80099da:	7852      	ldrb	r2, [r2, #1]
 80099dc:	2a00      	cmp	r2, #0
 80099de:	d1c5      	bne.n	800996c <_strtod_l+0x34>
 80099e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099e2:	9519      	str	r5, [sp, #100]	; 0x64
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f040 8582 	bne.w	800a4ee <_strtod_l+0xbb6>
 80099ea:	4642      	mov	r2, r8
 80099ec:	464b      	mov	r3, r9
 80099ee:	e7e5      	b.n	80099bc <_strtod_l+0x84>
 80099f0:	2100      	movs	r1, #0
 80099f2:	e7ef      	b.n	80099d4 <_strtod_l+0x9c>
 80099f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099f6:	b13a      	cbz	r2, 8009a08 <_strtod_l+0xd0>
 80099f8:	2135      	movs	r1, #53	; 0x35
 80099fa:	a81c      	add	r0, sp, #112	; 0x70
 80099fc:	f7ff ff34 	bl	8009868 <__copybits>
 8009a00:	4620      	mov	r0, r4
 8009a02:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a04:	f7ff fb18 	bl	8009038 <_Bfree>
 8009a08:	3f01      	subs	r7, #1
 8009a0a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a0c:	2f04      	cmp	r7, #4
 8009a0e:	d806      	bhi.n	8009a1e <_strtod_l+0xe6>
 8009a10:	e8df f007 	tbb	[pc, r7]
 8009a14:	201d0314 	.word	0x201d0314
 8009a18:	14          	.byte	0x14
 8009a19:	00          	.byte	0x00
 8009a1a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009a1e:	05e9      	lsls	r1, r5, #23
 8009a20:	bf48      	it	mi
 8009a22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a2a:	0d1b      	lsrs	r3, r3, #20
 8009a2c:	051b      	lsls	r3, r3, #20
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1bb      	bne.n	80099aa <_strtod_l+0x72>
 8009a32:	f7fe fb07 	bl	8008044 <__errno>
 8009a36:	2322      	movs	r3, #34	; 0x22
 8009a38:	6003      	str	r3, [r0, #0]
 8009a3a:	e7b6      	b.n	80099aa <_strtod_l+0x72>
 8009a3c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a40:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009a44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009a4c:	e7e7      	b.n	8009a1e <_strtod_l+0xe6>
 8009a4e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009bc4 <_strtod_l+0x28c>
 8009a52:	e7e4      	b.n	8009a1e <_strtod_l+0xe6>
 8009a54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009a58:	f04f 38ff 	mov.w	r8, #4294967295
 8009a5c:	e7df      	b.n	8009a1e <_strtod_l+0xe6>
 8009a5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	9219      	str	r2, [sp, #100]	; 0x64
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	2b30      	cmp	r3, #48	; 0x30
 8009a68:	d0f9      	beq.n	8009a5e <_strtod_l+0x126>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d09d      	beq.n	80099aa <_strtod_l+0x72>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	f04f 0a00 	mov.w	sl, #0
 8009a74:	220a      	movs	r2, #10
 8009a76:	46d3      	mov	fp, sl
 8009a78:	9305      	str	r3, [sp, #20]
 8009a7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a7c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a82:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009a84:	7806      	ldrb	r6, [r0, #0]
 8009a86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009a8a:	b2d9      	uxtb	r1, r3
 8009a8c:	2909      	cmp	r1, #9
 8009a8e:	d926      	bls.n	8009ade <_strtod_l+0x1a6>
 8009a90:	2201      	movs	r2, #1
 8009a92:	494d      	ldr	r1, [pc, #308]	; (8009bc8 <_strtod_l+0x290>)
 8009a94:	f000 ffcc 	bl	800aa30 <strncmp>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d030      	beq.n	8009afe <_strtod_l+0x1c6>
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	4632      	mov	r2, r6
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	465e      	mov	r6, fp
 8009aa4:	9008      	str	r0, [sp, #32]
 8009aa6:	2a65      	cmp	r2, #101	; 0x65
 8009aa8:	d001      	beq.n	8009aae <_strtod_l+0x176>
 8009aaa:	2a45      	cmp	r2, #69	; 0x45
 8009aac:	d113      	bne.n	8009ad6 <_strtod_l+0x19e>
 8009aae:	b91e      	cbnz	r6, 8009ab8 <_strtod_l+0x180>
 8009ab0:	9a05      	ldr	r2, [sp, #20]
 8009ab2:	4302      	orrs	r2, r0
 8009ab4:	d094      	beq.n	80099e0 <_strtod_l+0xa8>
 8009ab6:	2600      	movs	r6, #0
 8009ab8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009aba:	1c6a      	adds	r2, r5, #1
 8009abc:	9219      	str	r2, [sp, #100]	; 0x64
 8009abe:	786a      	ldrb	r2, [r5, #1]
 8009ac0:	2a2b      	cmp	r2, #43	; 0x2b
 8009ac2:	d074      	beq.n	8009bae <_strtod_l+0x276>
 8009ac4:	2a2d      	cmp	r2, #45	; 0x2d
 8009ac6:	d078      	beq.n	8009bba <_strtod_l+0x282>
 8009ac8:	f04f 0c00 	mov.w	ip, #0
 8009acc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ad0:	2909      	cmp	r1, #9
 8009ad2:	d97f      	bls.n	8009bd4 <_strtod_l+0x29c>
 8009ad4:	9519      	str	r5, [sp, #100]	; 0x64
 8009ad6:	2700      	movs	r7, #0
 8009ad8:	e09e      	b.n	8009c18 <_strtod_l+0x2e0>
 8009ada:	2300      	movs	r3, #0
 8009adc:	e7c8      	b.n	8009a70 <_strtod_l+0x138>
 8009ade:	f1bb 0f08 	cmp.w	fp, #8
 8009ae2:	bfd8      	it	le
 8009ae4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8009ae6:	f100 0001 	add.w	r0, r0, #1
 8009aea:	bfd6      	itet	le
 8009aec:	fb02 3301 	mlale	r3, r2, r1, r3
 8009af0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009af4:	930a      	strle	r3, [sp, #40]	; 0x28
 8009af6:	f10b 0b01 	add.w	fp, fp, #1
 8009afa:	9019      	str	r0, [sp, #100]	; 0x64
 8009afc:	e7c1      	b.n	8009a82 <_strtod_l+0x14a>
 8009afe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	9219      	str	r2, [sp, #100]	; 0x64
 8009b04:	785a      	ldrb	r2, [r3, #1]
 8009b06:	f1bb 0f00 	cmp.w	fp, #0
 8009b0a:	d037      	beq.n	8009b7c <_strtod_l+0x244>
 8009b0c:	465e      	mov	r6, fp
 8009b0e:	9008      	str	r0, [sp, #32]
 8009b10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009b14:	2b09      	cmp	r3, #9
 8009b16:	d912      	bls.n	8009b3e <_strtod_l+0x206>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e7c4      	b.n	8009aa6 <_strtod_l+0x16e>
 8009b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b1e:	3001      	adds	r0, #1
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	9219      	str	r2, [sp, #100]	; 0x64
 8009b24:	785a      	ldrb	r2, [r3, #1]
 8009b26:	2a30      	cmp	r2, #48	; 0x30
 8009b28:	d0f8      	beq.n	8009b1c <_strtod_l+0x1e4>
 8009b2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009b2e:	2b08      	cmp	r3, #8
 8009b30:	f200 84e4 	bhi.w	800a4fc <_strtod_l+0xbc4>
 8009b34:	9008      	str	r0, [sp, #32]
 8009b36:	2000      	movs	r0, #0
 8009b38:	4606      	mov	r6, r0
 8009b3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b3e:	3a30      	subs	r2, #48	; 0x30
 8009b40:	f100 0301 	add.w	r3, r0, #1
 8009b44:	d014      	beq.n	8009b70 <_strtod_l+0x238>
 8009b46:	9908      	ldr	r1, [sp, #32]
 8009b48:	eb00 0c06 	add.w	ip, r0, r6
 8009b4c:	4419      	add	r1, r3
 8009b4e:	9108      	str	r1, [sp, #32]
 8009b50:	4633      	mov	r3, r6
 8009b52:	210a      	movs	r1, #10
 8009b54:	4563      	cmp	r3, ip
 8009b56:	d113      	bne.n	8009b80 <_strtod_l+0x248>
 8009b58:	1833      	adds	r3, r6, r0
 8009b5a:	2b08      	cmp	r3, #8
 8009b5c:	f106 0601 	add.w	r6, r6, #1
 8009b60:	4406      	add	r6, r0
 8009b62:	dc1a      	bgt.n	8009b9a <_strtod_l+0x262>
 8009b64:	230a      	movs	r3, #10
 8009b66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b68:	fb03 2301 	mla	r3, r3, r1, r2
 8009b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009b72:	4618      	mov	r0, r3
 8009b74:	1c51      	adds	r1, r2, #1
 8009b76:	9119      	str	r1, [sp, #100]	; 0x64
 8009b78:	7852      	ldrb	r2, [r2, #1]
 8009b7a:	e7c9      	b.n	8009b10 <_strtod_l+0x1d8>
 8009b7c:	4658      	mov	r0, fp
 8009b7e:	e7d2      	b.n	8009b26 <_strtod_l+0x1ee>
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	f103 0301 	add.w	r3, r3, #1
 8009b86:	dc03      	bgt.n	8009b90 <_strtod_l+0x258>
 8009b88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009b8a:	434f      	muls	r7, r1
 8009b8c:	970a      	str	r7, [sp, #40]	; 0x28
 8009b8e:	e7e1      	b.n	8009b54 <_strtod_l+0x21c>
 8009b90:	2b10      	cmp	r3, #16
 8009b92:	bfd8      	it	le
 8009b94:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009b98:	e7dc      	b.n	8009b54 <_strtod_l+0x21c>
 8009b9a:	2e10      	cmp	r6, #16
 8009b9c:	bfdc      	itt	le
 8009b9e:	230a      	movle	r3, #10
 8009ba0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009ba4:	e7e3      	b.n	8009b6e <_strtod_l+0x236>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9308      	str	r3, [sp, #32]
 8009baa:	2301      	movs	r3, #1
 8009bac:	e780      	b.n	8009ab0 <_strtod_l+0x178>
 8009bae:	f04f 0c00 	mov.w	ip, #0
 8009bb2:	1caa      	adds	r2, r5, #2
 8009bb4:	9219      	str	r2, [sp, #100]	; 0x64
 8009bb6:	78aa      	ldrb	r2, [r5, #2]
 8009bb8:	e788      	b.n	8009acc <_strtod_l+0x194>
 8009bba:	f04f 0c01 	mov.w	ip, #1
 8009bbe:	e7f8      	b.n	8009bb2 <_strtod_l+0x27a>
 8009bc0:	0800c1b0 	.word	0x0800c1b0
 8009bc4:	7ff00000 	.word	0x7ff00000
 8009bc8:	0800c1ac 	.word	0x0800c1ac
 8009bcc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bce:	1c51      	adds	r1, r2, #1
 8009bd0:	9119      	str	r1, [sp, #100]	; 0x64
 8009bd2:	7852      	ldrb	r2, [r2, #1]
 8009bd4:	2a30      	cmp	r2, #48	; 0x30
 8009bd6:	d0f9      	beq.n	8009bcc <_strtod_l+0x294>
 8009bd8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009bdc:	2908      	cmp	r1, #8
 8009bde:	f63f af7a 	bhi.w	8009ad6 <_strtod_l+0x19e>
 8009be2:	3a30      	subs	r2, #48	; 0x30
 8009be4:	9209      	str	r2, [sp, #36]	; 0x24
 8009be6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009be8:	920c      	str	r2, [sp, #48]	; 0x30
 8009bea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bec:	1c57      	adds	r7, r2, #1
 8009bee:	9719      	str	r7, [sp, #100]	; 0x64
 8009bf0:	7852      	ldrb	r2, [r2, #1]
 8009bf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009bf6:	f1be 0f09 	cmp.w	lr, #9
 8009bfa:	d938      	bls.n	8009c6e <_strtod_l+0x336>
 8009bfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bfe:	1a7f      	subs	r7, r7, r1
 8009c00:	2f08      	cmp	r7, #8
 8009c02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009c06:	dc03      	bgt.n	8009c10 <_strtod_l+0x2d8>
 8009c08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c0a:	428f      	cmp	r7, r1
 8009c0c:	bfa8      	it	ge
 8009c0e:	460f      	movge	r7, r1
 8009c10:	f1bc 0f00 	cmp.w	ip, #0
 8009c14:	d000      	beq.n	8009c18 <_strtod_l+0x2e0>
 8009c16:	427f      	negs	r7, r7
 8009c18:	2e00      	cmp	r6, #0
 8009c1a:	d14f      	bne.n	8009cbc <_strtod_l+0x384>
 8009c1c:	9905      	ldr	r1, [sp, #20]
 8009c1e:	4301      	orrs	r1, r0
 8009c20:	f47f aec3 	bne.w	80099aa <_strtod_l+0x72>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f47f aedb 	bne.w	80099e0 <_strtod_l+0xa8>
 8009c2a:	2a69      	cmp	r2, #105	; 0x69
 8009c2c:	d029      	beq.n	8009c82 <_strtod_l+0x34a>
 8009c2e:	dc26      	bgt.n	8009c7e <_strtod_l+0x346>
 8009c30:	2a49      	cmp	r2, #73	; 0x49
 8009c32:	d026      	beq.n	8009c82 <_strtod_l+0x34a>
 8009c34:	2a4e      	cmp	r2, #78	; 0x4e
 8009c36:	f47f aed3 	bne.w	80099e0 <_strtod_l+0xa8>
 8009c3a:	499a      	ldr	r1, [pc, #616]	; (8009ea4 <_strtod_l+0x56c>)
 8009c3c:	a819      	add	r0, sp, #100	; 0x64
 8009c3e:	f001 f9fb 	bl	800b038 <__match>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	f43f aecc 	beq.w	80099e0 <_strtod_l+0xa8>
 8009c48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b28      	cmp	r3, #40	; 0x28
 8009c4e:	d12f      	bne.n	8009cb0 <_strtod_l+0x378>
 8009c50:	4995      	ldr	r1, [pc, #596]	; (8009ea8 <_strtod_l+0x570>)
 8009c52:	aa1c      	add	r2, sp, #112	; 0x70
 8009c54:	a819      	add	r0, sp, #100	; 0x64
 8009c56:	f001 fa03 	bl	800b060 <__hexnan>
 8009c5a:	2805      	cmp	r0, #5
 8009c5c:	d128      	bne.n	8009cb0 <_strtod_l+0x378>
 8009c5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c60:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009c64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009c68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009c6c:	e69d      	b.n	80099aa <_strtod_l+0x72>
 8009c6e:	210a      	movs	r1, #10
 8009c70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009c72:	fb01 2107 	mla	r1, r1, r7, r2
 8009c76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c7c:	e7b5      	b.n	8009bea <_strtod_l+0x2b2>
 8009c7e:	2a6e      	cmp	r2, #110	; 0x6e
 8009c80:	e7d9      	b.n	8009c36 <_strtod_l+0x2fe>
 8009c82:	498a      	ldr	r1, [pc, #552]	; (8009eac <_strtod_l+0x574>)
 8009c84:	a819      	add	r0, sp, #100	; 0x64
 8009c86:	f001 f9d7 	bl	800b038 <__match>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	f43f aea8 	beq.w	80099e0 <_strtod_l+0xa8>
 8009c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c92:	4987      	ldr	r1, [pc, #540]	; (8009eb0 <_strtod_l+0x578>)
 8009c94:	3b01      	subs	r3, #1
 8009c96:	a819      	add	r0, sp, #100	; 0x64
 8009c98:	9319      	str	r3, [sp, #100]	; 0x64
 8009c9a:	f001 f9cd 	bl	800b038 <__match>
 8009c9e:	b910      	cbnz	r0, 8009ca6 <_strtod_l+0x36e>
 8009ca0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	9319      	str	r3, [sp, #100]	; 0x64
 8009ca6:	f04f 0800 	mov.w	r8, #0
 8009caa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8009eb4 <_strtod_l+0x57c>
 8009cae:	e67c      	b.n	80099aa <_strtod_l+0x72>
 8009cb0:	4881      	ldr	r0, [pc, #516]	; (8009eb8 <_strtod_l+0x580>)
 8009cb2:	f000 fedf 	bl	800aa74 <nan>
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	4689      	mov	r9, r1
 8009cba:	e676      	b.n	80099aa <_strtod_l+0x72>
 8009cbc:	9b08      	ldr	r3, [sp, #32]
 8009cbe:	f1bb 0f00 	cmp.w	fp, #0
 8009cc2:	bf08      	it	eq
 8009cc4:	46b3      	moveq	fp, r6
 8009cc6:	1afb      	subs	r3, r7, r3
 8009cc8:	2e10      	cmp	r6, #16
 8009cca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009ccc:	4635      	mov	r5, r6
 8009cce:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd0:	bfa8      	it	ge
 8009cd2:	2510      	movge	r5, #16
 8009cd4:	f7f6 fb86 	bl	80003e4 <__aeabi_ui2d>
 8009cd8:	2e09      	cmp	r6, #9
 8009cda:	4680      	mov	r8, r0
 8009cdc:	4689      	mov	r9, r1
 8009cde:	dd13      	ble.n	8009d08 <_strtod_l+0x3d0>
 8009ce0:	4b76      	ldr	r3, [pc, #472]	; (8009ebc <_strtod_l+0x584>)
 8009ce2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009ce6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009cea:	f7f6 fbf5 	bl	80004d8 <__aeabi_dmul>
 8009cee:	4680      	mov	r8, r0
 8009cf0:	4650      	mov	r0, sl
 8009cf2:	4689      	mov	r9, r1
 8009cf4:	f7f6 fb76 	bl	80003e4 <__aeabi_ui2d>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4649      	mov	r1, r9
 8009d00:	f7f6 fa34 	bl	800016c <__adddf3>
 8009d04:	4680      	mov	r8, r0
 8009d06:	4689      	mov	r9, r1
 8009d08:	2e0f      	cmp	r6, #15
 8009d0a:	dc36      	bgt.n	8009d7a <_strtod_l+0x442>
 8009d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f43f ae4b 	beq.w	80099aa <_strtod_l+0x72>
 8009d14:	dd22      	ble.n	8009d5c <_strtod_l+0x424>
 8009d16:	2b16      	cmp	r3, #22
 8009d18:	dc09      	bgt.n	8009d2e <_strtod_l+0x3f6>
 8009d1a:	4968      	ldr	r1, [pc, #416]	; (8009ebc <_strtod_l+0x584>)
 8009d1c:	4642      	mov	r2, r8
 8009d1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d22:	464b      	mov	r3, r9
 8009d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d28:	f7f6 fbd6 	bl	80004d8 <__aeabi_dmul>
 8009d2c:	e7c3      	b.n	8009cb6 <_strtod_l+0x37e>
 8009d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d30:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009d34:	4293      	cmp	r3, r2
 8009d36:	db20      	blt.n	8009d7a <_strtod_l+0x442>
 8009d38:	4c60      	ldr	r4, [pc, #384]	; (8009ebc <_strtod_l+0x584>)
 8009d3a:	f1c6 060f 	rsb	r6, r6, #15
 8009d3e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009d42:	4642      	mov	r2, r8
 8009d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d48:	464b      	mov	r3, r9
 8009d4a:	f7f6 fbc5 	bl	80004d8 <__aeabi_dmul>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d50:	1b9e      	subs	r6, r3, r6
 8009d52:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009d56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d5a:	e7e5      	b.n	8009d28 <_strtod_l+0x3f0>
 8009d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d5e:	3316      	adds	r3, #22
 8009d60:	db0b      	blt.n	8009d7a <_strtod_l+0x442>
 8009d62:	9b08      	ldr	r3, [sp, #32]
 8009d64:	4640      	mov	r0, r8
 8009d66:	1bdf      	subs	r7, r3, r7
 8009d68:	4b54      	ldr	r3, [pc, #336]	; (8009ebc <_strtod_l+0x584>)
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d74:	f7f6 fcda 	bl	800072c <__aeabi_ddiv>
 8009d78:	e79d      	b.n	8009cb6 <_strtod_l+0x37e>
 8009d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7c:	1b75      	subs	r5, r6, r5
 8009d7e:	441d      	add	r5, r3
 8009d80:	2d00      	cmp	r5, #0
 8009d82:	dd70      	ble.n	8009e66 <_strtod_l+0x52e>
 8009d84:	f015 030f 	ands.w	r3, r5, #15
 8009d88:	d00a      	beq.n	8009da0 <_strtod_l+0x468>
 8009d8a:	494c      	ldr	r1, [pc, #304]	; (8009ebc <_strtod_l+0x584>)
 8009d8c:	4642      	mov	r2, r8
 8009d8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d96:	464b      	mov	r3, r9
 8009d98:	f7f6 fb9e 	bl	80004d8 <__aeabi_dmul>
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4689      	mov	r9, r1
 8009da0:	f035 050f 	bics.w	r5, r5, #15
 8009da4:	d04d      	beq.n	8009e42 <_strtod_l+0x50a>
 8009da6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009daa:	dd22      	ble.n	8009df2 <_strtod_l+0x4ba>
 8009dac:	2600      	movs	r6, #0
 8009dae:	46b3      	mov	fp, r6
 8009db0:	960b      	str	r6, [sp, #44]	; 0x2c
 8009db2:	9608      	str	r6, [sp, #32]
 8009db4:	2322      	movs	r3, #34	; 0x22
 8009db6:	f04f 0800 	mov.w	r8, #0
 8009dba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009eb4 <_strtod_l+0x57c>
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f43f adf1 	beq.w	80099aa <_strtod_l+0x72>
 8009dc8:	4620      	mov	r0, r4
 8009dca:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009dcc:	f7ff f934 	bl	8009038 <_Bfree>
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	9908      	ldr	r1, [sp, #32]
 8009dd4:	f7ff f930 	bl	8009038 <_Bfree>
 8009dd8:	4659      	mov	r1, fp
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f7ff f92c 	bl	8009038 <_Bfree>
 8009de0:	4620      	mov	r0, r4
 8009de2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009de4:	f7ff f928 	bl	8009038 <_Bfree>
 8009de8:	4631      	mov	r1, r6
 8009dea:	4620      	mov	r0, r4
 8009dec:	f7ff f924 	bl	8009038 <_Bfree>
 8009df0:	e5db      	b.n	80099aa <_strtod_l+0x72>
 8009df2:	4b33      	ldr	r3, [pc, #204]	; (8009ec0 <_strtod_l+0x588>)
 8009df4:	4640      	mov	r0, r8
 8009df6:	9305      	str	r3, [sp, #20]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	469a      	mov	sl, r3
 8009dfe:	112d      	asrs	r5, r5, #4
 8009e00:	2d01      	cmp	r5, #1
 8009e02:	dc21      	bgt.n	8009e48 <_strtod_l+0x510>
 8009e04:	b10b      	cbz	r3, 8009e0a <_strtod_l+0x4d2>
 8009e06:	4680      	mov	r8, r0
 8009e08:	4689      	mov	r9, r1
 8009e0a:	492d      	ldr	r1, [pc, #180]	; (8009ec0 <_strtod_l+0x588>)
 8009e0c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009e10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009e14:	4642      	mov	r2, r8
 8009e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e1a:	464b      	mov	r3, r9
 8009e1c:	f7f6 fb5c 	bl	80004d8 <__aeabi_dmul>
 8009e20:	4b24      	ldr	r3, [pc, #144]	; (8009eb4 <_strtod_l+0x57c>)
 8009e22:	460a      	mov	r2, r1
 8009e24:	400b      	ands	r3, r1
 8009e26:	4927      	ldr	r1, [pc, #156]	; (8009ec4 <_strtod_l+0x58c>)
 8009e28:	4680      	mov	r8, r0
 8009e2a:	428b      	cmp	r3, r1
 8009e2c:	d8be      	bhi.n	8009dac <_strtod_l+0x474>
 8009e2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009e32:	428b      	cmp	r3, r1
 8009e34:	bf86      	itte	hi
 8009e36:	f04f 38ff 	movhi.w	r8, #4294967295
 8009e3a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009ec8 <_strtod_l+0x590>
 8009e3e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009e42:	2300      	movs	r3, #0
 8009e44:	9305      	str	r3, [sp, #20]
 8009e46:	e07b      	b.n	8009f40 <_strtod_l+0x608>
 8009e48:	07ea      	lsls	r2, r5, #31
 8009e4a:	d505      	bpl.n	8009e58 <_strtod_l+0x520>
 8009e4c:	9b05      	ldr	r3, [sp, #20]
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	f7f6 fb41 	bl	80004d8 <__aeabi_dmul>
 8009e56:	2301      	movs	r3, #1
 8009e58:	9a05      	ldr	r2, [sp, #20]
 8009e5a:	f10a 0a01 	add.w	sl, sl, #1
 8009e5e:	3208      	adds	r2, #8
 8009e60:	106d      	asrs	r5, r5, #1
 8009e62:	9205      	str	r2, [sp, #20]
 8009e64:	e7cc      	b.n	8009e00 <_strtod_l+0x4c8>
 8009e66:	d0ec      	beq.n	8009e42 <_strtod_l+0x50a>
 8009e68:	426d      	negs	r5, r5
 8009e6a:	f015 020f 	ands.w	r2, r5, #15
 8009e6e:	d00a      	beq.n	8009e86 <_strtod_l+0x54e>
 8009e70:	4b12      	ldr	r3, [pc, #72]	; (8009ebc <_strtod_l+0x584>)
 8009e72:	4640      	mov	r0, r8
 8009e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e78:	4649      	mov	r1, r9
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	f7f6 fc55 	bl	800072c <__aeabi_ddiv>
 8009e82:	4680      	mov	r8, r0
 8009e84:	4689      	mov	r9, r1
 8009e86:	112d      	asrs	r5, r5, #4
 8009e88:	d0db      	beq.n	8009e42 <_strtod_l+0x50a>
 8009e8a:	2d1f      	cmp	r5, #31
 8009e8c:	dd1e      	ble.n	8009ecc <_strtod_l+0x594>
 8009e8e:	2600      	movs	r6, #0
 8009e90:	46b3      	mov	fp, r6
 8009e92:	960b      	str	r6, [sp, #44]	; 0x2c
 8009e94:	9608      	str	r6, [sp, #32]
 8009e96:	2322      	movs	r3, #34	; 0x22
 8009e98:	f04f 0800 	mov.w	r8, #0
 8009e9c:	f04f 0900 	mov.w	r9, #0
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	e78d      	b.n	8009dc0 <_strtod_l+0x488>
 8009ea4:	0800bf97 	.word	0x0800bf97
 8009ea8:	0800c1c4 	.word	0x0800c1c4
 8009eac:	0800bf8f 	.word	0x0800bf8f
 8009eb0:	0800bfc6 	.word	0x0800bfc6
 8009eb4:	7ff00000 	.word	0x7ff00000
 8009eb8:	0800c355 	.word	0x0800c355
 8009ebc:	0800c0d8 	.word	0x0800c0d8
 8009ec0:	0800c0b0 	.word	0x0800c0b0
 8009ec4:	7ca00000 	.word	0x7ca00000
 8009ec8:	7fefffff 	.word	0x7fefffff
 8009ecc:	f015 0310 	ands.w	r3, r5, #16
 8009ed0:	bf18      	it	ne
 8009ed2:	236a      	movne	r3, #106	; 0x6a
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	9305      	str	r3, [sp, #20]
 8009ed8:	4649      	mov	r1, r9
 8009eda:	2300      	movs	r3, #0
 8009edc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a1a8 <_strtod_l+0x870>
 8009ee0:	07ea      	lsls	r2, r5, #31
 8009ee2:	d504      	bpl.n	8009eee <_strtod_l+0x5b6>
 8009ee4:	e9da 2300 	ldrd	r2, r3, [sl]
 8009ee8:	f7f6 faf6 	bl	80004d8 <__aeabi_dmul>
 8009eec:	2301      	movs	r3, #1
 8009eee:	106d      	asrs	r5, r5, #1
 8009ef0:	f10a 0a08 	add.w	sl, sl, #8
 8009ef4:	d1f4      	bne.n	8009ee0 <_strtod_l+0x5a8>
 8009ef6:	b10b      	cbz	r3, 8009efc <_strtod_l+0x5c4>
 8009ef8:	4680      	mov	r8, r0
 8009efa:	4689      	mov	r9, r1
 8009efc:	9b05      	ldr	r3, [sp, #20]
 8009efe:	b1bb      	cbz	r3, 8009f30 <_strtod_l+0x5f8>
 8009f00:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009f04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	dd10      	ble.n	8009f30 <_strtod_l+0x5f8>
 8009f0e:	2b1f      	cmp	r3, #31
 8009f10:	f340 8128 	ble.w	800a164 <_strtod_l+0x82c>
 8009f14:	2b34      	cmp	r3, #52	; 0x34
 8009f16:	bfd8      	it	le
 8009f18:	f04f 33ff 	movle.w	r3, #4294967295
 8009f1c:	f04f 0800 	mov.w	r8, #0
 8009f20:	bfcf      	iteee	gt
 8009f22:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009f26:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009f2a:	4093      	lslle	r3, r2
 8009f2c:	ea03 0901 	andle.w	r9, r3, r1
 8009f30:	2200      	movs	r2, #0
 8009f32:	2300      	movs	r3, #0
 8009f34:	4640      	mov	r0, r8
 8009f36:	4649      	mov	r1, r9
 8009f38:	f7f6 fd36 	bl	80009a8 <__aeabi_dcmpeq>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d1a6      	bne.n	8009e8e <_strtod_l+0x556>
 8009f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f42:	465a      	mov	r2, fp
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	4620      	mov	r0, r4
 8009f48:	4633      	mov	r3, r6
 8009f4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f4c:	f7ff f8dc 	bl	8009108 <__s2b>
 8009f50:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f52:	2800      	cmp	r0, #0
 8009f54:	f43f af2a 	beq.w	8009dac <_strtod_l+0x474>
 8009f58:	2600      	movs	r6, #0
 8009f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f5c:	9b08      	ldr	r3, [sp, #32]
 8009f5e:	2a00      	cmp	r2, #0
 8009f60:	eba3 0307 	sub.w	r3, r3, r7
 8009f64:	bfa8      	it	ge
 8009f66:	2300      	movge	r3, #0
 8009f68:	46b3      	mov	fp, r6
 8009f6a:	9312      	str	r3, [sp, #72]	; 0x48
 8009f6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f70:	9316      	str	r3, [sp, #88]	; 0x58
 8009f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f74:	4620      	mov	r0, r4
 8009f76:	6859      	ldr	r1, [r3, #4]
 8009f78:	f7ff f81e 	bl	8008fb8 <_Balloc>
 8009f7c:	9008      	str	r0, [sp, #32]
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f43f af18 	beq.w	8009db4 <_strtod_l+0x47c>
 8009f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f86:	300c      	adds	r0, #12
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	f103 010c 	add.w	r1, r3, #12
 8009f8e:	3202      	adds	r2, #2
 8009f90:	0092      	lsls	r2, r2, #2
 8009f92:	f7fe f892 	bl	80080ba <memcpy>
 8009f96:	ab1c      	add	r3, sp, #112	; 0x70
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	ab1b      	add	r3, sp, #108	; 0x6c
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	4642      	mov	r2, r8
 8009fa0:	464b      	mov	r3, r9
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009fa8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8009fac:	f7ff fbd8 	bl	8009760 <__d2b>
 8009fb0:	901a      	str	r0, [sp, #104]	; 0x68
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	f43f aefe 	beq.w	8009db4 <_strtod_l+0x47c>
 8009fb8:	2101      	movs	r1, #1
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f7ff f93c 	bl	8009238 <__i2b>
 8009fc0:	4683      	mov	fp, r0
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	f43f aef6 	beq.w	8009db4 <_strtod_l+0x47c>
 8009fc8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009fca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009fcc:	2f00      	cmp	r7, #0
 8009fce:	bfab      	itete	ge
 8009fd0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009fd2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009fd4:	eb07 0a03 	addge.w	sl, r7, r3
 8009fd8:	1bdd      	sublt	r5, r3, r7
 8009fda:	9b05      	ldr	r3, [sp, #20]
 8009fdc:	bfa8      	it	ge
 8009fde:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009fe0:	eba7 0703 	sub.w	r7, r7, r3
 8009fe4:	4417      	add	r7, r2
 8009fe6:	4b71      	ldr	r3, [pc, #452]	; (800a1ac <_strtod_l+0x874>)
 8009fe8:	f107 37ff 	add.w	r7, r7, #4294967295
 8009fec:	bfb8      	it	lt
 8009fee:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009ff2:	429f      	cmp	r7, r3
 8009ff4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ff8:	f280 80c7 	bge.w	800a18a <_strtod_l+0x852>
 8009ffc:	1bdb      	subs	r3, r3, r7
 8009ffe:	2b1f      	cmp	r3, #31
 800a000:	f04f 0101 	mov.w	r1, #1
 800a004:	eba2 0203 	sub.w	r2, r2, r3
 800a008:	f300 80b3 	bgt.w	800a172 <_strtod_l+0x83a>
 800a00c:	fa01 f303 	lsl.w	r3, r1, r3
 800a010:	9313      	str	r3, [sp, #76]	; 0x4c
 800a012:	2300      	movs	r3, #0
 800a014:	9310      	str	r3, [sp, #64]	; 0x40
 800a016:	eb0a 0702 	add.w	r7, sl, r2
 800a01a:	9b05      	ldr	r3, [sp, #20]
 800a01c:	45ba      	cmp	sl, r7
 800a01e:	4415      	add	r5, r2
 800a020:	441d      	add	r5, r3
 800a022:	4653      	mov	r3, sl
 800a024:	bfa8      	it	ge
 800a026:	463b      	movge	r3, r7
 800a028:	42ab      	cmp	r3, r5
 800a02a:	bfa8      	it	ge
 800a02c:	462b      	movge	r3, r5
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bfc2      	ittt	gt
 800a032:	1aff      	subgt	r7, r7, r3
 800a034:	1aed      	subgt	r5, r5, r3
 800a036:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a03a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dd17      	ble.n	800a070 <_strtod_l+0x738>
 800a040:	4659      	mov	r1, fp
 800a042:	461a      	mov	r2, r3
 800a044:	4620      	mov	r0, r4
 800a046:	f7ff f9b5 	bl	80093b4 <__pow5mult>
 800a04a:	4683      	mov	fp, r0
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f43f aeb1 	beq.w	8009db4 <_strtod_l+0x47c>
 800a052:	4601      	mov	r1, r0
 800a054:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a056:	4620      	mov	r0, r4
 800a058:	f7ff f904 	bl	8009264 <__multiply>
 800a05c:	900a      	str	r0, [sp, #40]	; 0x28
 800a05e:	2800      	cmp	r0, #0
 800a060:	f43f aea8 	beq.w	8009db4 <_strtod_l+0x47c>
 800a064:	4620      	mov	r0, r4
 800a066:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a068:	f7fe ffe6 	bl	8009038 <_Bfree>
 800a06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a06e:	931a      	str	r3, [sp, #104]	; 0x68
 800a070:	2f00      	cmp	r7, #0
 800a072:	f300 808f 	bgt.w	800a194 <_strtod_l+0x85c>
 800a076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dd08      	ble.n	800a08e <_strtod_l+0x756>
 800a07c:	4620      	mov	r0, r4
 800a07e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a080:	9908      	ldr	r1, [sp, #32]
 800a082:	f7ff f997 	bl	80093b4 <__pow5mult>
 800a086:	9008      	str	r0, [sp, #32]
 800a088:	2800      	cmp	r0, #0
 800a08a:	f43f ae93 	beq.w	8009db4 <_strtod_l+0x47c>
 800a08e:	2d00      	cmp	r5, #0
 800a090:	dd08      	ble.n	800a0a4 <_strtod_l+0x76c>
 800a092:	462a      	mov	r2, r5
 800a094:	4620      	mov	r0, r4
 800a096:	9908      	ldr	r1, [sp, #32]
 800a098:	f7ff f9e6 	bl	8009468 <__lshift>
 800a09c:	9008      	str	r0, [sp, #32]
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	f43f ae88 	beq.w	8009db4 <_strtod_l+0x47c>
 800a0a4:	f1ba 0f00 	cmp.w	sl, #0
 800a0a8:	dd08      	ble.n	800a0bc <_strtod_l+0x784>
 800a0aa:	4659      	mov	r1, fp
 800a0ac:	4652      	mov	r2, sl
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f7ff f9da 	bl	8009468 <__lshift>
 800a0b4:	4683      	mov	fp, r0
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	f43f ae7c 	beq.w	8009db4 <_strtod_l+0x47c>
 800a0bc:	4620      	mov	r0, r4
 800a0be:	9a08      	ldr	r2, [sp, #32]
 800a0c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0c2:	f7ff fa59 	bl	8009578 <__mdiff>
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	f43f ae73 	beq.w	8009db4 <_strtod_l+0x47c>
 800a0ce:	2500      	movs	r5, #0
 800a0d0:	68c3      	ldr	r3, [r0, #12]
 800a0d2:	4659      	mov	r1, fp
 800a0d4:	60c5      	str	r5, [r0, #12]
 800a0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d8:	f7ff fa32 	bl	8009540 <__mcmp>
 800a0dc:	42a8      	cmp	r0, r5
 800a0de:	da6b      	bge.n	800a1b8 <_strtod_l+0x880>
 800a0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e2:	ea53 0308 	orrs.w	r3, r3, r8
 800a0e6:	f040 808f 	bne.w	800a208 <_strtod_l+0x8d0>
 800a0ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f040 808a 	bne.w	800a208 <_strtod_l+0x8d0>
 800a0f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0f8:	0d1b      	lsrs	r3, r3, #20
 800a0fa:	051b      	lsls	r3, r3, #20
 800a0fc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a100:	f240 8082 	bls.w	800a208 <_strtod_l+0x8d0>
 800a104:	6973      	ldr	r3, [r6, #20]
 800a106:	b913      	cbnz	r3, 800a10e <_strtod_l+0x7d6>
 800a108:	6933      	ldr	r3, [r6, #16]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	dd7c      	ble.n	800a208 <_strtod_l+0x8d0>
 800a10e:	4631      	mov	r1, r6
 800a110:	2201      	movs	r2, #1
 800a112:	4620      	mov	r0, r4
 800a114:	f7ff f9a8 	bl	8009468 <__lshift>
 800a118:	4659      	mov	r1, fp
 800a11a:	4606      	mov	r6, r0
 800a11c:	f7ff fa10 	bl	8009540 <__mcmp>
 800a120:	2800      	cmp	r0, #0
 800a122:	dd71      	ble.n	800a208 <_strtod_l+0x8d0>
 800a124:	9905      	ldr	r1, [sp, #20]
 800a126:	464b      	mov	r3, r9
 800a128:	4a21      	ldr	r2, [pc, #132]	; (800a1b0 <_strtod_l+0x878>)
 800a12a:	2900      	cmp	r1, #0
 800a12c:	f000 808d 	beq.w	800a24a <_strtod_l+0x912>
 800a130:	ea02 0109 	and.w	r1, r2, r9
 800a134:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a138:	f300 8087 	bgt.w	800a24a <_strtod_l+0x912>
 800a13c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a140:	f77f aea9 	ble.w	8009e96 <_strtod_l+0x55e>
 800a144:	4640      	mov	r0, r8
 800a146:	4649      	mov	r1, r9
 800a148:	4b1a      	ldr	r3, [pc, #104]	; (800a1b4 <_strtod_l+0x87c>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	f7f6 f9c4 	bl	80004d8 <__aeabi_dmul>
 800a150:	4b17      	ldr	r3, [pc, #92]	; (800a1b0 <_strtod_l+0x878>)
 800a152:	4680      	mov	r8, r0
 800a154:	400b      	ands	r3, r1
 800a156:	4689      	mov	r9, r1
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f47f ae35 	bne.w	8009dc8 <_strtod_l+0x490>
 800a15e:	2322      	movs	r3, #34	; 0x22
 800a160:	6023      	str	r3, [r4, #0]
 800a162:	e631      	b.n	8009dc8 <_strtod_l+0x490>
 800a164:	f04f 32ff 	mov.w	r2, #4294967295
 800a168:	fa02 f303 	lsl.w	r3, r2, r3
 800a16c:	ea03 0808 	and.w	r8, r3, r8
 800a170:	e6de      	b.n	8009f30 <_strtod_l+0x5f8>
 800a172:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800a176:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800a17a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800a17e:	37e2      	adds	r7, #226	; 0xe2
 800a180:	fa01 f307 	lsl.w	r3, r1, r7
 800a184:	9310      	str	r3, [sp, #64]	; 0x40
 800a186:	9113      	str	r1, [sp, #76]	; 0x4c
 800a188:	e745      	b.n	800a016 <_strtod_l+0x6de>
 800a18a:	2300      	movs	r3, #0
 800a18c:	9310      	str	r3, [sp, #64]	; 0x40
 800a18e:	2301      	movs	r3, #1
 800a190:	9313      	str	r3, [sp, #76]	; 0x4c
 800a192:	e740      	b.n	800a016 <_strtod_l+0x6de>
 800a194:	463a      	mov	r2, r7
 800a196:	4620      	mov	r0, r4
 800a198:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a19a:	f7ff f965 	bl	8009468 <__lshift>
 800a19e:	901a      	str	r0, [sp, #104]	; 0x68
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	f47f af68 	bne.w	800a076 <_strtod_l+0x73e>
 800a1a6:	e605      	b.n	8009db4 <_strtod_l+0x47c>
 800a1a8:	0800c1d8 	.word	0x0800c1d8
 800a1ac:	fffffc02 	.word	0xfffffc02
 800a1b0:	7ff00000 	.word	0x7ff00000
 800a1b4:	39500000 	.word	0x39500000
 800a1b8:	46ca      	mov	sl, r9
 800a1ba:	d165      	bne.n	800a288 <_strtod_l+0x950>
 800a1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1c2:	b352      	cbz	r2, 800a21a <_strtod_l+0x8e2>
 800a1c4:	4a9e      	ldr	r2, [pc, #632]	; (800a440 <_strtod_l+0xb08>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d12a      	bne.n	800a220 <_strtod_l+0x8e8>
 800a1ca:	9b05      	ldr	r3, [sp, #20]
 800a1cc:	4641      	mov	r1, r8
 800a1ce:	b1fb      	cbz	r3, 800a210 <_strtod_l+0x8d8>
 800a1d0:	4b9c      	ldr	r3, [pc, #624]	; (800a444 <_strtod_l+0xb0c>)
 800a1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d6:	ea09 0303 	and.w	r3, r9, r3
 800a1da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1de:	d81a      	bhi.n	800a216 <_strtod_l+0x8de>
 800a1e0:	0d1b      	lsrs	r3, r3, #20
 800a1e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ea:	4299      	cmp	r1, r3
 800a1ec:	d118      	bne.n	800a220 <_strtod_l+0x8e8>
 800a1ee:	4b96      	ldr	r3, [pc, #600]	; (800a448 <_strtod_l+0xb10>)
 800a1f0:	459a      	cmp	sl, r3
 800a1f2:	d102      	bne.n	800a1fa <_strtod_l+0x8c2>
 800a1f4:	3101      	adds	r1, #1
 800a1f6:	f43f addd 	beq.w	8009db4 <_strtod_l+0x47c>
 800a1fa:	f04f 0800 	mov.w	r8, #0
 800a1fe:	4b91      	ldr	r3, [pc, #580]	; (800a444 <_strtod_l+0xb0c>)
 800a200:	ea0a 0303 	and.w	r3, sl, r3
 800a204:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a208:	9b05      	ldr	r3, [sp, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d19a      	bne.n	800a144 <_strtod_l+0x80c>
 800a20e:	e5db      	b.n	8009dc8 <_strtod_l+0x490>
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	e7e9      	b.n	800a1ea <_strtod_l+0x8b2>
 800a216:	4613      	mov	r3, r2
 800a218:	e7e7      	b.n	800a1ea <_strtod_l+0x8b2>
 800a21a:	ea53 0308 	orrs.w	r3, r3, r8
 800a21e:	d081      	beq.n	800a124 <_strtod_l+0x7ec>
 800a220:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a222:	b1e3      	cbz	r3, 800a25e <_strtod_l+0x926>
 800a224:	ea13 0f0a 	tst.w	r3, sl
 800a228:	d0ee      	beq.n	800a208 <_strtod_l+0x8d0>
 800a22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a22c:	4640      	mov	r0, r8
 800a22e:	4649      	mov	r1, r9
 800a230:	9a05      	ldr	r2, [sp, #20]
 800a232:	b1c3      	cbz	r3, 800a266 <_strtod_l+0x92e>
 800a234:	f7ff fb5c 	bl	80098f0 <sulp>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a23e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a240:	f7f5 ff94 	bl	800016c <__adddf3>
 800a244:	4680      	mov	r8, r0
 800a246:	4689      	mov	r9, r1
 800a248:	e7de      	b.n	800a208 <_strtod_l+0x8d0>
 800a24a:	4013      	ands	r3, r2
 800a24c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a250:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a254:	f04f 38ff 	mov.w	r8, #4294967295
 800a258:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a25c:	e7d4      	b.n	800a208 <_strtod_l+0x8d0>
 800a25e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a260:	ea13 0f08 	tst.w	r3, r8
 800a264:	e7e0      	b.n	800a228 <_strtod_l+0x8f0>
 800a266:	f7ff fb43 	bl	80098f0 <sulp>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a270:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a272:	f7f5 ff79 	bl	8000168 <__aeabi_dsub>
 800a276:	2200      	movs	r2, #0
 800a278:	2300      	movs	r3, #0
 800a27a:	4680      	mov	r8, r0
 800a27c:	4689      	mov	r9, r1
 800a27e:	f7f6 fb93 	bl	80009a8 <__aeabi_dcmpeq>
 800a282:	2800      	cmp	r0, #0
 800a284:	d0c0      	beq.n	800a208 <_strtod_l+0x8d0>
 800a286:	e606      	b.n	8009e96 <_strtod_l+0x55e>
 800a288:	4659      	mov	r1, fp
 800a28a:	4630      	mov	r0, r6
 800a28c:	f7ff fabe 	bl	800980c <__ratio>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a298:	2200      	movs	r2, #0
 800a29a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a29e:	f7f6 fb97 	bl	80009d0 <__aeabi_dcmple>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d06f      	beq.n	800a386 <_strtod_l+0xa4e>
 800a2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d17c      	bne.n	800a3a6 <_strtod_l+0xa6e>
 800a2ac:	f1b8 0f00 	cmp.w	r8, #0
 800a2b0:	d159      	bne.n	800a366 <_strtod_l+0xa2e>
 800a2b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d17b      	bne.n	800a3b2 <_strtod_l+0xa7a>
 800a2ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2be:	2200      	movs	r2, #0
 800a2c0:	4b62      	ldr	r3, [pc, #392]	; (800a44c <_strtod_l+0xb14>)
 800a2c2:	f7f6 fb7b 	bl	80009bc <__aeabi_dcmplt>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d15a      	bne.n	800a380 <_strtod_l+0xa48>
 800a2ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	4b5f      	ldr	r3, [pc, #380]	; (800a450 <_strtod_l+0xb18>)
 800a2d2:	f7f6 f901 	bl	80004d8 <__aeabi_dmul>
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	460f      	mov	r7, r1
 800a2da:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a2de:	9506      	str	r5, [sp, #24]
 800a2e0:	9307      	str	r3, [sp, #28]
 800a2e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a2ea:	4b56      	ldr	r3, [pc, #344]	; (800a444 <_strtod_l+0xb0c>)
 800a2ec:	4a55      	ldr	r2, [pc, #340]	; (800a444 <_strtod_l+0xb0c>)
 800a2ee:	ea0a 0303 	and.w	r3, sl, r3
 800a2f2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2f4:	4b57      	ldr	r3, [pc, #348]	; (800a454 <_strtod_l+0xb1c>)
 800a2f6:	ea0a 0202 	and.w	r2, sl, r2
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	f040 80b0 	bne.w	800a460 <_strtod_l+0xb28>
 800a300:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a304:	4640      	mov	r0, r8
 800a306:	4649      	mov	r1, r9
 800a308:	f7ff f9c2 	bl	8009690 <__ulp>
 800a30c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a310:	f7f6 f8e2 	bl	80004d8 <__aeabi_dmul>
 800a314:	4642      	mov	r2, r8
 800a316:	464b      	mov	r3, r9
 800a318:	f7f5 ff28 	bl	800016c <__adddf3>
 800a31c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a444 <_strtod_l+0xb0c>
 800a320:	4a4d      	ldr	r2, [pc, #308]	; (800a458 <_strtod_l+0xb20>)
 800a322:	ea01 0a0a 	and.w	sl, r1, sl
 800a326:	4592      	cmp	sl, r2
 800a328:	4680      	mov	r8, r0
 800a32a:	d948      	bls.n	800a3be <_strtod_l+0xa86>
 800a32c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a32e:	4b46      	ldr	r3, [pc, #280]	; (800a448 <_strtod_l+0xb10>)
 800a330:	429a      	cmp	r2, r3
 800a332:	d103      	bne.n	800a33c <_strtod_l+0xa04>
 800a334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a336:	3301      	adds	r3, #1
 800a338:	f43f ad3c 	beq.w	8009db4 <_strtod_l+0x47c>
 800a33c:	f04f 38ff 	mov.w	r8, #4294967295
 800a340:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a448 <_strtod_l+0xb10>
 800a344:	4620      	mov	r0, r4
 800a346:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a348:	f7fe fe76 	bl	8009038 <_Bfree>
 800a34c:	4620      	mov	r0, r4
 800a34e:	9908      	ldr	r1, [sp, #32]
 800a350:	f7fe fe72 	bl	8009038 <_Bfree>
 800a354:	4659      	mov	r1, fp
 800a356:	4620      	mov	r0, r4
 800a358:	f7fe fe6e 	bl	8009038 <_Bfree>
 800a35c:	4631      	mov	r1, r6
 800a35e:	4620      	mov	r0, r4
 800a360:	f7fe fe6a 	bl	8009038 <_Bfree>
 800a364:	e605      	b.n	8009f72 <_strtod_l+0x63a>
 800a366:	f1b8 0f01 	cmp.w	r8, #1
 800a36a:	d103      	bne.n	800a374 <_strtod_l+0xa3c>
 800a36c:	f1b9 0f00 	cmp.w	r9, #0
 800a370:	f43f ad91 	beq.w	8009e96 <_strtod_l+0x55e>
 800a374:	2200      	movs	r2, #0
 800a376:	4b39      	ldr	r3, [pc, #228]	; (800a45c <_strtod_l+0xb24>)
 800a378:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a37a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a37e:	e016      	b.n	800a3ae <_strtod_l+0xa76>
 800a380:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a382:	4f33      	ldr	r7, [pc, #204]	; (800a450 <_strtod_l+0xb18>)
 800a384:	e7a9      	b.n	800a2da <_strtod_l+0x9a2>
 800a386:	4b32      	ldr	r3, [pc, #200]	; (800a450 <_strtod_l+0xb18>)
 800a388:	2200      	movs	r2, #0
 800a38a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a38e:	f7f6 f8a3 	bl	80004d8 <__aeabi_dmul>
 800a392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a394:	4605      	mov	r5, r0
 800a396:	460f      	mov	r7, r1
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d09e      	beq.n	800a2da <_strtod_l+0x9a2>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3a4:	e79d      	b.n	800a2e2 <_strtod_l+0x9aa>
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	4b28      	ldr	r3, [pc, #160]	; (800a44c <_strtod_l+0xb14>)
 800a3aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3ae:	4f27      	ldr	r7, [pc, #156]	; (800a44c <_strtod_l+0xb14>)
 800a3b0:	e797      	b.n	800a2e2 <_strtod_l+0x9aa>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4b29      	ldr	r3, [pc, #164]	; (800a45c <_strtod_l+0xb24>)
 800a3b6:	4645      	mov	r5, r8
 800a3b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3bc:	e7f7      	b.n	800a3ae <_strtod_l+0xa76>
 800a3be:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800a3c2:	9b05      	ldr	r3, [sp, #20]
 800a3c4:	46ca      	mov	sl, r9
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1bc      	bne.n	800a344 <_strtod_l+0xa0c>
 800a3ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3d0:	0d1b      	lsrs	r3, r3, #20
 800a3d2:	051b      	lsls	r3, r3, #20
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d1b5      	bne.n	800a344 <_strtod_l+0xa0c>
 800a3d8:	4628      	mov	r0, r5
 800a3da:	4639      	mov	r1, r7
 800a3dc:	f7f6 fe42 	bl	8001064 <__aeabi_d2lz>
 800a3e0:	f7f6 f84c 	bl	800047c <__aeabi_l2d>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	f7f5 febc 	bl	8000168 <__aeabi_dsub>
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800a3f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3fe:	ea4a 0a08 	orr.w	sl, sl, r8
 800a402:	ea5a 0a03 	orrs.w	sl, sl, r3
 800a406:	d06c      	beq.n	800a4e2 <_strtod_l+0xbaa>
 800a408:	a309      	add	r3, pc, #36	; (adr r3, 800a430 <_strtod_l+0xaf8>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	f7f6 fad5 	bl	80009bc <__aeabi_dcmplt>
 800a412:	2800      	cmp	r0, #0
 800a414:	f47f acd8 	bne.w	8009dc8 <_strtod_l+0x490>
 800a418:	a307      	add	r3, pc, #28	; (adr r3, 800a438 <_strtod_l+0xb00>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a422:	f7f6 fae9 	bl	80009f8 <__aeabi_dcmpgt>
 800a426:	2800      	cmp	r0, #0
 800a428:	d08c      	beq.n	800a344 <_strtod_l+0xa0c>
 800a42a:	e4cd      	b.n	8009dc8 <_strtod_l+0x490>
 800a42c:	f3af 8000 	nop.w
 800a430:	94a03595 	.word	0x94a03595
 800a434:	3fdfffff 	.word	0x3fdfffff
 800a438:	35afe535 	.word	0x35afe535
 800a43c:	3fe00000 	.word	0x3fe00000
 800a440:	000fffff 	.word	0x000fffff
 800a444:	7ff00000 	.word	0x7ff00000
 800a448:	7fefffff 	.word	0x7fefffff
 800a44c:	3ff00000 	.word	0x3ff00000
 800a450:	3fe00000 	.word	0x3fe00000
 800a454:	7fe00000 	.word	0x7fe00000
 800a458:	7c9fffff 	.word	0x7c9fffff
 800a45c:	bff00000 	.word	0xbff00000
 800a460:	9b05      	ldr	r3, [sp, #20]
 800a462:	b333      	cbz	r3, 800a4b2 <_strtod_l+0xb7a>
 800a464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a466:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a46a:	d822      	bhi.n	800a4b2 <_strtod_l+0xb7a>
 800a46c:	a328      	add	r3, pc, #160	; (adr r3, 800a510 <_strtod_l+0xbd8>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	4628      	mov	r0, r5
 800a474:	4639      	mov	r1, r7
 800a476:	f7f6 faab 	bl	80009d0 <__aeabi_dcmple>
 800a47a:	b1a0      	cbz	r0, 800a4a6 <_strtod_l+0xb6e>
 800a47c:	4639      	mov	r1, r7
 800a47e:	4628      	mov	r0, r5
 800a480:	f7f6 fb02 	bl	8000a88 <__aeabi_d2uiz>
 800a484:	2801      	cmp	r0, #1
 800a486:	bf38      	it	cc
 800a488:	2001      	movcc	r0, #1
 800a48a:	f7f5 ffab 	bl	80003e4 <__aeabi_ui2d>
 800a48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a490:	4605      	mov	r5, r0
 800a492:	460f      	mov	r7, r1
 800a494:	bb03      	cbnz	r3, 800a4d8 <_strtod_l+0xba0>
 800a496:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a49a:	9014      	str	r0, [sp, #80]	; 0x50
 800a49c:	9315      	str	r3, [sp, #84]	; 0x54
 800a49e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a4a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a4a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4aa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a4ae:	1a9b      	subs	r3, r3, r2
 800a4b0:	9311      	str	r3, [sp, #68]	; 0x44
 800a4b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a4b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a4b6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800a4ba:	f7ff f8e9 	bl	8009690 <__ulp>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	f7f6 f807 	bl	80004d8 <__aeabi_dmul>
 800a4ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4ce:	f7f5 fe4d 	bl	800016c <__adddf3>
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	4689      	mov	r9, r1
 800a4d6:	e774      	b.n	800a3c2 <_strtod_l+0xa8a>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a4e0:	e7dd      	b.n	800a49e <_strtod_l+0xb66>
 800a4e2:	a30d      	add	r3, pc, #52	; (adr r3, 800a518 <_strtod_l+0xbe0>)
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f7f6 fa68 	bl	80009bc <__aeabi_dcmplt>
 800a4ec:	e79b      	b.n	800a426 <_strtod_l+0xaee>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	930e      	str	r3, [sp, #56]	; 0x38
 800a4f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	f7ff ba5b 	b.w	80099b2 <_strtod_l+0x7a>
 800a4fc:	2a65      	cmp	r2, #101	; 0x65
 800a4fe:	f43f ab52 	beq.w	8009ba6 <_strtod_l+0x26e>
 800a502:	2a45      	cmp	r2, #69	; 0x45
 800a504:	f43f ab4f 	beq.w	8009ba6 <_strtod_l+0x26e>
 800a508:	2301      	movs	r3, #1
 800a50a:	f7ff bb87 	b.w	8009c1c <_strtod_l+0x2e4>
 800a50e:	bf00      	nop
 800a510:	ffc00000 	.word	0xffc00000
 800a514:	41dfffff 	.word	0x41dfffff
 800a518:	94a03595 	.word	0x94a03595
 800a51c:	3fcfffff 	.word	0x3fcfffff

0800a520 <_strtod_r>:
 800a520:	4b01      	ldr	r3, [pc, #4]	; (800a528 <_strtod_r+0x8>)
 800a522:	f7ff ba09 	b.w	8009938 <_strtod_l>
 800a526:	bf00      	nop
 800a528:	20000080 	.word	0x20000080

0800a52c <_strtol_l.constprop.0>:
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a532:	4686      	mov	lr, r0
 800a534:	4690      	mov	r8, r2
 800a536:	d001      	beq.n	800a53c <_strtol_l.constprop.0+0x10>
 800a538:	2b24      	cmp	r3, #36	; 0x24
 800a53a:	d906      	bls.n	800a54a <_strtol_l.constprop.0+0x1e>
 800a53c:	f7fd fd82 	bl	8008044 <__errno>
 800a540:	2316      	movs	r3, #22
 800a542:	6003      	str	r3, [r0, #0]
 800a544:	2000      	movs	r0, #0
 800a546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54a:	460d      	mov	r5, r1
 800a54c:	4835      	ldr	r0, [pc, #212]	; (800a624 <_strtol_l.constprop.0+0xf8>)
 800a54e:	462a      	mov	r2, r5
 800a550:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a554:	5d06      	ldrb	r6, [r0, r4]
 800a556:	f016 0608 	ands.w	r6, r6, #8
 800a55a:	d1f8      	bne.n	800a54e <_strtol_l.constprop.0+0x22>
 800a55c:	2c2d      	cmp	r4, #45	; 0x2d
 800a55e:	d12e      	bne.n	800a5be <_strtol_l.constprop.0+0x92>
 800a560:	2601      	movs	r6, #1
 800a562:	782c      	ldrb	r4, [r5, #0]
 800a564:	1c95      	adds	r5, r2, #2
 800a566:	2b00      	cmp	r3, #0
 800a568:	d057      	beq.n	800a61a <_strtol_l.constprop.0+0xee>
 800a56a:	2b10      	cmp	r3, #16
 800a56c:	d109      	bne.n	800a582 <_strtol_l.constprop.0+0x56>
 800a56e:	2c30      	cmp	r4, #48	; 0x30
 800a570:	d107      	bne.n	800a582 <_strtol_l.constprop.0+0x56>
 800a572:	782a      	ldrb	r2, [r5, #0]
 800a574:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a578:	2a58      	cmp	r2, #88	; 0x58
 800a57a:	d149      	bne.n	800a610 <_strtol_l.constprop.0+0xe4>
 800a57c:	2310      	movs	r3, #16
 800a57e:	786c      	ldrb	r4, [r5, #1]
 800a580:	3502      	adds	r5, #2
 800a582:	2200      	movs	r2, #0
 800a584:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a588:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a58c:	fbbc f9f3 	udiv	r9, ip, r3
 800a590:	4610      	mov	r0, r2
 800a592:	fb03 ca19 	mls	sl, r3, r9, ip
 800a596:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a59a:	2f09      	cmp	r7, #9
 800a59c:	d814      	bhi.n	800a5c8 <_strtol_l.constprop.0+0x9c>
 800a59e:	463c      	mov	r4, r7
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	dd20      	ble.n	800a5e6 <_strtol_l.constprop.0+0xba>
 800a5a4:	1c57      	adds	r7, r2, #1
 800a5a6:	d007      	beq.n	800a5b8 <_strtol_l.constprop.0+0x8c>
 800a5a8:	4581      	cmp	r9, r0
 800a5aa:	d319      	bcc.n	800a5e0 <_strtol_l.constprop.0+0xb4>
 800a5ac:	d101      	bne.n	800a5b2 <_strtol_l.constprop.0+0x86>
 800a5ae:	45a2      	cmp	sl, r4
 800a5b0:	db16      	blt.n	800a5e0 <_strtol_l.constprop.0+0xb4>
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	fb00 4003 	mla	r0, r0, r3, r4
 800a5b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5bc:	e7eb      	b.n	800a596 <_strtol_l.constprop.0+0x6a>
 800a5be:	2c2b      	cmp	r4, #43	; 0x2b
 800a5c0:	bf04      	itt	eq
 800a5c2:	782c      	ldrbeq	r4, [r5, #0]
 800a5c4:	1c95      	addeq	r5, r2, #2
 800a5c6:	e7ce      	b.n	800a566 <_strtol_l.constprop.0+0x3a>
 800a5c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a5cc:	2f19      	cmp	r7, #25
 800a5ce:	d801      	bhi.n	800a5d4 <_strtol_l.constprop.0+0xa8>
 800a5d0:	3c37      	subs	r4, #55	; 0x37
 800a5d2:	e7e5      	b.n	800a5a0 <_strtol_l.constprop.0+0x74>
 800a5d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a5d8:	2f19      	cmp	r7, #25
 800a5da:	d804      	bhi.n	800a5e6 <_strtol_l.constprop.0+0xba>
 800a5dc:	3c57      	subs	r4, #87	; 0x57
 800a5de:	e7df      	b.n	800a5a0 <_strtol_l.constprop.0+0x74>
 800a5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e4:	e7e8      	b.n	800a5b8 <_strtol_l.constprop.0+0x8c>
 800a5e6:	1c53      	adds	r3, r2, #1
 800a5e8:	d108      	bne.n	800a5fc <_strtol_l.constprop.0+0xd0>
 800a5ea:	2322      	movs	r3, #34	; 0x22
 800a5ec:	4660      	mov	r0, ip
 800a5ee:	f8ce 3000 	str.w	r3, [lr]
 800a5f2:	f1b8 0f00 	cmp.w	r8, #0
 800a5f6:	d0a6      	beq.n	800a546 <_strtol_l.constprop.0+0x1a>
 800a5f8:	1e69      	subs	r1, r5, #1
 800a5fa:	e006      	b.n	800a60a <_strtol_l.constprop.0+0xde>
 800a5fc:	b106      	cbz	r6, 800a600 <_strtol_l.constprop.0+0xd4>
 800a5fe:	4240      	negs	r0, r0
 800a600:	f1b8 0f00 	cmp.w	r8, #0
 800a604:	d09f      	beq.n	800a546 <_strtol_l.constprop.0+0x1a>
 800a606:	2a00      	cmp	r2, #0
 800a608:	d1f6      	bne.n	800a5f8 <_strtol_l.constprop.0+0xcc>
 800a60a:	f8c8 1000 	str.w	r1, [r8]
 800a60e:	e79a      	b.n	800a546 <_strtol_l.constprop.0+0x1a>
 800a610:	2430      	movs	r4, #48	; 0x30
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1b5      	bne.n	800a582 <_strtol_l.constprop.0+0x56>
 800a616:	2308      	movs	r3, #8
 800a618:	e7b3      	b.n	800a582 <_strtol_l.constprop.0+0x56>
 800a61a:	2c30      	cmp	r4, #48	; 0x30
 800a61c:	d0a9      	beq.n	800a572 <_strtol_l.constprop.0+0x46>
 800a61e:	230a      	movs	r3, #10
 800a620:	e7af      	b.n	800a582 <_strtol_l.constprop.0+0x56>
 800a622:	bf00      	nop
 800a624:	0800c201 	.word	0x0800c201

0800a628 <_strtol_r>:
 800a628:	f7ff bf80 	b.w	800a52c <_strtol_l.constprop.0>

0800a62c <__ssputs_r>:
 800a62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a630:	461f      	mov	r7, r3
 800a632:	688e      	ldr	r6, [r1, #8]
 800a634:	4682      	mov	sl, r0
 800a636:	42be      	cmp	r6, r7
 800a638:	460c      	mov	r4, r1
 800a63a:	4690      	mov	r8, r2
 800a63c:	680b      	ldr	r3, [r1, #0]
 800a63e:	d82c      	bhi.n	800a69a <__ssputs_r+0x6e>
 800a640:	898a      	ldrh	r2, [r1, #12]
 800a642:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a646:	d026      	beq.n	800a696 <__ssputs_r+0x6a>
 800a648:	6965      	ldr	r5, [r4, #20]
 800a64a:	6909      	ldr	r1, [r1, #16]
 800a64c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a650:	eba3 0901 	sub.w	r9, r3, r1
 800a654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a658:	1c7b      	adds	r3, r7, #1
 800a65a:	444b      	add	r3, r9
 800a65c:	106d      	asrs	r5, r5, #1
 800a65e:	429d      	cmp	r5, r3
 800a660:	bf38      	it	cc
 800a662:	461d      	movcc	r5, r3
 800a664:	0553      	lsls	r3, r2, #21
 800a666:	d527      	bpl.n	800a6b8 <__ssputs_r+0x8c>
 800a668:	4629      	mov	r1, r5
 800a66a:	f7fe fc19 	bl	8008ea0 <_malloc_r>
 800a66e:	4606      	mov	r6, r0
 800a670:	b360      	cbz	r0, 800a6cc <__ssputs_r+0xa0>
 800a672:	464a      	mov	r2, r9
 800a674:	6921      	ldr	r1, [r4, #16]
 800a676:	f7fd fd20 	bl	80080ba <memcpy>
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	6126      	str	r6, [r4, #16]
 800a688:	444e      	add	r6, r9
 800a68a:	6026      	str	r6, [r4, #0]
 800a68c:	463e      	mov	r6, r7
 800a68e:	6165      	str	r5, [r4, #20]
 800a690:	eba5 0509 	sub.w	r5, r5, r9
 800a694:	60a5      	str	r5, [r4, #8]
 800a696:	42be      	cmp	r6, r7
 800a698:	d900      	bls.n	800a69c <__ssputs_r+0x70>
 800a69a:	463e      	mov	r6, r7
 800a69c:	4632      	mov	r2, r6
 800a69e:	4641      	mov	r1, r8
 800a6a0:	6820      	ldr	r0, [r4, #0]
 800a6a2:	f7fd fc62 	bl	8007f6a <memmove>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	68a3      	ldr	r3, [r4, #8]
 800a6aa:	1b9b      	subs	r3, r3, r6
 800a6ac:	60a3      	str	r3, [r4, #8]
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	4433      	add	r3, r6
 800a6b2:	6023      	str	r3, [r4, #0]
 800a6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b8:	462a      	mov	r2, r5
 800a6ba:	f000 fd7e 	bl	800b1ba <_realloc_r>
 800a6be:	4606      	mov	r6, r0
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d1e0      	bne.n	800a686 <__ssputs_r+0x5a>
 800a6c4:	4650      	mov	r0, sl
 800a6c6:	6921      	ldr	r1, [r4, #16]
 800a6c8:	f7fe fb7a 	bl	8008dc0 <_free_r>
 800a6cc:	230c      	movs	r3, #12
 800a6ce:	f8ca 3000 	str.w	r3, [sl]
 800a6d2:	89a3      	ldrh	r3, [r4, #12]
 800a6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6dc:	81a3      	strh	r3, [r4, #12]
 800a6de:	e7e9      	b.n	800a6b4 <__ssputs_r+0x88>

0800a6e0 <_svfiprintf_r>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	4698      	mov	r8, r3
 800a6e6:	898b      	ldrh	r3, [r1, #12]
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	061b      	lsls	r3, r3, #24
 800a6ec:	460d      	mov	r5, r1
 800a6ee:	4614      	mov	r4, r2
 800a6f0:	b09d      	sub	sp, #116	; 0x74
 800a6f2:	d50e      	bpl.n	800a712 <_svfiprintf_r+0x32>
 800a6f4:	690b      	ldr	r3, [r1, #16]
 800a6f6:	b963      	cbnz	r3, 800a712 <_svfiprintf_r+0x32>
 800a6f8:	2140      	movs	r1, #64	; 0x40
 800a6fa:	f7fe fbd1 	bl	8008ea0 <_malloc_r>
 800a6fe:	6028      	str	r0, [r5, #0]
 800a700:	6128      	str	r0, [r5, #16]
 800a702:	b920      	cbnz	r0, 800a70e <_svfiprintf_r+0x2e>
 800a704:	230c      	movs	r3, #12
 800a706:	603b      	str	r3, [r7, #0]
 800a708:	f04f 30ff 	mov.w	r0, #4294967295
 800a70c:	e0d0      	b.n	800a8b0 <_svfiprintf_r+0x1d0>
 800a70e:	2340      	movs	r3, #64	; 0x40
 800a710:	616b      	str	r3, [r5, #20]
 800a712:	2300      	movs	r3, #0
 800a714:	9309      	str	r3, [sp, #36]	; 0x24
 800a716:	2320      	movs	r3, #32
 800a718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a71c:	2330      	movs	r3, #48	; 0x30
 800a71e:	f04f 0901 	mov.w	r9, #1
 800a722:	f8cd 800c 	str.w	r8, [sp, #12]
 800a726:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a8c8 <_svfiprintf_r+0x1e8>
 800a72a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a72e:	4623      	mov	r3, r4
 800a730:	469a      	mov	sl, r3
 800a732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a736:	b10a      	cbz	r2, 800a73c <_svfiprintf_r+0x5c>
 800a738:	2a25      	cmp	r2, #37	; 0x25
 800a73a:	d1f9      	bne.n	800a730 <_svfiprintf_r+0x50>
 800a73c:	ebba 0b04 	subs.w	fp, sl, r4
 800a740:	d00b      	beq.n	800a75a <_svfiprintf_r+0x7a>
 800a742:	465b      	mov	r3, fp
 800a744:	4622      	mov	r2, r4
 800a746:	4629      	mov	r1, r5
 800a748:	4638      	mov	r0, r7
 800a74a:	f7ff ff6f 	bl	800a62c <__ssputs_r>
 800a74e:	3001      	adds	r0, #1
 800a750:	f000 80a9 	beq.w	800a8a6 <_svfiprintf_r+0x1c6>
 800a754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a756:	445a      	add	r2, fp
 800a758:	9209      	str	r2, [sp, #36]	; 0x24
 800a75a:	f89a 3000 	ldrb.w	r3, [sl]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f000 80a1 	beq.w	800a8a6 <_svfiprintf_r+0x1c6>
 800a764:	2300      	movs	r3, #0
 800a766:	f04f 32ff 	mov.w	r2, #4294967295
 800a76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a76e:	f10a 0a01 	add.w	sl, sl, #1
 800a772:	9304      	str	r3, [sp, #16]
 800a774:	9307      	str	r3, [sp, #28]
 800a776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a77a:	931a      	str	r3, [sp, #104]	; 0x68
 800a77c:	4654      	mov	r4, sl
 800a77e:	2205      	movs	r2, #5
 800a780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a784:	4850      	ldr	r0, [pc, #320]	; (800a8c8 <_svfiprintf_r+0x1e8>)
 800a786:	f7fd fc8a 	bl	800809e <memchr>
 800a78a:	9a04      	ldr	r2, [sp, #16]
 800a78c:	b9d8      	cbnz	r0, 800a7c6 <_svfiprintf_r+0xe6>
 800a78e:	06d0      	lsls	r0, r2, #27
 800a790:	bf44      	itt	mi
 800a792:	2320      	movmi	r3, #32
 800a794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a798:	0711      	lsls	r1, r2, #28
 800a79a:	bf44      	itt	mi
 800a79c:	232b      	movmi	r3, #43	; 0x2b
 800a79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a8:	d015      	beq.n	800a7d6 <_svfiprintf_r+0xf6>
 800a7aa:	4654      	mov	r4, sl
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f04f 0c0a 	mov.w	ip, #10
 800a7b2:	9a07      	ldr	r2, [sp, #28]
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ba:	3b30      	subs	r3, #48	; 0x30
 800a7bc:	2b09      	cmp	r3, #9
 800a7be:	d94d      	bls.n	800a85c <_svfiprintf_r+0x17c>
 800a7c0:	b1b0      	cbz	r0, 800a7f0 <_svfiprintf_r+0x110>
 800a7c2:	9207      	str	r2, [sp, #28]
 800a7c4:	e014      	b.n	800a7f0 <_svfiprintf_r+0x110>
 800a7c6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	46a2      	mov	sl, r4
 800a7d2:	9304      	str	r3, [sp, #16]
 800a7d4:	e7d2      	b.n	800a77c <_svfiprintf_r+0x9c>
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	1d19      	adds	r1, r3, #4
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	9103      	str	r1, [sp, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bfbb      	ittet	lt
 800a7e2:	425b      	neglt	r3, r3
 800a7e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e8:	9307      	strge	r3, [sp, #28]
 800a7ea:	9307      	strlt	r3, [sp, #28]
 800a7ec:	bfb8      	it	lt
 800a7ee:	9204      	strlt	r2, [sp, #16]
 800a7f0:	7823      	ldrb	r3, [r4, #0]
 800a7f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a7f4:	d10c      	bne.n	800a810 <_svfiprintf_r+0x130>
 800a7f6:	7863      	ldrb	r3, [r4, #1]
 800a7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7fa:	d134      	bne.n	800a866 <_svfiprintf_r+0x186>
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	3402      	adds	r4, #2
 800a800:	1d1a      	adds	r2, r3, #4
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	9203      	str	r2, [sp, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfb8      	it	lt
 800a80a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a80e:	9305      	str	r3, [sp, #20]
 800a810:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a8cc <_svfiprintf_r+0x1ec>
 800a814:	2203      	movs	r2, #3
 800a816:	4650      	mov	r0, sl
 800a818:	7821      	ldrb	r1, [r4, #0]
 800a81a:	f7fd fc40 	bl	800809e <memchr>
 800a81e:	b138      	cbz	r0, 800a830 <_svfiprintf_r+0x150>
 800a820:	2240      	movs	r2, #64	; 0x40
 800a822:	9b04      	ldr	r3, [sp, #16]
 800a824:	eba0 000a 	sub.w	r0, r0, sl
 800a828:	4082      	lsls	r2, r0
 800a82a:	4313      	orrs	r3, r2
 800a82c:	3401      	adds	r4, #1
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a834:	2206      	movs	r2, #6
 800a836:	4826      	ldr	r0, [pc, #152]	; (800a8d0 <_svfiprintf_r+0x1f0>)
 800a838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a83c:	f7fd fc2f 	bl	800809e <memchr>
 800a840:	2800      	cmp	r0, #0
 800a842:	d038      	beq.n	800a8b6 <_svfiprintf_r+0x1d6>
 800a844:	4b23      	ldr	r3, [pc, #140]	; (800a8d4 <_svfiprintf_r+0x1f4>)
 800a846:	bb1b      	cbnz	r3, 800a890 <_svfiprintf_r+0x1b0>
 800a848:	9b03      	ldr	r3, [sp, #12]
 800a84a:	3307      	adds	r3, #7
 800a84c:	f023 0307 	bic.w	r3, r3, #7
 800a850:	3308      	adds	r3, #8
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a856:	4433      	add	r3, r6
 800a858:	9309      	str	r3, [sp, #36]	; 0x24
 800a85a:	e768      	b.n	800a72e <_svfiprintf_r+0x4e>
 800a85c:	460c      	mov	r4, r1
 800a85e:	2001      	movs	r0, #1
 800a860:	fb0c 3202 	mla	r2, ip, r2, r3
 800a864:	e7a6      	b.n	800a7b4 <_svfiprintf_r+0xd4>
 800a866:	2300      	movs	r3, #0
 800a868:	f04f 0c0a 	mov.w	ip, #10
 800a86c:	4619      	mov	r1, r3
 800a86e:	3401      	adds	r4, #1
 800a870:	9305      	str	r3, [sp, #20]
 800a872:	4620      	mov	r0, r4
 800a874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a878:	3a30      	subs	r2, #48	; 0x30
 800a87a:	2a09      	cmp	r2, #9
 800a87c:	d903      	bls.n	800a886 <_svfiprintf_r+0x1a6>
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0c6      	beq.n	800a810 <_svfiprintf_r+0x130>
 800a882:	9105      	str	r1, [sp, #20]
 800a884:	e7c4      	b.n	800a810 <_svfiprintf_r+0x130>
 800a886:	4604      	mov	r4, r0
 800a888:	2301      	movs	r3, #1
 800a88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a88e:	e7f0      	b.n	800a872 <_svfiprintf_r+0x192>
 800a890:	ab03      	add	r3, sp, #12
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	462a      	mov	r2, r5
 800a896:	4638      	mov	r0, r7
 800a898:	4b0f      	ldr	r3, [pc, #60]	; (800a8d8 <_svfiprintf_r+0x1f8>)
 800a89a:	a904      	add	r1, sp, #16
 800a89c:	f7fc fc70 	bl	8007180 <_printf_float>
 800a8a0:	1c42      	adds	r2, r0, #1
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	d1d6      	bne.n	800a854 <_svfiprintf_r+0x174>
 800a8a6:	89ab      	ldrh	r3, [r5, #12]
 800a8a8:	065b      	lsls	r3, r3, #25
 800a8aa:	f53f af2d 	bmi.w	800a708 <_svfiprintf_r+0x28>
 800a8ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8b0:	b01d      	add	sp, #116	; 0x74
 800a8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b6:	ab03      	add	r3, sp, #12
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	462a      	mov	r2, r5
 800a8bc:	4638      	mov	r0, r7
 800a8be:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <_svfiprintf_r+0x1f8>)
 800a8c0:	a904      	add	r1, sp, #16
 800a8c2:	f7fc fefd 	bl	80076c0 <_printf_i>
 800a8c6:	e7eb      	b.n	800a8a0 <_svfiprintf_r+0x1c0>
 800a8c8:	0800c301 	.word	0x0800c301
 800a8cc:	0800c307 	.word	0x0800c307
 800a8d0:	0800c30b 	.word	0x0800c30b
 800a8d4:	08007181 	.word	0x08007181
 800a8d8:	0800a62d 	.word	0x0800a62d

0800a8dc <__sflush_r>:
 800a8dc:	898a      	ldrh	r2, [r1, #12]
 800a8de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e0:	4605      	mov	r5, r0
 800a8e2:	0710      	lsls	r0, r2, #28
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	d457      	bmi.n	800a998 <__sflush_r+0xbc>
 800a8e8:	684b      	ldr	r3, [r1, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dc04      	bgt.n	800a8f8 <__sflush_r+0x1c>
 800a8ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	dc01      	bgt.n	800a8f8 <__sflush_r+0x1c>
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8fa:	2e00      	cmp	r6, #0
 800a8fc:	d0fa      	beq.n	800a8f4 <__sflush_r+0x18>
 800a8fe:	2300      	movs	r3, #0
 800a900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a904:	682f      	ldr	r7, [r5, #0]
 800a906:	6a21      	ldr	r1, [r4, #32]
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	d032      	beq.n	800a972 <__sflush_r+0x96>
 800a90c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	075a      	lsls	r2, r3, #29
 800a912:	d505      	bpl.n	800a920 <__sflush_r+0x44>
 800a914:	6863      	ldr	r3, [r4, #4]
 800a916:	1ac0      	subs	r0, r0, r3
 800a918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a91a:	b10b      	cbz	r3, 800a920 <__sflush_r+0x44>
 800a91c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a91e:	1ac0      	subs	r0, r0, r3
 800a920:	2300      	movs	r3, #0
 800a922:	4602      	mov	r2, r0
 800a924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a926:	4628      	mov	r0, r5
 800a928:	6a21      	ldr	r1, [r4, #32]
 800a92a:	47b0      	blx	r6
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	d106      	bne.n	800a940 <__sflush_r+0x64>
 800a932:	6829      	ldr	r1, [r5, #0]
 800a934:	291d      	cmp	r1, #29
 800a936:	d82b      	bhi.n	800a990 <__sflush_r+0xb4>
 800a938:	4a28      	ldr	r2, [pc, #160]	; (800a9dc <__sflush_r+0x100>)
 800a93a:	410a      	asrs	r2, r1
 800a93c:	07d6      	lsls	r6, r2, #31
 800a93e:	d427      	bmi.n	800a990 <__sflush_r+0xb4>
 800a940:	2200      	movs	r2, #0
 800a942:	6062      	str	r2, [r4, #4]
 800a944:	6922      	ldr	r2, [r4, #16]
 800a946:	04d9      	lsls	r1, r3, #19
 800a948:	6022      	str	r2, [r4, #0]
 800a94a:	d504      	bpl.n	800a956 <__sflush_r+0x7a>
 800a94c:	1c42      	adds	r2, r0, #1
 800a94e:	d101      	bne.n	800a954 <__sflush_r+0x78>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	b903      	cbnz	r3, 800a956 <__sflush_r+0x7a>
 800a954:	6560      	str	r0, [r4, #84]	; 0x54
 800a956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a958:	602f      	str	r7, [r5, #0]
 800a95a:	2900      	cmp	r1, #0
 800a95c:	d0ca      	beq.n	800a8f4 <__sflush_r+0x18>
 800a95e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a962:	4299      	cmp	r1, r3
 800a964:	d002      	beq.n	800a96c <__sflush_r+0x90>
 800a966:	4628      	mov	r0, r5
 800a968:	f7fe fa2a 	bl	8008dc0 <_free_r>
 800a96c:	2000      	movs	r0, #0
 800a96e:	6360      	str	r0, [r4, #52]	; 0x34
 800a970:	e7c1      	b.n	800a8f6 <__sflush_r+0x1a>
 800a972:	2301      	movs	r3, #1
 800a974:	4628      	mov	r0, r5
 800a976:	47b0      	blx	r6
 800a978:	1c41      	adds	r1, r0, #1
 800a97a:	d1c8      	bne.n	800a90e <__sflush_r+0x32>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0c5      	beq.n	800a90e <__sflush_r+0x32>
 800a982:	2b1d      	cmp	r3, #29
 800a984:	d001      	beq.n	800a98a <__sflush_r+0xae>
 800a986:	2b16      	cmp	r3, #22
 800a988:	d101      	bne.n	800a98e <__sflush_r+0xb2>
 800a98a:	602f      	str	r7, [r5, #0]
 800a98c:	e7b2      	b.n	800a8f4 <__sflush_r+0x18>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a994:	81a3      	strh	r3, [r4, #12]
 800a996:	e7ae      	b.n	800a8f6 <__sflush_r+0x1a>
 800a998:	690f      	ldr	r7, [r1, #16]
 800a99a:	2f00      	cmp	r7, #0
 800a99c:	d0aa      	beq.n	800a8f4 <__sflush_r+0x18>
 800a99e:	0793      	lsls	r3, r2, #30
 800a9a0:	bf18      	it	ne
 800a9a2:	2300      	movne	r3, #0
 800a9a4:	680e      	ldr	r6, [r1, #0]
 800a9a6:	bf08      	it	eq
 800a9a8:	694b      	ldreq	r3, [r1, #20]
 800a9aa:	1bf6      	subs	r6, r6, r7
 800a9ac:	600f      	str	r7, [r1, #0]
 800a9ae:	608b      	str	r3, [r1, #8]
 800a9b0:	2e00      	cmp	r6, #0
 800a9b2:	dd9f      	ble.n	800a8f4 <__sflush_r+0x18>
 800a9b4:	4633      	mov	r3, r6
 800a9b6:	463a      	mov	r2, r7
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	6a21      	ldr	r1, [r4, #32]
 800a9bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a9c0:	47e0      	blx	ip
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	dc06      	bgt.n	800a9d4 <__sflush_r+0xf8>
 800a9c6:	89a3      	ldrh	r3, [r4, #12]
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d0:	81a3      	strh	r3, [r4, #12]
 800a9d2:	e790      	b.n	800a8f6 <__sflush_r+0x1a>
 800a9d4:	4407      	add	r7, r0
 800a9d6:	1a36      	subs	r6, r6, r0
 800a9d8:	e7ea      	b.n	800a9b0 <__sflush_r+0xd4>
 800a9da:	bf00      	nop
 800a9dc:	dfbffffe 	.word	0xdfbffffe

0800a9e0 <_fflush_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	690b      	ldr	r3, [r1, #16]
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	b913      	cbnz	r3, 800a9f0 <_fflush_r+0x10>
 800a9ea:	2500      	movs	r5, #0
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	b118      	cbz	r0, 800a9fa <_fflush_r+0x1a>
 800a9f2:	6a03      	ldr	r3, [r0, #32]
 800a9f4:	b90b      	cbnz	r3, 800a9fa <_fflush_r+0x1a>
 800a9f6:	f7fd fa1f 	bl	8007e38 <__sinit>
 800a9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0f3      	beq.n	800a9ea <_fflush_r+0xa>
 800aa02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa04:	07d0      	lsls	r0, r2, #31
 800aa06:	d404      	bmi.n	800aa12 <_fflush_r+0x32>
 800aa08:	0599      	lsls	r1, r3, #22
 800aa0a:	d402      	bmi.n	800aa12 <_fflush_r+0x32>
 800aa0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa0e:	f7fd fb44 	bl	800809a <__retarget_lock_acquire_recursive>
 800aa12:	4628      	mov	r0, r5
 800aa14:	4621      	mov	r1, r4
 800aa16:	f7ff ff61 	bl	800a8dc <__sflush_r>
 800aa1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	07da      	lsls	r2, r3, #31
 800aa20:	d4e4      	bmi.n	800a9ec <_fflush_r+0xc>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	059b      	lsls	r3, r3, #22
 800aa26:	d4e1      	bmi.n	800a9ec <_fflush_r+0xc>
 800aa28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa2a:	f7fd fb37 	bl	800809c <__retarget_lock_release_recursive>
 800aa2e:	e7dd      	b.n	800a9ec <_fflush_r+0xc>

0800aa30 <strncmp>:
 800aa30:	b510      	push	{r4, lr}
 800aa32:	b16a      	cbz	r2, 800aa50 <strncmp+0x20>
 800aa34:	3901      	subs	r1, #1
 800aa36:	1884      	adds	r4, r0, r2
 800aa38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d103      	bne.n	800aa4c <strncmp+0x1c>
 800aa44:	42a0      	cmp	r0, r4
 800aa46:	d001      	beq.n	800aa4c <strncmp+0x1c>
 800aa48:	2a00      	cmp	r2, #0
 800aa4a:	d1f5      	bne.n	800aa38 <strncmp+0x8>
 800aa4c:	1ad0      	subs	r0, r2, r3
 800aa4e:	bd10      	pop	{r4, pc}
 800aa50:	4610      	mov	r0, r2
 800aa52:	e7fc      	b.n	800aa4e <strncmp+0x1e>

0800aa54 <_sbrk_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	2300      	movs	r3, #0
 800aa58:	4d05      	ldr	r5, [pc, #20]	; (800aa70 <_sbrk_r+0x1c>)
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	f7f7 fc38 	bl	80022d4 <_sbrk>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	d102      	bne.n	800aa6e <_sbrk_r+0x1a>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	b103      	cbz	r3, 800aa6e <_sbrk_r+0x1a>
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	20000984 	.word	0x20000984

0800aa74 <nan>:
 800aa74:	2000      	movs	r0, #0
 800aa76:	4901      	ldr	r1, [pc, #4]	; (800aa7c <nan+0x8>)
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	7ff80000 	.word	0x7ff80000

0800aa80 <__assert_func>:
 800aa80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa82:	4614      	mov	r4, r2
 800aa84:	461a      	mov	r2, r3
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <__assert_func+0x2c>)
 800aa88:	4605      	mov	r5, r0
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68d8      	ldr	r0, [r3, #12]
 800aa8e:	b14c      	cbz	r4, 800aaa4 <__assert_func+0x24>
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <__assert_func+0x30>)
 800aa92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa96:	9100      	str	r1, [sp, #0]
 800aa98:	462b      	mov	r3, r5
 800aa9a:	4906      	ldr	r1, [pc, #24]	; (800aab4 <__assert_func+0x34>)
 800aa9c:	f000 fbca 	bl	800b234 <fiprintf>
 800aaa0:	f000 fbda 	bl	800b258 <abort>
 800aaa4:	4b04      	ldr	r3, [pc, #16]	; (800aab8 <__assert_func+0x38>)
 800aaa6:	461c      	mov	r4, r3
 800aaa8:	e7f3      	b.n	800aa92 <__assert_func+0x12>
 800aaaa:	bf00      	nop
 800aaac:	2000007c 	.word	0x2000007c
 800aab0:	0800c31a 	.word	0x0800c31a
 800aab4:	0800c327 	.word	0x0800c327
 800aab8:	0800c355 	.word	0x0800c355

0800aabc <_calloc_r>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	fba1 5402 	umull	r5, r4, r1, r2
 800aac2:	b934      	cbnz	r4, 800aad2 <_calloc_r+0x16>
 800aac4:	4629      	mov	r1, r5
 800aac6:	f7fe f9eb 	bl	8008ea0 <_malloc_r>
 800aaca:	4606      	mov	r6, r0
 800aacc:	b928      	cbnz	r0, 800aada <_calloc_r+0x1e>
 800aace:	4630      	mov	r0, r6
 800aad0:	bd70      	pop	{r4, r5, r6, pc}
 800aad2:	220c      	movs	r2, #12
 800aad4:	2600      	movs	r6, #0
 800aad6:	6002      	str	r2, [r0, #0]
 800aad8:	e7f9      	b.n	800aace <_calloc_r+0x12>
 800aada:	462a      	mov	r2, r5
 800aadc:	4621      	mov	r1, r4
 800aade:	f7fd fa5e 	bl	8007f9e <memset>
 800aae2:	e7f4      	b.n	800aace <_calloc_r+0x12>

0800aae4 <rshift>:
 800aae4:	6903      	ldr	r3, [r0, #16]
 800aae6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aaee:	f100 0414 	add.w	r4, r0, #20
 800aaf2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aaf6:	dd46      	ble.n	800ab86 <rshift+0xa2>
 800aaf8:	f011 011f 	ands.w	r1, r1, #31
 800aafc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab04:	d10c      	bne.n	800ab20 <rshift+0x3c>
 800ab06:	4629      	mov	r1, r5
 800ab08:	f100 0710 	add.w	r7, r0, #16
 800ab0c:	42b1      	cmp	r1, r6
 800ab0e:	d335      	bcc.n	800ab7c <rshift+0x98>
 800ab10:	1a9b      	subs	r3, r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	1eea      	subs	r2, r5, #3
 800ab16:	4296      	cmp	r6, r2
 800ab18:	bf38      	it	cc
 800ab1a:	2300      	movcc	r3, #0
 800ab1c:	4423      	add	r3, r4
 800ab1e:	e015      	b.n	800ab4c <rshift+0x68>
 800ab20:	46a1      	mov	r9, r4
 800ab22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab26:	f1c1 0820 	rsb	r8, r1, #32
 800ab2a:	40cf      	lsrs	r7, r1
 800ab2c:	f105 0e04 	add.w	lr, r5, #4
 800ab30:	4576      	cmp	r6, lr
 800ab32:	46f4      	mov	ip, lr
 800ab34:	d816      	bhi.n	800ab64 <rshift+0x80>
 800ab36:	1a9a      	subs	r2, r3, r2
 800ab38:	0092      	lsls	r2, r2, #2
 800ab3a:	3a04      	subs	r2, #4
 800ab3c:	3501      	adds	r5, #1
 800ab3e:	42ae      	cmp	r6, r5
 800ab40:	bf38      	it	cc
 800ab42:	2200      	movcc	r2, #0
 800ab44:	18a3      	adds	r3, r4, r2
 800ab46:	50a7      	str	r7, [r4, r2]
 800ab48:	b107      	cbz	r7, 800ab4c <rshift+0x68>
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	eba3 0204 	sub.w	r2, r3, r4
 800ab52:	bf08      	it	eq
 800ab54:	2300      	moveq	r3, #0
 800ab56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab5a:	6102      	str	r2, [r0, #16]
 800ab5c:	bf08      	it	eq
 800ab5e:	6143      	streq	r3, [r0, #20]
 800ab60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab64:	f8dc c000 	ldr.w	ip, [ip]
 800ab68:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab6c:	ea4c 0707 	orr.w	r7, ip, r7
 800ab70:	f849 7b04 	str.w	r7, [r9], #4
 800ab74:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab78:	40cf      	lsrs	r7, r1
 800ab7a:	e7d9      	b.n	800ab30 <rshift+0x4c>
 800ab7c:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab80:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab84:	e7c2      	b.n	800ab0c <rshift+0x28>
 800ab86:	4623      	mov	r3, r4
 800ab88:	e7e0      	b.n	800ab4c <rshift+0x68>

0800ab8a <__hexdig_fun>:
 800ab8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab8e:	2b09      	cmp	r3, #9
 800ab90:	d802      	bhi.n	800ab98 <__hexdig_fun+0xe>
 800ab92:	3820      	subs	r0, #32
 800ab94:	b2c0      	uxtb	r0, r0
 800ab96:	4770      	bx	lr
 800ab98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab9c:	2b05      	cmp	r3, #5
 800ab9e:	d801      	bhi.n	800aba4 <__hexdig_fun+0x1a>
 800aba0:	3847      	subs	r0, #71	; 0x47
 800aba2:	e7f7      	b.n	800ab94 <__hexdig_fun+0xa>
 800aba4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aba8:	2b05      	cmp	r3, #5
 800abaa:	d801      	bhi.n	800abb0 <__hexdig_fun+0x26>
 800abac:	3827      	subs	r0, #39	; 0x27
 800abae:	e7f1      	b.n	800ab94 <__hexdig_fun+0xa>
 800abb0:	2000      	movs	r0, #0
 800abb2:	4770      	bx	lr

0800abb4 <__gethex>:
 800abb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb8:	4681      	mov	r9, r0
 800abba:	468a      	mov	sl, r1
 800abbc:	4617      	mov	r7, r2
 800abbe:	680a      	ldr	r2, [r1, #0]
 800abc0:	b085      	sub	sp, #20
 800abc2:	f102 0b02 	add.w	fp, r2, #2
 800abc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800abca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800abce:	9302      	str	r3, [sp, #8]
 800abd0:	32fe      	adds	r2, #254	; 0xfe
 800abd2:	eb02 030b 	add.w	r3, r2, fp
 800abd6:	46d8      	mov	r8, fp
 800abd8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	2830      	cmp	r0, #48	; 0x30
 800abe0:	d0f7      	beq.n	800abd2 <__gethex+0x1e>
 800abe2:	f7ff ffd2 	bl	800ab8a <__hexdig_fun>
 800abe6:	4604      	mov	r4, r0
 800abe8:	2800      	cmp	r0, #0
 800abea:	d138      	bne.n	800ac5e <__gethex+0xaa>
 800abec:	2201      	movs	r2, #1
 800abee:	4640      	mov	r0, r8
 800abf0:	49a7      	ldr	r1, [pc, #668]	; (800ae90 <__gethex+0x2dc>)
 800abf2:	f7ff ff1d 	bl	800aa30 <strncmp>
 800abf6:	4606      	mov	r6, r0
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d169      	bne.n	800acd0 <__gethex+0x11c>
 800abfc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ac00:	465d      	mov	r5, fp
 800ac02:	f7ff ffc2 	bl	800ab8a <__hexdig_fun>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d064      	beq.n	800acd4 <__gethex+0x120>
 800ac0a:	465a      	mov	r2, fp
 800ac0c:	7810      	ldrb	r0, [r2, #0]
 800ac0e:	4690      	mov	r8, r2
 800ac10:	2830      	cmp	r0, #48	; 0x30
 800ac12:	f102 0201 	add.w	r2, r2, #1
 800ac16:	d0f9      	beq.n	800ac0c <__gethex+0x58>
 800ac18:	f7ff ffb7 	bl	800ab8a <__hexdig_fun>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	fab0 f480 	clz	r4, r0
 800ac22:	465e      	mov	r6, fp
 800ac24:	0964      	lsrs	r4, r4, #5
 800ac26:	9301      	str	r3, [sp, #4]
 800ac28:	4642      	mov	r2, r8
 800ac2a:	4615      	mov	r5, r2
 800ac2c:	7828      	ldrb	r0, [r5, #0]
 800ac2e:	3201      	adds	r2, #1
 800ac30:	f7ff ffab 	bl	800ab8a <__hexdig_fun>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d1f8      	bne.n	800ac2a <__gethex+0x76>
 800ac38:	2201      	movs	r2, #1
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	4994      	ldr	r1, [pc, #592]	; (800ae90 <__gethex+0x2dc>)
 800ac3e:	f7ff fef7 	bl	800aa30 <strncmp>
 800ac42:	b978      	cbnz	r0, 800ac64 <__gethex+0xb0>
 800ac44:	b946      	cbnz	r6, 800ac58 <__gethex+0xa4>
 800ac46:	1c6e      	adds	r6, r5, #1
 800ac48:	4632      	mov	r2, r6
 800ac4a:	4615      	mov	r5, r2
 800ac4c:	7828      	ldrb	r0, [r5, #0]
 800ac4e:	3201      	adds	r2, #1
 800ac50:	f7ff ff9b 	bl	800ab8a <__hexdig_fun>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d1f8      	bne.n	800ac4a <__gethex+0x96>
 800ac58:	1b73      	subs	r3, r6, r5
 800ac5a:	009e      	lsls	r6, r3, #2
 800ac5c:	e004      	b.n	800ac68 <__gethex+0xb4>
 800ac5e:	2400      	movs	r4, #0
 800ac60:	4626      	mov	r6, r4
 800ac62:	e7e1      	b.n	800ac28 <__gethex+0x74>
 800ac64:	2e00      	cmp	r6, #0
 800ac66:	d1f7      	bne.n	800ac58 <__gethex+0xa4>
 800ac68:	782b      	ldrb	r3, [r5, #0]
 800ac6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac6e:	2b50      	cmp	r3, #80	; 0x50
 800ac70:	d13d      	bne.n	800acee <__gethex+0x13a>
 800ac72:	786b      	ldrb	r3, [r5, #1]
 800ac74:	2b2b      	cmp	r3, #43	; 0x2b
 800ac76:	d02f      	beq.n	800acd8 <__gethex+0x124>
 800ac78:	2b2d      	cmp	r3, #45	; 0x2d
 800ac7a:	d031      	beq.n	800ace0 <__gethex+0x12c>
 800ac7c:	f04f 0b00 	mov.w	fp, #0
 800ac80:	1c69      	adds	r1, r5, #1
 800ac82:	7808      	ldrb	r0, [r1, #0]
 800ac84:	f7ff ff81 	bl	800ab8a <__hexdig_fun>
 800ac88:	1e42      	subs	r2, r0, #1
 800ac8a:	b2d2      	uxtb	r2, r2
 800ac8c:	2a18      	cmp	r2, #24
 800ac8e:	d82e      	bhi.n	800acee <__gethex+0x13a>
 800ac90:	f1a0 0210 	sub.w	r2, r0, #16
 800ac94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac98:	f7ff ff77 	bl	800ab8a <__hexdig_fun>
 800ac9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800aca0:	fa5f fc8c 	uxtb.w	ip, ip
 800aca4:	f1bc 0f18 	cmp.w	ip, #24
 800aca8:	d91d      	bls.n	800ace6 <__gethex+0x132>
 800acaa:	f1bb 0f00 	cmp.w	fp, #0
 800acae:	d000      	beq.n	800acb2 <__gethex+0xfe>
 800acb0:	4252      	negs	r2, r2
 800acb2:	4416      	add	r6, r2
 800acb4:	f8ca 1000 	str.w	r1, [sl]
 800acb8:	b1dc      	cbz	r4, 800acf2 <__gethex+0x13e>
 800acba:	9b01      	ldr	r3, [sp, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bf14      	ite	ne
 800acc0:	f04f 0800 	movne.w	r8, #0
 800acc4:	f04f 0806 	moveq.w	r8, #6
 800acc8:	4640      	mov	r0, r8
 800acca:	b005      	add	sp, #20
 800accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd0:	4645      	mov	r5, r8
 800acd2:	4626      	mov	r6, r4
 800acd4:	2401      	movs	r4, #1
 800acd6:	e7c7      	b.n	800ac68 <__gethex+0xb4>
 800acd8:	f04f 0b00 	mov.w	fp, #0
 800acdc:	1ca9      	adds	r1, r5, #2
 800acde:	e7d0      	b.n	800ac82 <__gethex+0xce>
 800ace0:	f04f 0b01 	mov.w	fp, #1
 800ace4:	e7fa      	b.n	800acdc <__gethex+0x128>
 800ace6:	230a      	movs	r3, #10
 800ace8:	fb03 0002 	mla	r0, r3, r2, r0
 800acec:	e7d0      	b.n	800ac90 <__gethex+0xdc>
 800acee:	4629      	mov	r1, r5
 800acf0:	e7e0      	b.n	800acb4 <__gethex+0x100>
 800acf2:	4621      	mov	r1, r4
 800acf4:	eba5 0308 	sub.w	r3, r5, r8
 800acf8:	3b01      	subs	r3, #1
 800acfa:	2b07      	cmp	r3, #7
 800acfc:	dc0a      	bgt.n	800ad14 <__gethex+0x160>
 800acfe:	4648      	mov	r0, r9
 800ad00:	f7fe f95a 	bl	8008fb8 <_Balloc>
 800ad04:	4604      	mov	r4, r0
 800ad06:	b940      	cbnz	r0, 800ad1a <__gethex+0x166>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	21e4      	movs	r1, #228	; 0xe4
 800ad0c:	4b61      	ldr	r3, [pc, #388]	; (800ae94 <__gethex+0x2e0>)
 800ad0e:	4862      	ldr	r0, [pc, #392]	; (800ae98 <__gethex+0x2e4>)
 800ad10:	f7ff feb6 	bl	800aa80 <__assert_func>
 800ad14:	3101      	adds	r1, #1
 800ad16:	105b      	asrs	r3, r3, #1
 800ad18:	e7ef      	b.n	800acfa <__gethex+0x146>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	469b      	mov	fp, r3
 800ad1e:	f100 0a14 	add.w	sl, r0, #20
 800ad22:	f8cd a004 	str.w	sl, [sp, #4]
 800ad26:	45a8      	cmp	r8, r5
 800ad28:	d344      	bcc.n	800adb4 <__gethex+0x200>
 800ad2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad2e:	4658      	mov	r0, fp
 800ad30:	f848 bb04 	str.w	fp, [r8], #4
 800ad34:	eba8 080a 	sub.w	r8, r8, sl
 800ad38:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800ad3c:	6122      	str	r2, [r4, #16]
 800ad3e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800ad42:	f7fe fa2b 	bl	800919c <__hi0bits>
 800ad46:	683d      	ldr	r5, [r7, #0]
 800ad48:	eba8 0800 	sub.w	r8, r8, r0
 800ad4c:	45a8      	cmp	r8, r5
 800ad4e:	dd59      	ble.n	800ae04 <__gethex+0x250>
 800ad50:	eba8 0805 	sub.w	r8, r8, r5
 800ad54:	4641      	mov	r1, r8
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7fe fda9 	bl	80098ae <__any_on>
 800ad5c:	4683      	mov	fp, r0
 800ad5e:	b1b8      	cbz	r0, 800ad90 <__gethex+0x1dc>
 800ad60:	f04f 0b01 	mov.w	fp, #1
 800ad64:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad68:	1159      	asrs	r1, r3, #5
 800ad6a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad6e:	f003 021f 	and.w	r2, r3, #31
 800ad72:	fa0b f202 	lsl.w	r2, fp, r2
 800ad76:	420a      	tst	r2, r1
 800ad78:	d00a      	beq.n	800ad90 <__gethex+0x1dc>
 800ad7a:	455b      	cmp	r3, fp
 800ad7c:	dd06      	ble.n	800ad8c <__gethex+0x1d8>
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f1a8 0102 	sub.w	r1, r8, #2
 800ad84:	f7fe fd93 	bl	80098ae <__any_on>
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d138      	bne.n	800adfe <__gethex+0x24a>
 800ad8c:	f04f 0b02 	mov.w	fp, #2
 800ad90:	4641      	mov	r1, r8
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7ff fea6 	bl	800aae4 <rshift>
 800ad98:	4446      	add	r6, r8
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	42b3      	cmp	r3, r6
 800ad9e:	da41      	bge.n	800ae24 <__gethex+0x270>
 800ada0:	4621      	mov	r1, r4
 800ada2:	4648      	mov	r0, r9
 800ada4:	f7fe f948 	bl	8009038 <_Bfree>
 800ada8:	2300      	movs	r3, #0
 800adaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adac:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	e789      	b.n	800acc8 <__gethex+0x114>
 800adb4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800adb8:	2a2e      	cmp	r2, #46	; 0x2e
 800adba:	d014      	beq.n	800ade6 <__gethex+0x232>
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	d106      	bne.n	800adce <__gethex+0x21a>
 800adc0:	9b01      	ldr	r3, [sp, #4]
 800adc2:	f843 bb04 	str.w	fp, [r3], #4
 800adc6:	f04f 0b00 	mov.w	fp, #0
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	465b      	mov	r3, fp
 800adce:	7828      	ldrb	r0, [r5, #0]
 800add0:	9303      	str	r3, [sp, #12]
 800add2:	f7ff feda 	bl	800ab8a <__hexdig_fun>
 800add6:	9b03      	ldr	r3, [sp, #12]
 800add8:	f000 000f 	and.w	r0, r0, #15
 800addc:	4098      	lsls	r0, r3
 800adde:	ea4b 0b00 	orr.w	fp, fp, r0
 800ade2:	3304      	adds	r3, #4
 800ade4:	e79f      	b.n	800ad26 <__gethex+0x172>
 800ade6:	45a8      	cmp	r8, r5
 800ade8:	d8e8      	bhi.n	800adbc <__gethex+0x208>
 800adea:	2201      	movs	r2, #1
 800adec:	4628      	mov	r0, r5
 800adee:	4928      	ldr	r1, [pc, #160]	; (800ae90 <__gethex+0x2dc>)
 800adf0:	9303      	str	r3, [sp, #12]
 800adf2:	f7ff fe1d 	bl	800aa30 <strncmp>
 800adf6:	9b03      	ldr	r3, [sp, #12]
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d1df      	bne.n	800adbc <__gethex+0x208>
 800adfc:	e793      	b.n	800ad26 <__gethex+0x172>
 800adfe:	f04f 0b03 	mov.w	fp, #3
 800ae02:	e7c5      	b.n	800ad90 <__gethex+0x1dc>
 800ae04:	da0b      	bge.n	800ae1e <__gethex+0x26a>
 800ae06:	eba5 0808 	sub.w	r8, r5, r8
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	4642      	mov	r2, r8
 800ae0e:	4648      	mov	r0, r9
 800ae10:	f7fe fb2a 	bl	8009468 <__lshift>
 800ae14:	4604      	mov	r4, r0
 800ae16:	eba6 0608 	sub.w	r6, r6, r8
 800ae1a:	f100 0a14 	add.w	sl, r0, #20
 800ae1e:	f04f 0b00 	mov.w	fp, #0
 800ae22:	e7ba      	b.n	800ad9a <__gethex+0x1e6>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	42b3      	cmp	r3, r6
 800ae28:	dd74      	ble.n	800af14 <__gethex+0x360>
 800ae2a:	1b9e      	subs	r6, r3, r6
 800ae2c:	42b5      	cmp	r5, r6
 800ae2e:	dc35      	bgt.n	800ae9c <__gethex+0x2e8>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d023      	beq.n	800ae7e <__gethex+0x2ca>
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d025      	beq.n	800ae86 <__gethex+0x2d2>
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d115      	bne.n	800ae6a <__gethex+0x2b6>
 800ae3e:	42b5      	cmp	r5, r6
 800ae40:	d113      	bne.n	800ae6a <__gethex+0x2b6>
 800ae42:	2d01      	cmp	r5, #1
 800ae44:	d10b      	bne.n	800ae5e <__gethex+0x2aa>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	9a02      	ldr	r2, [sp, #8]
 800ae4a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	2301      	movs	r3, #1
 800ae52:	6123      	str	r3, [r4, #16]
 800ae54:	f8ca 3000 	str.w	r3, [sl]
 800ae58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae5a:	601c      	str	r4, [r3, #0]
 800ae5c:	e734      	b.n	800acc8 <__gethex+0x114>
 800ae5e:	4620      	mov	r0, r4
 800ae60:	1e69      	subs	r1, r5, #1
 800ae62:	f7fe fd24 	bl	80098ae <__any_on>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d1ed      	bne.n	800ae46 <__gethex+0x292>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4648      	mov	r0, r9
 800ae6e:	f7fe f8e3 	bl	8009038 <_Bfree>
 800ae72:	2300      	movs	r3, #0
 800ae74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae76:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ae7a:	6013      	str	r3, [r2, #0]
 800ae7c:	e724      	b.n	800acc8 <__gethex+0x114>
 800ae7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1f2      	bne.n	800ae6a <__gethex+0x2b6>
 800ae84:	e7df      	b.n	800ae46 <__gethex+0x292>
 800ae86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1dc      	bne.n	800ae46 <__gethex+0x292>
 800ae8c:	e7ed      	b.n	800ae6a <__gethex+0x2b6>
 800ae8e:	bf00      	nop
 800ae90:	0800c1ac 	.word	0x0800c1ac
 800ae94:	0800c03f 	.word	0x0800c03f
 800ae98:	0800c356 	.word	0x0800c356
 800ae9c:	f106 38ff 	add.w	r8, r6, #4294967295
 800aea0:	f1bb 0f00 	cmp.w	fp, #0
 800aea4:	d133      	bne.n	800af0e <__gethex+0x35a>
 800aea6:	f1b8 0f00 	cmp.w	r8, #0
 800aeaa:	d004      	beq.n	800aeb6 <__gethex+0x302>
 800aeac:	4641      	mov	r1, r8
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7fe fcfd 	bl	80098ae <__any_on>
 800aeb4:	4683      	mov	fp, r0
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	ea4f 1268 	mov.w	r2, r8, asr #5
 800aebc:	f008 081f 	and.w	r8, r8, #31
 800aec0:	fa03 f308 	lsl.w	r3, r3, r8
 800aec4:	f04f 0802 	mov.w	r8, #2
 800aec8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aecc:	4631      	mov	r1, r6
 800aece:	4213      	tst	r3, r2
 800aed0:	4620      	mov	r0, r4
 800aed2:	bf18      	it	ne
 800aed4:	f04b 0b02 	orrne.w	fp, fp, #2
 800aed8:	1bad      	subs	r5, r5, r6
 800aeda:	f7ff fe03 	bl	800aae4 <rshift>
 800aede:	687e      	ldr	r6, [r7, #4]
 800aee0:	f1bb 0f00 	cmp.w	fp, #0
 800aee4:	d04a      	beq.n	800af7c <__gethex+0x3c8>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d016      	beq.n	800af1a <__gethex+0x366>
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d018      	beq.n	800af22 <__gethex+0x36e>
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d109      	bne.n	800af08 <__gethex+0x354>
 800aef4:	f01b 0f02 	tst.w	fp, #2
 800aef8:	d006      	beq.n	800af08 <__gethex+0x354>
 800aefa:	f8da 3000 	ldr.w	r3, [sl]
 800aefe:	ea4b 0b03 	orr.w	fp, fp, r3
 800af02:	f01b 0f01 	tst.w	fp, #1
 800af06:	d10f      	bne.n	800af28 <__gethex+0x374>
 800af08:	f048 0810 	orr.w	r8, r8, #16
 800af0c:	e036      	b.n	800af7c <__gethex+0x3c8>
 800af0e:	f04f 0b01 	mov.w	fp, #1
 800af12:	e7d0      	b.n	800aeb6 <__gethex+0x302>
 800af14:	f04f 0801 	mov.w	r8, #1
 800af18:	e7e2      	b.n	800aee0 <__gethex+0x32c>
 800af1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af1c:	f1c3 0301 	rsb	r3, r3, #1
 800af20:	930f      	str	r3, [sp, #60]	; 0x3c
 800af22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d0ef      	beq.n	800af08 <__gethex+0x354>
 800af28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af2c:	f104 0214 	add.w	r2, r4, #20
 800af30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	2300      	movs	r3, #0
 800af38:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800af3c:	4694      	mov	ip, r2
 800af3e:	f852 1b04 	ldr.w	r1, [r2], #4
 800af42:	f1b1 3fff 	cmp.w	r1, #4294967295
 800af46:	d01e      	beq.n	800af86 <__gethex+0x3d2>
 800af48:	3101      	adds	r1, #1
 800af4a:	f8cc 1000 	str.w	r1, [ip]
 800af4e:	f1b8 0f02 	cmp.w	r8, #2
 800af52:	f104 0214 	add.w	r2, r4, #20
 800af56:	d13d      	bne.n	800afd4 <__gethex+0x420>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	42ab      	cmp	r3, r5
 800af5e:	d10b      	bne.n	800af78 <__gethex+0x3c4>
 800af60:	2301      	movs	r3, #1
 800af62:	1169      	asrs	r1, r5, #5
 800af64:	f005 051f 	and.w	r5, r5, #31
 800af68:	fa03 f505 	lsl.w	r5, r3, r5
 800af6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af70:	421d      	tst	r5, r3
 800af72:	bf18      	it	ne
 800af74:	f04f 0801 	movne.w	r8, #1
 800af78:	f048 0820 	orr.w	r8, r8, #32
 800af7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af7e:	601c      	str	r4, [r3, #0]
 800af80:	9b02      	ldr	r3, [sp, #8]
 800af82:	601e      	str	r6, [r3, #0]
 800af84:	e6a0      	b.n	800acc8 <__gethex+0x114>
 800af86:	4290      	cmp	r0, r2
 800af88:	f842 3c04 	str.w	r3, [r2, #-4]
 800af8c:	d8d6      	bhi.n	800af3c <__gethex+0x388>
 800af8e:	68a2      	ldr	r2, [r4, #8]
 800af90:	4593      	cmp	fp, r2
 800af92:	db17      	blt.n	800afc4 <__gethex+0x410>
 800af94:	6861      	ldr	r1, [r4, #4]
 800af96:	4648      	mov	r0, r9
 800af98:	3101      	adds	r1, #1
 800af9a:	f7fe f80d 	bl	8008fb8 <_Balloc>
 800af9e:	4682      	mov	sl, r0
 800afa0:	b918      	cbnz	r0, 800afaa <__gethex+0x3f6>
 800afa2:	4602      	mov	r2, r0
 800afa4:	2184      	movs	r1, #132	; 0x84
 800afa6:	4b1a      	ldr	r3, [pc, #104]	; (800b010 <__gethex+0x45c>)
 800afa8:	e6b1      	b.n	800ad0e <__gethex+0x15a>
 800afaa:	6922      	ldr	r2, [r4, #16]
 800afac:	f104 010c 	add.w	r1, r4, #12
 800afb0:	3202      	adds	r2, #2
 800afb2:	0092      	lsls	r2, r2, #2
 800afb4:	300c      	adds	r0, #12
 800afb6:	f7fd f880 	bl	80080ba <memcpy>
 800afba:	4621      	mov	r1, r4
 800afbc:	4648      	mov	r0, r9
 800afbe:	f7fe f83b 	bl	8009038 <_Bfree>
 800afc2:	4654      	mov	r4, sl
 800afc4:	6922      	ldr	r2, [r4, #16]
 800afc6:	1c51      	adds	r1, r2, #1
 800afc8:	6121      	str	r1, [r4, #16]
 800afca:	2101      	movs	r1, #1
 800afcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800afd0:	6151      	str	r1, [r2, #20]
 800afd2:	e7bc      	b.n	800af4e <__gethex+0x39a>
 800afd4:	6921      	ldr	r1, [r4, #16]
 800afd6:	4559      	cmp	r1, fp
 800afd8:	dd0b      	ble.n	800aff2 <__gethex+0x43e>
 800afda:	2101      	movs	r1, #1
 800afdc:	4620      	mov	r0, r4
 800afde:	f7ff fd81 	bl	800aae4 <rshift>
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	3601      	adds	r6, #1
 800afe6:	42b3      	cmp	r3, r6
 800afe8:	f6ff aeda 	blt.w	800ada0 <__gethex+0x1ec>
 800afec:	f04f 0801 	mov.w	r8, #1
 800aff0:	e7c2      	b.n	800af78 <__gethex+0x3c4>
 800aff2:	f015 051f 	ands.w	r5, r5, #31
 800aff6:	d0f9      	beq.n	800afec <__gethex+0x438>
 800aff8:	9b01      	ldr	r3, [sp, #4]
 800affa:	f1c5 0520 	rsb	r5, r5, #32
 800affe:	441a      	add	r2, r3
 800b000:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b004:	f7fe f8ca 	bl	800919c <__hi0bits>
 800b008:	42a8      	cmp	r0, r5
 800b00a:	dbe6      	blt.n	800afda <__gethex+0x426>
 800b00c:	e7ee      	b.n	800afec <__gethex+0x438>
 800b00e:	bf00      	nop
 800b010:	0800c03f 	.word	0x0800c03f

0800b014 <L_shift>:
 800b014:	f1c2 0208 	rsb	r2, r2, #8
 800b018:	0092      	lsls	r2, r2, #2
 800b01a:	b570      	push	{r4, r5, r6, lr}
 800b01c:	f1c2 0620 	rsb	r6, r2, #32
 800b020:	6843      	ldr	r3, [r0, #4]
 800b022:	6804      	ldr	r4, [r0, #0]
 800b024:	fa03 f506 	lsl.w	r5, r3, r6
 800b028:	432c      	orrs	r4, r5
 800b02a:	40d3      	lsrs	r3, r2
 800b02c:	6004      	str	r4, [r0, #0]
 800b02e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b032:	4288      	cmp	r0, r1
 800b034:	d3f4      	bcc.n	800b020 <L_shift+0xc>
 800b036:	bd70      	pop	{r4, r5, r6, pc}

0800b038 <__match>:
 800b038:	b530      	push	{r4, r5, lr}
 800b03a:	6803      	ldr	r3, [r0, #0]
 800b03c:	3301      	adds	r3, #1
 800b03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b042:	b914      	cbnz	r4, 800b04a <__match+0x12>
 800b044:	6003      	str	r3, [r0, #0]
 800b046:	2001      	movs	r0, #1
 800b048:	bd30      	pop	{r4, r5, pc}
 800b04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b04e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b052:	2d19      	cmp	r5, #25
 800b054:	bf98      	it	ls
 800b056:	3220      	addls	r2, #32
 800b058:	42a2      	cmp	r2, r4
 800b05a:	d0f0      	beq.n	800b03e <__match+0x6>
 800b05c:	2000      	movs	r0, #0
 800b05e:	e7f3      	b.n	800b048 <__match+0x10>

0800b060 <__hexnan>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	2500      	movs	r5, #0
 800b066:	680b      	ldr	r3, [r1, #0]
 800b068:	4682      	mov	sl, r0
 800b06a:	115e      	asrs	r6, r3, #5
 800b06c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b070:	f013 031f 	ands.w	r3, r3, #31
 800b074:	bf18      	it	ne
 800b076:	3604      	addne	r6, #4
 800b078:	1f37      	subs	r7, r6, #4
 800b07a:	4690      	mov	r8, r2
 800b07c:	46b9      	mov	r9, r7
 800b07e:	463c      	mov	r4, r7
 800b080:	46ab      	mov	fp, r5
 800b082:	b087      	sub	sp, #28
 800b084:	6801      	ldr	r1, [r0, #0]
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	f846 5c04 	str.w	r5, [r6, #-4]
 800b08c:	9502      	str	r5, [sp, #8]
 800b08e:	784a      	ldrb	r2, [r1, #1]
 800b090:	1c4b      	adds	r3, r1, #1
 800b092:	9303      	str	r3, [sp, #12]
 800b094:	b342      	cbz	r2, 800b0e8 <__hexnan+0x88>
 800b096:	4610      	mov	r0, r2
 800b098:	9105      	str	r1, [sp, #20]
 800b09a:	9204      	str	r2, [sp, #16]
 800b09c:	f7ff fd75 	bl	800ab8a <__hexdig_fun>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d14f      	bne.n	800b144 <__hexnan+0xe4>
 800b0a4:	9a04      	ldr	r2, [sp, #16]
 800b0a6:	9905      	ldr	r1, [sp, #20]
 800b0a8:	2a20      	cmp	r2, #32
 800b0aa:	d818      	bhi.n	800b0de <__hexnan+0x7e>
 800b0ac:	9b02      	ldr	r3, [sp, #8]
 800b0ae:	459b      	cmp	fp, r3
 800b0b0:	dd13      	ble.n	800b0da <__hexnan+0x7a>
 800b0b2:	454c      	cmp	r4, r9
 800b0b4:	d206      	bcs.n	800b0c4 <__hexnan+0x64>
 800b0b6:	2d07      	cmp	r5, #7
 800b0b8:	dc04      	bgt.n	800b0c4 <__hexnan+0x64>
 800b0ba:	462a      	mov	r2, r5
 800b0bc:	4649      	mov	r1, r9
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f7ff ffa8 	bl	800b014 <L_shift>
 800b0c4:	4544      	cmp	r4, r8
 800b0c6:	d950      	bls.n	800b16a <__hexnan+0x10a>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f1a4 0904 	sub.w	r9, r4, #4
 800b0ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0d2:	461d      	mov	r5, r3
 800b0d4:	464c      	mov	r4, r9
 800b0d6:	f8cd b008 	str.w	fp, [sp, #8]
 800b0da:	9903      	ldr	r1, [sp, #12]
 800b0dc:	e7d7      	b.n	800b08e <__hexnan+0x2e>
 800b0de:	2a29      	cmp	r2, #41	; 0x29
 800b0e0:	d155      	bne.n	800b18e <__hexnan+0x12e>
 800b0e2:	3102      	adds	r1, #2
 800b0e4:	f8ca 1000 	str.w	r1, [sl]
 800b0e8:	f1bb 0f00 	cmp.w	fp, #0
 800b0ec:	d04f      	beq.n	800b18e <__hexnan+0x12e>
 800b0ee:	454c      	cmp	r4, r9
 800b0f0:	d206      	bcs.n	800b100 <__hexnan+0xa0>
 800b0f2:	2d07      	cmp	r5, #7
 800b0f4:	dc04      	bgt.n	800b100 <__hexnan+0xa0>
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f7ff ff8a 	bl	800b014 <L_shift>
 800b100:	4544      	cmp	r4, r8
 800b102:	d934      	bls.n	800b16e <__hexnan+0x10e>
 800b104:	4623      	mov	r3, r4
 800b106:	f1a8 0204 	sub.w	r2, r8, #4
 800b10a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b10e:	429f      	cmp	r7, r3
 800b110:	f842 1f04 	str.w	r1, [r2, #4]!
 800b114:	d2f9      	bcs.n	800b10a <__hexnan+0xaa>
 800b116:	1b3b      	subs	r3, r7, r4
 800b118:	f023 0303 	bic.w	r3, r3, #3
 800b11c:	3304      	adds	r3, #4
 800b11e:	3e03      	subs	r6, #3
 800b120:	3401      	adds	r4, #1
 800b122:	42a6      	cmp	r6, r4
 800b124:	bf38      	it	cc
 800b126:	2304      	movcc	r3, #4
 800b128:	2200      	movs	r2, #0
 800b12a:	4443      	add	r3, r8
 800b12c:	f843 2b04 	str.w	r2, [r3], #4
 800b130:	429f      	cmp	r7, r3
 800b132:	d2fb      	bcs.n	800b12c <__hexnan+0xcc>
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	b91b      	cbnz	r3, 800b140 <__hexnan+0xe0>
 800b138:	4547      	cmp	r7, r8
 800b13a:	d126      	bne.n	800b18a <__hexnan+0x12a>
 800b13c:	2301      	movs	r3, #1
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	2005      	movs	r0, #5
 800b142:	e025      	b.n	800b190 <__hexnan+0x130>
 800b144:	3501      	adds	r5, #1
 800b146:	2d08      	cmp	r5, #8
 800b148:	f10b 0b01 	add.w	fp, fp, #1
 800b14c:	dd06      	ble.n	800b15c <__hexnan+0xfc>
 800b14e:	4544      	cmp	r4, r8
 800b150:	d9c3      	bls.n	800b0da <__hexnan+0x7a>
 800b152:	2300      	movs	r3, #0
 800b154:	2501      	movs	r5, #1
 800b156:	f844 3c04 	str.w	r3, [r4, #-4]
 800b15a:	3c04      	subs	r4, #4
 800b15c:	6822      	ldr	r2, [r4, #0]
 800b15e:	f000 000f 	and.w	r0, r0, #15
 800b162:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	e7b7      	b.n	800b0da <__hexnan+0x7a>
 800b16a:	2508      	movs	r5, #8
 800b16c:	e7b5      	b.n	800b0da <__hexnan+0x7a>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0df      	beq.n	800b134 <__hexnan+0xd4>
 800b174:	f04f 32ff 	mov.w	r2, #4294967295
 800b178:	f1c3 0320 	rsb	r3, r3, #32
 800b17c:	40da      	lsrs	r2, r3
 800b17e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b182:	4013      	ands	r3, r2
 800b184:	f846 3c04 	str.w	r3, [r6, #-4]
 800b188:	e7d4      	b.n	800b134 <__hexnan+0xd4>
 800b18a:	3f04      	subs	r7, #4
 800b18c:	e7d2      	b.n	800b134 <__hexnan+0xd4>
 800b18e:	2004      	movs	r0, #4
 800b190:	b007      	add	sp, #28
 800b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b196 <__ascii_mbtowc>:
 800b196:	b082      	sub	sp, #8
 800b198:	b901      	cbnz	r1, 800b19c <__ascii_mbtowc+0x6>
 800b19a:	a901      	add	r1, sp, #4
 800b19c:	b142      	cbz	r2, 800b1b0 <__ascii_mbtowc+0x1a>
 800b19e:	b14b      	cbz	r3, 800b1b4 <__ascii_mbtowc+0x1e>
 800b1a0:	7813      	ldrb	r3, [r2, #0]
 800b1a2:	600b      	str	r3, [r1, #0]
 800b1a4:	7812      	ldrb	r2, [r2, #0]
 800b1a6:	1e10      	subs	r0, r2, #0
 800b1a8:	bf18      	it	ne
 800b1aa:	2001      	movne	r0, #1
 800b1ac:	b002      	add	sp, #8
 800b1ae:	4770      	bx	lr
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	e7fb      	b.n	800b1ac <__ascii_mbtowc+0x16>
 800b1b4:	f06f 0001 	mvn.w	r0, #1
 800b1b8:	e7f8      	b.n	800b1ac <__ascii_mbtowc+0x16>

0800b1ba <_realloc_r>:
 800b1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1be:	4680      	mov	r8, r0
 800b1c0:	4614      	mov	r4, r2
 800b1c2:	460e      	mov	r6, r1
 800b1c4:	b921      	cbnz	r1, 800b1d0 <_realloc_r+0x16>
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1cc:	f7fd be68 	b.w	8008ea0 <_malloc_r>
 800b1d0:	b92a      	cbnz	r2, 800b1de <_realloc_r+0x24>
 800b1d2:	f7fd fdf5 	bl	8008dc0 <_free_r>
 800b1d6:	4625      	mov	r5, r4
 800b1d8:	4628      	mov	r0, r5
 800b1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1de:	f000 f842 	bl	800b266 <_malloc_usable_size_r>
 800b1e2:	4284      	cmp	r4, r0
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	d802      	bhi.n	800b1ee <_realloc_r+0x34>
 800b1e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1ec:	d812      	bhi.n	800b214 <_realloc_r+0x5a>
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	f7fd fe55 	bl	8008ea0 <_malloc_r>
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d0ed      	beq.n	800b1d8 <_realloc_r+0x1e>
 800b1fc:	42bc      	cmp	r4, r7
 800b1fe:	4622      	mov	r2, r4
 800b200:	4631      	mov	r1, r6
 800b202:	bf28      	it	cs
 800b204:	463a      	movcs	r2, r7
 800b206:	f7fc ff58 	bl	80080ba <memcpy>
 800b20a:	4631      	mov	r1, r6
 800b20c:	4640      	mov	r0, r8
 800b20e:	f7fd fdd7 	bl	8008dc0 <_free_r>
 800b212:	e7e1      	b.n	800b1d8 <_realloc_r+0x1e>
 800b214:	4635      	mov	r5, r6
 800b216:	e7df      	b.n	800b1d8 <_realloc_r+0x1e>

0800b218 <__ascii_wctomb>:
 800b218:	4603      	mov	r3, r0
 800b21a:	4608      	mov	r0, r1
 800b21c:	b141      	cbz	r1, 800b230 <__ascii_wctomb+0x18>
 800b21e:	2aff      	cmp	r2, #255	; 0xff
 800b220:	d904      	bls.n	800b22c <__ascii_wctomb+0x14>
 800b222:	228a      	movs	r2, #138	; 0x8a
 800b224:	f04f 30ff 	mov.w	r0, #4294967295
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	4770      	bx	lr
 800b22c:	2001      	movs	r0, #1
 800b22e:	700a      	strb	r2, [r1, #0]
 800b230:	4770      	bx	lr
	...

0800b234 <fiprintf>:
 800b234:	b40e      	push	{r1, r2, r3}
 800b236:	b503      	push	{r0, r1, lr}
 800b238:	4601      	mov	r1, r0
 800b23a:	ab03      	add	r3, sp, #12
 800b23c:	4805      	ldr	r0, [pc, #20]	; (800b254 <fiprintf+0x20>)
 800b23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b242:	6800      	ldr	r0, [r0, #0]
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	f000 f83d 	bl	800b2c4 <_vfiprintf_r>
 800b24a:	b002      	add	sp, #8
 800b24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b250:	b003      	add	sp, #12
 800b252:	4770      	bx	lr
 800b254:	2000007c 	.word	0x2000007c

0800b258 <abort>:
 800b258:	2006      	movs	r0, #6
 800b25a:	b508      	push	{r3, lr}
 800b25c:	f000 fa0a 	bl	800b674 <raise>
 800b260:	2001      	movs	r0, #1
 800b262:	f7f6 ffc4 	bl	80021ee <_exit>

0800b266 <_malloc_usable_size_r>:
 800b266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b26a:	1f18      	subs	r0, r3, #4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bfbc      	itt	lt
 800b270:	580b      	ldrlt	r3, [r1, r0]
 800b272:	18c0      	addlt	r0, r0, r3
 800b274:	4770      	bx	lr

0800b276 <__sfputc_r>:
 800b276:	6893      	ldr	r3, [r2, #8]
 800b278:	b410      	push	{r4}
 800b27a:	3b01      	subs	r3, #1
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	6093      	str	r3, [r2, #8]
 800b280:	da07      	bge.n	800b292 <__sfputc_r+0x1c>
 800b282:	6994      	ldr	r4, [r2, #24]
 800b284:	42a3      	cmp	r3, r4
 800b286:	db01      	blt.n	800b28c <__sfputc_r+0x16>
 800b288:	290a      	cmp	r1, #10
 800b28a:	d102      	bne.n	800b292 <__sfputc_r+0x1c>
 800b28c:	bc10      	pop	{r4}
 800b28e:	f000 b933 	b.w	800b4f8 <__swbuf_r>
 800b292:	6813      	ldr	r3, [r2, #0]
 800b294:	1c58      	adds	r0, r3, #1
 800b296:	6010      	str	r0, [r2, #0]
 800b298:	7019      	strb	r1, [r3, #0]
 800b29a:	4608      	mov	r0, r1
 800b29c:	bc10      	pop	{r4}
 800b29e:	4770      	bx	lr

0800b2a0 <__sfputs_r>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460f      	mov	r7, r1
 800b2a6:	4614      	mov	r4, r2
 800b2a8:	18d5      	adds	r5, r2, r3
 800b2aa:	42ac      	cmp	r4, r5
 800b2ac:	d101      	bne.n	800b2b2 <__sfputs_r+0x12>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	e007      	b.n	800b2c2 <__sfputs_r+0x22>
 800b2b2:	463a      	mov	r2, r7
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ba:	f7ff ffdc 	bl	800b276 <__sfputc_r>
 800b2be:	1c43      	adds	r3, r0, #1
 800b2c0:	d1f3      	bne.n	800b2aa <__sfputs_r+0xa>
 800b2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2c4 <_vfiprintf_r>:
 800b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	4614      	mov	r4, r2
 800b2cc:	4698      	mov	r8, r3
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	b09d      	sub	sp, #116	; 0x74
 800b2d2:	b118      	cbz	r0, 800b2dc <_vfiprintf_r+0x18>
 800b2d4:	6a03      	ldr	r3, [r0, #32]
 800b2d6:	b90b      	cbnz	r3, 800b2dc <_vfiprintf_r+0x18>
 800b2d8:	f7fc fdae 	bl	8007e38 <__sinit>
 800b2dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2de:	07d9      	lsls	r1, r3, #31
 800b2e0:	d405      	bmi.n	800b2ee <_vfiprintf_r+0x2a>
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	059a      	lsls	r2, r3, #22
 800b2e6:	d402      	bmi.n	800b2ee <_vfiprintf_r+0x2a>
 800b2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ea:	f7fc fed6 	bl	800809a <__retarget_lock_acquire_recursive>
 800b2ee:	89ab      	ldrh	r3, [r5, #12]
 800b2f0:	071b      	lsls	r3, r3, #28
 800b2f2:	d501      	bpl.n	800b2f8 <_vfiprintf_r+0x34>
 800b2f4:	692b      	ldr	r3, [r5, #16]
 800b2f6:	b99b      	cbnz	r3, 800b320 <_vfiprintf_r+0x5c>
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f000 f93a 	bl	800b574 <__swsetup_r>
 800b300:	b170      	cbz	r0, 800b320 <_vfiprintf_r+0x5c>
 800b302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b304:	07dc      	lsls	r4, r3, #31
 800b306:	d504      	bpl.n	800b312 <_vfiprintf_r+0x4e>
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	b01d      	add	sp, #116	; 0x74
 800b30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	0598      	lsls	r0, r3, #22
 800b316:	d4f7      	bmi.n	800b308 <_vfiprintf_r+0x44>
 800b318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b31a:	f7fc febf 	bl	800809c <__retarget_lock_release_recursive>
 800b31e:	e7f3      	b.n	800b308 <_vfiprintf_r+0x44>
 800b320:	2300      	movs	r3, #0
 800b322:	9309      	str	r3, [sp, #36]	; 0x24
 800b324:	2320      	movs	r3, #32
 800b326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b32a:	2330      	movs	r3, #48	; 0x30
 800b32c:	f04f 0901 	mov.w	r9, #1
 800b330:	f8cd 800c 	str.w	r8, [sp, #12]
 800b334:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b4e4 <_vfiprintf_r+0x220>
 800b338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b33c:	4623      	mov	r3, r4
 800b33e:	469a      	mov	sl, r3
 800b340:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b344:	b10a      	cbz	r2, 800b34a <_vfiprintf_r+0x86>
 800b346:	2a25      	cmp	r2, #37	; 0x25
 800b348:	d1f9      	bne.n	800b33e <_vfiprintf_r+0x7a>
 800b34a:	ebba 0b04 	subs.w	fp, sl, r4
 800b34e:	d00b      	beq.n	800b368 <_vfiprintf_r+0xa4>
 800b350:	465b      	mov	r3, fp
 800b352:	4622      	mov	r2, r4
 800b354:	4629      	mov	r1, r5
 800b356:	4630      	mov	r0, r6
 800b358:	f7ff ffa2 	bl	800b2a0 <__sfputs_r>
 800b35c:	3001      	adds	r0, #1
 800b35e:	f000 80a9 	beq.w	800b4b4 <_vfiprintf_r+0x1f0>
 800b362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b364:	445a      	add	r2, fp
 800b366:	9209      	str	r2, [sp, #36]	; 0x24
 800b368:	f89a 3000 	ldrb.w	r3, [sl]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 80a1 	beq.w	800b4b4 <_vfiprintf_r+0x1f0>
 800b372:	2300      	movs	r3, #0
 800b374:	f04f 32ff 	mov.w	r2, #4294967295
 800b378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b37c:	f10a 0a01 	add.w	sl, sl, #1
 800b380:	9304      	str	r3, [sp, #16]
 800b382:	9307      	str	r3, [sp, #28]
 800b384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b388:	931a      	str	r3, [sp, #104]	; 0x68
 800b38a:	4654      	mov	r4, sl
 800b38c:	2205      	movs	r2, #5
 800b38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b392:	4854      	ldr	r0, [pc, #336]	; (800b4e4 <_vfiprintf_r+0x220>)
 800b394:	f7fc fe83 	bl	800809e <memchr>
 800b398:	9a04      	ldr	r2, [sp, #16]
 800b39a:	b9d8      	cbnz	r0, 800b3d4 <_vfiprintf_r+0x110>
 800b39c:	06d1      	lsls	r1, r2, #27
 800b39e:	bf44      	itt	mi
 800b3a0:	2320      	movmi	r3, #32
 800b3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3a6:	0713      	lsls	r3, r2, #28
 800b3a8:	bf44      	itt	mi
 800b3aa:	232b      	movmi	r3, #43	; 0x2b
 800b3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b6:	d015      	beq.n	800b3e4 <_vfiprintf_r+0x120>
 800b3b8:	4654      	mov	r4, sl
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	f04f 0c0a 	mov.w	ip, #10
 800b3c0:	9a07      	ldr	r2, [sp, #28]
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3c8:	3b30      	subs	r3, #48	; 0x30
 800b3ca:	2b09      	cmp	r3, #9
 800b3cc:	d94d      	bls.n	800b46a <_vfiprintf_r+0x1a6>
 800b3ce:	b1b0      	cbz	r0, 800b3fe <_vfiprintf_r+0x13a>
 800b3d0:	9207      	str	r2, [sp, #28]
 800b3d2:	e014      	b.n	800b3fe <_vfiprintf_r+0x13a>
 800b3d4:	eba0 0308 	sub.w	r3, r0, r8
 800b3d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	46a2      	mov	sl, r4
 800b3e0:	9304      	str	r3, [sp, #16]
 800b3e2:	e7d2      	b.n	800b38a <_vfiprintf_r+0xc6>
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	1d19      	adds	r1, r3, #4
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	9103      	str	r1, [sp, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	bfbb      	ittet	lt
 800b3f0:	425b      	neglt	r3, r3
 800b3f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b3f6:	9307      	strge	r3, [sp, #28]
 800b3f8:	9307      	strlt	r3, [sp, #28]
 800b3fa:	bfb8      	it	lt
 800b3fc:	9204      	strlt	r2, [sp, #16]
 800b3fe:	7823      	ldrb	r3, [r4, #0]
 800b400:	2b2e      	cmp	r3, #46	; 0x2e
 800b402:	d10c      	bne.n	800b41e <_vfiprintf_r+0x15a>
 800b404:	7863      	ldrb	r3, [r4, #1]
 800b406:	2b2a      	cmp	r3, #42	; 0x2a
 800b408:	d134      	bne.n	800b474 <_vfiprintf_r+0x1b0>
 800b40a:	9b03      	ldr	r3, [sp, #12]
 800b40c:	3402      	adds	r4, #2
 800b40e:	1d1a      	adds	r2, r3, #4
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	9203      	str	r2, [sp, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	bfb8      	it	lt
 800b418:	f04f 33ff 	movlt.w	r3, #4294967295
 800b41c:	9305      	str	r3, [sp, #20]
 800b41e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b4e8 <_vfiprintf_r+0x224>
 800b422:	2203      	movs	r2, #3
 800b424:	4650      	mov	r0, sl
 800b426:	7821      	ldrb	r1, [r4, #0]
 800b428:	f7fc fe39 	bl	800809e <memchr>
 800b42c:	b138      	cbz	r0, 800b43e <_vfiprintf_r+0x17a>
 800b42e:	2240      	movs	r2, #64	; 0x40
 800b430:	9b04      	ldr	r3, [sp, #16]
 800b432:	eba0 000a 	sub.w	r0, r0, sl
 800b436:	4082      	lsls	r2, r0
 800b438:	4313      	orrs	r3, r2
 800b43a:	3401      	adds	r4, #1
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b442:	2206      	movs	r2, #6
 800b444:	4829      	ldr	r0, [pc, #164]	; (800b4ec <_vfiprintf_r+0x228>)
 800b446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b44a:	f7fc fe28 	bl	800809e <memchr>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d03f      	beq.n	800b4d2 <_vfiprintf_r+0x20e>
 800b452:	4b27      	ldr	r3, [pc, #156]	; (800b4f0 <_vfiprintf_r+0x22c>)
 800b454:	bb1b      	cbnz	r3, 800b49e <_vfiprintf_r+0x1da>
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	3307      	adds	r3, #7
 800b45a:	f023 0307 	bic.w	r3, r3, #7
 800b45e:	3308      	adds	r3, #8
 800b460:	9303      	str	r3, [sp, #12]
 800b462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b464:	443b      	add	r3, r7
 800b466:	9309      	str	r3, [sp, #36]	; 0x24
 800b468:	e768      	b.n	800b33c <_vfiprintf_r+0x78>
 800b46a:	460c      	mov	r4, r1
 800b46c:	2001      	movs	r0, #1
 800b46e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b472:	e7a6      	b.n	800b3c2 <_vfiprintf_r+0xfe>
 800b474:	2300      	movs	r3, #0
 800b476:	f04f 0c0a 	mov.w	ip, #10
 800b47a:	4619      	mov	r1, r3
 800b47c:	3401      	adds	r4, #1
 800b47e:	9305      	str	r3, [sp, #20]
 800b480:	4620      	mov	r0, r4
 800b482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b486:	3a30      	subs	r2, #48	; 0x30
 800b488:	2a09      	cmp	r2, #9
 800b48a:	d903      	bls.n	800b494 <_vfiprintf_r+0x1d0>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0c6      	beq.n	800b41e <_vfiprintf_r+0x15a>
 800b490:	9105      	str	r1, [sp, #20]
 800b492:	e7c4      	b.n	800b41e <_vfiprintf_r+0x15a>
 800b494:	4604      	mov	r4, r0
 800b496:	2301      	movs	r3, #1
 800b498:	fb0c 2101 	mla	r1, ip, r1, r2
 800b49c:	e7f0      	b.n	800b480 <_vfiprintf_r+0x1bc>
 800b49e:	ab03      	add	r3, sp, #12
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	4b13      	ldr	r3, [pc, #76]	; (800b4f4 <_vfiprintf_r+0x230>)
 800b4a8:	a904      	add	r1, sp, #16
 800b4aa:	f7fb fe69 	bl	8007180 <_printf_float>
 800b4ae:	4607      	mov	r7, r0
 800b4b0:	1c78      	adds	r0, r7, #1
 800b4b2:	d1d6      	bne.n	800b462 <_vfiprintf_r+0x19e>
 800b4b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4b6:	07d9      	lsls	r1, r3, #31
 800b4b8:	d405      	bmi.n	800b4c6 <_vfiprintf_r+0x202>
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	059a      	lsls	r2, r3, #22
 800b4be:	d402      	bmi.n	800b4c6 <_vfiprintf_r+0x202>
 800b4c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4c2:	f7fc fdeb 	bl	800809c <__retarget_lock_release_recursive>
 800b4c6:	89ab      	ldrh	r3, [r5, #12]
 800b4c8:	065b      	lsls	r3, r3, #25
 800b4ca:	f53f af1d 	bmi.w	800b308 <_vfiprintf_r+0x44>
 800b4ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4d0:	e71c      	b.n	800b30c <_vfiprintf_r+0x48>
 800b4d2:	ab03      	add	r3, sp, #12
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	462a      	mov	r2, r5
 800b4d8:	4630      	mov	r0, r6
 800b4da:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <_vfiprintf_r+0x230>)
 800b4dc:	a904      	add	r1, sp, #16
 800b4de:	f7fc f8ef 	bl	80076c0 <_printf_i>
 800b4e2:	e7e4      	b.n	800b4ae <_vfiprintf_r+0x1ea>
 800b4e4:	0800c301 	.word	0x0800c301
 800b4e8:	0800c307 	.word	0x0800c307
 800b4ec:	0800c30b 	.word	0x0800c30b
 800b4f0:	08007181 	.word	0x08007181
 800b4f4:	0800b2a1 	.word	0x0800b2a1

0800b4f8 <__swbuf_r>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	460e      	mov	r6, r1
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	4605      	mov	r5, r0
 800b500:	b118      	cbz	r0, 800b50a <__swbuf_r+0x12>
 800b502:	6a03      	ldr	r3, [r0, #32]
 800b504:	b90b      	cbnz	r3, 800b50a <__swbuf_r+0x12>
 800b506:	f7fc fc97 	bl	8007e38 <__sinit>
 800b50a:	69a3      	ldr	r3, [r4, #24]
 800b50c:	60a3      	str	r3, [r4, #8]
 800b50e:	89a3      	ldrh	r3, [r4, #12]
 800b510:	071a      	lsls	r2, r3, #28
 800b512:	d525      	bpl.n	800b560 <__swbuf_r+0x68>
 800b514:	6923      	ldr	r3, [r4, #16]
 800b516:	b31b      	cbz	r3, 800b560 <__swbuf_r+0x68>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	6922      	ldr	r2, [r4, #16]
 800b51c:	b2f6      	uxtb	r6, r6
 800b51e:	1a98      	subs	r0, r3, r2
 800b520:	6963      	ldr	r3, [r4, #20]
 800b522:	4637      	mov	r7, r6
 800b524:	4283      	cmp	r3, r0
 800b526:	dc04      	bgt.n	800b532 <__swbuf_r+0x3a>
 800b528:	4621      	mov	r1, r4
 800b52a:	4628      	mov	r0, r5
 800b52c:	f7ff fa58 	bl	800a9e0 <_fflush_r>
 800b530:	b9e0      	cbnz	r0, 800b56c <__swbuf_r+0x74>
 800b532:	68a3      	ldr	r3, [r4, #8]
 800b534:	3b01      	subs	r3, #1
 800b536:	60a3      	str	r3, [r4, #8]
 800b538:	6823      	ldr	r3, [r4, #0]
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	6022      	str	r2, [r4, #0]
 800b53e:	701e      	strb	r6, [r3, #0]
 800b540:	6962      	ldr	r2, [r4, #20]
 800b542:	1c43      	adds	r3, r0, #1
 800b544:	429a      	cmp	r2, r3
 800b546:	d004      	beq.n	800b552 <__swbuf_r+0x5a>
 800b548:	89a3      	ldrh	r3, [r4, #12]
 800b54a:	07db      	lsls	r3, r3, #31
 800b54c:	d506      	bpl.n	800b55c <__swbuf_r+0x64>
 800b54e:	2e0a      	cmp	r6, #10
 800b550:	d104      	bne.n	800b55c <__swbuf_r+0x64>
 800b552:	4621      	mov	r1, r4
 800b554:	4628      	mov	r0, r5
 800b556:	f7ff fa43 	bl	800a9e0 <_fflush_r>
 800b55a:	b938      	cbnz	r0, 800b56c <__swbuf_r+0x74>
 800b55c:	4638      	mov	r0, r7
 800b55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b560:	4621      	mov	r1, r4
 800b562:	4628      	mov	r0, r5
 800b564:	f000 f806 	bl	800b574 <__swsetup_r>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d0d5      	beq.n	800b518 <__swbuf_r+0x20>
 800b56c:	f04f 37ff 	mov.w	r7, #4294967295
 800b570:	e7f4      	b.n	800b55c <__swbuf_r+0x64>
	...

0800b574 <__swsetup_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4b2a      	ldr	r3, [pc, #168]	; (800b620 <__swsetup_r+0xac>)
 800b578:	4605      	mov	r5, r0
 800b57a:	6818      	ldr	r0, [r3, #0]
 800b57c:	460c      	mov	r4, r1
 800b57e:	b118      	cbz	r0, 800b588 <__swsetup_r+0x14>
 800b580:	6a03      	ldr	r3, [r0, #32]
 800b582:	b90b      	cbnz	r3, 800b588 <__swsetup_r+0x14>
 800b584:	f7fc fc58 	bl	8007e38 <__sinit>
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b58e:	0718      	lsls	r0, r3, #28
 800b590:	d422      	bmi.n	800b5d8 <__swsetup_r+0x64>
 800b592:	06d9      	lsls	r1, r3, #27
 800b594:	d407      	bmi.n	800b5a6 <__swsetup_r+0x32>
 800b596:	2309      	movs	r3, #9
 800b598:	602b      	str	r3, [r5, #0]
 800b59a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b59e:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	e034      	b.n	800b610 <__swsetup_r+0x9c>
 800b5a6:	0758      	lsls	r0, r3, #29
 800b5a8:	d512      	bpl.n	800b5d0 <__swsetup_r+0x5c>
 800b5aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ac:	b141      	cbz	r1, 800b5c0 <__swsetup_r+0x4c>
 800b5ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	d002      	beq.n	800b5bc <__swsetup_r+0x48>
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f7fd fc02 	bl	8008dc0 <_free_r>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	6363      	str	r3, [r4, #52]	; 0x34
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5c6:	81a3      	strh	r3, [r4, #12]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	6063      	str	r3, [r4, #4]
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	6023      	str	r3, [r4, #0]
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	f043 0308 	orr.w	r3, r3, #8
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	b94b      	cbnz	r3, 800b5f0 <__swsetup_r+0x7c>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e6:	d003      	beq.n	800b5f0 <__swsetup_r+0x7c>
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f000 f883 	bl	800b6f6 <__smakebuf_r>
 800b5f0:	89a0      	ldrh	r0, [r4, #12]
 800b5f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5f6:	f010 0301 	ands.w	r3, r0, #1
 800b5fa:	d00a      	beq.n	800b612 <__swsetup_r+0x9e>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60a3      	str	r3, [r4, #8]
 800b600:	6963      	ldr	r3, [r4, #20]
 800b602:	425b      	negs	r3, r3
 800b604:	61a3      	str	r3, [r4, #24]
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	b943      	cbnz	r3, 800b61c <__swsetup_r+0xa8>
 800b60a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b60e:	d1c4      	bne.n	800b59a <__swsetup_r+0x26>
 800b610:	bd38      	pop	{r3, r4, r5, pc}
 800b612:	0781      	lsls	r1, r0, #30
 800b614:	bf58      	it	pl
 800b616:	6963      	ldrpl	r3, [r4, #20]
 800b618:	60a3      	str	r3, [r4, #8]
 800b61a:	e7f4      	b.n	800b606 <__swsetup_r+0x92>
 800b61c:	2000      	movs	r0, #0
 800b61e:	e7f7      	b.n	800b610 <__swsetup_r+0x9c>
 800b620:	2000007c 	.word	0x2000007c

0800b624 <_raise_r>:
 800b624:	291f      	cmp	r1, #31
 800b626:	b538      	push	{r3, r4, r5, lr}
 800b628:	4604      	mov	r4, r0
 800b62a:	460d      	mov	r5, r1
 800b62c:	d904      	bls.n	800b638 <_raise_r+0x14>
 800b62e:	2316      	movs	r3, #22
 800b630:	6003      	str	r3, [r0, #0]
 800b632:	f04f 30ff 	mov.w	r0, #4294967295
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b63a:	b112      	cbz	r2, 800b642 <_raise_r+0x1e>
 800b63c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b640:	b94b      	cbnz	r3, 800b656 <_raise_r+0x32>
 800b642:	4620      	mov	r0, r4
 800b644:	f000 f830 	bl	800b6a8 <_getpid_r>
 800b648:	462a      	mov	r2, r5
 800b64a:	4601      	mov	r1, r0
 800b64c:	4620      	mov	r0, r4
 800b64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b652:	f000 b817 	b.w	800b684 <_kill_r>
 800b656:	2b01      	cmp	r3, #1
 800b658:	d00a      	beq.n	800b670 <_raise_r+0x4c>
 800b65a:	1c59      	adds	r1, r3, #1
 800b65c:	d103      	bne.n	800b666 <_raise_r+0x42>
 800b65e:	2316      	movs	r3, #22
 800b660:	6003      	str	r3, [r0, #0]
 800b662:	2001      	movs	r0, #1
 800b664:	e7e7      	b.n	800b636 <_raise_r+0x12>
 800b666:	2400      	movs	r4, #0
 800b668:	4628      	mov	r0, r5
 800b66a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b66e:	4798      	blx	r3
 800b670:	2000      	movs	r0, #0
 800b672:	e7e0      	b.n	800b636 <_raise_r+0x12>

0800b674 <raise>:
 800b674:	4b02      	ldr	r3, [pc, #8]	; (800b680 <raise+0xc>)
 800b676:	4601      	mov	r1, r0
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	f7ff bfd3 	b.w	800b624 <_raise_r>
 800b67e:	bf00      	nop
 800b680:	2000007c 	.word	0x2000007c

0800b684 <_kill_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	2300      	movs	r3, #0
 800b688:	4d06      	ldr	r5, [pc, #24]	; (800b6a4 <_kill_r+0x20>)
 800b68a:	4604      	mov	r4, r0
 800b68c:	4608      	mov	r0, r1
 800b68e:	4611      	mov	r1, r2
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	f7f6 fd9c 	bl	80021ce <_kill>
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	d102      	bne.n	800b6a0 <_kill_r+0x1c>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	b103      	cbz	r3, 800b6a0 <_kill_r+0x1c>
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	bd38      	pop	{r3, r4, r5, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000984 	.word	0x20000984

0800b6a8 <_getpid_r>:
 800b6a8:	f7f6 bd8a 	b.w	80021c0 <_getpid>

0800b6ac <__swhatbuf_r>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b4:	4615      	mov	r5, r2
 800b6b6:	2900      	cmp	r1, #0
 800b6b8:	461e      	mov	r6, r3
 800b6ba:	b096      	sub	sp, #88	; 0x58
 800b6bc:	da0c      	bge.n	800b6d8 <__swhatbuf_r+0x2c>
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b6c6:	bf0c      	ite	eq
 800b6c8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b6cc:	2340      	movne	r3, #64	; 0x40
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	6031      	str	r1, [r6, #0]
 800b6d2:	602b      	str	r3, [r5, #0]
 800b6d4:	b016      	add	sp, #88	; 0x58
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}
 800b6d8:	466a      	mov	r2, sp
 800b6da:	f000 f849 	bl	800b770 <_fstat_r>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	dbed      	blt.n	800b6be <__swhatbuf_r+0x12>
 800b6e2:	9901      	ldr	r1, [sp, #4]
 800b6e4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b6e8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b6ec:	4259      	negs	r1, r3
 800b6ee:	4159      	adcs	r1, r3
 800b6f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f4:	e7eb      	b.n	800b6ce <__swhatbuf_r+0x22>

0800b6f6 <__smakebuf_r>:
 800b6f6:	898b      	ldrh	r3, [r1, #12]
 800b6f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6fa:	079d      	lsls	r5, r3, #30
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460c      	mov	r4, r1
 800b700:	d507      	bpl.n	800b712 <__smakebuf_r+0x1c>
 800b702:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b706:	6023      	str	r3, [r4, #0]
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	2301      	movs	r3, #1
 800b70c:	6163      	str	r3, [r4, #20]
 800b70e:	b002      	add	sp, #8
 800b710:	bd70      	pop	{r4, r5, r6, pc}
 800b712:	466a      	mov	r2, sp
 800b714:	ab01      	add	r3, sp, #4
 800b716:	f7ff ffc9 	bl	800b6ac <__swhatbuf_r>
 800b71a:	9900      	ldr	r1, [sp, #0]
 800b71c:	4605      	mov	r5, r0
 800b71e:	4630      	mov	r0, r6
 800b720:	f7fd fbbe 	bl	8008ea0 <_malloc_r>
 800b724:	b948      	cbnz	r0, 800b73a <__smakebuf_r+0x44>
 800b726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72a:	059a      	lsls	r2, r3, #22
 800b72c:	d4ef      	bmi.n	800b70e <__smakebuf_r+0x18>
 800b72e:	f023 0303 	bic.w	r3, r3, #3
 800b732:	f043 0302 	orr.w	r3, r3, #2
 800b736:	81a3      	strh	r3, [r4, #12]
 800b738:	e7e3      	b.n	800b702 <__smakebuf_r+0xc>
 800b73a:	89a3      	ldrh	r3, [r4, #12]
 800b73c:	6020      	str	r0, [r4, #0]
 800b73e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b742:	81a3      	strh	r3, [r4, #12]
 800b744:	9b00      	ldr	r3, [sp, #0]
 800b746:	6120      	str	r0, [r4, #16]
 800b748:	6163      	str	r3, [r4, #20]
 800b74a:	9b01      	ldr	r3, [sp, #4]
 800b74c:	b15b      	cbz	r3, 800b766 <__smakebuf_r+0x70>
 800b74e:	4630      	mov	r0, r6
 800b750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b754:	f000 f81e 	bl	800b794 <_isatty_r>
 800b758:	b128      	cbz	r0, 800b766 <__smakebuf_r+0x70>
 800b75a:	89a3      	ldrh	r3, [r4, #12]
 800b75c:	f023 0303 	bic.w	r3, r3, #3
 800b760:	f043 0301 	orr.w	r3, r3, #1
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	89a3      	ldrh	r3, [r4, #12]
 800b768:	431d      	orrs	r5, r3
 800b76a:	81a5      	strh	r5, [r4, #12]
 800b76c:	e7cf      	b.n	800b70e <__smakebuf_r+0x18>
	...

0800b770 <_fstat_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	2300      	movs	r3, #0
 800b774:	4d06      	ldr	r5, [pc, #24]	; (800b790 <_fstat_r+0x20>)
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	4611      	mov	r1, r2
 800b77c:	602b      	str	r3, [r5, #0]
 800b77e:	f7f6 fd84 	bl	800228a <_fstat>
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	d102      	bne.n	800b78c <_fstat_r+0x1c>
 800b786:	682b      	ldr	r3, [r5, #0]
 800b788:	b103      	cbz	r3, 800b78c <_fstat_r+0x1c>
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	bd38      	pop	{r3, r4, r5, pc}
 800b78e:	bf00      	nop
 800b790:	20000984 	.word	0x20000984

0800b794 <_isatty_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	2300      	movs	r3, #0
 800b798:	4d05      	ldr	r5, [pc, #20]	; (800b7b0 <_isatty_r+0x1c>)
 800b79a:	4604      	mov	r4, r0
 800b79c:	4608      	mov	r0, r1
 800b79e:	602b      	str	r3, [r5, #0]
 800b7a0:	f7f6 fd82 	bl	80022a8 <_isatty>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_isatty_r+0x1a>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_isatty_r+0x1a>
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	20000984 	.word	0x20000984

0800b7b4 <_init>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	bf00      	nop
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr

0800b7c0 <_fini>:
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c2:	bf00      	nop
 800b7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c6:	bc08      	pop	{r3}
 800b7c8:	469e      	mov	lr, r3
 800b7ca:	4770      	bx	lr


ltc2944_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf0  0800b6e0  0800b6e0  0001b6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2d0  0800c2d0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c2d0  0800c2d0  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c2d0  0800c2d0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d0  0800c2d0  0001c2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2d4  0800c2d4  0001c2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c2d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000075c  200001ec  0800c4c4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000948  0800c4c4  00020948  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebe2  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bbb  00000000  00000000  0002ee3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  000319f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a15  00000000  00000000  00032730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d026  00000000  00000000  00033145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d0d  00000000  00000000  0005016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cfcc  00000000  00000000  00062e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049b0  00000000  00000000  000efe44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000f47f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b6c4 	.word	0x0800b6c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800b6c4 	.word	0x0800b6c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4605      	mov	r5, r0
 8001068:	460c      	mov	r4, r1
 800106a:	2200      	movs	r2, #0
 800106c:	2300      	movs	r3, #0
 800106e:	4628      	mov	r0, r5
 8001070:	4621      	mov	r1, r4
 8001072:	f7ff fca3 	bl	80009bc <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff fa19 	bl	80004d8 <__aeabi_dmul>
 80010a6:	f7ff fcef 	bl	8000a88 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff f99a 	bl	80003e4 <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	f7ff fce0 	bl	8000a88 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000

080010d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_ADC1_Init+0x74>)
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <MX_ADC1_Init+0x78>)
 80010e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_ADC1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_ADC1_Init+0x74>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_ADC1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_ADC1_Init+0x74>)
 80010fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001102:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_ADC1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_ADC1_Init+0x74>)
 800110c:	2201      	movs	r2, #1
 800110e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_ADC1_Init+0x74>)
 8001112:	f001 f9c3 	bl	800249c <HAL_ADC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800111c:	f000 fd1c 	bl	8001b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001120:	2308      	movs	r3, #8
 8001122:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001124:	2301      	movs	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001128:	2303      	movs	r3, #3
 800112a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_ADC1_Init+0x74>)
 8001132:	f001 fb39 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800113c:	f000 fd0c 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000208 	.word	0x20000208
 800114c:	40012400 	.word	0x40012400

08001150 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <HAL_ADC_MspInit+0x6c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d121      	bne.n	80011b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_ADC_MspInit+0x70>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a0:	2301      	movs	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a4:	2303      	movs	r3, #3
 80011a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_ADC_MspInit+0x74>)
 80011b0:	f002 f80e 	bl	80031d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40012400 	.word	0x40012400
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_DMA_Init+0x38>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <MX_DMA_Init+0x38>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_DMA_Init+0x38>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2010      	movs	r0, #16
 80011ec:	f001 fd47 	bl	8002c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011f0:	2010      	movs	r0, #16
 80011f2:	f001 fd60 	bl	8002cb6 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_GPIO_Init+0xa8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a23      	ldr	r2, [pc, #140]	; (80012ac <MX_GPIO_Init+0xa8>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_GPIO_Init+0xa8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0320 	and.w	r3, r3, #32
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_GPIO_Init+0xa8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_GPIO_Init+0xa8>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <MX_GPIO_Init+0xa8>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_GPIO_Init+0xa8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800127e:	480c      	ldr	r0, [pc, #48]	; (80012b0 <MX_GPIO_Init+0xac>)
 8001280:	f002 f92a 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_BLU_Pin;
 8001284:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2302      	movs	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <MX_GPIO_Init+0xac>)
 800129e:	f001 ff97 	bl	80031d0 <HAL_GPIO_Init>

}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40011000 	.word	0x40011000

080012b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2C1_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <MX_I2C1_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_I2C1_Init+0x50>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_I2C1_Init+0x58>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_I2C1_Init+0x50>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_I2C1_Init+0x50>)
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_I2C1_Init+0x50>)
 80012f2:	f002 f923 	bl	800353c <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 fc2c 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000238 	.word	0x20000238
 8001308:	40005400 	.word	0x40005400
 800130c:	000186a0 	.word	0x000186a0

08001310 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2C2_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_I2C2_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_I2C2_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <MX_I2C2_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_I2C2_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_I2C2_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_I2C2_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_I2C2_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_I2C2_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_I2C2_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_I2C2_Init+0x50>)
 800134e:	f002 f8f5 	bl	800353c <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 fbfe 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000028c 	.word	0x2000028c
 8001364:	40005800 	.word	0x40005800
 8001368:	00061a80 	.word	0x00061a80

0800136c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a42      	ldr	r2, [pc, #264]	; (8001490 <HAL_I2C_MspInit+0x124>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d152      	bne.n	8001432 <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a40      	ldr	r2, [pc, #256]	; (8001494 <HAL_I2C_MspInit+0x128>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b3e      	ldr	r3, [pc, #248]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a4:	23c0      	movs	r3, #192	; 0xc0
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a8:	2312      	movs	r3, #18
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4838      	ldr	r0, [pc, #224]	; (8001498 <HAL_I2C_MspInit+0x12c>)
 80013b8:	f001 ff0a 	bl	80031d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <HAL_I2C_MspInit+0x128>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	4a34      	ldr	r2, [pc, #208]	; (8001494 <HAL_I2C_MspInit+0x128>)
 80013c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c6:	61d3      	str	r3, [r2, #28]
 80013c8:	4b32      	ldr	r3, [pc, #200]	; (8001494 <HAL_I2C_MspInit+0x128>)
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80013d4:	4b31      	ldr	r3, [pc, #196]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013d6:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <HAL_I2C_MspInit+0x134>)
 80013d8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013da:	4b30      	ldr	r3, [pc, #192]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013dc:	2210      	movs	r2, #16
 80013de:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <HAL_I2C_MspInit+0x130>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_I2C_MspInit+0x130>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001404:	4825      	ldr	r0, [pc, #148]	; (800149c <HAL_I2C_MspInit+0x130>)
 8001406:	f001 fc71 	bl	8002cec <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001410:	f000 fba2 	bl	8001b58 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <HAL_I2C_MspInit+0x130>)
 8001418:	635a      	str	r2, [r3, #52]	; 0x34
 800141a:	4a20      	ldr	r2, [pc, #128]	; (800149c <HAL_I2C_MspInit+0x130>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	201f      	movs	r0, #31
 8001426:	f001 fc2a 	bl	8002c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800142a:	201f      	movs	r0, #31
 800142c:	f001 fc43 	bl	8002cb6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001430:	e029      	b.n	8001486 <HAL_I2C_MspInit+0x11a>
  else if(i2cHandle->Instance==I2C2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <HAL_I2C_MspInit+0x138>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d124      	bne.n	8001486 <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <HAL_I2C_MspInit+0x128>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001454:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	2312      	movs	r3, #18
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_I2C_MspInit+0x12c>)
 800146a:	f001 feb1 	bl	80031d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_I2C_MspInit+0x128>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_I2C_MspInit+0x128>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_I2C_MspInit+0x128>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	; 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40005400 	.word	0x40005400
 8001494:	40021000 	.word	0x40021000
 8001498:	40010c00 	.word	0x40010c00
 800149c:	200002e0 	.word	0x200002e0
 80014a0:	4002006c 	.word	0x4002006c
 80014a4:	40005800 	.word	0x40005800

080014a8 <LTC2944_Init>:

ltc2944_data_t ltc2944_data;
uint16_t Prescaler_Table[] = {1, 4, 16, 64, 256, 1024, 4096};
//uint16_t prescaler_value;

HAL_StatusTypeDef LTC2944_Init(ltc2944_configuration_t ltc2944){
 80014a8:	b084      	sub	sp, #16
 80014aa:	b5b0      	push	{r4, r5, r7, lr}
 80014ac:	b088      	sub	sp, #32
 80014ae:	af04      	add	r7, sp, #16
 80014b0:	f107 0420 	add.w	r4, r7, #32
 80014b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ctrl_reg = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	71bb      	strb	r3, [r7, #6]
	uint16_t prescaler_value;
	float psc_temp;
	uint8_t status;

	// calculate prescalar value based on the battery parameters
	psc_temp = (4096.0 * ltc2944.batt_capacity * ltc2944.sense_resistor)
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ffb2 	bl	8000428 <__aeabi_f2d>
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <LTC2944_Init+0x188>)
 80014ca:	f7ff f805 	bl	80004d8 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4614      	mov	r4, r2
 80014d4:	461d      	mov	r5, r3
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffa5 	bl	8000428 <__aeabi_f2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4620      	mov	r0, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7fe fff7 	bl	80004d8 <__aeabi_dmul>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
					/ (65535.0 * FACTOR_CHARGE_QLSB * 50);
 80014f2:	a34b      	add	r3, pc, #300	; (adr r3, 8001620 <LTC2944_Init+0x178>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f918 	bl	800072c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
	psc_temp = (4096.0 * ltc2944.batt_capacity * ltc2944.sense_resistor)
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fae0 	bl	8000ac8 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	60bb      	str	r3, [r7, #8]
	// loop through the Prescaler_Table[] to find the best match of
	// prescalar based on battery and sense resistor values.
	for(uint8_t i = 0; i <= sizeof(Prescaler_Table); i++){
 800150c:	2300      	movs	r3, #0
 800150e:	737b      	strb	r3, [r7, #13]
 8001510:	e01b      	b.n	800154a <LTC2944_Init+0xa2>
		if((uint16_t)psc_temp <= Prescaler_Table[i]){
 8001512:	68b8      	ldr	r0, [r7, #8]
 8001514:	f7ff fd86 	bl	8001024 <__aeabi_f2uiz>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	7b7b      	ldrb	r3, [r7, #13]
 800151e:	4945      	ldr	r1, [pc, #276]	; (8001634 <LTC2944_Init+0x18c>)
 8001520:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001524:	429a      	cmp	r2, r3
 8001526:	d80d      	bhi.n	8001544 <LTC2944_Init+0x9c>
			if(i != 0){
 8001528:	7b7b      	ldrb	r3, [r7, #13]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <LTC2944_Init+0x98>
				if((uint16_t)psc_temp >= Prescaler_Table[i-1]);
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f7ff fd78 	bl	8001024 <__aeabi_f2uiz>
				prescaler_value = Prescaler_Table[i];
 8001534:	7b7b      	ldrb	r3, [r7, #13]
 8001536:	4a3f      	ldr	r2, [pc, #252]	; (8001634 <LTC2944_Init+0x18c>)
 8001538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153c:	81fb      	strh	r3, [r7, #14]
				break;			// break from the for loop when a
 800153e:	e007      	b.n	8001550 <LTC2944_Init+0xa8>
								// match is found, otherwise it will
								// loop through the whole table
			}
			else{
				prescaler_value = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i <= sizeof(Prescaler_Table); i++){
 8001544:	7b7b      	ldrb	r3, [r7, #13]
 8001546:	3301      	adds	r3, #1
 8001548:	737b      	strb	r3, [r7, #13]
 800154a:	7b7b      	ldrb	r3, [r7, #13]
 800154c:	2b0e      	cmp	r3, #14
 800154e:	d9e0      	bls.n	8001512 <LTC2944_Init+0x6a>
		}
	}

	// calculate the amount of charge represented by the
	// least significant bit (qLSB) of the accumulated charge registers
	ltc2944_data.qLSB = FACTOR_CHARGE_QLSB * (50.0 / ltc2944.sense_resistor)
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ff68 	bl	8000428 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	f04f 0000 	mov.w	r0, #0
 8001560:	4935      	ldr	r1, [pc, #212]	; (8001638 <LTC2944_Init+0x190>)
 8001562:	f7ff f8e3 	bl	800072c <__aeabi_ddiv>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	a32e      	add	r3, pc, #184	; (adr r3, 8001628 <LTC2944_Init+0x180>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7fe ffb0 	bl	80004d8 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
								* (prescaler_value / 4096.0);
 8001580:	89fb      	ldrh	r3, [r7, #14]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff3e 	bl	8000404 <__aeabi_i2d>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <LTC2944_Init+0x188>)
 800158e:	f7ff f8cd 	bl	800072c <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4620      	mov	r0, r4
 8001598:	4629      	mov	r1, r5
 800159a:	f7fe ff9d 	bl	80004d8 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fa8f 	bl	8000ac8 <__aeabi_d2f>
 80015aa:	4603      	mov	r3, r0
	ltc2944_data.qLSB = FACTOR_CHARGE_QLSB * (50.0 / ltc2944.sense_resistor)
 80015ac:	4a23      	ldr	r2, [pc, #140]	; (800163c <LTC2944_Init+0x194>)
 80015ae:	6113      	str	r3, [r2, #16]

	// calculate the value to put in the control register
	ctrl_reg |= ltc2944.adc_mode << 6;
 80015b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b4:	019b      	lsls	r3, r3, #6
 80015b6:	b25a      	sxtb	r2, r3
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	71bb      	strb	r3, [r7, #6]
	ctrl_reg |= (uint8_t)prescaler_value << 3;
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	b25a      	sxtb	r2, r3
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	71bb      	strb	r3, [r7, #6]
	ctrl_reg |= ltc2944.alcc_mode << 1;
 80015d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	71bb      	strb	r3, [r7, #6]

	status = HAL_I2C_Mem_Write(&(ltc2944.i2c_handle), LTC2944_ADDRESS,
 80015ec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80015f0:	230a      	movs	r3, #10
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	2301      	movs	r3, #1
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	1dbb      	adds	r3, r7, #6
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	2201      	movs	r2, #1
 8001600:	21c8      	movs	r1, #200	; 0xc8
 8001602:	f002 f8f3 	bl	80037ec <HAL_I2C_Mem_Write>
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
			CONTROL_REGISTER, 1, &ctrl_reg, 1, 10);

	return status;
 800160a:	79fb      	ldrb	r3, [r7, #7]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001616:	b004      	add	sp, #16
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	02fffd00 	.word	0x02fffd00
 8001624:	4130ffef 	.word	0x4130ffef
 8001628:	60000000 	.word	0x60000000
 800162c:	3fd5c28f 	.word	0x3fd5c28f
 8001630:	40b00000 	.word	0x40b00000
 8001634:	20000000 	.word	0x20000000
 8001638:	40490000 	.word	0x40490000
 800163c:	20000324 	.word	0x20000324

08001640 <LTC2944_Get_Battery_Data>:


uint8_t LTC2944_Get_Battery_Data(ltc2944_configuration_t *ltc2944){
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af04      	add	r7, sp, #16
 8001646:	6078      	str	r0, [r7, #4]
	float temp;
	uint8_t status;
	uint8_t data_buffer[NUMBER_OF_REGISTERS];

	status = HAL_I2C_Mem_Read(&(ltc2944->i2c_handle), LTC2944_ADDRESS, STATUS_REGISTER,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f103 000c 	add.w	r0, r3, #12
 800164e:	230a      	movs	r3, #10
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	2317      	movs	r3, #23
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	2200      	movs	r2, #0
 8001660:	21c8      	movs	r1, #200	; 0xc8
 8001662:	f002 f9bd 	bl	80039e0 <HAL_I2C_Mem_Read>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			1 , data_buffer, NUMBER_OF_REGISTERS, 10);

	if(status == HAL_OK){
 800166c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 8088 	bne.w	8001786 <LTC2944_Get_Battery_Data+0x146>

		temp = (data_buffer[ACCUMULATED_CHARGE_MSB]) << 8 | (data_buffer[ACCUMULATED_CHARGE_LSB]);
 8001676:	7abb      	ldrb	r3, [r7, #10]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	7afa      	ldrb	r2, [r7, #11]
 800167c:	4313      	orrs	r3, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fb2c 	bl	8000cdc <__aeabi_i2f>
 8001684:	4603      	mov	r3, r0
 8001686:	623b      	str	r3, [r7, #32]
		ltc2944_data.acc_charge = ltc2944_data.qLSB * temp;
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	6a39      	ldr	r1, [r7, #32]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fb78 	bl	8000d84 <__aeabi_fmul>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 800169a:	601a      	str	r2, [r3, #0]

		temp = (data_buffer[VOLTAGE_MSB] << 8) | (data_buffer[VOLTAGE_LSB]);
 800169c:	7c3b      	ldrb	r3, [r7, #16]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	7c7a      	ldrb	r2, [r7, #17]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fb19 	bl	8000cdc <__aeabi_i2f>
 80016aa:	4603      	mov	r3, r0
 80016ac:	623b      	str	r3, [r7, #32]
		ltc2944_data.voltage = 70.8 * (temp/65535.0);
 80016ae:	6a38      	ldr	r0, [r7, #32]
 80016b0:	f7fe feba 	bl	8000428 <__aeabi_f2d>
 80016b4:	a342      	add	r3, pc, #264	; (adr r3, 80017c0 <LTC2944_Get_Battery_Data+0x180>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7ff f837 	bl	800072c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	a340      	add	r3, pc, #256	; (adr r3, 80017c8 <LTC2944_Get_Battery_Data+0x188>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe ff04 	bl	80004d8 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff f9f6 	bl	8000ac8 <__aeabi_d2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4a3e      	ldr	r2, [pc, #248]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 80016e0:	6053      	str	r3, [r2, #4]

		temp = (data_buffer[CURRENT_MSB] << 8) | (data_buffer)[CURRENT_LSB];
 80016e2:	7dbb      	ldrb	r3, [r7, #22]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	7dfa      	ldrb	r2, [r7, #23]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff faf6 	bl	8000cdc <__aeabi_i2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	623b      	str	r3, [r7, #32]
		ltc2944_data.current = (64 / ltc2944->sense_resistor) * ((temp - 32767.0) / 32767.0);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 4085 	mov.w	r0, #1115684864	; 0x42800000
 80016fe:	f7ff fbf5 	bl	8000eec <__aeabi_fdiv>
 8001702:	4603      	mov	r3, r0
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe fe8f 	bl	8000428 <__aeabi_f2d>
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	6a38      	ldr	r0, [r7, #32]
 8001710:	f7fe fe8a 	bl	8000428 <__aeabi_f2d>
 8001714:	a32e      	add	r3, pc, #184	; (adr r3, 80017d0 <LTC2944_Get_Battery_Data+0x190>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe fd25 	bl	8000168 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	a32a      	add	r3, pc, #168	; (adr r3, 80017d0 <LTC2944_Get_Battery_Data+0x190>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fffe 	bl	800072c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fece 	bl	80004d8 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff f9c0 	bl	8000ac8 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 800174c:	6093      	str	r3, [r2, #8]

		temp = (data_buffer[TEMPERATURE_MSB] << 8) | (data_buffer[TEMPERATURE_LSB]);
 800174e:	7f3b      	ldrb	r3, [r7, #28]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	7f7a      	ldrb	r2, [r7, #29]
 8001754:	4313      	orrs	r3, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fac0 	bl	8000cdc <__aeabi_i2f>
 800175c:	4603      	mov	r3, r0
 800175e:	623b      	str	r3, [r7, #32]
		ltc2944_data.temperature = (501 * (temp / 65535)) - 273;
 8001760:	491e      	ldr	r1, [pc, #120]	; (80017dc <LTC2944_Get_Battery_Data+0x19c>)
 8001762:	6a38      	ldr	r0, [r7, #32]
 8001764:	f7ff fbc2 	bl	8000eec <__aeabi_fdiv>
 8001768:	4603      	mov	r3, r0
 800176a:	491d      	ldr	r1, [pc, #116]	; (80017e0 <LTC2944_Get_Battery_Data+0x1a0>)
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fb09 	bl	8000d84 <__aeabi_fmul>
 8001772:	4603      	mov	r3, r0
 8001774:	491b      	ldr	r1, [pc, #108]	; (80017e4 <LTC2944_Get_Battery_Data+0x1a4>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f9fa 	bl	8000b70 <__aeabi_fsub>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	e013      	b.n	80017ae <LTC2944_Get_Battery_Data+0x16e>
	}
	else{
		ltc2944_data.acc_charge =	0;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
		ltc2944_data.current = 		0;
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
		ltc2944_data.qLSB = 		0;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
		ltc2944_data.temperature = 	0;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
		ltc2944_data.voltage = 		0;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <LTC2944_Get_Battery_Data+0x198>)
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
	}

	return status;
 80017ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	f3af 8000 	nop.w
 80017c0:	00000000 	.word	0x00000000
 80017c4:	40efffe0 	.word	0x40efffe0
 80017c8:	33333333 	.word	0x33333333
 80017cc:	4051b333 	.word	0x4051b333
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40dfffc0 	.word	0x40dfffc0
 80017d8:	20000324 	.word	0x20000324
 80017dc:	477fff00 	.word	0x477fff00
 80017e0:	43fa8000 	.word	0x43fa8000
 80017e4:	43888000 	.word	0x43888000

080017e8 <LTC2944_Get_Current>:
	}else{
		return 0;
	}
}

float LTC2944_Get_Current(ltc2944_configuration_t *ltc2944){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	uint8_t status = LTC2944_Get_Battery_Data(ltc2944);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff25 	bl	8001640 <LTC2944_Get_Battery_Data>
 80017f6:	4603      	mov	r3, r0
 80017f8:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d104      	bne.n	800180a <LTC2944_Get_Current+0x22>
		float data = ltc2944_data.current;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <LTC2944_Get_Current+0x30>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	60bb      	str	r3, [r7, #8]
		return data;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	e001      	b.n	800180e <LTC2944_Get_Current+0x26>
	}else{
		return 0;
 800180a:	f04f 0300 	mov.w	r3, #0
	}
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000324 	.word	0x20000324

0800181c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001824:	1d39      	adds	r1, r7, #4
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	2201      	movs	r2, #1
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <__io_putchar+0x20>)
 800182e:	f005 fa13 	bl	8006c58 <HAL_UART_Transmit>
  return ch;
 8001832:	687b      	ldr	r3, [r7, #4]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200007b0 	.word	0x200007b0

08001840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001844:	f000 fda4 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001848:	f000 f88c 	bl	8001964 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemClock_Config();
 800184c:	f000 f88a 	bl	8001964 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001850:	f7ff fcd8 	bl	8001204 <MX_GPIO_Init>
  MX_DMA_Init();
 8001854:	f7ff fcb8 	bl	80011c8 <MX_DMA_Init>
  MX_I2C2_Init();
 8001858:	f7ff fd5a 	bl	8001310 <MX_I2C2_Init>
  MX_I2C1_Init();
 800185c:	f7ff fd2a 	bl	80012b4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001860:	f7ff fc38 	bl	80010d4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001864:	f000 fcfa 	bl	800225c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001868:	f000 f9c6 	bl	8001bf8 <ssd1306_Init>
  HAL_ADC_Start(&hadc1);
 800186c:	4831      	ldr	r0, [pc, #196]	; (8001934 <main+0xf4>)
 800186e:	f000 feed 	bl	800264c <HAL_ADC_Start>
//  state_t state = IDLE;

  Device_Config();
 8001872:	f000 f8d3 	bl	8001a1c <Device_Config>

  myOLED_char(1, 12, "Volt = ");
 8001876:	4a30      	ldr	r2, [pc, #192]	; (8001938 <main+0xf8>)
 8001878:	210c      	movs	r1, #12
 800187a:	2001      	movs	r0, #1
 800187c:	f000 f8fe 	bl	8001a7c <myOLED_char>
  myOLED_char(1, 24, "Curr = ");
 8001880:	4a2e      	ldr	r2, [pc, #184]	; (800193c <main+0xfc>)
 8001882:	2118      	movs	r1, #24
 8001884:	2001      	movs	r0, #1
 8001886:	f000 f8f9 	bl	8001a7c <myOLED_char>
  myOLED_char(1, 36, "Chg  = ");
 800188a:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <main+0x100>)
 800188c:	2124      	movs	r1, #36	; 0x24
 800188e:	2001      	movs	r0, #1
 8001890:	f000 f8f4 	bl	8001a7c <myOLED_char>
  myOLED_char(1, 48, "Temp = ");
 8001894:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <main+0x104>)
 8001896:	2130      	movs	r1, #48	; 0x30
 8001898:	2001      	movs	r0, #1
 800189a:	f000 f8ef 	bl	8001a7c <myOLED_char>
  ssd1306_UpdateScreen();
 800189e:	f000 fa37 	bl	8001d10 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 80018a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a6:	f000 fdd5 	bl	8002454 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tick = HAL_GetTick();
 80018aa:	f000 fdc9 	bl	8002440 <HAL_GetTick>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a25      	ldr	r2, [pc, #148]	; (8001948 <main+0x108>)
 80018b2:	6013      	str	r3, [r2, #0]
	  myOLED_int(1, 2, tick);
 80018b4:	4b24      	ldr	r3, [pc, #144]	; (8001948 <main+0x108>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	2102      	movs	r1, #2
 80018be:	2001      	movs	r0, #1
 80018c0:	f000 f922 	bl	8001b08 <myOLED_int>
//	  default:
//	  }
//
//	  status = HAL_I2C_Mem_Read(&hi2c2, LTC2944_ADDRESS, VOLTAGE_MSB, 1, buf, 2, 1000);

	  if(tick - prev_tick >= blink_delay){
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <main+0x108>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b20      	ldr	r3, [pc, #128]	; (800194c <main+0x10c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	4a20      	ldr	r2, [pc, #128]	; (8001950 <main+0x110>)
 80018d0:	8812      	ldrh	r2, [r2, #0]
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d3e9      	bcc.n	80018aa <main+0x6a>
		  prev_tick = tick;
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <main+0x108>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1c      	ldr	r2, [pc, #112]	; (800194c <main+0x10c>)
 80018dc:	6013      	str	r3, [r2, #0]
//		  voltage = LTC2944_Get_Voltage(&ltc2944_struct);
		  current = LTC2944_Get_Current(&ltc2944_struct);
 80018de:	481d      	ldr	r0, [pc, #116]	; (8001954 <main+0x114>)
 80018e0:	f7ff ff82 	bl	80017e8 <LTC2944_Get_Current>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <main+0x118>)
 80018e8:	6013      	str	r3, [r2, #0]
//		  charge = LTC2944_Get_Charge(&ltc2944_struct);
//		  temperature = LTC2944_Get_Temperature(&ltc2944_struct);

		  myOLED_float(50, 12, ltc2944_data.voltage);
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <main+0x11c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	461a      	mov	r2, r3
 80018f0:	210c      	movs	r1, #12
 80018f2:	2032      	movs	r0, #50	; 0x32
 80018f4:	f000 f8de 	bl	8001ab4 <myOLED_float>
		  myOLED_float(50, 24, ltc2944_data.current);
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <main+0x11c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	461a      	mov	r2, r3
 80018fe:	2118      	movs	r1, #24
 8001900:	2032      	movs	r0, #50	; 0x32
 8001902:	f000 f8d7 	bl	8001ab4 <myOLED_float>
		  myOLED_float(50, 36, ltc2944_data.acc_charge);
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <main+0x11c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	2124      	movs	r1, #36	; 0x24
 800190e:	2032      	movs	r0, #50	; 0x32
 8001910:	f000 f8d0 	bl	8001ab4 <myOLED_float>
		  myOLED_float(50, 48, ltc2944_data.temperature);
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <main+0x11c>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	461a      	mov	r2, r3
 800191a:	2130      	movs	r1, #48	; 0x30
 800191c:	2032      	movs	r0, #50	; 0x32
 800191e:	f000 f8c9 	bl	8001ab4 <myOLED_float>


		  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 8001922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001926:	480e      	ldr	r0, [pc, #56]	; (8001960 <main+0x120>)
 8001928:	f001 fdee 	bl	8003508 <HAL_GPIO_TogglePin>

		  ssd1306_UpdateScreen();
 800192c:	f000 f9f0 	bl	8001d10 <ssd1306_UpdateScreen>
	  tick = HAL_GetTick();
 8001930:	e7bb      	b.n	80018aa <main+0x6a>
 8001932:	bf00      	nop
 8001934:	20000208 	.word	0x20000208
 8001938:	0800b6e0 	.word	0x0800b6e0
 800193c:	0800b6e8 	.word	0x0800b6e8
 8001940:	0800b6f0 	.word	0x0800b6f0
 8001944:	0800b6f8 	.word	0x0800b6f8
 8001948:	20000338 	.word	0x20000338
 800194c:	2000033c 	.word	0x2000033c
 8001950:	2000000e 	.word	0x2000000e
 8001954:	20000340 	.word	0x20000340
 8001958:	200003a0 	.word	0x200003a0
 800195c:	20000324 	.word	0x20000324
 8001960:	40011000 	.word	0x40011000

08001964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b094      	sub	sp, #80	; 0x50
 8001968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	2228      	movs	r2, #40	; 0x28
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f006 fa9b 	bl	8007eae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001994:	2301      	movs	r3, #1
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a2:	2301      	movs	r3, #1
 80019a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a6:	2302      	movs	r3, #2
 80019a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 fc36 	bl	800622c <HAL_RCC_OscConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019c6:	f000 f8c7 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ca:	230f      	movs	r3, #15
 80019cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2102      	movs	r1, #2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 fea2 	bl	8006730 <HAL_RCC_ClockConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019f2:	f000 f8b1 	bl	8001b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019f6:	2302      	movs	r3, #2
 80019f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4618      	mov	r0, r3
 8001a04:	f005 f822 	bl	8006a4c <HAL_RCCEx_PeriphCLKConfig>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a0e:	f000 f8a3 	bl	8001b58 <Error_Handler>
  }
}
 8001a12:	bf00      	nop
 8001a14:	3750      	adds	r7, #80	; 0x50
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <Device_Config>:

/* USER CODE BEGIN 4 */
void Device_Config(void){
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b095      	sub	sp, #84	; 0x54
 8001a20:	af14      	add	r7, sp, #80	; 0x50
	ltc2944_struct.adc_mode = 			Automatic_Mode;
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <Device_Config+0x50>)
 8001a24:	2203      	movs	r2, #3
 8001a26:	701a      	strb	r2, [r3, #0]
	ltc2944_struct.alcc_mode = 			ALCC_Disable;
 8001a28:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <Device_Config+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	705a      	strb	r2, [r3, #1]
	ltc2944_struct.sense_resistor = 	5;
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <Device_Config+0x50>)
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <Device_Config+0x54>)
 8001a32:	605a      	str	r2, [r3, #4]
	ltc2944_struct.batt_capacity =		3000;
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <Device_Config+0x50>)
 8001a36:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <Device_Config+0x58>)
 8001a38:	609a      	str	r2, [r3, #8]
	ltc2944_struct.i2c_handle = 		hi2c2;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <Device_Config+0x50>)
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <Device_Config+0x5c>)
 8001a3e:	330c      	adds	r3, #12
 8001a40:	4611      	mov	r1, r2
 8001a42:	2254      	movs	r2, #84	; 0x54
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 fac0 	bl	8007fca <memcpy>

	LTC2944_Init(ltc2944_struct);
 8001a4a:	4c08      	ldr	r4, [pc, #32]	; (8001a6c <Device_Config+0x50>)
 8001a4c:	4668      	mov	r0, sp
 8001a4e:	f104 0310 	add.w	r3, r4, #16
 8001a52:	2250      	movs	r2, #80	; 0x50
 8001a54:	4619      	mov	r1, r3
 8001a56:	f006 fab8 	bl	8007fca <memcpy>
 8001a5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a5e:	f7ff fd23 	bl	80014a8 <LTC2944_Init>
}
 8001a62:	bf00      	nop
 8001a64:	3704      	adds	r7, #4
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000340 	.word	0x20000340
 8001a70:	40a00000 	.word	0x40a00000
 8001a74:	453b8000 	.word	0x453b8000
 8001a78:	2000028c 	.word	0x2000028c

08001a7c <myOLED_char>:

void myOLED_char(uint16_t cursorX, uint16_t cursorY, char* data){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	603a      	str	r2, [r7, #0]
 8001a86:	80fb      	strh	r3, [r7, #6]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	88ba      	ldrh	r2, [r7, #4]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fa62 	bl	8001f60 <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_7x10, White);
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <myOLED_char+0x34>)
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	ca06      	ldmia	r2, {r1, r2}
 8001aa2:	6838      	ldr	r0, [r7, #0]
 8001aa4:	f000 fa36 	bl	8001f14 <ssd1306_WriteString>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000010 	.word	0x20000010

08001ab4 <myOLED_float>:

void myOLED_float(uint16_t cursorX, uint16_t cursorY, float data){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	603a      	str	r2, [r7, #0]
 8001abe:	80fb      	strh	r3, [r7, #6]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	80bb      	strh	r3, [r7, #4]
	char str_data[10];

	sprintf(str_data, "%.3f", data);
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f7fe fcaf 	bl	8000428 <__aeabi_f2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	f107 000c 	add.w	r0, r7, #12
 8001ad2:	490b      	ldr	r1, [pc, #44]	; (8001b00 <myOLED_float+0x4c>)
 8001ad4:	f006 f96e 	bl	8007db4 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	88ba      	ldrh	r2, [r7, #4]
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 fa3c 	bl	8001f60 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <myOLED_float+0x50>)
 8001aea:	f107 000c 	add.w	r0, r7, #12
 8001aee:	2301      	movs	r3, #1
 8001af0:	ca06      	ldmia	r2, {r1, r2}
 8001af2:	f000 fa0f 	bl	8001f14 <ssd1306_WriteString>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	0800b700 	.word	0x0800b700
 8001b04:	20000010 	.word	0x20000010

08001b08 <myOLED_int>:

void myOLED_int(uint16_t cursorX, uint16_t cursorY, uint16_t data){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
 8001b12:	460b      	mov	r3, r1
 8001b14:	80bb      	strh	r3, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	807b      	strh	r3, [r7, #2]
	char str_data[10];

	sprintf(str_data, "%d", data);
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	490b      	ldr	r1, [pc, #44]	; (8001b50 <myOLED_int+0x48>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f006 f946 	bl	8007db4 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	88ba      	ldrh	r2, [r7, #4]
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fa14 	bl	8001f60 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <myOLED_int+0x4c>)
 8001b3a:	f107 000c 	add.w	r0, r7, #12
 8001b3e:	2301      	movs	r3, #1
 8001b40:	ca06      	ldmia	r2, {r1, r2}
 8001b42:	f000 f9e7 	bl	8001f14 <ssd1306_WriteString>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	0800b708 	.word	0x0800b708
 8001b54:	20000010 	.word	0x20000010

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>

08001b62 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
	...

08001b70 <ssd1306_WriteCommand>:
/*
 * DMA settings
 * ADD I2Cx_TX in normal mode. Byte | Byte
 * In NVIC Settings, Enable "I2Cx event interrupt"
 */
void ssd1306_WriteCommand(uint8_t byte) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001b7a:	bf00      	nop
 8001b7c:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <ssd1306_WriteCommand+0x34>)
 8001b7e:	f002 fc95 	bl	80044ac <HAL_I2C_GetState>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b20      	cmp	r3, #32
 8001b86:	d1f9      	bne.n	8001b7c <ssd1306_WriteCommand+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
 8001b88:	2301      	movs	r3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2301      	movs	r3, #1
 8001b92:	2200      	movs	r2, #0
 8001b94:	2178      	movs	r1, #120	; 0x78
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <ssd1306_WriteCommand+0x34>)
 8001b98:	f002 f98a 	bl	8003eb0 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
#endif
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000238 	.word	0x20000238

08001ba8 <ssd1306_WriteData>:


void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8001bb2:	bf00      	nop
 8001bb4:	480a      	ldr	r0, [pc, #40]	; (8001be0 <ssd1306_WriteData+0x38>)
 8001bb6:	f002 fc79 	bl	80044ac <HAL_I2C_GetState>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d1f9      	bne.n	8001bb4 <ssd1306_WriteData+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	2178      	movs	r1, #120	; 0x78
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <ssd1306_WriteData+0x38>)
 8001bd2:	f002 f96d 	bl	8003eb0 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
#endif
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000238 	.word	0x20000238

08001be4 <HAL_I2C_MemTxCpltCallback>:


#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
	...

08001bf8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001bfc:	f7ff ffb1 	bl	8001b62 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c00:	2064      	movs	r0, #100	; 0x64
 8001c02:	f000 fc27 	bl	8002454 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 f9d6 	bl	8001fb8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c0c:	2020      	movs	r0, #32
 8001c0e:	f7ff ffaf 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff ffac 	bl	8001b70 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c18:	20b0      	movs	r0, #176	; 0xb0
 8001c1a:	f7ff ffa9 	bl	8001b70 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c1e:	20c8      	movs	r0, #200	; 0xc8
 8001c20:	f7ff ffa6 	bl	8001b70 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ffa3 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c2a:	2010      	movs	r0, #16
 8001c2c:	f7ff ffa0 	bl	8001b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c30:	2040      	movs	r0, #64	; 0x40
 8001c32:	f7ff ff9d 	bl	8001b70 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c36:	20ff      	movs	r0, #255	; 0xff
 8001c38:	f000 f9aa 	bl	8001f90 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c3c:	20a1      	movs	r0, #161	; 0xa1
 8001c3e:	f7ff ff97 	bl	8001b70 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c42:	20a6      	movs	r0, #166	; 0xa6
 8001c44:	f7ff ff94 	bl	8001b70 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c48:	20a8      	movs	r0, #168	; 0xa8
 8001c4a:	f7ff ff91 	bl	8001b70 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c4e:	203f      	movs	r0, #63	; 0x3f
 8001c50:	f7ff ff8e 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c54:	20a4      	movs	r0, #164	; 0xa4
 8001c56:	f7ff ff8b 	bl	8001b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c5a:	20d3      	movs	r0, #211	; 0xd3
 8001c5c:	f7ff ff88 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff ff85 	bl	8001b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c66:	20d5      	movs	r0, #213	; 0xd5
 8001c68:	f7ff ff82 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c6c:	20f0      	movs	r0, #240	; 0xf0
 8001c6e:	f7ff ff7f 	bl	8001b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c72:	20d9      	movs	r0, #217	; 0xd9
 8001c74:	f7ff ff7c 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001c78:	2022      	movs	r0, #34	; 0x22
 8001c7a:	f7ff ff79 	bl	8001b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001c7e:	20da      	movs	r0, #218	; 0xda
 8001c80:	f7ff ff76 	bl	8001b70 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001c84:	2012      	movs	r0, #18
 8001c86:	f7ff ff73 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001c8a:	20db      	movs	r0, #219	; 0xdb
 8001c8c:	f7ff ff70 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001c90:	2020      	movs	r0, #32
 8001c92:	f7ff ff6d 	bl	8001b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001c96:	208d      	movs	r0, #141	; 0x8d
 8001c98:	f7ff ff6a 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001c9c:	2014      	movs	r0, #20
 8001c9e:	f7ff ff67 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f000 f988 	bl	8001fb8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f000 f80f 	bl	8001ccc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001cae:	f000 f82f 	bl	8001d10 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <ssd1306_Init+0xd0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <ssd1306_Init+0xd0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001cbe:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <ssd1306_Init+0xd0>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	711a      	strb	r2, [r3, #4]
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200007a4 	.word	0x200007a4

08001ccc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e00d      	b.n	8001cf8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <ssd1306_Fill+0x1a>
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	e000      	b.n	8001ce8 <ssd1306_Fill+0x1c>
 8001ce6:	21ff      	movs	r1, #255	; 0xff
 8001ce8:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <ssd1306_Fill+0x40>)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	460a      	mov	r2, r1
 8001cf0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfe:	d3ed      	bcc.n	8001cdc <ssd1306_Fill+0x10>
    }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	200003a4 	.word	0x200003a4

08001d10 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d16:	2300      	movs	r3, #0
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	e016      	b.n	8001d4a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	3b50      	subs	r3, #80	; 0x50
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff24 	bl	8001b70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff ff21 	bl	8001b70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d2e:	2010      	movs	r0, #16
 8001d30:	f7ff ff1e 	bl	8001b70 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	01db      	lsls	r3, r3, #7
 8001d38:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <ssd1306_UpdateScreen+0x4c>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff32 	bl	8001ba8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	3301      	adds	r3, #1
 8001d48:	71fb      	strb	r3, [r7, #7]
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b07      	cmp	r3, #7
 8001d4e:	d9e5      	bls.n	8001d1c <ssd1306_UpdateScreen+0xc>
    }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003a4 	.word	0x200003a4

08001d60 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	71bb      	strb	r3, [r7, #6]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db3d      	blt.n	8001df6 <ssd1306_DrawPixel+0x96>
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d7e:	d83a      	bhi.n	8001df6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001d80:	797b      	ldrb	r3, [r7, #5]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d11a      	bne.n	8001dbc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d86:	79fa      	ldrb	r2, [r7, #7]
 8001d88:	79bb      	ldrb	r3, [r7, #6]
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	b2d8      	uxtb	r0, r3
 8001d8e:	4603      	mov	r3, r0
 8001d90:	01db      	lsls	r3, r3, #7
 8001d92:	4413      	add	r3, r2
 8001d94:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <ssd1306_DrawPixel+0xa0>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	2101      	movs	r1, #1
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b259      	sxtb	r1, r3
 8001dac:	79fa      	ldrb	r2, [r7, #7]
 8001dae:	4603      	mov	r3, r0
 8001db0:	01db      	lsls	r3, r3, #7
 8001db2:	4413      	add	r3, r2
 8001db4:	b2c9      	uxtb	r1, r1
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <ssd1306_DrawPixel+0xa0>)
 8001db8:	54d1      	strb	r1, [r2, r3]
 8001dba:	e01d      	b.n	8001df8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	b2d8      	uxtb	r0, r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	01db      	lsls	r3, r3, #7
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a0d      	ldr	r2, [pc, #52]	; (8001e00 <ssd1306_DrawPixel+0xa0>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	b25a      	sxtb	r2, r3
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	4013      	ands	r3, r2
 8001de4:	b259      	sxtb	r1, r3
 8001de6:	79fa      	ldrb	r2, [r7, #7]
 8001de8:	4603      	mov	r3, r0
 8001dea:	01db      	lsls	r3, r3, #7
 8001dec:	4413      	add	r3, r2
 8001dee:	b2c9      	uxtb	r1, r1
 8001df0:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <ssd1306_DrawPixel+0xa0>)
 8001df2:	54d1      	strb	r1, [r2, r3]
 8001df4:	e000      	b.n	8001df8 <ssd1306_DrawPixel+0x98>
        return;
 8001df6:	bf00      	nop
    }
}
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	200003a4 	.word	0x200003a4

08001e04 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	1d38      	adds	r0, r7, #4
 8001e0e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e12:	461a      	mov	r2, r3
 8001e14:	4623      	mov	r3, r4
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b1f      	cmp	r3, #31
 8001e20:	d902      	bls.n	8001e28 <ssd1306_WriteChar+0x24>
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b7e      	cmp	r3, #126	; 0x7e
 8001e26:	d901      	bls.n	8001e2c <ssd1306_WriteChar+0x28>
        return 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e06d      	b.n	8001f08 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <ssd1306_WriteChar+0x10c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	793b      	ldrb	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	2b80      	cmp	r3, #128	; 0x80
 8001e38:	dc06      	bgt.n	8001e48 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001e3a:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <ssd1306_WriteChar+0x10c>)
 8001e3c:	885b      	ldrh	r3, [r3, #2]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	797b      	ldrb	r3, [r7, #5]
 8001e42:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	dd01      	ble.n	8001e4c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e05d      	b.n	8001f08 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	e04c      	b.n	8001eec <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	3b20      	subs	r3, #32
 8001e58:	7979      	ldrb	r1, [r7, #5]
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4619      	mov	r1, r3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	440b      	add	r3, r1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	e034      	b.n	8001edc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d012      	beq.n	8001ea8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <ssd1306_WriteChar+0x10c>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b2d8      	uxtb	r0, r3
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <ssd1306_WriteChar+0x10c>)
 8001e92:	885b      	ldrh	r3, [r3, #2]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	7bba      	ldrb	r2, [r7, #14]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <ssd1306_DrawPixel>
 8001ea6:	e016      	b.n	8001ed6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <ssd1306_WriteChar+0x10c>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2d8      	uxtb	r0, r3
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <ssd1306_WriteChar+0x10c>)
 8001eb8:	885b      	ldrh	r3, [r3, #2]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2d9      	uxtb	r1, r3
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f7ff ff45 	bl	8001d60 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	793b      	ldrb	r3, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d3c5      	bcc.n	8001e72 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	797b      	ldrb	r3, [r7, #5]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d3ad      	bcc.n	8001e52 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <ssd1306_WriteChar+0x10c>)
 8001ef8:	881a      	ldrh	r2, [r3, #0]
 8001efa:	793b      	ldrb	r3, [r7, #4]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4413      	add	r3, r2
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <ssd1306_WriteChar+0x10c>)
 8001f04:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3724      	adds	r7, #36	; 0x24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd90      	pop	{r4, r7, pc}
 8001f10:	200007a4 	.word	0x200007a4

08001f14 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	1d38      	adds	r0, r7, #4
 8001f1e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f22:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001f24:	e012      	b.n	8001f4c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	7818      	ldrb	r0, [r3, #0]
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	1d3a      	adds	r2, r7, #4
 8001f2e:	ca06      	ldmia	r2, {r1, r2}
 8001f30:	f7ff ff68 	bl	8001e04 <ssd1306_WriteChar>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d002      	beq.n	8001f46 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	e008      	b.n	8001f58 <ssd1306_WriteString+0x44>
        }
        str++;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e8      	bne.n	8001f26 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	781b      	ldrb	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	460a      	mov	r2, r1
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <ssd1306_SetCursor+0x2c>)
 8001f76:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f78:	79bb      	ldrb	r3, [r7, #6]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <ssd1306_SetCursor+0x2c>)
 8001f7e:	805a      	strh	r2, [r3, #2]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	200007a4 	.word	0x200007a4

08001f90 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001f9a:	2381      	movs	r3, #129	; 0x81
 8001f9c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fde5 	bl	8001b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fde1 	bl	8001b70 <ssd1306_WriteCommand>
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001fc8:	23af      	movs	r3, #175	; 0xaf
 8001fca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <ssd1306_SetDisplayOn+0x38>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	715a      	strb	r2, [r3, #5]
 8001fd2:	e004      	b.n	8001fde <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001fd4:	23ae      	movs	r3, #174	; 0xae
 8001fd6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <ssd1306_SetDisplayOn+0x38>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fdc5 	bl	8001b70 <ssd1306_WriteCommand>
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200007a4 	.word	0x200007a4

08001ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <HAL_MspInit+0x5c>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_MspInit+0x5c>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6193      	str	r3, [r2, #24]
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_MspInit+0x5c>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_MspInit+0x5c>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_MspInit+0x5c>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201c:	61d3      	str	r3, [r2, #28]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_MspInit+0x5c>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_MspInit+0x60>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_MspInit+0x60>)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800205c:	e7fe      	b.n	800205c <NMI_Handler+0x4>

0800205e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <HardFault_Handler+0x4>

08002064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <MemManage_Handler+0x4>

0800206a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <BusFault_Handler+0x4>

08002070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <UsageFault_Handler+0x4>

08002076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209e:	f000 f9bd 	bl	800241c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA1_Channel6_IRQHandler+0x10>)
 80020ae:	f000 ff4f 	bl	8002f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200002e0 	.word	0x200002e0

080020bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <I2C1_EV_IRQHandler+0x10>)
 80020c2:	f002 f84b 	bl	800415c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000238 	.word	0x20000238

080020d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <_kill>:

int _kill(int pid, int sig)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e8:	f005 ff34 	bl	8007f54 <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2216      	movs	r2, #22
 80020f0:	601a      	str	r2, [r3, #0]
  return -1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_exit>:

void _exit (int status)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002106:	f04f 31ff 	mov.w	r1, #4294967295
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffe7 	bl	80020de <_kill>
  while (1) {}    /* Make sure we hang here */
 8002110:	e7fe      	b.n	8002110 <_exit+0x12>

08002112 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e00a      	b.n	800213a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002124:	f3af 8000 	nop.w
 8002128:	4601      	mov	r1, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	60ba      	str	r2, [r7, #8]
 8002130:	b2ca      	uxtb	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	dbf0      	blt.n	8002124 <_read+0x12>
  }

  return len;
 8002142:	687b      	ldr	r3, [r7, #4]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e009      	b.n	8002172 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	60ba      	str	r2, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fb58 	bl	800181c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	429a      	cmp	r2, r3
 8002178:	dbf1      	blt.n	800215e <_write+0x12>
  }
  return len;
 800217a:	687b      	ldr	r3, [r7, #4]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_close>:

int _close(int file)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021aa:	605a      	str	r2, [r3, #4]
  return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <_isatty>:

int _isatty(int file)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <_sbrk+0x5c>)
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <_sbrk+0x60>)
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x64>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <_sbrk+0x68>)
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	429a      	cmp	r2, r3
 8002212:	d207      	bcs.n	8002224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002214:	f005 fe9e 	bl	8007f54 <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	220c      	movs	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	e009      	b.n	8002238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <_sbrk+0x64>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <_sbrk+0x64>)
 8002234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20005000 	.word	0x20005000
 8002244:	00000400 	.word	0x00000400
 8002248:	200007ac 	.word	0x200007ac
 800224c:	20000948 	.word	0x20000948

08002250 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <MX_USART2_UART_Init+0x50>)
 8002264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002268:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800226c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002282:	220c      	movs	r2, #12
 8002284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002294:	f004 fc90 	bl	8006bb8 <HAL_UART_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800229e:	f7ff fc5b 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200007b0 	.word	0x200007b0
 80022ac:	40004400 	.word	0x40004400

080022b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <HAL_UART_MspInit+0x88>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d12f      	bne.n	8002330 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_UART_MspInit+0x8c>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_UART_MspInit+0x8c>)
 80022d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022da:	61d3      	str	r3, [r2, #28]
 80022dc:	4b17      	ldr	r3, [pc, #92]	; (800233c <HAL_UART_MspInit+0x8c>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <HAL_UART_MspInit+0x8c>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <HAL_UART_MspInit+0x8c>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_UART_MspInit+0x8c>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002300:	2304      	movs	r3, #4
 8002302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	4619      	mov	r1, r3
 8002312:	480b      	ldr	r0, [pc, #44]	; (8002340 <HAL_UART_MspInit+0x90>)
 8002314:	f000 ff5c 	bl	80031d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002318:	2308      	movs	r3, #8
 800231a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	4619      	mov	r1, r3
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <HAL_UART_MspInit+0x90>)
 800232c:	f000 ff50 	bl	80031d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002330:	bf00      	nop
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40004400 	.word	0x40004400
 800233c:	40021000 	.word	0x40021000
 8002340:	40010800 	.word	0x40010800

08002344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002344:	f7ff ff84 	bl	8002250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002348:	480b      	ldr	r0, [pc, #44]	; (8002378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800234a:	490c      	ldr	r1, [pc, #48]	; (800237c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002350:	e002      	b.n	8002358 <LoopCopyDataInit>

08002352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002356:	3304      	adds	r3, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800235c:	d3f9      	bcc.n	8002352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002360:	4c09      	ldr	r4, [pc, #36]	; (8002388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002364:	e001      	b.n	800236a <LoopFillZerobss>

08002366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002368:	3204      	adds	r2, #4

0800236a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800236c:	d3fb      	bcc.n	8002366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800236e:	f005 fdf7 	bl	8007f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002372:	f7ff fa65 	bl	8001840 <main>
  bx lr
 8002376:	4770      	bx	lr
  ldr r0, =_sdata
 8002378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800237c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002380:	0800c2d8 	.word	0x0800c2d8
  ldr r2, =_sbss
 8002384:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002388:	20000948 	.word	0x20000948

0800238c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800238c:	e7fe      	b.n	800238c <ADC1_2_IRQHandler>
	...

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_Init+0x28>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_Init+0x28>)
 800239a:	f043 0310 	orr.w	r3, r3, #16
 800239e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f000 fc61 	bl	8002c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a6:	200f      	movs	r0, #15
 80023a8:	f000 f808 	bl	80023bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ac:	f7ff fe22 	bl	8001ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40022000 	.word	0x40022000

080023bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_InitTick+0x54>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_InitTick+0x58>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4619      	mov	r1, r3
 80023ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fc79 	bl	8002cd2 <HAL_SYSTICK_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00e      	b.n	8002408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d80a      	bhi.n	8002406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f000 fc41 	bl	8002c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_InitTick+0x5c>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000018 	.word	0x20000018
 8002414:	20000020 	.word	0x20000020
 8002418:	2000001c 	.word	0x2000001c

0800241c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_IncTick+0x1c>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_IncTick+0x20>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4413      	add	r3, r2
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_IncTick+0x20>)
 800242e:	6013      	str	r3, [r2, #0]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000020 	.word	0x20000020
 800243c:	200007f8 	.word	0x200007f8

08002440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return uwTick;
 8002444:	4b02      	ldr	r3, [pc, #8]	; (8002450 <HAL_GetTick+0x10>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	200007f8 	.word	0x200007f8

08002454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff fff0 	bl	8002440 <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffe0 	bl	8002440 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000020 	.word	0x20000020

0800249c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0be      	b.n	800263c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fe38 	bl	8001150 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 fab3 	bl	8002a4c <ADC_ConversionStop_Disable>
 80024e6:	4603      	mov	r3, r0
 80024e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8099 	bne.w	800262a <HAL_ADC_Init+0x18e>
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f040 8095 	bne.w	800262a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002508:	f023 0302 	bic.w	r3, r3, #2
 800250c:	f043 0202 	orr.w	r2, r3, #2
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800251c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7b1b      	ldrb	r3, [r3, #12]
 8002522:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002524:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4313      	orrs	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002534:	d003      	beq.n	800253e <HAL_ADC_Init+0xa2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_ADC_Init+0xa8>
 800253e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002542:	e000      	b.n	8002546 <HAL_ADC_Init+0xaa>
 8002544:	2300      	movs	r3, #0
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7d1b      	ldrb	r3, [r3, #20]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d119      	bne.n	8002588 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7b1b      	ldrb	r3, [r3, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	3b01      	subs	r3, #1
 8002562:	035a      	lsls	r2, r3, #13
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	e00b      	b.n	8002588 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_ADC_Init+0x1a8>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b8:	d003      	beq.n	80025c2 <HAL_ADC_Init+0x126>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d104      	bne.n	80025cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	051b      	lsls	r3, r3, #20
 80025ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	430a      	orrs	r2, r1
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_ADC_Init+0x1ac>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d10b      	bne.n	8002608 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002606:	e018      	b.n	800263a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	f023 0312 	bic.w	r3, r3, #18
 8002610:	f043 0210 	orr.w	r2, r3, #16
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002628:	e007      	b.n	800263a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800263a:	7dfb      	ldrb	r3, [r7, #23]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	ffe1f7fd 	.word	0xffe1f7fd
 8002648:	ff1f0efe 	.word	0xff1f0efe

0800264c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_ADC_Start+0x1a>
 8002662:	2302      	movs	r3, #2
 8002664:	e098      	b.n	8002798 <HAL_ADC_Start+0x14c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f992 	bl	8002998 <ADC_Enable>
 8002674:	4603      	mov	r3, r0
 8002676:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 8087 	bne.w	800278e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a41      	ldr	r2, [pc, #260]	; (80027a0 <HAL_ADC_Start+0x154>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d105      	bne.n	80026aa <HAL_ADC_Start+0x5e>
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_ADC_Start+0x158>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d026      	beq.n	8002712 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026d4:	e01d      	b.n	8002712 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a2f      	ldr	r2, [pc, #188]	; (80027a4 <HAL_ADC_Start+0x158>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d004      	beq.n	80026f6 <HAL_ADC_Start+0xaa>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2b      	ldr	r2, [pc, #172]	; (80027a0 <HAL_ADC_Start+0x154>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10d      	bne.n	8002712 <HAL_ADC_Start+0xc6>
 80026f6:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_ADC_Start+0x158>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800270a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f023 0206 	bic.w	r2, r3, #6
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	62da      	str	r2, [r3, #44]	; 0x2c
 800272a:	e002      	b.n	8002732 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0202 	mvn.w	r2, #2
 8002742:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800274e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002752:	d113      	bne.n	800277c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002758:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <HAL_ADC_Start+0x154>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d105      	bne.n	800276a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_ADC_Start+0x158>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	e00c      	b.n	8002796 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	e003      	b.n	8002796 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40012800 	.word	0x40012800
 80027a4:	40012400 	.word	0x40012400

080027a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x20>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0dc      	b.n	8002982 <HAL_ADC_ConfigChannel+0x1da>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	d81c      	bhi.n	8002812 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	3b05      	subs	r3, #5
 80027ea:	221f      	movs	r2, #31
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4019      	ands	r1, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	3b05      	subs	r3, #5
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	635a      	str	r2, [r3, #52]	; 0x34
 8002810:	e03c      	b.n	800288c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d81c      	bhi.n	8002854 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3b23      	subs	r3, #35	; 0x23
 800282c:	221f      	movs	r2, #31
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	4019      	ands	r1, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b23      	subs	r3, #35	; 0x23
 8002846:	fa00 f203 	lsl.w	r2, r0, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
 8002852:	e01b      	b.n	800288c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b41      	subs	r3, #65	; 0x41
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	4019      	ands	r1, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b41      	subs	r3, #65	; 0x41
 8002880:	fa00 f203 	lsl.w	r2, r0, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b09      	cmp	r3, #9
 8002892:	d91c      	bls.n	80028ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68d9      	ldr	r1, [r3, #12]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	3b1e      	subs	r3, #30
 80028a6:	2207      	movs	r2, #7
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	4019      	ands	r1, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6898      	ldr	r0, [r3, #8]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	3b1e      	subs	r3, #30
 80028c0:	fa00 f203 	lsl.w	r2, r0, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	e019      	b.n	8002902 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6919      	ldr	r1, [r3, #16]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	2207      	movs	r2, #7
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4019      	ands	r1, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6898      	ldr	r0, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4413      	add	r3, r2
 80028f6:	fa00 f203 	lsl.w	r2, r0, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b10      	cmp	r3, #16
 8002908:	d003      	beq.n	8002912 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800290e:	2b11      	cmp	r3, #17
 8002910:	d132      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1d      	ldr	r2, [pc, #116]	; (800298c <HAL_ADC_ConfigChannel+0x1e4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d125      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d126      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002938:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b10      	cmp	r3, #16
 8002940:	d11a      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <HAL_ADC_ConfigChannel+0x1e8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a13      	ldr	r2, [pc, #76]	; (8002994 <HAL_ADC_ConfigChannel+0x1ec>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	0c9a      	lsrs	r2, r3, #18
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002958:	e002      	b.n	8002960 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3b01      	subs	r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f9      	bne.n	800295a <HAL_ADC_ConfigChannel+0x1b2>
 8002966:	e007      	b.n	8002978 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40012400 	.word	0x40012400
 8002990:	20000018 	.word	0x20000018
 8002994:	431bde83 	.word	0x431bde83

08002998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d040      	beq.n	8002a38 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f042 0201 	orr.w	r2, r2, #1
 80029c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029c6:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <ADC_Enable+0xac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <ADC_Enable+0xb0>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	0c9b      	lsrs	r3, r3, #18
 80029d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029d4:	e002      	b.n	80029dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f9      	bne.n	80029d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029e2:	f7ff fd2d 	bl	8002440 <HAL_GetTick>
 80029e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029e8:	e01f      	b.n	8002a2a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ea:	f7ff fd29 	bl	8002440 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d918      	bls.n	8002a2a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d011      	beq.n	8002a2a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e007      	b.n	8002a3a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d1d8      	bne.n	80029ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000018 	.word	0x20000018
 8002a48:	431bde83 	.word	0x431bde83

08002a4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d12e      	bne.n	8002ac4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a76:	f7ff fce3 	bl	8002440 <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a7c:	e01b      	b.n	8002ab6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a7e:	f7ff fcdf 	bl	8002440 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d914      	bls.n	8002ab6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d10d      	bne.n	8002ab6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e007      	b.n	8002ac6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d0dc      	beq.n	8002a7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aec:	4013      	ands	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	60d3      	str	r3, [r2, #12]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <__NVIC_GetPriorityGrouping+0x18>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	f003 0307 	and.w	r3, r3, #7
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	db0b      	blt.n	8002b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	4906      	ldr	r1, [pc, #24]	; (8002b68 <__NVIC_EnableIRQ+0x34>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2001      	movs	r0, #1
 8002b56:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db0a      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	; (8002bb8 <__NVIC_SetPriority+0x4c>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b94:	e00a      	b.n	8002bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	; (8002bbc <__NVIC_SetPriority+0x50>)
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	440b      	add	r3, r1
 8002baa:	761a      	strb	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f1c3 0307 	rsb	r3, r3, #7
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf28      	it	cs
 8002bde:	2304      	movcs	r3, #4
 8002be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d902      	bls.n	8002bf0 <NVIC_EncodePriority+0x30>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b03      	subs	r3, #3
 8002bee:	e000      	b.n	8002bf2 <NVIC_EncodePriority+0x32>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	4313      	orrs	r3, r2
         );
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c34:	d301      	bcc.n	8002c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00f      	b.n	8002c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <SysTick_Config+0x40>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c42:	210f      	movs	r1, #15
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f7ff ff90 	bl	8002b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <SysTick_Config+0x40>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c52:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <SysTick_Config+0x40>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff2d 	bl	8002ad0 <__NVIC_SetPriorityGrouping>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c90:	f7ff ff42 	bl	8002b18 <__NVIC_GetPriorityGrouping>
 8002c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7ff ff90 	bl	8002bc0 <NVIC_EncodePriority>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff5f 	bl	8002b6c <__NVIC_SetPriority>
}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff35 	bl	8002b34 <__NVIC_EnableIRQ>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ffa2 	bl	8002c24 <SysTick_Config>
 8002ce0:	4603      	mov	r3, r0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e043      	b.n	8002d8a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <HAL_DMA_Init+0xa8>)
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <HAL_DMA_Init+0xac>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	009a      	lsls	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_DMA_Init+0xb0>)
 8002d1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	bffdfff8 	.word	0xbffdfff8
 8002d98:	cccccccd 	.word	0xcccccccd
 8002d9c:	40020000 	.word	0x40020000

08002da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_DMA_Start_IT+0x20>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e04b      	b.n	8002e58 <HAL_DMA_Start_IT+0xb8>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d13a      	bne.n	8002e4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f9bc 	bl	8003176 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 020e 	orr.w	r2, r2, #14
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	e00f      	b.n	8002e38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0204 	bic.w	r2, r2, #4
 8002e26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 020a 	orr.w	r2, r2, #10
 8002e36:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e005      	b.n	8002e56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
 8002e54:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d005      	beq.n	8002e84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
 8002e82:	e051      	b.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 020e 	bic.w	r2, r2, #14
 8002e92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_DMA_Abort_IT+0xd4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d029      	beq.n	8002f02 <HAL_DMA_Abort_IT+0xa2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <HAL_DMA_Abort_IT+0xd8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <HAL_DMA_Abort_IT+0x9e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <HAL_DMA_Abort_IT+0xdc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01a      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x98>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <HAL_DMA_Abort_IT+0xe0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d012      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x92>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	; (8002f44 <HAL_DMA_Abort_IT+0xe4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00a      	beq.n	8002eec <HAL_DMA_Abort_IT+0x8c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1b      	ldr	r2, [pc, #108]	; (8002f48 <HAL_DMA_Abort_IT+0xe8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d102      	bne.n	8002ee6 <HAL_DMA_Abort_IT+0x86>
 8002ee0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ee4:	e00e      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eea:	e00b      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ef0:	e008      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef6:	e005      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002efc:	e002      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002efe:	2310      	movs	r3, #16
 8002f00:	e000      	b.n	8002f04 <HAL_DMA_Abort_IT+0xa4>
 8002f02:	2301      	movs	r3, #1
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <HAL_DMA_Abort_IT+0xec>)
 8002f06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
    } 
  }
  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40020008 	.word	0x40020008
 8002f38:	4002001c 	.word	0x4002001c
 8002f3c:	40020030 	.word	0x40020030
 8002f40:	40020044 	.word	0x40020044
 8002f44:	40020058 	.word	0x40020058
 8002f48:	4002006c 	.word	0x4002006c
 8002f4c:	40020000 	.word	0x40020000

08002f50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d04f      	beq.n	8003018 <HAL_DMA_IRQHandler+0xc8>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04a      	beq.n	8003018 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a66      	ldr	r2, [pc, #408]	; (8003140 <HAL_DMA_IRQHandler+0x1f0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d029      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xae>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a65      	ldr	r2, [pc, #404]	; (8003144 <HAL_DMA_IRQHandler+0x1f4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xaa>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a63      	ldr	r2, [pc, #396]	; (8003148 <HAL_DMA_IRQHandler+0x1f8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0xa4>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a62      	ldr	r2, [pc, #392]	; (800314c <HAL_DMA_IRQHandler+0x1fc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d012      	beq.n	8002fee <HAL_DMA_IRQHandler+0x9e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a60      	ldr	r2, [pc, #384]	; (8003150 <HAL_DMA_IRQHandler+0x200>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x98>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a5f      	ldr	r2, [pc, #380]	; (8003154 <HAL_DMA_IRQHandler+0x204>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d102      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x92>
 8002fdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fe0:	e00e      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002fe2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fe6:	e00b      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002fe8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fec:	e008      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002fee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ff2:	e005      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff8:	e002      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002ffa:	2340      	movs	r3, #64	; 0x40
 8002ffc:	e000      	b.n	8003000 <HAL_DMA_IRQHandler+0xb0>
 8002ffe:	2304      	movs	r3, #4
 8003000:	4a55      	ldr	r2, [pc, #340]	; (8003158 <HAL_DMA_IRQHandler+0x208>)
 8003002:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8094 	beq.w	8003136 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003016:	e08e      	b.n	8003136 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2202      	movs	r2, #2
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d056      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x186>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d051      	beq.n	80030d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020a 	bic.w	r2, r2, #10
 800304e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_DMA_IRQHandler+0x1f0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d029      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x166>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a37      	ldr	r2, [pc, #220]	; (8003144 <HAL_DMA_IRQHandler+0x1f4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x162>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a35      	ldr	r2, [pc, #212]	; (8003148 <HAL_DMA_IRQHandler+0x1f8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01a      	beq.n	80030ac <HAL_DMA_IRQHandler+0x15c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a34      	ldr	r2, [pc, #208]	; (800314c <HAL_DMA_IRQHandler+0x1fc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d012      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x156>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a32      	ldr	r2, [pc, #200]	; (8003150 <HAL_DMA_IRQHandler+0x200>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00a      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x150>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a31      	ldr	r2, [pc, #196]	; (8003154 <HAL_DMA_IRQHandler+0x204>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d102      	bne.n	800309a <HAL_DMA_IRQHandler+0x14a>
 8003094:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003098:	e00e      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 800309a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800309e:	e00b      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a4:	e008      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030aa:	e005      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b0:	e002      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030b2:	2320      	movs	r3, #32
 80030b4:	e000      	b.n	80030b8 <HAL_DMA_IRQHandler+0x168>
 80030b6:	2302      	movs	r3, #2
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_DMA_IRQHandler+0x208>)
 80030ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d034      	beq.n	8003136 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030d4:	e02f      	b.n	8003136 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2208      	movs	r2, #8
 80030dc:	409a      	lsls	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d028      	beq.n	8003138 <HAL_DMA_IRQHandler+0x1e8>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d023      	beq.n	8003138 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020e 	bic.w	r2, r2, #14
 80030fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	2101      	movs	r1, #1
 800310a:	fa01 f202 	lsl.w	r2, r1, r2
 800310e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
    }
  }
  return;
 8003136:	bf00      	nop
 8003138:	bf00      	nop
}
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40020008 	.word	0x40020008
 8003144:	4002001c 	.word	0x4002001c
 8003148:	40020030 	.word	0x40020030
 800314c:	40020044 	.word	0x40020044
 8003150:	40020058 	.word	0x40020058
 8003154:	4002006c 	.word	0x4002006c
 8003158:	40020000 	.word	0x40020000

0800315c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800316a:	b2db      	uxtb	r3, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d108      	bne.n	80031b6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031b4:	e007      	b.n	80031c6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	60da      	str	r2, [r3, #12]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b08b      	sub	sp, #44	; 0x2c
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031de:	2300      	movs	r3, #0
 80031e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e2:	e169      	b.n	80034b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031e4:	2201      	movs	r2, #1
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	f040 8158 	bne.w	80034b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4a9a      	ldr	r2, [pc, #616]	; (8003470 <HAL_GPIO_Init+0x2a0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d05e      	beq.n	80032ca <HAL_GPIO_Init+0xfa>
 800320c:	4a98      	ldr	r2, [pc, #608]	; (8003470 <HAL_GPIO_Init+0x2a0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d875      	bhi.n	80032fe <HAL_GPIO_Init+0x12e>
 8003212:	4a98      	ldr	r2, [pc, #608]	; (8003474 <HAL_GPIO_Init+0x2a4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d058      	beq.n	80032ca <HAL_GPIO_Init+0xfa>
 8003218:	4a96      	ldr	r2, [pc, #600]	; (8003474 <HAL_GPIO_Init+0x2a4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d86f      	bhi.n	80032fe <HAL_GPIO_Init+0x12e>
 800321e:	4a96      	ldr	r2, [pc, #600]	; (8003478 <HAL_GPIO_Init+0x2a8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d052      	beq.n	80032ca <HAL_GPIO_Init+0xfa>
 8003224:	4a94      	ldr	r2, [pc, #592]	; (8003478 <HAL_GPIO_Init+0x2a8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d869      	bhi.n	80032fe <HAL_GPIO_Init+0x12e>
 800322a:	4a94      	ldr	r2, [pc, #592]	; (800347c <HAL_GPIO_Init+0x2ac>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d04c      	beq.n	80032ca <HAL_GPIO_Init+0xfa>
 8003230:	4a92      	ldr	r2, [pc, #584]	; (800347c <HAL_GPIO_Init+0x2ac>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d863      	bhi.n	80032fe <HAL_GPIO_Init+0x12e>
 8003236:	4a92      	ldr	r2, [pc, #584]	; (8003480 <HAL_GPIO_Init+0x2b0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d046      	beq.n	80032ca <HAL_GPIO_Init+0xfa>
 800323c:	4a90      	ldr	r2, [pc, #576]	; (8003480 <HAL_GPIO_Init+0x2b0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d85d      	bhi.n	80032fe <HAL_GPIO_Init+0x12e>
 8003242:	2b12      	cmp	r3, #18
 8003244:	d82a      	bhi.n	800329c <HAL_GPIO_Init+0xcc>
 8003246:	2b12      	cmp	r3, #18
 8003248:	d859      	bhi.n	80032fe <HAL_GPIO_Init+0x12e>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <HAL_GPIO_Init+0x80>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	080032cb 	.word	0x080032cb
 8003254:	080032a5 	.word	0x080032a5
 8003258:	080032b7 	.word	0x080032b7
 800325c:	080032f9 	.word	0x080032f9
 8003260:	080032ff 	.word	0x080032ff
 8003264:	080032ff 	.word	0x080032ff
 8003268:	080032ff 	.word	0x080032ff
 800326c:	080032ff 	.word	0x080032ff
 8003270:	080032ff 	.word	0x080032ff
 8003274:	080032ff 	.word	0x080032ff
 8003278:	080032ff 	.word	0x080032ff
 800327c:	080032ff 	.word	0x080032ff
 8003280:	080032ff 	.word	0x080032ff
 8003284:	080032ff 	.word	0x080032ff
 8003288:	080032ff 	.word	0x080032ff
 800328c:	080032ff 	.word	0x080032ff
 8003290:	080032ff 	.word	0x080032ff
 8003294:	080032ad 	.word	0x080032ad
 8003298:	080032c1 	.word	0x080032c1
 800329c:	4a79      	ldr	r2, [pc, #484]	; (8003484 <HAL_GPIO_Init+0x2b4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032a2:	e02c      	b.n	80032fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	623b      	str	r3, [r7, #32]
          break;
 80032aa:	e029      	b.n	8003300 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	3304      	adds	r3, #4
 80032b2:	623b      	str	r3, [r7, #32]
          break;
 80032b4:	e024      	b.n	8003300 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	3308      	adds	r3, #8
 80032bc:	623b      	str	r3, [r7, #32]
          break;
 80032be:	e01f      	b.n	8003300 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	330c      	adds	r3, #12
 80032c6:	623b      	str	r3, [r7, #32]
          break;
 80032c8:	e01a      	b.n	8003300 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032d2:	2304      	movs	r3, #4
 80032d4:	623b      	str	r3, [r7, #32]
          break;
 80032d6:	e013      	b.n	8003300 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d105      	bne.n	80032ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032e0:	2308      	movs	r3, #8
 80032e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	611a      	str	r2, [r3, #16]
          break;
 80032ea:	e009      	b.n	8003300 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ec:	2308      	movs	r3, #8
 80032ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	615a      	str	r2, [r3, #20]
          break;
 80032f6:	e003      	b.n	8003300 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032f8:	2300      	movs	r3, #0
 80032fa:	623b      	str	r3, [r7, #32]
          break;
 80032fc:	e000      	b.n	8003300 <HAL_GPIO_Init+0x130>
          break;
 80032fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2bff      	cmp	r3, #255	; 0xff
 8003304:	d801      	bhi.n	800330a <HAL_GPIO_Init+0x13a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	e001      	b.n	800330e <HAL_GPIO_Init+0x13e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2bff      	cmp	r3, #255	; 0xff
 8003314:	d802      	bhi.n	800331c <HAL_GPIO_Init+0x14c>
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	e002      	b.n	8003322 <HAL_GPIO_Init+0x152>
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	3b08      	subs	r3, #8
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	210f      	movs	r1, #15
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	401a      	ands	r2, r3
 8003334:	6a39      	ldr	r1, [r7, #32]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80b1 	beq.w	80034b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003350:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <HAL_GPIO_Init+0x2b8>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4a4c      	ldr	r2, [pc, #304]	; (8003488 <HAL_GPIO_Init+0x2b8>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6193      	str	r3, [r2, #24]
 800335c:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <HAL_GPIO_Init+0x2b8>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003368:	4a48      	ldr	r2, [pc, #288]	; (800348c <HAL_GPIO_Init+0x2bc>)
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	3302      	adds	r3, #2
 8003370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003374:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	220f      	movs	r2, #15
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a40      	ldr	r2, [pc, #256]	; (8003490 <HAL_GPIO_Init+0x2c0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d013      	beq.n	80033bc <HAL_GPIO_Init+0x1ec>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3f      	ldr	r2, [pc, #252]	; (8003494 <HAL_GPIO_Init+0x2c4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00d      	beq.n	80033b8 <HAL_GPIO_Init+0x1e8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3e      	ldr	r2, [pc, #248]	; (8003498 <HAL_GPIO_Init+0x2c8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <HAL_GPIO_Init+0x1e4>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3d      	ldr	r2, [pc, #244]	; (800349c <HAL_GPIO_Init+0x2cc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_GPIO_Init+0x1e0>
 80033ac:	2303      	movs	r3, #3
 80033ae:	e006      	b.n	80033be <HAL_GPIO_Init+0x1ee>
 80033b0:	2304      	movs	r3, #4
 80033b2:	e004      	b.n	80033be <HAL_GPIO_Init+0x1ee>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e002      	b.n	80033be <HAL_GPIO_Init+0x1ee>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_GPIO_Init+0x1ee>
 80033bc:	2300      	movs	r3, #0
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	f002 0203 	and.w	r2, r2, #3
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	4093      	lsls	r3, r2
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033ce:	492f      	ldr	r1, [pc, #188]	; (800348c <HAL_GPIO_Init+0x2bc>)
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	3302      	adds	r3, #2
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d006      	beq.n	80033f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	492c      	ldr	r1, [pc, #176]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]
 80033f4:	e006      	b.n	8003404 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033f6:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	4928      	ldr	r1, [pc, #160]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 8003400:	4013      	ands	r3, r2
 8003402:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d006      	beq.n	800341e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003410:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	4922      	ldr	r1, [pc, #136]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	60cb      	str	r3, [r1, #12]
 800341c:	e006      	b.n	800342c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	43db      	mvns	r3, r3
 8003426:	491e      	ldr	r1, [pc, #120]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 8003428:	4013      	ands	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d006      	beq.n	8003446 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	4918      	ldr	r1, [pc, #96]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
 8003444:	e006      	b.n	8003454 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	43db      	mvns	r3, r3
 800344e:	4914      	ldr	r1, [pc, #80]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 8003450:	4013      	ands	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d021      	beq.n	80034a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	490e      	ldr	r1, [pc, #56]	; (80034a0 <HAL_GPIO_Init+0x2d0>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
 800346c:	e021      	b.n	80034b2 <HAL_GPIO_Init+0x2e2>
 800346e:	bf00      	nop
 8003470:	10320000 	.word	0x10320000
 8003474:	10310000 	.word	0x10310000
 8003478:	10220000 	.word	0x10220000
 800347c:	10210000 	.word	0x10210000
 8003480:	10120000 	.word	0x10120000
 8003484:	10110000 	.word	0x10110000
 8003488:	40021000 	.word	0x40021000
 800348c:	40010000 	.word	0x40010000
 8003490:	40010800 	.word	0x40010800
 8003494:	40010c00 	.word	0x40010c00
 8003498:	40011000 	.word	0x40011000
 800349c:	40011400 	.word	0x40011400
 80034a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_GPIO_Init+0x304>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	4909      	ldr	r1, [pc, #36]	; (80034d4 <HAL_GPIO_Init+0x304>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	3301      	adds	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f47f ae8e 	bne.w	80031e4 <HAL_GPIO_Init+0x14>
  }
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	372c      	adds	r7, #44	; 0x2c
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	40010400 	.word	0x40010400

080034d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034f4:	e003      	b.n	80034fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	041a      	lsls	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	611a      	str	r2, [r3, #16]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	041a      	lsls	r2, r3, #16
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	43d9      	mvns	r1, r3
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	400b      	ands	r3, r1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	611a      	str	r2, [r3, #16]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
	...

0800353c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e12b      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd ff02 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	; 0x24
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800358e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800359e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a0:	f003 fa0e 	bl	80069c0 <HAL_RCC_GetPCLK1Freq>
 80035a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a81      	ldr	r2, [pc, #516]	; (80037b0 <HAL_I2C_Init+0x274>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d807      	bhi.n	80035c0 <HAL_I2C_Init+0x84>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <HAL_I2C_Init+0x278>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bf94      	ite	ls
 80035b8:	2301      	movls	r3, #1
 80035ba:	2300      	movhi	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e006      	b.n	80035ce <HAL_I2C_Init+0x92>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a7d      	ldr	r2, [pc, #500]	; (80037b8 <HAL_I2C_Init+0x27c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0e7      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a78      	ldr	r2, [pc, #480]	; (80037bc <HAL_I2C_Init+0x280>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0c9b      	lsrs	r3, r3, #18
 80035e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a6a      	ldr	r2, [pc, #424]	; (80037b0 <HAL_I2C_Init+0x274>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d802      	bhi.n	8003610 <HAL_I2C_Init+0xd4>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3301      	adds	r3, #1
 800360e:	e009      	b.n	8003624 <HAL_I2C_Init+0xe8>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	4a69      	ldr	r2, [pc, #420]	; (80037c0 <HAL_I2C_Init+0x284>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	3301      	adds	r3, #1
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	495c      	ldr	r1, [pc, #368]	; (80037b0 <HAL_I2C_Init+0x274>)
 8003640:	428b      	cmp	r3, r1
 8003642:	d819      	bhi.n	8003678 <HAL_I2C_Init+0x13c>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e59      	subs	r1, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003652:	1c59      	adds	r1, r3, #1
 8003654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003658:	400b      	ands	r3, r1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_I2C_Init+0x138>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1e59      	subs	r1, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fbb1 f3f3 	udiv	r3, r1, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	e051      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003674:	2304      	movs	r3, #4
 8003676:	e04f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_I2C_Init+0x168>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	440b      	add	r3, r1
 800368e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e012      	b.n	80036ca <HAL_I2C_Init+0x18e>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	0099      	lsls	r1, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Init+0x196>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e022      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <HAL_I2C_Init+0x1bc>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1e58      	subs	r0, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	440b      	add	r3, r1
 80036e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6809      	ldr	r1, [r1, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6911      	ldr	r1, [r2, #16]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	000186a0 	.word	0x000186a0
 80037b4:	001e847f 	.word	0x001e847f
 80037b8:	003d08ff 	.word	0x003d08ff
 80037bc:	431bde83 	.word	0x431bde83
 80037c0:	10624dd3 	.word	0x10624dd3

080037c4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b80      	cmp	r3, #128	; 0x80
 80037d8:	d103      	bne.n	80037e2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	817b      	strh	r3, [r7, #10]
 80037fe:	460b      	mov	r3, r1
 8003800:	813b      	strh	r3, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003806:	f7fe fe1b 	bl	8002440 <HAL_GetTick>
 800380a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	f040 80d9 	bne.w	80039cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2319      	movs	r3, #25
 8003820:	2201      	movs	r2, #1
 8003822:	496d      	ldr	r1, [pc, #436]	; (80039d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f002 fa7f 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
 8003832:	e0cc      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_I2C_Mem_Write+0x56>
 800383e:	2302      	movs	r3, #2
 8003840:	e0c5      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d007      	beq.n	8003868 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2221      	movs	r2, #33	; 0x21
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a3a      	ldr	r2, [r7, #32]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a4d      	ldr	r2, [pc, #308]	; (80039dc <HAL_I2C_Mem_Write+0x1f0>)
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038aa:	88f8      	ldrh	r0, [r7, #6]
 80038ac:	893a      	ldrh	r2, [r7, #8]
 80038ae:	8979      	ldrh	r1, [r7, #10]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4603      	mov	r3, r0
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f001 ff02 	bl	80056c4 <I2C_RequestMemoryWrite>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d052      	beq.n	800396c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e081      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f002 fb44 	bl	8005f5c <I2C_WaitOnTXEFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00d      	beq.n	80038f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d107      	bne.n	80038f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e06b      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b04      	cmp	r3, #4
 8003932:	d11b      	bne.n	800396c <HAL_I2C_Mem_Write+0x180>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	d017      	beq.n	800396c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1aa      	bne.n	80038ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f002 fb37 	bl	8005fec <I2C_WaitOnBTFFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e016      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	00100002 	.word	0x00100002
 80039dc:	ffff0000 	.word	0xffff0000

080039e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	; 0x30
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	817b      	strh	r3, [r7, #10]
 80039f2:	460b      	mov	r3, r1
 80039f4:	813b      	strh	r3, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fe:	f7fe fd1f 	bl	8002440 <HAL_GetTick>
 8003a02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	f040 8244 	bne.w	8003e9a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	2319      	movs	r3, #25
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4982      	ldr	r1, [pc, #520]	; (8003c24 <HAL_I2C_Mem_Read+0x244>)
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f002 f983 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e237      	b.n	8003e9c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Mem_Read+0x5a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e230      	b.n	8003e9c <HAL_I2C_Mem_Read+0x4bc>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d007      	beq.n	8003a60 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2222      	movs	r2, #34	; 0x22
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a62      	ldr	r2, [pc, #392]	; (8003c28 <HAL_I2C_Mem_Read+0x248>)
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aa2:	88f8      	ldrh	r0, [r7, #6]
 8003aa4:	893a      	ldrh	r2, [r7, #8]
 8003aa6:	8979      	ldrh	r1, [r7, #10]
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f001 fe9c 	bl	80057f0 <I2C_RequestMemoryRead>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1ec      	b.n	8003e9c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d113      	bne.n	8003af2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e1c0      	b.n	8003e74 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d11e      	bne.n	8003b38 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b0a:	b672      	cpsid	i
}
 8003b0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b34:	b662      	cpsie	i
}
 8003b36:	e035      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d11e      	bne.n	8003b7e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b50:	b672      	cpsid	i
}
 8003b52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b7a:	b662      	cpsie	i
}
 8003b7c:	e012      	b.n	8003ba4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b8c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ba4:	e166      	b.n	8003e74 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	f200 811f 	bhi.w	8003dee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d123      	bne.n	8003c00 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f002 fa8f 	bl	80060e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e167      	b.n	8003e9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bfe:	e139      	b.n	8003e74 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d152      	bne.n	8003cae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	2200      	movs	r2, #0
 8003c10:	4906      	ldr	r1, [pc, #24]	; (8003c2c <HAL_I2C_Mem_Read+0x24c>)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f002 f888 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e13c      	b.n	8003e9c <HAL_I2C_Mem_Read+0x4bc>
 8003c22:	bf00      	nop
 8003c24:	00100002 	.word	0x00100002
 8003c28:	ffff0000 	.word	0xffff0000
 8003c2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c30:	b672      	cpsid	i
}
 8003c32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c76:	b662      	cpsie	i
}
 8003c78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cac:	e0e2      	b.n	8003e74 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	497b      	ldr	r1, [pc, #492]	; (8003ea4 <HAL_I2C_Mem_Read+0x4c4>)
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f002 f835 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0e9      	b.n	8003e9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cd8:	b672      	cpsid	i
}
 8003cda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d0e:	4b66      	ldr	r3, [pc, #408]	; (8003ea8 <HAL_I2C_Mem_Read+0x4c8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	08db      	lsrs	r3, r3, #3
 8003d14:	4a65      	ldr	r2, [pc, #404]	; (8003eac <HAL_I2C_Mem_Read+0x4cc>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	0a1a      	lsrs	r2, r3, #8
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	00da      	lsls	r2, r3, #3
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d118      	bne.n	8003d66 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d56:	b662      	cpsie	i
}
 8003d58:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e09a      	b.n	8003e9c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d1d9      	bne.n	8003d28 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003db6:	b662      	cpsie	i
}
 8003db8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dec:	e042      	b.n	8003e74 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f002 f974 	bl	80060e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e04c      	b.n	8003e9c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d118      	bne.n	8003e74 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f47f ae94 	bne.w	8003ba6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3728      	adds	r7, #40	; 0x28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	00010004 	.word	0x00010004
 8003ea8:	20000018 	.word	0x20000018
 8003eac:	14f8b589 	.word	0x14f8b589

08003eb0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	817b      	strh	r3, [r7, #10]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	813b      	strh	r3, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ece:	f7fe fab7 	bl	8002440 <HAL_GetTick>
 8003ed2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	f040 812e 	bne.w	800413e <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ee2:	4b99      	ldr	r3, [pc, #612]	; (8004148 <HAL_I2C_Mem_Write_DMA+0x298>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	08db      	lsrs	r3, r3, #3
 8003ee8:	4a98      	ldr	r2, [pc, #608]	; (800414c <HAL_I2C_Mem_Write_DMA+0x29c>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0a1a      	lsrs	r2, r3, #8
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009a      	lsls	r2, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d112      	bne.n	8003f2e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e108      	b.n	8004140 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d0df      	beq.n	8003efc <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2C_Mem_Write_DMA+0x9a>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e0fa      	b.n	8004140 <HAL_I2C_Mem_Write_DMA+0x290>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d007      	beq.n	8003f70 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2221      	movs	r2, #33	; 0x21
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2240      	movs	r2, #64	; 0x40
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a68      	ldr	r2, [pc, #416]	; (8004150 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8003fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003fb2:	897a      	ldrh	r2, [r7, #10]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003fb8:	893a      	ldrh	r2, [r7, #8]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 80a1 	beq.w	8004116 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d022      	beq.n	8004022 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	4a5c      	ldr	r2, [pc, #368]	; (8004154 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	4a5b      	ldr	r2, [pc, #364]	; (8004158 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	4619      	mov	r1, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3310      	adds	r3, #16
 800400c:	461a      	mov	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004012:	f7fe fec5 	bl	8002da0 <HAL_DMA_Start_IT>
 8004016:	4603      	mov	r3, r0
 8004018:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800401a:	7efb      	ldrb	r3, [r7, #27]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d166      	bne.n	80040ee <HAL_I2C_Mem_Write_DMA+0x23e>
 8004020:	e013      	b.n	800404a <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e07a      	b.n	8004140 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800404a:	88f8      	ldrh	r0, [r7, #6]
 800404c:	893a      	ldrh	r2, [r7, #8]
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	9301      	str	r3, [sp, #4]
 8004054:	2323      	movs	r3, #35	; 0x23
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4603      	mov	r3, r0
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f001 fb32 	bl	80056c4 <I2C_RequestMemoryWrite>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d022      	beq.n	80040ac <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fef8 	bl	8002e60 <HAL_DMA_Abort_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	2200      	movs	r2, #0
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e049      	b.n	8004140 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e028      	b.n	8004140 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f043 0210 	orr.w	r2, r3, #16
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e014      	b.n	8004140 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000018 	.word	0x20000018
 800414c:	14f8b589 	.word	0x14f8b589
 8004150:	ffff0000 	.word	0xffff0000
 8004154:	080059c1 	.word	0x080059c1
 8004158:	08005b6b 	.word	0x08005b6b

0800415c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	2b10      	cmp	r3, #16
 800418a:	d003      	beq.n	8004194 <HAL_I2C_EV_IRQHandler+0x38>
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	f040 80b1 	bne.w	80042f6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10d      	bne.n	80041ca <HAL_I2C_EV_IRQHandler+0x6e>
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041b4:	d003      	beq.n	80041be <HAL_I2C_EV_IRQHandler+0x62>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041bc:	d101      	bne.n	80041c2 <HAL_I2C_EV_IRQHandler+0x66>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_I2C_EV_IRQHandler+0x68>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	f000 8114 	beq.w	80043f2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_I2C_EV_IRQHandler+0x90>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f002 f809 	bl	80061f6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fcbd 	bl	8004b64 <I2C_Master_SB>
 80041ea:	e083      	b.n	80042f4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_I2C_EV_IRQHandler+0xac>
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fd34 	bl	8004c6e <I2C_Master_ADD10>
 8004206:	e075      	b.n	80042f4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_I2C_EV_IRQHandler+0xc8>
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fd4f 	bl	8004cc0 <I2C_Master_ADDR>
 8004222:	e067      	b.n	80042f4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d036      	beq.n	800429c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423c:	f000 80db 	beq.w	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0x10a>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0x10a>
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f931 	bl	80044c6 <I2C_MasterTransmit_TXE>
 8004264:	e046      	b.n	80042f4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80c2 	beq.w	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80bc 	beq.w	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800427e:	7bbb      	ldrb	r3, [r7, #14]
 8004280:	2b21      	cmp	r3, #33	; 0x21
 8004282:	d103      	bne.n	800428c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f9ba 	bl	80045fe <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800428a:	e0b4      	b.n	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	f040 80b1 	bne.w	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fa28 	bl	80046ea <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800429a:	e0ac      	b.n	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042aa:	f000 80a4 	beq.w	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <HAL_I2C_EV_IRQHandler+0x178>
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_I2C_EV_IRQHandler+0x178>
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d103      	bne.n	80042d4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 faa4 	bl	800481a <I2C_MasterReceive_RXNE>
 80042d2:	e00f      	b.n	80042f4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 808b 	beq.w	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8085 	beq.w	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fb4f 	bl	8004990 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f2:	e080      	b.n	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
 80042f4:	e07f      	b.n	80043f6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e007      	b.n	8004318 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d011      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00c      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 ff15 	bl	800516e <I2C_Slave_ADDR>
 8004344:	e05a      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0x206>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 ff50 	bl	8005200 <I2C_Slave_STOPF>
 8004360:	e04c      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004362:	7bbb      	ldrb	r3, [r7, #14]
 8004364:	2b21      	cmp	r3, #33	; 0x21
 8004366:	d002      	beq.n	800436e <HAL_I2C_EV_IRQHandler+0x212>
 8004368:	7bbb      	ldrb	r3, [r7, #14]
 800436a:	2b29      	cmp	r3, #41	; 0x29
 800436c:	d120      	bne.n	80043b0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <HAL_I2C_EV_IRQHandler+0x238>
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_I2C_EV_IRQHandler+0x238>
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fe32 	bl	8004ff6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004392:	e032      	b.n	80043fa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d02d      	beq.n	80043fa <HAL_I2C_EV_IRQHandler+0x29e>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d028      	beq.n	80043fa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fe61 	bl	8005070 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043ae:	e024      	b.n	80043fa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00d      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x27a>
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x27a>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fe6e 	bl	80050b0 <I2C_SlaveReceive_RXNE>
 80043d4:	e012      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <HAL_I2C_EV_IRQHandler+0x2a0>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fe9e 	bl	800512c <I2C_SlaveReceive_BTF>
 80043f0:	e004      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80043f2:	bf00      	nop
 80043f4:	e002      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	460b      	mov	r3, r1
 8004454:	70fb      	strb	r3, [r7, #3]
 8004456:	4613      	mov	r3, r2
 8004458:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ba:	b2db      	uxtb	r3, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044dc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d150      	bne.n	800458e <I2C_MasterTransmit_TXE+0xc8>
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b21      	cmp	r3, #33	; 0x21
 80044f0:	d14d      	bne.n	800458e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d01d      	beq.n	8004534 <I2C_MasterTransmit_TXE+0x6e>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d01a      	beq.n	8004534 <I2C_MasterTransmit_TXE+0x6e>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004504:	d016      	beq.n	8004534 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004514:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2211      	movs	r2, #17
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff ff68 	bl	8004402 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004532:	e060      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004542:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d107      	bne.n	800457e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd fb34 	bl	8001be4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800457c:	e03b      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff ff3b 	bl	8004402 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800458c:	e033      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b21      	cmp	r3, #33	; 0x21
 8004592:	d005      	beq.n	80045a0 <I2C_MasterTransmit_TXE+0xda>
 8004594:	7bbb      	ldrb	r3, [r7, #14]
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d12d      	bne.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	2b22      	cmp	r3, #34	; 0x22
 800459e:	d12a      	bne.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d108      	bne.n	80045bc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045ba:	e01c      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d103      	bne.n	80045d0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f88e 	bl	80046ea <I2C_MemoryTransmit_TXE_BTF>
}
 80045ce:	e012      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045f4:	e7ff      	b.n	80045f6 <I2C_MasterTransmit_TXE+0x130>
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b21      	cmp	r3, #33	; 0x21
 8004616:	d164      	bne.n	80046e2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004646:	e04c      	b.n	80046e2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b08      	cmp	r3, #8
 800464c:	d01d      	beq.n	800468a <I2C_MasterTransmit_BTF+0x8c>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b20      	cmp	r3, #32
 8004652:	d01a      	beq.n	800468a <I2C_MasterTransmit_BTF+0x8c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800465a:	d016      	beq.n	800468a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800466a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2211      	movs	r2, #17
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff febd 	bl	8004402 <HAL_I2C_MasterTxCpltCallback>
}
 8004688:	e02b      	b.n	80046e2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004698:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d107      	bne.n	80046d4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fd fa89 	bl	8001be4 <HAL_I2C_MemTxCpltCallback>
}
 80046d2:	e006      	b.n	80046e2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fe90 	bl	8004402 <HAL_I2C_MasterTxCpltCallback>
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11d      	bne.n	800473e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d10b      	bne.n	8004722 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470e:	b2da      	uxtb	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004720:	e077      	b.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004726:	b29b      	uxth	r3, r3
 8004728:	121b      	asrs	r3, r3, #8
 800472a:	b2da      	uxtb	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800473c:	e069      	b.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004742:	2b01      	cmp	r3, #1
 8004744:	d10b      	bne.n	800475e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474a:	b2da      	uxtb	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800475c:	e059      	b.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	2b02      	cmp	r3, #2
 8004764:	d152      	bne.n	800480c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b22      	cmp	r3, #34	; 0x22
 800476a:	d10d      	bne.n	8004788 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800477a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004786:	e044      	b.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d015      	beq.n	80047be <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	2b21      	cmp	r3, #33	; 0x21
 8004796:	d112      	bne.n	80047be <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047bc:	e029      	b.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d124      	bne.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b21      	cmp	r3, #33	; 0x21
 80047cc:	d121      	bne.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047dc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ec:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fd f9ed 	bl	8001be4 <HAL_I2C_MemTxCpltCallback>
}
 800480a:	e002      	b.n	8004812 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fe ffd9 	bl	80037c4 <I2C_Flush_DR>
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b22      	cmp	r3, #34	; 0x22
 800482c:	f040 80ac 	bne.w	8004988 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b03      	cmp	r3, #3
 800483c:	d921      	bls.n	8004882 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b03      	cmp	r3, #3
 800486c:	f040 808c 	bne.w	8004988 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004880:	e082      	b.n	8004988 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	2b02      	cmp	r3, #2
 8004888:	d075      	beq.n	8004976 <I2C_MasterReceive_RXNE+0x15c>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d002      	beq.n	8004896 <I2C_MasterReceive_RXNE+0x7c>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d16f      	bne.n	8004976 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f001 fbf0 	bl	800607c <I2C_WaitOnSTOPRequestThroughIT>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d142      	bne.n	8004928 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d10a      	bne.n	8004912 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff fdb3 	bl	8004476 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004910:	e03a      	b.n	8004988 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2212      	movs	r2, #18
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fd77 	bl	8004414 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004926:	e02f      	b.n	8004988 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004936:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fd8a 	bl	8004488 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004974:	e008      	b.n	8004988 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004984:	605a      	str	r2, [r3, #4]
}
 8004986:	e7ff      	b.n	8004988 <I2C_MasterReceive_RXNE+0x16e>
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d11b      	bne.n	80049e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049de:	e0bd      	b.n	8004b5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d129      	bne.n	8004a3e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d00a      	beq.n	8004a16 <I2C_MasterReceive_BTF+0x86>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d007      	beq.n	8004a16 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a14:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a3c:	e08e      	b.n	8004b5c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d176      	bne.n	8004b36 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d002      	beq.n	8004a54 <I2C_MasterReceive_BTF+0xc4>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d108      	bne.n	8004a66 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e019      	b.n	8004a9a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d002      	beq.n	8004a72 <I2C_MasterReceive_BTF+0xe2>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d108      	bne.n	8004a84 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e00a      	b.n	8004a9a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b10      	cmp	r3, #16
 8004a88:	d007      	beq.n	8004a9a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a98:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004af4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d10a      	bne.n	8004b20 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff fcac 	bl	8004476 <HAL_I2C_MemRxCpltCallback>
}
 8004b1e:	e01d      	b.n	8004b5c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2212      	movs	r2, #18
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff fc70 	bl	8004414 <HAL_I2C_MasterRxCpltCallback>
}
 8004b34:	e012      	b.n	8004b5c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b5c:	bf00      	nop
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d117      	bne.n	8004ba8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b90:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b92:	e067      	b.n	8004c64 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	611a      	str	r2, [r3, #16]
}
 8004ba6:	e05d      	b.n	8004c64 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb0:	d133      	bne.n	8004c1a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b21      	cmp	r3, #33	; 0x21
 8004bbc:	d109      	bne.n	8004bd2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bce:	611a      	str	r2, [r3, #16]
 8004bd0:	e008      	b.n	8004be4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <I2C_Master_SB+0x92>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d108      	bne.n	8004c08 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d032      	beq.n	8004c64 <I2C_Master_SB+0x100>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d02d      	beq.n	8004c64 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c16:	605a      	str	r2, [r3, #4]
}
 8004c18:	e024      	b.n	8004c64 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10e      	bne.n	8004c40 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	11db      	asrs	r3, r3, #7
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	f003 0306 	and.w	r3, r3, #6
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f063 030f 	orn	r3, r3, #15
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	611a      	str	r2, [r3, #16]
}
 8004c3e:	e011      	b.n	8004c64 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d10d      	bne.n	8004c64 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	11db      	asrs	r3, r3, #7
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	f003 0306 	and.w	r3, r3, #6
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f063 030e 	orn	r3, r3, #14
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	611a      	str	r2, [r3, #16]
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d004      	beq.n	8004c94 <I2C_Master_ADD10+0x26>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d108      	bne.n	8004ca6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00c      	beq.n	8004cb6 <I2C_Master_ADD10+0x48>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb4:	605a      	str	r2, [r3, #4]
  }
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b091      	sub	sp, #68	; 0x44
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b22      	cmp	r3, #34	; 0x22
 8004ce8:	f040 8174 	bne.w	8004fd4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <I2C_Master_ADDR+0x54>
 8004cf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d10b      	bne.n	8004d14 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	633b      	str	r3, [r7, #48]	; 0x30
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	e16b      	b.n	8004fec <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d11d      	bne.n	8004d58 <I2C_Master_ADDR+0x98>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d24:	d118      	bne.n	8004d58 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d26:	2300      	movs	r3, #0
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	651a      	str	r2, [r3, #80]	; 0x50
 8004d56:	e149      	b.n	8004fec <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d113      	bne.n	8004d8a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e120      	b.n	8004fcc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	f040 808a 	bne.w	8004eaa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d9c:	d137      	bne.n	8004e0e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbc:	d113      	bne.n	8004de6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dcc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	e0f2      	b.n	8004fcc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de6:	2300      	movs	r3, #0
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	e0de      	b.n	8004fcc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d02e      	beq.n	8004e72 <I2C_Master_ADDR+0x1b2>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d02b      	beq.n	8004e72 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	2b12      	cmp	r3, #18
 8004e1e:	d102      	bne.n	8004e26 <I2C_Master_ADDR+0x166>
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d125      	bne.n	8004e72 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d00e      	beq.n	8004e4a <I2C_Master_ADDR+0x18a>
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d00b      	beq.n	8004e4a <I2C_Master_ADDR+0x18a>
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d008      	beq.n	8004e4a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e007      	b.n	8004e5a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e58:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	e0ac      	b.n	8004fcc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e80:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e090      	b.n	8004fcc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d158      	bne.n	8004f66 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d021      	beq.n	8004efe <I2C_Master_ADDR+0x23e>
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d01e      	beq.n	8004efe <I2C_Master_ADDR+0x23e>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d01b      	beq.n	8004efe <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e012      	b.n	8004f24 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f0c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d14b      	bne.n	8004fcc <I2C_Master_ADDR+0x30c>
 8004f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f3a:	d00b      	beq.n	8004f54 <I2C_Master_ADDR+0x294>
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d008      	beq.n	8004f54 <I2C_Master_ADDR+0x294>
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d005      	beq.n	8004f54 <I2C_Master_ADDR+0x294>
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d002      	beq.n	8004f54 <I2C_Master_ADDR+0x294>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d13b      	bne.n	8004fcc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f62:	605a      	str	r2, [r3, #4]
 8004f64:	e032      	b.n	8004fcc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f74:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f84:	d117      	bne.n	8004fb6 <I2C_Master_ADDR+0x2f6>
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f8c:	d00b      	beq.n	8004fa6 <I2C_Master_ADDR+0x2e6>
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d008      	beq.n	8004fa6 <I2C_Master_ADDR+0x2e6>
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d005      	beq.n	8004fa6 <I2C_Master_ADDR+0x2e6>
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d002      	beq.n	8004fa6 <I2C_Master_ADDR+0x2e6>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d107      	bne.n	8004fb6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fb4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004fd2:	e00b      	b.n	8004fec <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
}
 8004fea:	e7ff      	b.n	8004fec <I2C_Master_ADDR+0x32c>
 8004fec:	bf00      	nop
 8004fee:	3744      	adds	r7, #68	; 0x44
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d02b      	beq.n	8005068 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	781a      	ldrb	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d114      	bne.n	8005068 <I2C_SlaveTransmit_TXE+0x72>
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b29      	cmp	r3, #41	; 0x29
 8005042:	d111      	bne.n	8005068 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005052:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2221      	movs	r2, #33	; 0x21
 8005058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2228      	movs	r2, #40	; 0x28
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff f9df 	bl	8004426 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d011      	beq.n	80050a6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	781a      	ldrb	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr

080050b0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d02c      	beq.n	8005124 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d114      	bne.n	8005124 <I2C_SlaveReceive_RXNE+0x74>
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	2b2a      	cmp	r3, #42	; 0x2a
 80050fe:	d111      	bne.n	8005124 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2222      	movs	r2, #34	; 0x22
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2228      	movs	r2, #40	; 0x28
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff f98a 	bl	8004438 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d012      	beq.n	8005164 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005178:	2300      	movs	r3, #0
 800517a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005188:	2b28      	cmp	r3, #40	; 0x28
 800518a:	d125      	bne.n	80051d8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d103      	bne.n	80051bc <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	81bb      	strh	r3, [r7, #12]
 80051ba:	e002      	b.n	80051c2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051ca:	89ba      	ldrh	r2, [r7, #12]
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff f93a 	bl	800444a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051d6:	e00e      	b.n	80051f6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051f6:	bf00      	nop
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800521e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005220:	2300      	movs	r3, #0
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	60bb      	str	r3, [r7, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525c:	d172      	bne.n	8005344 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b22      	cmp	r3, #34	; 0x22
 8005262:	d002      	beq.n	800526a <I2C_Slave_STOPF+0x6a>
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b2a      	cmp	r3, #42	; 0x2a
 8005268:	d135      	bne.n	80052d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d005      	beq.n	800528e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f043 0204 	orr.w	r2, r3, #4
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800529c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fd ff5a 	bl	800315c <HAL_DMA_GetState>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d049      	beq.n	8005342 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	4a69      	ldr	r2, [pc, #420]	; (8005458 <I2C_Slave_STOPF+0x258>)
 80052b4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fd fdd0 	bl	8002e60 <HAL_DMA_Abort_IT>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d03d      	beq.n	8005342 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052d0:	4610      	mov	r0, r2
 80052d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052d4:	e035      	b.n	8005342 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	b29a      	uxth	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f043 0204 	orr.w	r2, r3, #4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005308:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	4618      	mov	r0, r3
 8005310:	f7fd ff24 	bl	800315c <HAL_DMA_GetState>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d014      	beq.n	8005344 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	4a4e      	ldr	r2, [pc, #312]	; (8005458 <I2C_Slave_STOPF+0x258>)
 8005320:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd fd9a 	bl	8002e60 <HAL_DMA_Abort_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800533c:	4610      	mov	r0, r2
 800533e:	4798      	blx	r3
 8005340:	e000      	b.n	8005344 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005342:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d03e      	beq.n	80053cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b04      	cmp	r3, #4
 800535a:	d112      	bne.n	8005382 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d112      	bne.n	80053b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	f043 0204 	orr.w	r2, r3, #4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f843 	bl	8005460 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053da:	e039      	b.n	8005450 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b2a      	cmp	r3, #42	; 0x2a
 80053e0:	d109      	bne.n	80053f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2228      	movs	r2, #40	; 0x28
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff f821 	bl	8004438 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b28      	cmp	r3, #40	; 0x28
 8005400:	d111      	bne.n	8005426 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a15      	ldr	r2, [pc, #84]	; (800545c <I2C_Slave_STOPF+0x25c>)
 8005406:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff f820 	bl	8004464 <HAL_I2C_ListenCpltCallback>
}
 8005424:	e014      	b.n	8005450 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	2b22      	cmp	r3, #34	; 0x22
 800542c:	d002      	beq.n	8005434 <I2C_Slave_STOPF+0x234>
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b22      	cmp	r3, #34	; 0x22
 8005432:	d10d      	bne.n	8005450 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fe fff4 	bl	8004438 <HAL_I2C_SlaveRxCpltCallback>
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	08005bd9 	.word	0x08005bd9
 800545c:	ffff0000 	.word	0xffff0000

08005460 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005476:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	2b10      	cmp	r3, #16
 800547c:	d002      	beq.n	8005484 <I2C_ITError+0x24>
 800547e:	7bbb      	ldrb	r3, [r7, #14]
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	d10a      	bne.n	800549a <I2C_ITError+0x3a>
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	2b22      	cmp	r3, #34	; 0x22
 8005488:	d107      	bne.n	800549a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005498:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054a0:	2b28      	cmp	r3, #40	; 0x28
 80054a2:	d107      	bne.n	80054b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2228      	movs	r2, #40	; 0x28
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054b2:	e015      	b.n	80054e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c2:	d00a      	beq.n	80054da <I2C_ITError+0x7a>
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b60      	cmp	r3, #96	; 0x60
 80054c8:	d007      	beq.n	80054da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ee:	d162      	bne.n	80055b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d020      	beq.n	8005550 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005512:	4a6a      	ldr	r2, [pc, #424]	; (80056bc <I2C_ITError+0x25c>)
 8005514:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd fca0 	bl	8002e60 <HAL_DMA_Abort_IT>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 8089 	beq.w	800563a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800554a:	4610      	mov	r0, r2
 800554c:	4798      	blx	r3
 800554e:	e074      	b.n	800563a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	4a59      	ldr	r2, [pc, #356]	; (80056bc <I2C_ITError+0x25c>)
 8005556:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	4618      	mov	r0, r3
 800555e:	f7fd fc7f 	bl	8002e60 <HAL_DMA_Abort_IT>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d068      	beq.n	800563a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d10b      	bne.n	800558e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055b0:	4610      	mov	r0, r2
 80055b2:	4798      	blx	r3
 80055b4:	e041      	b.n	800563a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b60      	cmp	r3, #96	; 0x60
 80055c0:	d125      	bne.n	800560e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d10b      	bne.n	80055f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fe ff47 	bl	800449a <HAL_I2C_AbortCpltCallback>
 800560c:	e015      	b.n	800563a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d10b      	bne.n	8005634 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fe ff27 	bl	8004488 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10e      	bne.n	8005668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005676:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b04      	cmp	r3, #4
 800568a:	d113      	bne.n	80056b4 <I2C_ITError+0x254>
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	2b28      	cmp	r3, #40	; 0x28
 8005690:	d110      	bne.n	80056b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <I2C_ITError+0x260>)
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fe fed8 	bl	8004464 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	08005bd9 	.word	0x08005bd9
 80056c0:	ffff0000 	.word	0xffff0000

080056c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	817b      	strh	r3, [r7, #10]
 80056d6:	460b      	mov	r3, r1
 80056d8:	813b      	strh	r3, [r7, #8]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fb14 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00d      	beq.n	8005722 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005714:	d103      	bne.n	800571e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e05f      	b.n	80057e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005722:	897b      	ldrh	r3, [r7, #10]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005730:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	492d      	ldr	r1, [pc, #180]	; (80057ec <I2C_RequestMemoryWrite+0x128>)
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fb6f 	bl	8005e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e04c      	b.n	80057e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800575e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005760:	6a39      	ldr	r1, [r7, #32]
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fbfa 	bl	8005f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00d      	beq.n	800578a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	2b04      	cmp	r3, #4
 8005774:	d107      	bne.n	8005786 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005784:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e02b      	b.n	80057e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005790:	893b      	ldrh	r3, [r7, #8]
 8005792:	b2da      	uxtb	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	611a      	str	r2, [r3, #16]
 800579a:	e021      	b.n	80057e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800579c:	893b      	ldrh	r3, [r7, #8]
 800579e:	0a1b      	lsrs	r3, r3, #8
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ac:	6a39      	ldr	r1, [r7, #32]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fbd4 	bl	8005f5c <I2C_WaitOnTXEFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00d      	beq.n	80057d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d107      	bne.n	80057d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e005      	b.n	80057e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3718      	adds	r7, #24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	00010002 	.word	0x00010002

080057f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	4608      	mov	r0, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	461a      	mov	r2, r3
 80057fe:	4603      	mov	r3, r0
 8005800:	817b      	strh	r3, [r7, #10]
 8005802:	460b      	mov	r3, r1
 8005804:	813b      	strh	r3, [r7, #8]
 8005806:	4613      	mov	r3, r2
 8005808:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005818:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	2200      	movs	r2, #0
 8005832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fa76 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00d      	beq.n	800585e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005850:	d103      	bne.n	800585a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e0aa      	b.n	80059b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800585e:	897b      	ldrh	r3, [r7, #10]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800586c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	6a3a      	ldr	r2, [r7, #32]
 8005872:	4952      	ldr	r1, [pc, #328]	; (80059bc <I2C_RequestMemoryRead+0x1cc>)
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fad1 	bl	8005e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e097      	b.n	80059b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	6a39      	ldr	r1, [r7, #32]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fb5c 	bl	8005f5c <I2C_WaitOnTXEFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00d      	beq.n	80058c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d107      	bne.n	80058c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e076      	b.n	80059b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058c6:	88fb      	ldrh	r3, [r7, #6]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d105      	bne.n	80058d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058cc:	893b      	ldrh	r3, [r7, #8]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	611a      	str	r2, [r3, #16]
 80058d6:	e021      	b.n	800591c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058d8:	893b      	ldrh	r3, [r7, #8]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	b29b      	uxth	r3, r3
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	6a39      	ldr	r1, [r7, #32]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fb36 	bl	8005f5c <I2C_WaitOnTXEFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d107      	bne.n	800590e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e050      	b.n	80059b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005912:	893b      	ldrh	r3, [r7, #8]
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800591c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591e:	6a39      	ldr	r1, [r7, #32]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fb1b 	bl	8005f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00d      	beq.n	8005948 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	2b04      	cmp	r3, #4
 8005932:	d107      	bne.n	8005944 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005942:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e035      	b.n	80059b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005956:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	2200      	movs	r2, #0
 8005960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f9df 	bl	8005d28 <I2C_WaitOnFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00d      	beq.n	800598c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597e:	d103      	bne.n	8005988 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e013      	b.n	80059b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800598c:	897b      	ldrh	r3, [r7, #10]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	6a3a      	ldr	r2, [r7, #32]
 80059a0:	4906      	ldr	r1, [pc, #24]	; (80059bc <I2C_RequestMemoryRead+0x1cc>)
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fa3a 	bl	8005e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	00010002 	.word	0x00010002

080059c0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059dc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059f2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	2200      	movs	r2, #0
 8005a02:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	2200      	movs	r2, #0
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005a14:	7cfb      	ldrb	r3, [r7, #19]
 8005a16:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005a1a:	2b21      	cmp	r3, #33	; 0x21
 8005a1c:	d007      	beq.n	8005a2e <I2C_DMAXferCplt+0x6e>
 8005a1e:	7cfb      	ldrb	r3, [r7, #19]
 8005a20:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005a24:	2b22      	cmp	r3, #34	; 0x22
 8005a26:	d131      	bne.n	8005a8c <I2C_DMAXferCplt+0xcc>
 8005a28:	7cbb      	ldrb	r3, [r7, #18]
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d12e      	bne.n	8005a8c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a3c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2200      	movs	r2, #0
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
 8005a46:	2b29      	cmp	r3, #41	; 0x29
 8005a48:	d10a      	bne.n	8005a60 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2221      	movs	r2, #33	; 0x21
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2228      	movs	r2, #40	; 0x28
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a58:	6978      	ldr	r0, [r7, #20]
 8005a5a:	f7fe fce4 	bl	8004426 <HAL_I2C_SlaveTxCpltCallback>
 8005a5e:	e00c      	b.n	8005a7a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	2b2a      	cmp	r3, #42	; 0x2a
 8005a64:	d109      	bne.n	8005a7a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2222      	movs	r2, #34	; 0x22
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2228      	movs	r2, #40	; 0x28
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a74:	6978      	ldr	r0, [r7, #20]
 8005a76:	f7fe fcdf 	bl	8004438 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005a88:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005a8a:	e06a      	b.n	8005b62 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d064      	beq.n	8005b62 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d107      	bne.n	8005ab2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ac0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ac8:	d009      	beq.n	8005ade <I2C_DMAXferCplt+0x11e>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d006      	beq.n	8005ade <I2C_DMAXferCplt+0x11e>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ad6:	d002      	beq.n	8005ade <I2C_DMAXferCplt+0x11e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d107      	bne.n	8005aee <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005afc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b0c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005b1c:	6978      	ldr	r0, [r7, #20]
 8005b1e:	f7fe fcb3 	bl	8004488 <HAL_I2C_ErrorCallback>
}
 8005b22:	e01e      	b.n	8005b62 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	d10a      	bne.n	8005b4e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2200      	movs	r2, #0
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005b46:	6978      	ldr	r0, [r7, #20]
 8005b48:	f7fe fc95 	bl	8004476 <HAL_I2C_MemRxCpltCallback>
}
 8005b4c:	e009      	b.n	8005b62 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2212      	movs	r2, #18
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b5c:	6978      	ldr	r0, [r7, #20]
 8005b5e:	f7fe fc59 	bl	8004414 <HAL_I2C_MasterRxCpltCallback>
}
 8005b62:	bf00      	nop
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	2200      	movs	r2, #0
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	2200      	movs	r2, #0
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba6:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f043 0210 	orr.w	r2, r3, #16
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7fe fc5c 	bl	8004488 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bf2:	4b4b      	ldr	r3, [pc, #300]	; (8005d20 <I2C_DMAAbort+0x148>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	4a4a      	ldr	r2, [pc, #296]	; (8005d24 <I2C_DMAAbort+0x14c>)
 8005bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfe:	0a1a      	lsrs	r2, r3, #8
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	00da      	lsls	r2, r3, #3
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005c1e:	e00a      	b.n	8005c36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c34:	d0ea      	beq.n	8005c0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c42:	2200      	movs	r2, #0
 8005c44:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	2200      	movs	r2, #0
 8005c54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	2200      	movs	r2, #0
 8005c7a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	2200      	movs	r2, #0
 8005c8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b60      	cmp	r3, #96	; 0x60
 8005ca6:	d10e      	bne.n	8005cc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cbe:	6978      	ldr	r0, [r7, #20]
 8005cc0:	f7fe fbeb 	bl	800449a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cc4:	e027      	b.n	8005d16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cc6:	7cfb      	ldrb	r3, [r7, #19]
 8005cc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ccc:	2b28      	cmp	r3, #40	; 0x28
 8005cce:	d117      	bne.n	8005d00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2228      	movs	r2, #40	; 0x28
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cfe:	e007      	b.n	8005d10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d10:	6978      	ldr	r0, [r7, #20]
 8005d12:	f7fe fbb9 	bl	8004488 <HAL_I2C_ErrorCallback>
}
 8005d16:	bf00      	nop
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000018 	.word	0x20000018
 8005d24:	14f8b589 	.word	0x14f8b589

08005d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d38:	e048      	b.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d40:	d044      	beq.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d42:	f7fc fb7d 	bl	8002440 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d302      	bcc.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d139      	bne.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	0c1b      	lsrs	r3, r3, #16
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d10d      	bne.n	8005d7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	43da      	mvns	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf0c      	ite	eq
 8005d74:	2301      	moveq	r3, #1
 8005d76:	2300      	movne	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	e00c      	b.n	8005d98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	43da      	mvns	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bf0c      	ite	eq
 8005d90:	2301      	moveq	r3, #1
 8005d92:	2300      	movne	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d116      	bne.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	f043 0220 	orr.w	r2, r3, #32
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e023      	b.n	8005e14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10d      	bne.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	43da      	mvns	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4013      	ands	r3, r2
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	e00c      	b.n	8005e0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	43da      	mvns	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d093      	beq.n	8005d3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e2a:	e071      	b.n	8005f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3a:	d123      	bne.n	8005e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e70:	f043 0204 	orr.w	r2, r3, #4
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e067      	b.n	8005f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d041      	beq.n	8005f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8c:	f7fc fad8 	bl	8002440 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d302      	bcc.n	8005ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d136      	bne.n	8005f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10c      	bne.n	8005ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bf14      	ite	ne
 8005ebe:	2301      	movne	r3, #1
 8005ec0:	2300      	moveq	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e00b      	b.n	8005ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	43da      	mvns	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	bf14      	ite	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	2300      	moveq	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e021      	b.n	8005f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	0c1b      	lsrs	r3, r3, #16
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d10c      	bne.n	8005f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	43da      	mvns	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4013      	ands	r3, r2
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bf14      	ite	ne
 8005f2c:	2301      	movne	r3, #1
 8005f2e:	2300      	moveq	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	e00b      	b.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	43da      	mvns	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bf14      	ite	ne
 8005f46:	2301      	movne	r3, #1
 8005f48:	2300      	moveq	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f af6d 	bne.w	8005e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f68:	e034      	b.n	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f915 	bl	800619a <I2C_IsAcknowledgeFailed>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e034      	b.n	8005fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f80:	d028      	beq.n	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f82:	f7fc fa5d 	bl	8002440 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d302      	bcc.n	8005f98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d11d      	bne.n	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa2:	2b80      	cmp	r3, #128	; 0x80
 8005fa4:	d016      	beq.n	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	f043 0220 	orr.w	r2, r3, #32
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e007      	b.n	8005fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b80      	cmp	r3, #128	; 0x80
 8005fe0:	d1c3      	bne.n	8005f6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ff8:	e034      	b.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f8cd 	bl	800619a <I2C_IsAcknowledgeFailed>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e034      	b.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d028      	beq.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006012:	f7fc fa15 	bl	8002440 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11d      	bne.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b04      	cmp	r3, #4
 8006034:	d016      	beq.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	f043 0220 	orr.w	r2, r3, #32
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e007      	b.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d1c3      	bne.n	8005ffa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006088:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	08db      	lsrs	r3, r3, #3
 800608e:	4a13      	ldr	r2, [pc, #76]	; (80060dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	0a1a      	lsrs	r2, r3, #8
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d107      	bne.n	80060ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e008      	b.n	80060cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c8:	d0e9      	beq.n	800609e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	20000018 	.word	0x20000018
 80060dc:	14f8b589 	.word	0x14f8b589

080060e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060ec:	e049      	b.n	8006182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d119      	bne.n	8006130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0210 	mvn.w	r2, #16
 8006104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e030      	b.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006130:	f7fc f986 	bl	8002440 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	d302      	bcc.n	8006146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11d      	bne.n	8006182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006150:	2b40      	cmp	r3, #64	; 0x40
 8006152:	d016      	beq.n	8006182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f043 0220 	orr.w	r2, r3, #32
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e007      	b.n	8006192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d1ae      	bne.n	80060ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b0:	d11b      	bne.n	80061ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	f043 0204 	orr.w	r2, r3, #4
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr

080061f6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006202:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006206:	d103      	bne.n	8006210 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800620e:	e007      	b.n	8006220 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006214:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006218:	d102      	bne.n	8006220 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2208      	movs	r2, #8
 800621e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr
	...

0800622c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e272      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8087 	beq.w	800635a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800624c:	4b92      	ldr	r3, [pc, #584]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 030c 	and.w	r3, r3, #12
 8006254:	2b04      	cmp	r3, #4
 8006256:	d00c      	beq.n	8006272 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006258:	4b8f      	ldr	r3, [pc, #572]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 030c 	and.w	r3, r3, #12
 8006260:	2b08      	cmp	r3, #8
 8006262:	d112      	bne.n	800628a <HAL_RCC_OscConfig+0x5e>
 8006264:	4b8c      	ldr	r3, [pc, #560]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006270:	d10b      	bne.n	800628a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006272:	4b89      	ldr	r3, [pc, #548]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d06c      	beq.n	8006358 <HAL_RCC_OscConfig+0x12c>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d168      	bne.n	8006358 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e24c      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006292:	d106      	bne.n	80062a2 <HAL_RCC_OscConfig+0x76>
 8006294:	4b80      	ldr	r3, [pc, #512]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a7f      	ldr	r2, [pc, #508]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 800629a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e02e      	b.n	8006300 <HAL_RCC_OscConfig+0xd4>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10c      	bne.n	80062c4 <HAL_RCC_OscConfig+0x98>
 80062aa:	4b7b      	ldr	r3, [pc, #492]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a7a      	ldr	r2, [pc, #488]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	4b78      	ldr	r3, [pc, #480]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a77      	ldr	r2, [pc, #476]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e01d      	b.n	8006300 <HAL_RCC_OscConfig+0xd4>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCC_OscConfig+0xbc>
 80062ce:	4b72      	ldr	r3, [pc, #456]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a71      	ldr	r2, [pc, #452]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4b6f      	ldr	r3, [pc, #444]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a6e      	ldr	r2, [pc, #440]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e00b      	b.n	8006300 <HAL_RCC_OscConfig+0xd4>
 80062e8:	4b6b      	ldr	r3, [pc, #428]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a6a      	ldr	r2, [pc, #424]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	4b68      	ldr	r3, [pc, #416]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a67      	ldr	r2, [pc, #412]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80062fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006308:	f7fc f89a 	bl	8002440 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006310:	f7fc f896 	bl	8002440 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b64      	cmp	r3, #100	; 0x64
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e200      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006322:	4b5d      	ldr	r3, [pc, #372]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0xe4>
 800632e:	e014      	b.n	800635a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006330:	f7fc f886 	bl	8002440 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006338:	f7fc f882 	bl	8002440 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b64      	cmp	r3, #100	; 0x64
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e1ec      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634a:	4b53      	ldr	r3, [pc, #332]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f0      	bne.n	8006338 <HAL_RCC_OscConfig+0x10c>
 8006356:	e000      	b.n	800635a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d063      	beq.n	800642e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006366:	4b4c      	ldr	r3, [pc, #304]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f003 030c 	and.w	r3, r3, #12
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006372:	4b49      	ldr	r3, [pc, #292]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b08      	cmp	r3, #8
 800637c:	d11c      	bne.n	80063b8 <HAL_RCC_OscConfig+0x18c>
 800637e:	4b46      	ldr	r3, [pc, #280]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d116      	bne.n	80063b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638a:	4b43      	ldr	r3, [pc, #268]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_RCC_OscConfig+0x176>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d001      	beq.n	80063a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e1c0      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a2:	4b3d      	ldr	r3, [pc, #244]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	4939      	ldr	r1, [pc, #228]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b6:	e03a      	b.n	800642e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d020      	beq.n	8006402 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c0:	4b36      	ldr	r3, [pc, #216]	; (800649c <HAL_RCC_OscConfig+0x270>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c6:	f7fc f83b 	bl	8002440 <HAL_GetTick>
 80063ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063cc:	e008      	b.n	80063e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ce:	f7fc f837 	bl	8002440 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e1a1      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e0:	4b2d      	ldr	r3, [pc, #180]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f0      	beq.n	80063ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ec:	4b2a      	ldr	r3, [pc, #168]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4927      	ldr	r1, [pc, #156]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	600b      	str	r3, [r1, #0]
 8006400:	e015      	b.n	800642e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006402:	4b26      	ldr	r3, [pc, #152]	; (800649c <HAL_RCC_OscConfig+0x270>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006408:	f7fc f81a 	bl	8002440 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006410:	f7fc f816 	bl	8002440 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e180      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006422:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f0      	bne.n	8006410 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d03a      	beq.n	80064b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d019      	beq.n	8006476 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006442:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <HAL_RCC_OscConfig+0x274>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006448:	f7fb fffa 	bl	8002440 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006450:	f7fb fff6 	bl	8002440 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e160      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006462:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <HAL_RCC_OscConfig+0x26c>)
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f0      	beq.n	8006450 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800646e:	2001      	movs	r0, #1
 8006470:	f000 face 	bl	8006a10 <RCC_Delay>
 8006474:	e01c      	b.n	80064b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006476:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <HAL_RCC_OscConfig+0x274>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800647c:	f7fb ffe0 	bl	8002440 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006482:	e00f      	b.n	80064a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006484:	f7fb ffdc 	bl	8002440 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d908      	bls.n	80064a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e146      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
 8006496:	bf00      	nop
 8006498:	40021000 	.word	0x40021000
 800649c:	42420000 	.word	0x42420000
 80064a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a4:	4b92      	ldr	r3, [pc, #584]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e9      	bne.n	8006484 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80a6 	beq.w	800660a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064be:	2300      	movs	r3, #0
 80064c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064c2:	4b8b      	ldr	r3, [pc, #556]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10d      	bne.n	80064ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ce:	4b88      	ldr	r3, [pc, #544]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	4a87      	ldr	r2, [pc, #540]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d8:	61d3      	str	r3, [r2, #28]
 80064da:	4b85      	ldr	r3, [pc, #532]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ea:	4b82      	ldr	r3, [pc, #520]	; (80066f4 <HAL_RCC_OscConfig+0x4c8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d118      	bne.n	8006528 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064f6:	4b7f      	ldr	r3, [pc, #508]	; (80066f4 <HAL_RCC_OscConfig+0x4c8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a7e      	ldr	r2, [pc, #504]	; (80066f4 <HAL_RCC_OscConfig+0x4c8>)
 80064fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006502:	f7fb ff9d 	bl	8002440 <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650a:	f7fb ff99 	bl	8002440 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b64      	cmp	r3, #100	; 0x64
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e103      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651c:	4b75      	ldr	r3, [pc, #468]	; (80066f4 <HAL_RCC_OscConfig+0x4c8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d106      	bne.n	800653e <HAL_RCC_OscConfig+0x312>
 8006530:	4b6f      	ldr	r3, [pc, #444]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	4a6e      	ldr	r2, [pc, #440]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	6213      	str	r3, [r2, #32]
 800653c:	e02d      	b.n	800659a <HAL_RCC_OscConfig+0x36e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10c      	bne.n	8006560 <HAL_RCC_OscConfig+0x334>
 8006546:	4b6a      	ldr	r3, [pc, #424]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	4a69      	ldr	r2, [pc, #420]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	6213      	str	r3, [r2, #32]
 8006552:	4b67      	ldr	r3, [pc, #412]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	4a66      	ldr	r2, [pc, #408]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006558:	f023 0304 	bic.w	r3, r3, #4
 800655c:	6213      	str	r3, [r2, #32]
 800655e:	e01c      	b.n	800659a <HAL_RCC_OscConfig+0x36e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b05      	cmp	r3, #5
 8006566:	d10c      	bne.n	8006582 <HAL_RCC_OscConfig+0x356>
 8006568:	4b61      	ldr	r3, [pc, #388]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	4a60      	ldr	r2, [pc, #384]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800656e:	f043 0304 	orr.w	r3, r3, #4
 8006572:	6213      	str	r3, [r2, #32]
 8006574:	4b5e      	ldr	r3, [pc, #376]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	4a5d      	ldr	r2, [pc, #372]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	6213      	str	r3, [r2, #32]
 8006580:	e00b      	b.n	800659a <HAL_RCC_OscConfig+0x36e>
 8006582:	4b5b      	ldr	r3, [pc, #364]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	4a5a      	ldr	r2, [pc, #360]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	6213      	str	r3, [r2, #32]
 800658e:	4b58      	ldr	r3, [pc, #352]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	4a57      	ldr	r2, [pc, #348]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006594:	f023 0304 	bic.w	r3, r3, #4
 8006598:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d015      	beq.n	80065ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065a2:	f7fb ff4d 	bl	8002440 <HAL_GetTick>
 80065a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a8:	e00a      	b.n	80065c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065aa:	f7fb ff49 	bl	8002440 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d901      	bls.n	80065c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e0b1      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c0:	4b4b      	ldr	r3, [pc, #300]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0ee      	beq.n	80065aa <HAL_RCC_OscConfig+0x37e>
 80065cc:	e014      	b.n	80065f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ce:	f7fb ff37 	bl	8002440 <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d4:	e00a      	b.n	80065ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d6:	f7fb ff33 	bl	8002440 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e09b      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ec:	4b40      	ldr	r3, [pc, #256]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1ee      	bne.n	80065d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d105      	bne.n	800660a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fe:	4b3c      	ldr	r3, [pc, #240]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	4a3b      	ldr	r2, [pc, #236]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006608:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8087 	beq.w	8006722 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006614:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f003 030c 	and.w	r3, r3, #12
 800661c:	2b08      	cmp	r3, #8
 800661e:	d061      	beq.n	80066e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d146      	bne.n	80066b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006628:	4b33      	ldr	r3, [pc, #204]	; (80066f8 <HAL_RCC_OscConfig+0x4cc>)
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662e:	f7fb ff07 	bl	8002440 <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006634:	e008      	b.n	8006648 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006636:	f7fb ff03 	bl	8002440 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e06d      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006648:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1f0      	bne.n	8006636 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800665c:	d108      	bne.n	8006670 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800665e:	4b24      	ldr	r3, [pc, #144]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	4921      	ldr	r1, [pc, #132]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 800666c:	4313      	orrs	r3, r2
 800666e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006670:	4b1f      	ldr	r3, [pc, #124]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a19      	ldr	r1, [r3, #32]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	430b      	orrs	r3, r1
 8006682:	491b      	ldr	r1, [pc, #108]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 8006684:	4313      	orrs	r3, r2
 8006686:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006688:	4b1b      	ldr	r3, [pc, #108]	; (80066f8 <HAL_RCC_OscConfig+0x4cc>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668e:	f7fb fed7 	bl	8002440 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006696:	f7fb fed3 	bl	8002440 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e03d      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066a8:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x46a>
 80066b4:	e035      	b.n	8006722 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <HAL_RCC_OscConfig+0x4cc>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066bc:	f7fb fec0 	bl	8002440 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c4:	f7fb febc 	bl	8002440 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e026      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066d6:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <HAL_RCC_OscConfig+0x4c4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x498>
 80066e2:	e01e      	b.n	8006722 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d107      	bne.n	80066fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e019      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40007000 	.word	0x40007000
 80066f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066fc:	4b0b      	ldr	r3, [pc, #44]	; (800672c <HAL_RCC_OscConfig+0x500>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	429a      	cmp	r2, r3
 800670e:	d106      	bne.n	800671e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671a:	429a      	cmp	r2, r3
 800671c:	d001      	beq.n	8006722 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40021000 	.word	0x40021000

08006730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0d0      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006744:	4b6a      	ldr	r3, [pc, #424]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d910      	bls.n	8006774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006752:	4b67      	ldr	r3, [pc, #412]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 0207 	bic.w	r2, r3, #7
 800675a:	4965      	ldr	r1, [pc, #404]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	4313      	orrs	r3, r2
 8006760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006762:	4b63      	ldr	r3, [pc, #396]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d001      	beq.n	8006774 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0b8      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d020      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800678c:	4b59      	ldr	r3, [pc, #356]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4a58      	ldr	r2, [pc, #352]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006792:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006796:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067a4:	4b53      	ldr	r3, [pc, #332]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4a52      	ldr	r2, [pc, #328]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80067ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b0:	4b50      	ldr	r3, [pc, #320]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	494d      	ldr	r1, [pc, #308]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d040      	beq.n	8006850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d107      	bne.n	80067e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d6:	4b47      	ldr	r3, [pc, #284]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d115      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e07f      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d107      	bne.n	80067fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ee:	4b41      	ldr	r3, [pc, #260]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e073      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fe:	4b3d      	ldr	r3, [pc, #244]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e06b      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800680e:	4b39      	ldr	r3, [pc, #228]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f023 0203 	bic.w	r2, r3, #3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	4936      	ldr	r1, [pc, #216]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800681c:	4313      	orrs	r3, r2
 800681e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006820:	f7fb fe0e 	bl	8002440 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006826:	e00a      	b.n	800683e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006828:	f7fb fe0a 	bl	8002440 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	f241 3288 	movw	r2, #5000	; 0x1388
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e053      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683e:	4b2d      	ldr	r3, [pc, #180]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f003 020c 	and.w	r2, r3, #12
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	429a      	cmp	r2, r3
 800684e:	d1eb      	bne.n	8006828 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006850:	4b27      	ldr	r3, [pc, #156]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d210      	bcs.n	8006880 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 0207 	bic.w	r2, r3, #7
 8006866:	4922      	ldr	r1, [pc, #136]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e032      	b.n	80068e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800688c:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	4916      	ldr	r1, [pc, #88]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800689a:	4313      	orrs	r3, r2
 800689c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068aa:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	490e      	ldr	r1, [pc, #56]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068be:	f000 f821 	bl	8006904 <HAL_RCC_GetSysClockFreq>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	490a      	ldr	r1, [pc, #40]	; (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80068d0:	5ccb      	ldrb	r3, [r1, r3]
 80068d2:	fa22 f303 	lsr.w	r3, r2, r3
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <HAL_RCC_ClockConfig+0x1cc>)
 80068d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <HAL_RCC_ClockConfig+0x1d0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fb fd6c 	bl	80023bc <HAL_InitTick>

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40022000 	.word	0x40022000
 80068f4:	40021000 	.word	0x40021000
 80068f8:	0800be78 	.word	0x0800be78
 80068fc:	20000018 	.word	0x20000018
 8006900:	2000001c 	.word	0x2000001c

08006904 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	2300      	movs	r3, #0
 8006910:	60bb      	str	r3, [r7, #8]
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	2300      	movs	r3, #0
 8006918:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800691e:	4b1e      	ldr	r3, [pc, #120]	; (8006998 <HAL_RCC_GetSysClockFreq+0x94>)
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b04      	cmp	r3, #4
 800692c:	d002      	beq.n	8006934 <HAL_RCC_GetSysClockFreq+0x30>
 800692e:	2b08      	cmp	r3, #8
 8006930:	d003      	beq.n	800693a <HAL_RCC_GetSysClockFreq+0x36>
 8006932:	e027      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006934:	4b19      	ldr	r3, [pc, #100]	; (800699c <HAL_RCC_GetSysClockFreq+0x98>)
 8006936:	613b      	str	r3, [r7, #16]
      break;
 8006938:	e027      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	0c9b      	lsrs	r3, r3, #18
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006944:	5cd3      	ldrb	r3, [r2, r3]
 8006946:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d010      	beq.n	8006974 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <HAL_RCC_GetSysClockFreq+0x94>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	0c5b      	lsrs	r3, r3, #17
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	4a11      	ldr	r2, [pc, #68]	; (80069a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800695e:	5cd3      	ldrb	r3, [r2, r3]
 8006960:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a0d      	ldr	r2, [pc, #52]	; (800699c <HAL_RCC_GetSysClockFreq+0x98>)
 8006966:	fb03 f202 	mul.w	r2, r3, r2
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e004      	b.n	800697e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006978:	fb02 f303 	mul.w	r3, r2, r3
 800697c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	613b      	str	r3, [r7, #16]
      break;
 8006982:	e002      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006984:	4b05      	ldr	r3, [pc, #20]	; (800699c <HAL_RCC_GetSysClockFreq+0x98>)
 8006986:	613b      	str	r3, [r7, #16]
      break;
 8006988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800698a:	693b      	ldr	r3, [r7, #16]
}
 800698c:	4618      	mov	r0, r3
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40021000 	.word	0x40021000
 800699c:	007a1200 	.word	0x007a1200
 80069a0:	0800be90 	.word	0x0800be90
 80069a4:	0800bea0 	.word	0x0800bea0
 80069a8:	003d0900 	.word	0x003d0900

080069ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b02      	ldr	r3, [pc, #8]	; (80069bc <HAL_RCC_GetHCLKFreq+0x10>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr
 80069bc:	20000018 	.word	0x20000018

080069c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069c4:	f7ff fff2 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069c8:	4602      	mov	r2, r0
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	4903      	ldr	r1, [pc, #12]	; (80069e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069d6:	5ccb      	ldrb	r3, [r1, r3]
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069dc:	4618      	mov	r0, r3
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40021000 	.word	0x40021000
 80069e4:	0800be88 	.word	0x0800be88

080069e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069ec:	f7ff ffde 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069f0:	4602      	mov	r2, r0
 80069f2:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	0adb      	lsrs	r3, r3, #11
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	4903      	ldr	r1, [pc, #12]	; (8006a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80069fe:	5ccb      	ldrb	r3, [r1, r3]
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	0800be88 	.word	0x0800be88

08006a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <RCC_Delay+0x34>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <RCC_Delay+0x38>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	0a5b      	lsrs	r3, r3, #9
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a2c:	bf00      	nop
  }
  while (Delay --);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1e5a      	subs	r2, r3, #1
 8006a32:	60fa      	str	r2, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f9      	bne.n	8006a2c <RCC_Delay+0x1c>
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	20000018 	.word	0x20000018
 8006a48:	10624dd3 	.word	0x10624dd3

08006a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d07d      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a6c:	4b4f      	ldr	r3, [pc, #316]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a6e:	69db      	ldr	r3, [r3, #28]
 8006a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10d      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a78:	4b4c      	ldr	r3, [pc, #304]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	4a4b      	ldr	r2, [pc, #300]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a82:	61d3      	str	r3, [r2, #28]
 8006a84:	4b49      	ldr	r3, [pc, #292]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a90:	2301      	movs	r3, #1
 8006a92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a94:	4b46      	ldr	r3, [pc, #280]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d118      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aa0:	4b43      	ldr	r3, [pc, #268]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a42      	ldr	r2, [pc, #264]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aac:	f7fb fcc8 	bl	8002440 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab4:	f7fb fcc4 	bl	8002440 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	; 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e06d      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac6:	4b3a      	ldr	r3, [pc, #232]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0f0      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ad2:	4b36      	ldr	r3, [pc, #216]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ada:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d02e      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d027      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006af0:	4b2e      	ldr	r3, [pc, #184]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006afa:	4b2e      	ldr	r3, [pc, #184]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b00:	4b2c      	ldr	r3, [pc, #176]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b06:	4a29      	ldr	r2, [pc, #164]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d014      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b16:	f7fb fc93 	bl	8002440 <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b1c:	e00a      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b1e:	f7fb fc8f 	bl	8002440 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e036      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b34:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0ee      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b40:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	4917      	ldr	r1, [pc, #92]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d105      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b58:	4b14      	ldr	r3, [pc, #80]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	4a13      	ldr	r2, [pc, #76]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	490b      	ldr	r1, [pc, #44]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b8e:	4b07      	ldr	r3, [pc, #28]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	4904      	ldr	r1, [pc, #16]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	40007000 	.word	0x40007000
 8006bb4:	42420440 	.word	0x42420440

08006bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e042      	b.n	8006c50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f7fb fb66 	bl	80022b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2224      	movs	r2, #36	; 0x24
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f91d 	bl	8006e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08a      	sub	sp, #40	; 0x28
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d16d      	bne.n	8006d54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <HAL_UART_Transmit+0x2c>
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e066      	b.n	8006d56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2221      	movs	r2, #33	; 0x21
 8006c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c96:	f7fb fbd3 	bl	8002440 <HAL_GetTick>
 8006c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	88fa      	ldrh	r2, [r7, #6]
 8006ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	88fa      	ldrh	r2, [r7, #6]
 8006ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb0:	d108      	bne.n	8006cc4 <HAL_UART_Transmit+0x6c>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d104      	bne.n	8006cc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	e003      	b.n	8006ccc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ccc:	e02a      	b.n	8006d24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2180      	movs	r1, #128	; 0x80
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 f840 	bl	8006d5e <UART_WaitOnFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e036      	b.n	8006d56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10b      	bne.n	8006d06 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	3302      	adds	r3, #2
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e007      	b.n	8006d16 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3301      	adds	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1cf      	bne.n	8006cce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	2140      	movs	r1, #64	; 0x40
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f810 	bl	8006d5e <UART_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e006      	b.n	8006d56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e000      	b.n	8006d56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006d54:	2302      	movs	r3, #2
  }
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3720      	adds	r7, #32
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b090      	sub	sp, #64	; 0x40
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	603b      	str	r3, [r7, #0]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d6e:	e050      	b.n	8006e12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d04c      	beq.n	8006e12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d7e:	f7fb fb5f 	bl	8002440 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d241      	bcs.n	8006e12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	330c      	adds	r3, #12
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	330c      	adds	r3, #12
 8006dac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dae:	637a      	str	r2, [r7, #52]	; 0x34
 8006db0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e5      	bne.n	8006d8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3314      	adds	r3, #20
 8006dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f023 0301 	bic.w	r3, r3, #1
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3314      	adds	r3, #20
 8006de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006de2:	623a      	str	r2, [r7, #32]
 8006de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	69f9      	ldr	r1, [r7, #28]
 8006de8:	6a3a      	ldr	r2, [r7, #32]
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e5      	bne.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e00f      	b.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	bf0c      	ite	eq
 8006e22:	2301      	moveq	r3, #1
 8006e24:	2300      	movne	r3, #0
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d09f      	beq.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3740      	adds	r7, #64	; 0x40
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006e76:	f023 030c 	bic.w	r3, r3, #12
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6812      	ldr	r2, [r2, #0]
 8006e7e:	68b9      	ldr	r1, [r7, #8]
 8006e80:	430b      	orrs	r3, r1
 8006e82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a2c      	ldr	r2, [pc, #176]	; (8006f50 <UART_SetConfig+0x114>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d103      	bne.n	8006eac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ea4:	f7ff fda0 	bl	80069e8 <HAL_RCC_GetPCLK2Freq>
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	e002      	b.n	8006eb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006eac:	f7ff fd88 	bl	80069c0 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	009a      	lsls	r2, r3, #2
 8006ebc:	441a      	add	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <UART_SetConfig+0x118>)
 8006eca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	0119      	lsls	r1, r3, #4
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009a      	lsls	r2, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ee8:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <UART_SetConfig+0x118>)
 8006eea:	fba3 0302 	umull	r0, r3, r3, r2
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	2064      	movs	r0, #100	; 0x64
 8006ef2:	fb00 f303 	mul.w	r3, r0, r3
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	3332      	adds	r3, #50	; 0x32
 8006efc:	4a15      	ldr	r2, [pc, #84]	; (8006f54 <UART_SetConfig+0x118>)
 8006efe:	fba2 2303 	umull	r2, r3, r2, r3
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f08:	4419      	add	r1, r3
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009a      	lsls	r2, r3, #2
 8006f14:	441a      	add	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <UART_SetConfig+0x118>)
 8006f22:	fba3 0302 	umull	r0, r3, r3, r2
 8006f26:	095b      	lsrs	r3, r3, #5
 8006f28:	2064      	movs	r0, #100	; 0x64
 8006f2a:	fb00 f303 	mul.w	r3, r0, r3
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	3332      	adds	r3, #50	; 0x32
 8006f34:	4a07      	ldr	r2, [pc, #28]	; (8006f54 <UART_SetConfig+0x118>)
 8006f36:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	f003 020f 	and.w	r2, r3, #15
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	440a      	add	r2, r1
 8006f46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006f48:	bf00      	nop
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40013800 	.word	0x40013800
 8006f54:	51eb851f 	.word	0x51eb851f

08006f58 <__cvt>:
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5e:	461f      	mov	r7, r3
 8006f60:	bfbb      	ittet	lt
 8006f62:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006f66:	461f      	movlt	r7, r3
 8006f68:	2300      	movge	r3, #0
 8006f6a:	232d      	movlt	r3, #45	; 0x2d
 8006f6c:	b088      	sub	sp, #32
 8006f6e:	4614      	mov	r4, r2
 8006f70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f72:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006f74:	7013      	strb	r3, [r2, #0]
 8006f76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f78:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006f7c:	f023 0820 	bic.w	r8, r3, #32
 8006f80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f84:	d005      	beq.n	8006f92 <__cvt+0x3a>
 8006f86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f8a:	d100      	bne.n	8006f8e <__cvt+0x36>
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e000      	b.n	8006f94 <__cvt+0x3c>
 8006f92:	2303      	movs	r3, #3
 8006f94:	aa07      	add	r2, sp, #28
 8006f96:	9204      	str	r2, [sp, #16]
 8006f98:	aa06      	add	r2, sp, #24
 8006f9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f9e:	e9cd 3500 	strd	r3, r5, [sp]
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	463b      	mov	r3, r7
 8006fa6:	f001 f8af 	bl	8008108 <_dtoa_r>
 8006faa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fae:	4606      	mov	r6, r0
 8006fb0:	d102      	bne.n	8006fb8 <__cvt+0x60>
 8006fb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fb4:	07db      	lsls	r3, r3, #31
 8006fb6:	d522      	bpl.n	8006ffe <__cvt+0xa6>
 8006fb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fbc:	eb06 0905 	add.w	r9, r6, r5
 8006fc0:	d110      	bne.n	8006fe4 <__cvt+0x8c>
 8006fc2:	7833      	ldrb	r3, [r6, #0]
 8006fc4:	2b30      	cmp	r3, #48	; 0x30
 8006fc6:	d10a      	bne.n	8006fde <__cvt+0x86>
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4620      	mov	r0, r4
 8006fce:	4639      	mov	r1, r7
 8006fd0:	f7f9 fcea 	bl	80009a8 <__aeabi_dcmpeq>
 8006fd4:	b918      	cbnz	r0, 8006fde <__cvt+0x86>
 8006fd6:	f1c5 0501 	rsb	r5, r5, #1
 8006fda:	f8ca 5000 	str.w	r5, [sl]
 8006fde:	f8da 3000 	ldr.w	r3, [sl]
 8006fe2:	4499      	add	r9, r3
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	4620      	mov	r0, r4
 8006fea:	4639      	mov	r1, r7
 8006fec:	f7f9 fcdc 	bl	80009a8 <__aeabi_dcmpeq>
 8006ff0:	b108      	cbz	r0, 8006ff6 <__cvt+0x9e>
 8006ff2:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ff6:	2230      	movs	r2, #48	; 0x30
 8006ff8:	9b07      	ldr	r3, [sp, #28]
 8006ffa:	454b      	cmp	r3, r9
 8006ffc:	d307      	bcc.n	800700e <__cvt+0xb6>
 8006ffe:	4630      	mov	r0, r6
 8007000:	9b07      	ldr	r3, [sp, #28]
 8007002:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007004:	1b9b      	subs	r3, r3, r6
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	b008      	add	sp, #32
 800700a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	9107      	str	r1, [sp, #28]
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	e7f0      	b.n	8006ff8 <__cvt+0xa0>

08007016 <__exponent>:
 8007016:	4603      	mov	r3, r0
 8007018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800701a:	2900      	cmp	r1, #0
 800701c:	f803 2b02 	strb.w	r2, [r3], #2
 8007020:	bfb6      	itet	lt
 8007022:	222d      	movlt	r2, #45	; 0x2d
 8007024:	222b      	movge	r2, #43	; 0x2b
 8007026:	4249      	neglt	r1, r1
 8007028:	2909      	cmp	r1, #9
 800702a:	7042      	strb	r2, [r0, #1]
 800702c:	dd2a      	ble.n	8007084 <__exponent+0x6e>
 800702e:	f10d 0207 	add.w	r2, sp, #7
 8007032:	4617      	mov	r7, r2
 8007034:	260a      	movs	r6, #10
 8007036:	fb91 f5f6 	sdiv	r5, r1, r6
 800703a:	4694      	mov	ip, r2
 800703c:	fb06 1415 	mls	r4, r6, r5, r1
 8007040:	3430      	adds	r4, #48	; 0x30
 8007042:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007046:	460c      	mov	r4, r1
 8007048:	2c63      	cmp	r4, #99	; 0x63
 800704a:	4629      	mov	r1, r5
 800704c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007050:	dcf1      	bgt.n	8007036 <__exponent+0x20>
 8007052:	3130      	adds	r1, #48	; 0x30
 8007054:	f1ac 0402 	sub.w	r4, ip, #2
 8007058:	f802 1c01 	strb.w	r1, [r2, #-1]
 800705c:	4622      	mov	r2, r4
 800705e:	1c41      	adds	r1, r0, #1
 8007060:	42ba      	cmp	r2, r7
 8007062:	d30a      	bcc.n	800707a <__exponent+0x64>
 8007064:	f10d 0209 	add.w	r2, sp, #9
 8007068:	eba2 020c 	sub.w	r2, r2, ip
 800706c:	42bc      	cmp	r4, r7
 800706e:	bf88      	it	hi
 8007070:	2200      	movhi	r2, #0
 8007072:	4413      	add	r3, r2
 8007074:	1a18      	subs	r0, r3, r0
 8007076:	b003      	add	sp, #12
 8007078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800707e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007082:	e7ed      	b.n	8007060 <__exponent+0x4a>
 8007084:	2330      	movs	r3, #48	; 0x30
 8007086:	3130      	adds	r1, #48	; 0x30
 8007088:	7083      	strb	r3, [r0, #2]
 800708a:	70c1      	strb	r1, [r0, #3]
 800708c:	1d03      	adds	r3, r0, #4
 800708e:	e7f1      	b.n	8007074 <__exponent+0x5e>

08007090 <_printf_float>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	b091      	sub	sp, #68	; 0x44
 8007096:	460c      	mov	r4, r1
 8007098:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800709c:	4616      	mov	r6, r2
 800709e:	461f      	mov	r7, r3
 80070a0:	4605      	mov	r5, r0
 80070a2:	f000 ff0d 	bl	8007ec0 <_localeconv_r>
 80070a6:	6803      	ldr	r3, [r0, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	9309      	str	r3, [sp, #36]	; 0x24
 80070ac:	f7f9 f850 	bl	8000150 <strlen>
 80070b0:	2300      	movs	r3, #0
 80070b2:	930e      	str	r3, [sp, #56]	; 0x38
 80070b4:	f8d8 3000 	ldr.w	r3, [r8]
 80070b8:	900a      	str	r0, [sp, #40]	; 0x28
 80070ba:	3307      	adds	r3, #7
 80070bc:	f023 0307 	bic.w	r3, r3, #7
 80070c0:	f103 0208 	add.w	r2, r3, #8
 80070c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80070c8:	f8d4 b000 	ldr.w	fp, [r4]
 80070cc:	f8c8 2000 	str.w	r2, [r8]
 80070d0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80070d4:	4652      	mov	r2, sl
 80070d6:	4643      	mov	r3, r8
 80070d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070dc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80070e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e2:	f04f 32ff 	mov.w	r2, #4294967295
 80070e6:	4650      	mov	r0, sl
 80070e8:	4b9c      	ldr	r3, [pc, #624]	; (800735c <_printf_float+0x2cc>)
 80070ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070ec:	f7f9 fc8e 	bl	8000a0c <__aeabi_dcmpun>
 80070f0:	bb70      	cbnz	r0, 8007150 <_printf_float+0xc0>
 80070f2:	f04f 32ff 	mov.w	r2, #4294967295
 80070f6:	4650      	mov	r0, sl
 80070f8:	4b98      	ldr	r3, [pc, #608]	; (800735c <_printf_float+0x2cc>)
 80070fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070fc:	f7f9 fc68 	bl	80009d0 <__aeabi_dcmple>
 8007100:	bb30      	cbnz	r0, 8007150 <_printf_float+0xc0>
 8007102:	2200      	movs	r2, #0
 8007104:	2300      	movs	r3, #0
 8007106:	4650      	mov	r0, sl
 8007108:	4641      	mov	r1, r8
 800710a:	f7f9 fc57 	bl	80009bc <__aeabi_dcmplt>
 800710e:	b110      	cbz	r0, 8007116 <_printf_float+0x86>
 8007110:	232d      	movs	r3, #45	; 0x2d
 8007112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007116:	4a92      	ldr	r2, [pc, #584]	; (8007360 <_printf_float+0x2d0>)
 8007118:	4b92      	ldr	r3, [pc, #584]	; (8007364 <_printf_float+0x2d4>)
 800711a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800711e:	bf94      	ite	ls
 8007120:	4690      	movls	r8, r2
 8007122:	4698      	movhi	r8, r3
 8007124:	2303      	movs	r3, #3
 8007126:	f04f 0a00 	mov.w	sl, #0
 800712a:	6123      	str	r3, [r4, #16]
 800712c:	f02b 0304 	bic.w	r3, fp, #4
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	4633      	mov	r3, r6
 8007134:	4621      	mov	r1, r4
 8007136:	4628      	mov	r0, r5
 8007138:	9700      	str	r7, [sp, #0]
 800713a:	aa0f      	add	r2, sp, #60	; 0x3c
 800713c:	f000 f9d6 	bl	80074ec <_printf_common>
 8007140:	3001      	adds	r0, #1
 8007142:	f040 8090 	bne.w	8007266 <_printf_float+0x1d6>
 8007146:	f04f 30ff 	mov.w	r0, #4294967295
 800714a:	b011      	add	sp, #68	; 0x44
 800714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007150:	4652      	mov	r2, sl
 8007152:	4643      	mov	r3, r8
 8007154:	4650      	mov	r0, sl
 8007156:	4641      	mov	r1, r8
 8007158:	f7f9 fc58 	bl	8000a0c <__aeabi_dcmpun>
 800715c:	b148      	cbz	r0, 8007172 <_printf_float+0xe2>
 800715e:	f1b8 0f00 	cmp.w	r8, #0
 8007162:	bfb8      	it	lt
 8007164:	232d      	movlt	r3, #45	; 0x2d
 8007166:	4a80      	ldr	r2, [pc, #512]	; (8007368 <_printf_float+0x2d8>)
 8007168:	bfb8      	it	lt
 800716a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800716e:	4b7f      	ldr	r3, [pc, #508]	; (800736c <_printf_float+0x2dc>)
 8007170:	e7d3      	b.n	800711a <_printf_float+0x8a>
 8007172:	6863      	ldr	r3, [r4, #4]
 8007174:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	d142      	bne.n	8007202 <_printf_float+0x172>
 800717c:	2306      	movs	r3, #6
 800717e:	6063      	str	r3, [r4, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	9206      	str	r2, [sp, #24]
 8007184:	aa0e      	add	r2, sp, #56	; 0x38
 8007186:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800718a:	aa0d      	add	r2, sp, #52	; 0x34
 800718c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007190:	9203      	str	r2, [sp, #12]
 8007192:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007196:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	4652      	mov	r2, sl
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	4628      	mov	r0, r5
 80071a4:	4643      	mov	r3, r8
 80071a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80071a8:	f7ff fed6 	bl	8006f58 <__cvt>
 80071ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071ae:	4680      	mov	r8, r0
 80071b0:	2947      	cmp	r1, #71	; 0x47
 80071b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80071b4:	d108      	bne.n	80071c8 <_printf_float+0x138>
 80071b6:	1cc8      	adds	r0, r1, #3
 80071b8:	db02      	blt.n	80071c0 <_printf_float+0x130>
 80071ba:	6863      	ldr	r3, [r4, #4]
 80071bc:	4299      	cmp	r1, r3
 80071be:	dd40      	ble.n	8007242 <_printf_float+0x1b2>
 80071c0:	f1a9 0902 	sub.w	r9, r9, #2
 80071c4:	fa5f f989 	uxtb.w	r9, r9
 80071c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80071cc:	d81f      	bhi.n	800720e <_printf_float+0x17e>
 80071ce:	464a      	mov	r2, r9
 80071d0:	3901      	subs	r1, #1
 80071d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071d6:	910d      	str	r1, [sp, #52]	; 0x34
 80071d8:	f7ff ff1d 	bl	8007016 <__exponent>
 80071dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071de:	4682      	mov	sl, r0
 80071e0:	1813      	adds	r3, r2, r0
 80071e2:	2a01      	cmp	r2, #1
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	dc02      	bgt.n	80071ee <_printf_float+0x15e>
 80071e8:	6822      	ldr	r2, [r4, #0]
 80071ea:	07d2      	lsls	r2, r2, #31
 80071ec:	d501      	bpl.n	80071f2 <_printf_float+0x162>
 80071ee:	3301      	adds	r3, #1
 80071f0:	6123      	str	r3, [r4, #16]
 80071f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d09b      	beq.n	8007132 <_printf_float+0xa2>
 80071fa:	232d      	movs	r3, #45	; 0x2d
 80071fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007200:	e797      	b.n	8007132 <_printf_float+0xa2>
 8007202:	2947      	cmp	r1, #71	; 0x47
 8007204:	d1bc      	bne.n	8007180 <_printf_float+0xf0>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1ba      	bne.n	8007180 <_printf_float+0xf0>
 800720a:	2301      	movs	r3, #1
 800720c:	e7b7      	b.n	800717e <_printf_float+0xee>
 800720e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007212:	d118      	bne.n	8007246 <_printf_float+0x1b6>
 8007214:	2900      	cmp	r1, #0
 8007216:	6863      	ldr	r3, [r4, #4]
 8007218:	dd0b      	ble.n	8007232 <_printf_float+0x1a2>
 800721a:	6121      	str	r1, [r4, #16]
 800721c:	b913      	cbnz	r3, 8007224 <_printf_float+0x194>
 800721e:	6822      	ldr	r2, [r4, #0]
 8007220:	07d0      	lsls	r0, r2, #31
 8007222:	d502      	bpl.n	800722a <_printf_float+0x19a>
 8007224:	3301      	adds	r3, #1
 8007226:	440b      	add	r3, r1
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	f04f 0a00 	mov.w	sl, #0
 800722e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007230:	e7df      	b.n	80071f2 <_printf_float+0x162>
 8007232:	b913      	cbnz	r3, 800723a <_printf_float+0x1aa>
 8007234:	6822      	ldr	r2, [r4, #0]
 8007236:	07d2      	lsls	r2, r2, #31
 8007238:	d501      	bpl.n	800723e <_printf_float+0x1ae>
 800723a:	3302      	adds	r3, #2
 800723c:	e7f4      	b.n	8007228 <_printf_float+0x198>
 800723e:	2301      	movs	r3, #1
 8007240:	e7f2      	b.n	8007228 <_printf_float+0x198>
 8007242:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007248:	4299      	cmp	r1, r3
 800724a:	db05      	blt.n	8007258 <_printf_float+0x1c8>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	6121      	str	r1, [r4, #16]
 8007250:	07d8      	lsls	r0, r3, #31
 8007252:	d5ea      	bpl.n	800722a <_printf_float+0x19a>
 8007254:	1c4b      	adds	r3, r1, #1
 8007256:	e7e7      	b.n	8007228 <_printf_float+0x198>
 8007258:	2900      	cmp	r1, #0
 800725a:	bfcc      	ite	gt
 800725c:	2201      	movgt	r2, #1
 800725e:	f1c1 0202 	rsble	r2, r1, #2
 8007262:	4413      	add	r3, r2
 8007264:	e7e0      	b.n	8007228 <_printf_float+0x198>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	055a      	lsls	r2, r3, #21
 800726a:	d407      	bmi.n	800727c <_printf_float+0x1ec>
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	4642      	mov	r2, r8
 8007270:	4631      	mov	r1, r6
 8007272:	4628      	mov	r0, r5
 8007274:	47b8      	blx	r7
 8007276:	3001      	adds	r0, #1
 8007278:	d12b      	bne.n	80072d2 <_printf_float+0x242>
 800727a:	e764      	b.n	8007146 <_printf_float+0xb6>
 800727c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007280:	f240 80dd 	bls.w	800743e <_printf_float+0x3ae>
 8007284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007288:	2200      	movs	r2, #0
 800728a:	2300      	movs	r3, #0
 800728c:	f7f9 fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8007290:	2800      	cmp	r0, #0
 8007292:	d033      	beq.n	80072fc <_printf_float+0x26c>
 8007294:	2301      	movs	r3, #1
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	4a35      	ldr	r2, [pc, #212]	; (8007370 <_printf_float+0x2e0>)
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	f43f af51 	beq.w	8007146 <_printf_float+0xb6>
 80072a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072a8:	429a      	cmp	r2, r3
 80072aa:	db02      	blt.n	80072b2 <_printf_float+0x222>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	07d8      	lsls	r0, r3, #31
 80072b0:	d50f      	bpl.n	80072d2 <_printf_float+0x242>
 80072b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	f43f af42 	beq.w	8007146 <_printf_float+0xb6>
 80072c2:	f04f 0800 	mov.w	r8, #0
 80072c6:	f104 091a 	add.w	r9, r4, #26
 80072ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072cc:	3b01      	subs	r3, #1
 80072ce:	4543      	cmp	r3, r8
 80072d0:	dc09      	bgt.n	80072e6 <_printf_float+0x256>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	079b      	lsls	r3, r3, #30
 80072d6:	f100 8104 	bmi.w	80074e2 <_printf_float+0x452>
 80072da:	68e0      	ldr	r0, [r4, #12]
 80072dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072de:	4298      	cmp	r0, r3
 80072e0:	bfb8      	it	lt
 80072e2:	4618      	movlt	r0, r3
 80072e4:	e731      	b.n	800714a <_printf_float+0xba>
 80072e6:	2301      	movs	r3, #1
 80072e8:	464a      	mov	r2, r9
 80072ea:	4631      	mov	r1, r6
 80072ec:	4628      	mov	r0, r5
 80072ee:	47b8      	blx	r7
 80072f0:	3001      	adds	r0, #1
 80072f2:	f43f af28 	beq.w	8007146 <_printf_float+0xb6>
 80072f6:	f108 0801 	add.w	r8, r8, #1
 80072fa:	e7e6      	b.n	80072ca <_printf_float+0x23a>
 80072fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072fe:	2b00      	cmp	r3, #0
 8007300:	dc38      	bgt.n	8007374 <_printf_float+0x2e4>
 8007302:	2301      	movs	r3, #1
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	4a19      	ldr	r2, [pc, #100]	; (8007370 <_printf_float+0x2e0>)
 800730a:	47b8      	blx	r7
 800730c:	3001      	adds	r0, #1
 800730e:	f43f af1a 	beq.w	8007146 <_printf_float+0xb6>
 8007312:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007316:	4313      	orrs	r3, r2
 8007318:	d102      	bne.n	8007320 <_printf_float+0x290>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	07d9      	lsls	r1, r3, #31
 800731e:	d5d8      	bpl.n	80072d2 <_printf_float+0x242>
 8007320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	f43f af0b 	beq.w	8007146 <_printf_float+0xb6>
 8007330:	f04f 0900 	mov.w	r9, #0
 8007334:	f104 0a1a 	add.w	sl, r4, #26
 8007338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800733a:	425b      	negs	r3, r3
 800733c:	454b      	cmp	r3, r9
 800733e:	dc01      	bgt.n	8007344 <_printf_float+0x2b4>
 8007340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007342:	e794      	b.n	800726e <_printf_float+0x1de>
 8007344:	2301      	movs	r3, #1
 8007346:	4652      	mov	r2, sl
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f aef9 	beq.w	8007146 <_printf_float+0xb6>
 8007354:	f109 0901 	add.w	r9, r9, #1
 8007358:	e7ee      	b.n	8007338 <_printf_float+0x2a8>
 800735a:	bf00      	nop
 800735c:	7fefffff 	.word	0x7fefffff
 8007360:	0800bea2 	.word	0x0800bea2
 8007364:	0800bea6 	.word	0x0800bea6
 8007368:	0800beaa 	.word	0x0800beaa
 800736c:	0800beae 	.word	0x0800beae
 8007370:	0800beb2 	.word	0x0800beb2
 8007374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007376:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007378:	429a      	cmp	r2, r3
 800737a:	bfa8      	it	ge
 800737c:	461a      	movge	r2, r3
 800737e:	2a00      	cmp	r2, #0
 8007380:	4691      	mov	r9, r2
 8007382:	dc37      	bgt.n	80073f4 <_printf_float+0x364>
 8007384:	f04f 0b00 	mov.w	fp, #0
 8007388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800738c:	f104 021a 	add.w	r2, r4, #26
 8007390:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007394:	ebaa 0309 	sub.w	r3, sl, r9
 8007398:	455b      	cmp	r3, fp
 800739a:	dc33      	bgt.n	8007404 <_printf_float+0x374>
 800739c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073a0:	429a      	cmp	r2, r3
 80073a2:	db3b      	blt.n	800741c <_printf_float+0x38c>
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	07da      	lsls	r2, r3, #31
 80073a8:	d438      	bmi.n	800741c <_printf_float+0x38c>
 80073aa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80073ae:	eba2 0903 	sub.w	r9, r2, r3
 80073b2:	eba2 020a 	sub.w	r2, r2, sl
 80073b6:	4591      	cmp	r9, r2
 80073b8:	bfa8      	it	ge
 80073ba:	4691      	movge	r9, r2
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	dc34      	bgt.n	800742c <_printf_float+0x39c>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ca:	f104 0a1a 	add.w	sl, r4, #26
 80073ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80073d2:	1a9b      	subs	r3, r3, r2
 80073d4:	eba3 0309 	sub.w	r3, r3, r9
 80073d8:	4543      	cmp	r3, r8
 80073da:	f77f af7a 	ble.w	80072d2 <_printf_float+0x242>
 80073de:	2301      	movs	r3, #1
 80073e0:	4652      	mov	r2, sl
 80073e2:	4631      	mov	r1, r6
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f aeac 	beq.w	8007146 <_printf_float+0xb6>
 80073ee:	f108 0801 	add.w	r8, r8, #1
 80073f2:	e7ec      	b.n	80073ce <_printf_float+0x33e>
 80073f4:	4613      	mov	r3, r2
 80073f6:	4631      	mov	r1, r6
 80073f8:	4642      	mov	r2, r8
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	d1c0      	bne.n	8007384 <_printf_float+0x2f4>
 8007402:	e6a0      	b.n	8007146 <_printf_float+0xb6>
 8007404:	2301      	movs	r3, #1
 8007406:	4631      	mov	r1, r6
 8007408:	4628      	mov	r0, r5
 800740a:	920b      	str	r2, [sp, #44]	; 0x2c
 800740c:	47b8      	blx	r7
 800740e:	3001      	adds	r0, #1
 8007410:	f43f ae99 	beq.w	8007146 <_printf_float+0xb6>
 8007414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007416:	f10b 0b01 	add.w	fp, fp, #1
 800741a:	e7b9      	b.n	8007390 <_printf_float+0x300>
 800741c:	4631      	mov	r1, r6
 800741e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007422:	4628      	mov	r0, r5
 8007424:	47b8      	blx	r7
 8007426:	3001      	adds	r0, #1
 8007428:	d1bf      	bne.n	80073aa <_printf_float+0x31a>
 800742a:	e68c      	b.n	8007146 <_printf_float+0xb6>
 800742c:	464b      	mov	r3, r9
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	eb08 020a 	add.w	r2, r8, sl
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	d1c2      	bne.n	80073c2 <_printf_float+0x332>
 800743c:	e683      	b.n	8007146 <_printf_float+0xb6>
 800743e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007440:	2a01      	cmp	r2, #1
 8007442:	dc01      	bgt.n	8007448 <_printf_float+0x3b8>
 8007444:	07db      	lsls	r3, r3, #31
 8007446:	d539      	bpl.n	80074bc <_printf_float+0x42c>
 8007448:	2301      	movs	r3, #1
 800744a:	4642      	mov	r2, r8
 800744c:	4631      	mov	r1, r6
 800744e:	4628      	mov	r0, r5
 8007450:	47b8      	blx	r7
 8007452:	3001      	adds	r0, #1
 8007454:	f43f ae77 	beq.w	8007146 <_printf_float+0xb6>
 8007458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	f43f ae6f 	beq.w	8007146 <_printf_float+0xb6>
 8007468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800746c:	2200      	movs	r2, #0
 800746e:	2300      	movs	r3, #0
 8007470:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007474:	f7f9 fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8007478:	b9d8      	cbnz	r0, 80074b2 <_printf_float+0x422>
 800747a:	f109 33ff 	add.w	r3, r9, #4294967295
 800747e:	f108 0201 	add.w	r2, r8, #1
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	d10e      	bne.n	80074aa <_printf_float+0x41a>
 800748c:	e65b      	b.n	8007146 <_printf_float+0xb6>
 800748e:	2301      	movs	r3, #1
 8007490:	464a      	mov	r2, r9
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f ae54 	beq.w	8007146 <_printf_float+0xb6>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a4:	3b01      	subs	r3, #1
 80074a6:	4543      	cmp	r3, r8
 80074a8:	dcf1      	bgt.n	800748e <_printf_float+0x3fe>
 80074aa:	4653      	mov	r3, sl
 80074ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074b0:	e6de      	b.n	8007270 <_printf_float+0x1e0>
 80074b2:	f04f 0800 	mov.w	r8, #0
 80074b6:	f104 091a 	add.w	r9, r4, #26
 80074ba:	e7f2      	b.n	80074a2 <_printf_float+0x412>
 80074bc:	2301      	movs	r3, #1
 80074be:	4642      	mov	r2, r8
 80074c0:	e7df      	b.n	8007482 <_printf_float+0x3f2>
 80074c2:	2301      	movs	r3, #1
 80074c4:	464a      	mov	r2, r9
 80074c6:	4631      	mov	r1, r6
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b8      	blx	r7
 80074cc:	3001      	adds	r0, #1
 80074ce:	f43f ae3a 	beq.w	8007146 <_printf_float+0xb6>
 80074d2:	f108 0801 	add.w	r8, r8, #1
 80074d6:	68e3      	ldr	r3, [r4, #12]
 80074d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074da:	1a5b      	subs	r3, r3, r1
 80074dc:	4543      	cmp	r3, r8
 80074de:	dcf0      	bgt.n	80074c2 <_printf_float+0x432>
 80074e0:	e6fb      	b.n	80072da <_printf_float+0x24a>
 80074e2:	f04f 0800 	mov.w	r8, #0
 80074e6:	f104 0919 	add.w	r9, r4, #25
 80074ea:	e7f4      	b.n	80074d6 <_printf_float+0x446>

080074ec <_printf_common>:
 80074ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	4616      	mov	r6, r2
 80074f2:	4699      	mov	r9, r3
 80074f4:	688a      	ldr	r2, [r1, #8]
 80074f6:	690b      	ldr	r3, [r1, #16]
 80074f8:	4607      	mov	r7, r0
 80074fa:	4293      	cmp	r3, r2
 80074fc:	bfb8      	it	lt
 80074fe:	4613      	movlt	r3, r2
 8007500:	6033      	str	r3, [r6, #0]
 8007502:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007506:	460c      	mov	r4, r1
 8007508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800750c:	b10a      	cbz	r2, 8007512 <_printf_common+0x26>
 800750e:	3301      	adds	r3, #1
 8007510:	6033      	str	r3, [r6, #0]
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	0699      	lsls	r1, r3, #26
 8007516:	bf42      	ittt	mi
 8007518:	6833      	ldrmi	r3, [r6, #0]
 800751a:	3302      	addmi	r3, #2
 800751c:	6033      	strmi	r3, [r6, #0]
 800751e:	6825      	ldr	r5, [r4, #0]
 8007520:	f015 0506 	ands.w	r5, r5, #6
 8007524:	d106      	bne.n	8007534 <_printf_common+0x48>
 8007526:	f104 0a19 	add.w	sl, r4, #25
 800752a:	68e3      	ldr	r3, [r4, #12]
 800752c:	6832      	ldr	r2, [r6, #0]
 800752e:	1a9b      	subs	r3, r3, r2
 8007530:	42ab      	cmp	r3, r5
 8007532:	dc2b      	bgt.n	800758c <_printf_common+0xa0>
 8007534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007538:	1e13      	subs	r3, r2, #0
 800753a:	6822      	ldr	r2, [r4, #0]
 800753c:	bf18      	it	ne
 800753e:	2301      	movne	r3, #1
 8007540:	0692      	lsls	r2, r2, #26
 8007542:	d430      	bmi.n	80075a6 <_printf_common+0xba>
 8007544:	4649      	mov	r1, r9
 8007546:	4638      	mov	r0, r7
 8007548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800754c:	47c0      	blx	r8
 800754e:	3001      	adds	r0, #1
 8007550:	d023      	beq.n	800759a <_printf_common+0xae>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	6922      	ldr	r2, [r4, #16]
 8007556:	f003 0306 	and.w	r3, r3, #6
 800755a:	2b04      	cmp	r3, #4
 800755c:	bf14      	ite	ne
 800755e:	2500      	movne	r5, #0
 8007560:	6833      	ldreq	r3, [r6, #0]
 8007562:	f04f 0600 	mov.w	r6, #0
 8007566:	bf08      	it	eq
 8007568:	68e5      	ldreq	r5, [r4, #12]
 800756a:	f104 041a 	add.w	r4, r4, #26
 800756e:	bf08      	it	eq
 8007570:	1aed      	subeq	r5, r5, r3
 8007572:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007576:	bf08      	it	eq
 8007578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800757c:	4293      	cmp	r3, r2
 800757e:	bfc4      	itt	gt
 8007580:	1a9b      	subgt	r3, r3, r2
 8007582:	18ed      	addgt	r5, r5, r3
 8007584:	42b5      	cmp	r5, r6
 8007586:	d11a      	bne.n	80075be <_printf_common+0xd2>
 8007588:	2000      	movs	r0, #0
 800758a:	e008      	b.n	800759e <_printf_common+0xb2>
 800758c:	2301      	movs	r3, #1
 800758e:	4652      	mov	r2, sl
 8007590:	4649      	mov	r1, r9
 8007592:	4638      	mov	r0, r7
 8007594:	47c0      	blx	r8
 8007596:	3001      	adds	r0, #1
 8007598:	d103      	bne.n	80075a2 <_printf_common+0xb6>
 800759a:	f04f 30ff 	mov.w	r0, #4294967295
 800759e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a2:	3501      	adds	r5, #1
 80075a4:	e7c1      	b.n	800752a <_printf_common+0x3e>
 80075a6:	2030      	movs	r0, #48	; 0x30
 80075a8:	18e1      	adds	r1, r4, r3
 80075aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b4:	4422      	add	r2, r4
 80075b6:	3302      	adds	r3, #2
 80075b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075bc:	e7c2      	b.n	8007544 <_printf_common+0x58>
 80075be:	2301      	movs	r3, #1
 80075c0:	4622      	mov	r2, r4
 80075c2:	4649      	mov	r1, r9
 80075c4:	4638      	mov	r0, r7
 80075c6:	47c0      	blx	r8
 80075c8:	3001      	adds	r0, #1
 80075ca:	d0e6      	beq.n	800759a <_printf_common+0xae>
 80075cc:	3601      	adds	r6, #1
 80075ce:	e7d9      	b.n	8007584 <_printf_common+0x98>

080075d0 <_printf_i>:
 80075d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	7e0f      	ldrb	r7, [r1, #24]
 80075d6:	4691      	mov	r9, r2
 80075d8:	2f78      	cmp	r7, #120	; 0x78
 80075da:	4680      	mov	r8, r0
 80075dc:	460c      	mov	r4, r1
 80075de:	469a      	mov	sl, r3
 80075e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075e6:	d807      	bhi.n	80075f8 <_printf_i+0x28>
 80075e8:	2f62      	cmp	r7, #98	; 0x62
 80075ea:	d80a      	bhi.n	8007602 <_printf_i+0x32>
 80075ec:	2f00      	cmp	r7, #0
 80075ee:	f000 80d5 	beq.w	800779c <_printf_i+0x1cc>
 80075f2:	2f58      	cmp	r7, #88	; 0x58
 80075f4:	f000 80c1 	beq.w	800777a <_printf_i+0x1aa>
 80075f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007600:	e03a      	b.n	8007678 <_printf_i+0xa8>
 8007602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007606:	2b15      	cmp	r3, #21
 8007608:	d8f6      	bhi.n	80075f8 <_printf_i+0x28>
 800760a:	a101      	add	r1, pc, #4	; (adr r1, 8007610 <_printf_i+0x40>)
 800760c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007610:	08007669 	.word	0x08007669
 8007614:	0800767d 	.word	0x0800767d
 8007618:	080075f9 	.word	0x080075f9
 800761c:	080075f9 	.word	0x080075f9
 8007620:	080075f9 	.word	0x080075f9
 8007624:	080075f9 	.word	0x080075f9
 8007628:	0800767d 	.word	0x0800767d
 800762c:	080075f9 	.word	0x080075f9
 8007630:	080075f9 	.word	0x080075f9
 8007634:	080075f9 	.word	0x080075f9
 8007638:	080075f9 	.word	0x080075f9
 800763c:	08007783 	.word	0x08007783
 8007640:	080076a9 	.word	0x080076a9
 8007644:	0800773d 	.word	0x0800773d
 8007648:	080075f9 	.word	0x080075f9
 800764c:	080075f9 	.word	0x080075f9
 8007650:	080077a5 	.word	0x080077a5
 8007654:	080075f9 	.word	0x080075f9
 8007658:	080076a9 	.word	0x080076a9
 800765c:	080075f9 	.word	0x080075f9
 8007660:	080075f9 	.word	0x080075f9
 8007664:	08007745 	.word	0x08007745
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	1d1a      	adds	r2, r3, #4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	602a      	str	r2, [r5, #0]
 8007670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007678:	2301      	movs	r3, #1
 800767a:	e0a0      	b.n	80077be <_printf_i+0x1ee>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	682b      	ldr	r3, [r5, #0]
 8007680:	0607      	lsls	r7, r0, #24
 8007682:	f103 0104 	add.w	r1, r3, #4
 8007686:	6029      	str	r1, [r5, #0]
 8007688:	d501      	bpl.n	800768e <_printf_i+0xbe>
 800768a:	681e      	ldr	r6, [r3, #0]
 800768c:	e003      	b.n	8007696 <_printf_i+0xc6>
 800768e:	0646      	lsls	r6, r0, #25
 8007690:	d5fb      	bpl.n	800768a <_printf_i+0xba>
 8007692:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007696:	2e00      	cmp	r6, #0
 8007698:	da03      	bge.n	80076a2 <_printf_i+0xd2>
 800769a:	232d      	movs	r3, #45	; 0x2d
 800769c:	4276      	negs	r6, r6
 800769e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a2:	230a      	movs	r3, #10
 80076a4:	4859      	ldr	r0, [pc, #356]	; (800780c <_printf_i+0x23c>)
 80076a6:	e012      	b.n	80076ce <_printf_i+0xfe>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	6820      	ldr	r0, [r4, #0]
 80076ac:	1d19      	adds	r1, r3, #4
 80076ae:	6029      	str	r1, [r5, #0]
 80076b0:	0605      	lsls	r5, r0, #24
 80076b2:	d501      	bpl.n	80076b8 <_printf_i+0xe8>
 80076b4:	681e      	ldr	r6, [r3, #0]
 80076b6:	e002      	b.n	80076be <_printf_i+0xee>
 80076b8:	0641      	lsls	r1, r0, #25
 80076ba:	d5fb      	bpl.n	80076b4 <_printf_i+0xe4>
 80076bc:	881e      	ldrh	r6, [r3, #0]
 80076be:	2f6f      	cmp	r7, #111	; 0x6f
 80076c0:	bf0c      	ite	eq
 80076c2:	2308      	moveq	r3, #8
 80076c4:	230a      	movne	r3, #10
 80076c6:	4851      	ldr	r0, [pc, #324]	; (800780c <_printf_i+0x23c>)
 80076c8:	2100      	movs	r1, #0
 80076ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ce:	6865      	ldr	r5, [r4, #4]
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	bfa8      	it	ge
 80076d4:	6821      	ldrge	r1, [r4, #0]
 80076d6:	60a5      	str	r5, [r4, #8]
 80076d8:	bfa4      	itt	ge
 80076da:	f021 0104 	bicge.w	r1, r1, #4
 80076de:	6021      	strge	r1, [r4, #0]
 80076e0:	b90e      	cbnz	r6, 80076e6 <_printf_i+0x116>
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	d04b      	beq.n	800777e <_printf_i+0x1ae>
 80076e6:	4615      	mov	r5, r2
 80076e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80076ec:	fb03 6711 	mls	r7, r3, r1, r6
 80076f0:	5dc7      	ldrb	r7, [r0, r7]
 80076f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076f6:	4637      	mov	r7, r6
 80076f8:	42bb      	cmp	r3, r7
 80076fa:	460e      	mov	r6, r1
 80076fc:	d9f4      	bls.n	80076e8 <_printf_i+0x118>
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d10b      	bne.n	800771a <_printf_i+0x14a>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	07de      	lsls	r6, r3, #31
 8007706:	d508      	bpl.n	800771a <_printf_i+0x14a>
 8007708:	6923      	ldr	r3, [r4, #16]
 800770a:	6861      	ldr	r1, [r4, #4]
 800770c:	4299      	cmp	r1, r3
 800770e:	bfde      	ittt	le
 8007710:	2330      	movle	r3, #48	; 0x30
 8007712:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007716:	f105 35ff 	addle.w	r5, r5, #4294967295
 800771a:	1b52      	subs	r2, r2, r5
 800771c:	6122      	str	r2, [r4, #16]
 800771e:	464b      	mov	r3, r9
 8007720:	4621      	mov	r1, r4
 8007722:	4640      	mov	r0, r8
 8007724:	f8cd a000 	str.w	sl, [sp]
 8007728:	aa03      	add	r2, sp, #12
 800772a:	f7ff fedf 	bl	80074ec <_printf_common>
 800772e:	3001      	adds	r0, #1
 8007730:	d14a      	bne.n	80077c8 <_printf_i+0x1f8>
 8007732:	f04f 30ff 	mov.w	r0, #4294967295
 8007736:	b004      	add	sp, #16
 8007738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	f043 0320 	orr.w	r3, r3, #32
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	2778      	movs	r7, #120	; 0x78
 8007746:	4832      	ldr	r0, [pc, #200]	; (8007810 <_printf_i+0x240>)
 8007748:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	6829      	ldr	r1, [r5, #0]
 8007750:	061f      	lsls	r7, r3, #24
 8007752:	f851 6b04 	ldr.w	r6, [r1], #4
 8007756:	d402      	bmi.n	800775e <_printf_i+0x18e>
 8007758:	065f      	lsls	r7, r3, #25
 800775a:	bf48      	it	mi
 800775c:	b2b6      	uxthmi	r6, r6
 800775e:	07df      	lsls	r7, r3, #31
 8007760:	bf48      	it	mi
 8007762:	f043 0320 	orrmi.w	r3, r3, #32
 8007766:	6029      	str	r1, [r5, #0]
 8007768:	bf48      	it	mi
 800776a:	6023      	strmi	r3, [r4, #0]
 800776c:	b91e      	cbnz	r6, 8007776 <_printf_i+0x1a6>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	f023 0320 	bic.w	r3, r3, #32
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	2310      	movs	r3, #16
 8007778:	e7a6      	b.n	80076c8 <_printf_i+0xf8>
 800777a:	4824      	ldr	r0, [pc, #144]	; (800780c <_printf_i+0x23c>)
 800777c:	e7e4      	b.n	8007748 <_printf_i+0x178>
 800777e:	4615      	mov	r5, r2
 8007780:	e7bd      	b.n	80076fe <_printf_i+0x12e>
 8007782:	682b      	ldr	r3, [r5, #0]
 8007784:	6826      	ldr	r6, [r4, #0]
 8007786:	1d18      	adds	r0, r3, #4
 8007788:	6961      	ldr	r1, [r4, #20]
 800778a:	6028      	str	r0, [r5, #0]
 800778c:	0635      	lsls	r5, r6, #24
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	d501      	bpl.n	8007796 <_printf_i+0x1c6>
 8007792:	6019      	str	r1, [r3, #0]
 8007794:	e002      	b.n	800779c <_printf_i+0x1cc>
 8007796:	0670      	lsls	r0, r6, #25
 8007798:	d5fb      	bpl.n	8007792 <_printf_i+0x1c2>
 800779a:	8019      	strh	r1, [r3, #0]
 800779c:	2300      	movs	r3, #0
 800779e:	4615      	mov	r5, r2
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	e7bc      	b.n	800771e <_printf_i+0x14e>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	2100      	movs	r1, #0
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	602a      	str	r2, [r5, #0]
 80077ac:	681d      	ldr	r5, [r3, #0]
 80077ae:	6862      	ldr	r2, [r4, #4]
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 fbfc 	bl	8007fae <memchr>
 80077b6:	b108      	cbz	r0, 80077bc <_printf_i+0x1ec>
 80077b8:	1b40      	subs	r0, r0, r5
 80077ba:	6060      	str	r0, [r4, #4]
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	2300      	movs	r3, #0
 80077c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c6:	e7aa      	b.n	800771e <_printf_i+0x14e>
 80077c8:	462a      	mov	r2, r5
 80077ca:	4649      	mov	r1, r9
 80077cc:	4640      	mov	r0, r8
 80077ce:	6923      	ldr	r3, [r4, #16]
 80077d0:	47d0      	blx	sl
 80077d2:	3001      	adds	r0, #1
 80077d4:	d0ad      	beq.n	8007732 <_printf_i+0x162>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	079b      	lsls	r3, r3, #30
 80077da:	d413      	bmi.n	8007804 <_printf_i+0x234>
 80077dc:	68e0      	ldr	r0, [r4, #12]
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	4298      	cmp	r0, r3
 80077e2:	bfb8      	it	lt
 80077e4:	4618      	movlt	r0, r3
 80077e6:	e7a6      	b.n	8007736 <_printf_i+0x166>
 80077e8:	2301      	movs	r3, #1
 80077ea:	4632      	mov	r2, r6
 80077ec:	4649      	mov	r1, r9
 80077ee:	4640      	mov	r0, r8
 80077f0:	47d0      	blx	sl
 80077f2:	3001      	adds	r0, #1
 80077f4:	d09d      	beq.n	8007732 <_printf_i+0x162>
 80077f6:	3501      	adds	r5, #1
 80077f8:	68e3      	ldr	r3, [r4, #12]
 80077fa:	9903      	ldr	r1, [sp, #12]
 80077fc:	1a5b      	subs	r3, r3, r1
 80077fe:	42ab      	cmp	r3, r5
 8007800:	dcf2      	bgt.n	80077e8 <_printf_i+0x218>
 8007802:	e7eb      	b.n	80077dc <_printf_i+0x20c>
 8007804:	2500      	movs	r5, #0
 8007806:	f104 0619 	add.w	r6, r4, #25
 800780a:	e7f5      	b.n	80077f8 <_printf_i+0x228>
 800780c:	0800beb4 	.word	0x0800beb4
 8007810:	0800bec5 	.word	0x0800bec5

08007814 <_scanf_float>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	b087      	sub	sp, #28
 800781a:	9303      	str	r3, [sp, #12]
 800781c:	688b      	ldr	r3, [r1, #8]
 800781e:	4617      	mov	r7, r2
 8007820:	1e5a      	subs	r2, r3, #1
 8007822:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007826:	bf85      	ittet	hi
 8007828:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800782c:	195b      	addhi	r3, r3, r5
 800782e:	2300      	movls	r3, #0
 8007830:	9302      	strhi	r3, [sp, #8]
 8007832:	bf88      	it	hi
 8007834:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007838:	468b      	mov	fp, r1
 800783a:	f04f 0500 	mov.w	r5, #0
 800783e:	bf8c      	ite	hi
 8007840:	608b      	strhi	r3, [r1, #8]
 8007842:	9302      	strls	r3, [sp, #8]
 8007844:	680b      	ldr	r3, [r1, #0]
 8007846:	4680      	mov	r8, r0
 8007848:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800784c:	f84b 3b1c 	str.w	r3, [fp], #28
 8007850:	460c      	mov	r4, r1
 8007852:	465e      	mov	r6, fp
 8007854:	46aa      	mov	sl, r5
 8007856:	46a9      	mov	r9, r5
 8007858:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800785c:	9501      	str	r5, [sp, #4]
 800785e:	68a2      	ldr	r2, [r4, #8]
 8007860:	b152      	cbz	r2, 8007878 <_scanf_float+0x64>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b4e      	cmp	r3, #78	; 0x4e
 8007868:	d864      	bhi.n	8007934 <_scanf_float+0x120>
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d83c      	bhi.n	80078e8 <_scanf_float+0xd4>
 800786e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007872:	b2c8      	uxtb	r0, r1
 8007874:	280e      	cmp	r0, #14
 8007876:	d93a      	bls.n	80078ee <_scanf_float+0xda>
 8007878:	f1b9 0f00 	cmp.w	r9, #0
 800787c:	d003      	beq.n	8007886 <_scanf_float+0x72>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800788a:	f1ba 0f01 	cmp.w	sl, #1
 800788e:	f200 8113 	bhi.w	8007ab8 <_scanf_float+0x2a4>
 8007892:	455e      	cmp	r6, fp
 8007894:	f200 8105 	bhi.w	8007aa2 <_scanf_float+0x28e>
 8007898:	2501      	movs	r5, #1
 800789a:	4628      	mov	r0, r5
 800789c:	b007      	add	sp, #28
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80078a6:	2a0d      	cmp	r2, #13
 80078a8:	d8e6      	bhi.n	8007878 <_scanf_float+0x64>
 80078aa:	a101      	add	r1, pc, #4	; (adr r1, 80078b0 <_scanf_float+0x9c>)
 80078ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078b0:	080079ef 	.word	0x080079ef
 80078b4:	08007879 	.word	0x08007879
 80078b8:	08007879 	.word	0x08007879
 80078bc:	08007879 	.word	0x08007879
 80078c0:	08007a4f 	.word	0x08007a4f
 80078c4:	08007a27 	.word	0x08007a27
 80078c8:	08007879 	.word	0x08007879
 80078cc:	08007879 	.word	0x08007879
 80078d0:	080079fd 	.word	0x080079fd
 80078d4:	08007879 	.word	0x08007879
 80078d8:	08007879 	.word	0x08007879
 80078dc:	08007879 	.word	0x08007879
 80078e0:	08007879 	.word	0x08007879
 80078e4:	080079b5 	.word	0x080079b5
 80078e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80078ec:	e7db      	b.n	80078a6 <_scanf_float+0x92>
 80078ee:	290e      	cmp	r1, #14
 80078f0:	d8c2      	bhi.n	8007878 <_scanf_float+0x64>
 80078f2:	a001      	add	r0, pc, #4	; (adr r0, 80078f8 <_scanf_float+0xe4>)
 80078f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078f8:	080079a7 	.word	0x080079a7
 80078fc:	08007879 	.word	0x08007879
 8007900:	080079a7 	.word	0x080079a7
 8007904:	08007a3b 	.word	0x08007a3b
 8007908:	08007879 	.word	0x08007879
 800790c:	08007955 	.word	0x08007955
 8007910:	08007991 	.word	0x08007991
 8007914:	08007991 	.word	0x08007991
 8007918:	08007991 	.word	0x08007991
 800791c:	08007991 	.word	0x08007991
 8007920:	08007991 	.word	0x08007991
 8007924:	08007991 	.word	0x08007991
 8007928:	08007991 	.word	0x08007991
 800792c:	08007991 	.word	0x08007991
 8007930:	08007991 	.word	0x08007991
 8007934:	2b6e      	cmp	r3, #110	; 0x6e
 8007936:	d809      	bhi.n	800794c <_scanf_float+0x138>
 8007938:	2b60      	cmp	r3, #96	; 0x60
 800793a:	d8b2      	bhi.n	80078a2 <_scanf_float+0x8e>
 800793c:	2b54      	cmp	r3, #84	; 0x54
 800793e:	d077      	beq.n	8007a30 <_scanf_float+0x21c>
 8007940:	2b59      	cmp	r3, #89	; 0x59
 8007942:	d199      	bne.n	8007878 <_scanf_float+0x64>
 8007944:	2d07      	cmp	r5, #7
 8007946:	d197      	bne.n	8007878 <_scanf_float+0x64>
 8007948:	2508      	movs	r5, #8
 800794a:	e029      	b.n	80079a0 <_scanf_float+0x18c>
 800794c:	2b74      	cmp	r3, #116	; 0x74
 800794e:	d06f      	beq.n	8007a30 <_scanf_float+0x21c>
 8007950:	2b79      	cmp	r3, #121	; 0x79
 8007952:	e7f6      	b.n	8007942 <_scanf_float+0x12e>
 8007954:	6821      	ldr	r1, [r4, #0]
 8007956:	05c8      	lsls	r0, r1, #23
 8007958:	d51a      	bpl.n	8007990 <_scanf_float+0x17c>
 800795a:	9b02      	ldr	r3, [sp, #8]
 800795c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007960:	6021      	str	r1, [r4, #0]
 8007962:	f109 0901 	add.w	r9, r9, #1
 8007966:	b11b      	cbz	r3, 8007970 <_scanf_float+0x15c>
 8007968:	3b01      	subs	r3, #1
 800796a:	3201      	adds	r2, #1
 800796c:	9302      	str	r3, [sp, #8]
 800796e:	60a2      	str	r2, [r4, #8]
 8007970:	68a3      	ldr	r3, [r4, #8]
 8007972:	3b01      	subs	r3, #1
 8007974:	60a3      	str	r3, [r4, #8]
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	3301      	adds	r3, #1
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3b01      	subs	r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	607b      	str	r3, [r7, #4]
 8007984:	f340 8084 	ble.w	8007a90 <_scanf_float+0x27c>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	e766      	b.n	800785e <_scanf_float+0x4a>
 8007990:	eb1a 0f05 	cmn.w	sl, r5
 8007994:	f47f af70 	bne.w	8007878 <_scanf_float+0x64>
 8007998:	6822      	ldr	r2, [r4, #0]
 800799a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800799e:	6022      	str	r2, [r4, #0]
 80079a0:	f806 3b01 	strb.w	r3, [r6], #1
 80079a4:	e7e4      	b.n	8007970 <_scanf_float+0x15c>
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	0610      	lsls	r0, r2, #24
 80079aa:	f57f af65 	bpl.w	8007878 <_scanf_float+0x64>
 80079ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079b2:	e7f4      	b.n	800799e <_scanf_float+0x18a>
 80079b4:	f1ba 0f00 	cmp.w	sl, #0
 80079b8:	d10e      	bne.n	80079d8 <_scanf_float+0x1c4>
 80079ba:	f1b9 0f00 	cmp.w	r9, #0
 80079be:	d10e      	bne.n	80079de <_scanf_float+0x1ca>
 80079c0:	6822      	ldr	r2, [r4, #0]
 80079c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079ca:	d108      	bne.n	80079de <_scanf_float+0x1ca>
 80079cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079d0:	f04f 0a01 	mov.w	sl, #1
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	e7e3      	b.n	80079a0 <_scanf_float+0x18c>
 80079d8:	f1ba 0f02 	cmp.w	sl, #2
 80079dc:	d055      	beq.n	8007a8a <_scanf_float+0x276>
 80079de:	2d01      	cmp	r5, #1
 80079e0:	d002      	beq.n	80079e8 <_scanf_float+0x1d4>
 80079e2:	2d04      	cmp	r5, #4
 80079e4:	f47f af48 	bne.w	8007878 <_scanf_float+0x64>
 80079e8:	3501      	adds	r5, #1
 80079ea:	b2ed      	uxtb	r5, r5
 80079ec:	e7d8      	b.n	80079a0 <_scanf_float+0x18c>
 80079ee:	f1ba 0f01 	cmp.w	sl, #1
 80079f2:	f47f af41 	bne.w	8007878 <_scanf_float+0x64>
 80079f6:	f04f 0a02 	mov.w	sl, #2
 80079fa:	e7d1      	b.n	80079a0 <_scanf_float+0x18c>
 80079fc:	b97d      	cbnz	r5, 8007a1e <_scanf_float+0x20a>
 80079fe:	f1b9 0f00 	cmp.w	r9, #0
 8007a02:	f47f af3c 	bne.w	800787e <_scanf_float+0x6a>
 8007a06:	6822      	ldr	r2, [r4, #0]
 8007a08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a10:	f47f af39 	bne.w	8007886 <_scanf_float+0x72>
 8007a14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a18:	2501      	movs	r5, #1
 8007a1a:	6022      	str	r2, [r4, #0]
 8007a1c:	e7c0      	b.n	80079a0 <_scanf_float+0x18c>
 8007a1e:	2d03      	cmp	r5, #3
 8007a20:	d0e2      	beq.n	80079e8 <_scanf_float+0x1d4>
 8007a22:	2d05      	cmp	r5, #5
 8007a24:	e7de      	b.n	80079e4 <_scanf_float+0x1d0>
 8007a26:	2d02      	cmp	r5, #2
 8007a28:	f47f af26 	bne.w	8007878 <_scanf_float+0x64>
 8007a2c:	2503      	movs	r5, #3
 8007a2e:	e7b7      	b.n	80079a0 <_scanf_float+0x18c>
 8007a30:	2d06      	cmp	r5, #6
 8007a32:	f47f af21 	bne.w	8007878 <_scanf_float+0x64>
 8007a36:	2507      	movs	r5, #7
 8007a38:	e7b2      	b.n	80079a0 <_scanf_float+0x18c>
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	0591      	lsls	r1, r2, #22
 8007a3e:	f57f af1b 	bpl.w	8007878 <_scanf_float+0x64>
 8007a42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a46:	6022      	str	r2, [r4, #0]
 8007a48:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a4c:	e7a8      	b.n	80079a0 <_scanf_float+0x18c>
 8007a4e:	6822      	ldr	r2, [r4, #0]
 8007a50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a58:	d006      	beq.n	8007a68 <_scanf_float+0x254>
 8007a5a:	0550      	lsls	r0, r2, #21
 8007a5c:	f57f af0c 	bpl.w	8007878 <_scanf_float+0x64>
 8007a60:	f1b9 0f00 	cmp.w	r9, #0
 8007a64:	f43f af0f 	beq.w	8007886 <_scanf_float+0x72>
 8007a68:	0591      	lsls	r1, r2, #22
 8007a6a:	bf58      	it	pl
 8007a6c:	9901      	ldrpl	r1, [sp, #4]
 8007a6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a72:	bf58      	it	pl
 8007a74:	eba9 0101 	subpl.w	r1, r9, r1
 8007a78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a7c:	f04f 0900 	mov.w	r9, #0
 8007a80:	bf58      	it	pl
 8007a82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a86:	6022      	str	r2, [r4, #0]
 8007a88:	e78a      	b.n	80079a0 <_scanf_float+0x18c>
 8007a8a:	f04f 0a03 	mov.w	sl, #3
 8007a8e:	e787      	b.n	80079a0 <_scanf_float+0x18c>
 8007a90:	4639      	mov	r1, r7
 8007a92:	4640      	mov	r0, r8
 8007a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a98:	4798      	blx	r3
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	f43f aedf 	beq.w	800785e <_scanf_float+0x4a>
 8007aa0:	e6ea      	b.n	8007878 <_scanf_float+0x64>
 8007aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aa6:	463a      	mov	r2, r7
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007aae:	4798      	blx	r3
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	6123      	str	r3, [r4, #16]
 8007ab6:	e6ec      	b.n	8007892 <_scanf_float+0x7e>
 8007ab8:	1e6b      	subs	r3, r5, #1
 8007aba:	2b06      	cmp	r3, #6
 8007abc:	d825      	bhi.n	8007b0a <_scanf_float+0x2f6>
 8007abe:	2d02      	cmp	r5, #2
 8007ac0:	d836      	bhi.n	8007b30 <_scanf_float+0x31c>
 8007ac2:	455e      	cmp	r6, fp
 8007ac4:	f67f aee8 	bls.w	8007898 <_scanf_float+0x84>
 8007ac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007acc:	463a      	mov	r2, r7
 8007ace:	4640      	mov	r0, r8
 8007ad0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ad4:	4798      	blx	r3
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	6123      	str	r3, [r4, #16]
 8007adc:	e7f1      	b.n	8007ac2 <_scanf_float+0x2ae>
 8007ade:	9802      	ldr	r0, [sp, #8]
 8007ae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ae4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007ae8:	463a      	mov	r2, r7
 8007aea:	9002      	str	r0, [sp, #8]
 8007aec:	4640      	mov	r0, r8
 8007aee:	4798      	blx	r3
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007afa:	fa5f fa8a 	uxtb.w	sl, sl
 8007afe:	f1ba 0f02 	cmp.w	sl, #2
 8007b02:	d1ec      	bne.n	8007ade <_scanf_float+0x2ca>
 8007b04:	3d03      	subs	r5, #3
 8007b06:	b2ed      	uxtb	r5, r5
 8007b08:	1b76      	subs	r6, r6, r5
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	05da      	lsls	r2, r3, #23
 8007b0e:	d52f      	bpl.n	8007b70 <_scanf_float+0x35c>
 8007b10:	055b      	lsls	r3, r3, #21
 8007b12:	d510      	bpl.n	8007b36 <_scanf_float+0x322>
 8007b14:	455e      	cmp	r6, fp
 8007b16:	f67f aebf 	bls.w	8007898 <_scanf_float+0x84>
 8007b1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b1e:	463a      	mov	r2, r7
 8007b20:	4640      	mov	r0, r8
 8007b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b26:	4798      	blx	r3
 8007b28:	6923      	ldr	r3, [r4, #16]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	6123      	str	r3, [r4, #16]
 8007b2e:	e7f1      	b.n	8007b14 <_scanf_float+0x300>
 8007b30:	46aa      	mov	sl, r5
 8007b32:	9602      	str	r6, [sp, #8]
 8007b34:	e7df      	b.n	8007af6 <_scanf_float+0x2e2>
 8007b36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	2965      	cmp	r1, #101	; 0x65
 8007b3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b42:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b46:	6123      	str	r3, [r4, #16]
 8007b48:	d00c      	beq.n	8007b64 <_scanf_float+0x350>
 8007b4a:	2945      	cmp	r1, #69	; 0x45
 8007b4c:	d00a      	beq.n	8007b64 <_scanf_float+0x350>
 8007b4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b52:	463a      	mov	r2, r7
 8007b54:	4640      	mov	r0, r8
 8007b56:	4798      	blx	r3
 8007b58:	6923      	ldr	r3, [r4, #16]
 8007b5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	1eb5      	subs	r5, r6, #2
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	463a      	mov	r2, r7
 8007b66:	4640      	mov	r0, r8
 8007b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b6c:	4798      	blx	r3
 8007b6e:	462e      	mov	r6, r5
 8007b70:	6825      	ldr	r5, [r4, #0]
 8007b72:	f015 0510 	ands.w	r5, r5, #16
 8007b76:	d155      	bne.n	8007c24 <_scanf_float+0x410>
 8007b78:	7035      	strb	r5, [r6, #0]
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b84:	d11d      	bne.n	8007bc2 <_scanf_float+0x3ae>
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	454b      	cmp	r3, r9
 8007b8a:	eba3 0209 	sub.w	r2, r3, r9
 8007b8e:	d125      	bne.n	8007bdc <_scanf_float+0x3c8>
 8007b90:	2200      	movs	r2, #0
 8007b92:	4659      	mov	r1, fp
 8007b94:	4640      	mov	r0, r8
 8007b96:	f002 fc4b 	bl	800a430 <_strtod_r>
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	f8d4 c000 	ldr.w	ip, [r4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f01c 0f02 	tst.w	ip, #2
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460f      	mov	r7, r1
 8007baa:	f103 0204 	add.w	r2, r3, #4
 8007bae:	d020      	beq.n	8007bf2 <_scanf_float+0x3de>
 8007bb0:	9903      	ldr	r1, [sp, #12]
 8007bb2:	600a      	str	r2, [r1, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	e9c3 6700 	strd	r6, r7, [r3]
 8007bba:	68e3      	ldr	r3, [r4, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60e3      	str	r3, [r4, #12]
 8007bc0:	e66b      	b.n	800789a <_scanf_float+0x86>
 8007bc2:	9b04      	ldr	r3, [sp, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0e3      	beq.n	8007b90 <_scanf_float+0x37c>
 8007bc8:	9905      	ldr	r1, [sp, #20]
 8007bca:	230a      	movs	r3, #10
 8007bcc:	462a      	mov	r2, r5
 8007bce:	4640      	mov	r0, r8
 8007bd0:	3101      	adds	r1, #1
 8007bd2:	f002 fcb1 	bl	800a538 <_strtol_r>
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	9e05      	ldr	r6, [sp, #20]
 8007bda:	1ac2      	subs	r2, r0, r3
 8007bdc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007be0:	429e      	cmp	r6, r3
 8007be2:	bf28      	it	cs
 8007be4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007be8:	4630      	mov	r0, r6
 8007bea:	490f      	ldr	r1, [pc, #60]	; (8007c28 <_scanf_float+0x414>)
 8007bec:	f000 f8e2 	bl	8007db4 <siprintf>
 8007bf0:	e7ce      	b.n	8007b90 <_scanf_float+0x37c>
 8007bf2:	f01c 0f04 	tst.w	ip, #4
 8007bf6:	d1db      	bne.n	8007bb0 <_scanf_float+0x39c>
 8007bf8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007bfc:	f8cc 2000 	str.w	r2, [ip]
 8007c00:	f8d3 8000 	ldr.w	r8, [r3]
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	f7f8 ff00 	bl	8000a0c <__aeabi_dcmpun>
 8007c0c:	b128      	cbz	r0, 8007c1a <_scanf_float+0x406>
 8007c0e:	4807      	ldr	r0, [pc, #28]	; (8007c2c <_scanf_float+0x418>)
 8007c10:	f000 f9ea 	bl	8007fe8 <nanf>
 8007c14:	f8c8 0000 	str.w	r0, [r8]
 8007c18:	e7cf      	b.n	8007bba <_scanf_float+0x3a6>
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	f7f8 ff53 	bl	8000ac8 <__aeabi_d2f>
 8007c22:	e7f7      	b.n	8007c14 <_scanf_float+0x400>
 8007c24:	2500      	movs	r5, #0
 8007c26:	e638      	b.n	800789a <_scanf_float+0x86>
 8007c28:	0800bed6 	.word	0x0800bed6
 8007c2c:	0800c26d 	.word	0x0800c26d

08007c30 <std>:
 8007c30:	2300      	movs	r3, #0
 8007c32:	b510      	push	{r4, lr}
 8007c34:	4604      	mov	r4, r0
 8007c36:	e9c0 3300 	strd	r3, r3, [r0]
 8007c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c3e:	6083      	str	r3, [r0, #8]
 8007c40:	8181      	strh	r1, [r0, #12]
 8007c42:	6643      	str	r3, [r0, #100]	; 0x64
 8007c44:	81c2      	strh	r2, [r0, #14]
 8007c46:	6183      	str	r3, [r0, #24]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	305c      	adds	r0, #92	; 0x5c
 8007c4e:	f000 f92e 	bl	8007eae <memset>
 8007c52:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <std+0x58>)
 8007c54:	6224      	str	r4, [r4, #32]
 8007c56:	6263      	str	r3, [r4, #36]	; 0x24
 8007c58:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <std+0x5c>)
 8007c5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c5c:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <std+0x60>)
 8007c5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c60:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <std+0x64>)
 8007c62:	6323      	str	r3, [r4, #48]	; 0x30
 8007c64:	4b0c      	ldr	r3, [pc, #48]	; (8007c98 <std+0x68>)
 8007c66:	429c      	cmp	r4, r3
 8007c68:	d006      	beq.n	8007c78 <std+0x48>
 8007c6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c6e:	4294      	cmp	r4, r2
 8007c70:	d002      	beq.n	8007c78 <std+0x48>
 8007c72:	33d0      	adds	r3, #208	; 0xd0
 8007c74:	429c      	cmp	r4, r3
 8007c76:	d105      	bne.n	8007c84 <std+0x54>
 8007c78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c80:	f000 b992 	b.w	8007fa8 <__retarget_lock_init_recursive>
 8007c84:	bd10      	pop	{r4, pc}
 8007c86:	bf00      	nop
 8007c88:	08007df5 	.word	0x08007df5
 8007c8c:	08007e17 	.word	0x08007e17
 8007c90:	08007e4f 	.word	0x08007e4f
 8007c94:	08007e73 	.word	0x08007e73
 8007c98:	200007fc 	.word	0x200007fc

08007c9c <stdio_exit_handler>:
 8007c9c:	4a02      	ldr	r2, [pc, #8]	; (8007ca8 <stdio_exit_handler+0xc>)
 8007c9e:	4903      	ldr	r1, [pc, #12]	; (8007cac <stdio_exit_handler+0x10>)
 8007ca0:	4803      	ldr	r0, [pc, #12]	; (8007cb0 <stdio_exit_handler+0x14>)
 8007ca2:	f000 b869 	b.w	8007d78 <_fwalk_sglue>
 8007ca6:	bf00      	nop
 8007ca8:	20000024 	.word	0x20000024
 8007cac:	0800a8f1 	.word	0x0800a8f1
 8007cb0:	20000030 	.word	0x20000030

08007cb4 <cleanup_stdio>:
 8007cb4:	6841      	ldr	r1, [r0, #4]
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <cleanup_stdio+0x34>)
 8007cb8:	b510      	push	{r4, lr}
 8007cba:	4299      	cmp	r1, r3
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	d001      	beq.n	8007cc4 <cleanup_stdio+0x10>
 8007cc0:	f002 fe16 	bl	800a8f0 <_fflush_r>
 8007cc4:	68a1      	ldr	r1, [r4, #8]
 8007cc6:	4b09      	ldr	r3, [pc, #36]	; (8007cec <cleanup_stdio+0x38>)
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <cleanup_stdio+0x1e>
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f002 fe0f 	bl	800a8f0 <_fflush_r>
 8007cd2:	68e1      	ldr	r1, [r4, #12]
 8007cd4:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <cleanup_stdio+0x3c>)
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	d004      	beq.n	8007ce4 <cleanup_stdio+0x30>
 8007cda:	4620      	mov	r0, r4
 8007cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce0:	f002 be06 	b.w	800a8f0 <_fflush_r>
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200007fc 	.word	0x200007fc
 8007cec:	20000864 	.word	0x20000864
 8007cf0:	200008cc 	.word	0x200008cc

08007cf4 <global_stdio_init.part.0>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <global_stdio_init.part.0+0x30>)
 8007cf8:	4c0b      	ldr	r4, [pc, #44]	; (8007d28 <global_stdio_init.part.0+0x34>)
 8007cfa:	4a0c      	ldr	r2, [pc, #48]	; (8007d2c <global_stdio_init.part.0+0x38>)
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	2104      	movs	r1, #4
 8007d02:	2200      	movs	r2, #0
 8007d04:	f7ff ff94 	bl	8007c30 <std>
 8007d08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	2109      	movs	r1, #9
 8007d10:	f7ff ff8e 	bl	8007c30 <std>
 8007d14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d18:	2202      	movs	r2, #2
 8007d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d1e:	2112      	movs	r1, #18
 8007d20:	f7ff bf86 	b.w	8007c30 <std>
 8007d24:	20000934 	.word	0x20000934
 8007d28:	200007fc 	.word	0x200007fc
 8007d2c:	08007c9d 	.word	0x08007c9d

08007d30 <__sfp_lock_acquire>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__sfp_lock_acquire+0x8>)
 8007d32:	f000 b93a 	b.w	8007faa <__retarget_lock_acquire_recursive>
 8007d36:	bf00      	nop
 8007d38:	2000093d 	.word	0x2000093d

08007d3c <__sfp_lock_release>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__sfp_lock_release+0x8>)
 8007d3e:	f000 b935 	b.w	8007fac <__retarget_lock_release_recursive>
 8007d42:	bf00      	nop
 8007d44:	2000093d 	.word	0x2000093d

08007d48 <__sinit>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	f7ff fff0 	bl	8007d30 <__sfp_lock_acquire>
 8007d50:	6a23      	ldr	r3, [r4, #32]
 8007d52:	b11b      	cbz	r3, 8007d5c <__sinit+0x14>
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	f7ff bff0 	b.w	8007d3c <__sfp_lock_release>
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <__sinit+0x28>)
 8007d5e:	6223      	str	r3, [r4, #32]
 8007d60:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <__sinit+0x2c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1f5      	bne.n	8007d54 <__sinit+0xc>
 8007d68:	f7ff ffc4 	bl	8007cf4 <global_stdio_init.part.0>
 8007d6c:	e7f2      	b.n	8007d54 <__sinit+0xc>
 8007d6e:	bf00      	nop
 8007d70:	08007cb5 	.word	0x08007cb5
 8007d74:	20000934 	.word	0x20000934

08007d78 <_fwalk_sglue>:
 8007d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	4688      	mov	r8, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	2600      	movs	r6, #0
 8007d84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d88:	f1b9 0901 	subs.w	r9, r9, #1
 8007d8c:	d505      	bpl.n	8007d9a <_fwalk_sglue+0x22>
 8007d8e:	6824      	ldr	r4, [r4, #0]
 8007d90:	2c00      	cmp	r4, #0
 8007d92:	d1f7      	bne.n	8007d84 <_fwalk_sglue+0xc>
 8007d94:	4630      	mov	r0, r6
 8007d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9a:	89ab      	ldrh	r3, [r5, #12]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d907      	bls.n	8007db0 <_fwalk_sglue+0x38>
 8007da0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007da4:	3301      	adds	r3, #1
 8007da6:	d003      	beq.n	8007db0 <_fwalk_sglue+0x38>
 8007da8:	4629      	mov	r1, r5
 8007daa:	4638      	mov	r0, r7
 8007dac:	47c0      	blx	r8
 8007dae:	4306      	orrs	r6, r0
 8007db0:	3568      	adds	r5, #104	; 0x68
 8007db2:	e7e9      	b.n	8007d88 <_fwalk_sglue+0x10>

08007db4 <siprintf>:
 8007db4:	b40e      	push	{r1, r2, r3}
 8007db6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dba:	b500      	push	{lr}
 8007dbc:	b09c      	sub	sp, #112	; 0x70
 8007dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8007dc0:	9002      	str	r0, [sp, #8]
 8007dc2:	9006      	str	r0, [sp, #24]
 8007dc4:	9107      	str	r1, [sp, #28]
 8007dc6:	9104      	str	r1, [sp, #16]
 8007dc8:	4808      	ldr	r0, [pc, #32]	; (8007dec <siprintf+0x38>)
 8007dca:	4909      	ldr	r1, [pc, #36]	; (8007df0 <siprintf+0x3c>)
 8007dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dd0:	9105      	str	r1, [sp, #20]
 8007dd2:	6800      	ldr	r0, [r0, #0]
 8007dd4:	a902      	add	r1, sp, #8
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	f002 fc0a 	bl	800a5f0 <_svfiprintf_r>
 8007ddc:	2200      	movs	r2, #0
 8007dde:	9b02      	ldr	r3, [sp, #8]
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	b01c      	add	sp, #112	; 0x70
 8007de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007de8:	b003      	add	sp, #12
 8007dea:	4770      	bx	lr
 8007dec:	2000007c 	.word	0x2000007c
 8007df0:	ffff0208 	.word	0xffff0208

08007df4 <__sread>:
 8007df4:	b510      	push	{r4, lr}
 8007df6:	460c      	mov	r4, r1
 8007df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfc:	f000 f886 	bl	8007f0c <_read_r>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	bfab      	itete	ge
 8007e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e06:	89a3      	ldrhlt	r3, [r4, #12]
 8007e08:	181b      	addge	r3, r3, r0
 8007e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e0e:	bfac      	ite	ge
 8007e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e12:	81a3      	strhlt	r3, [r4, #12]
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <__swrite>:
 8007e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1a:	461f      	mov	r7, r3
 8007e1c:	898b      	ldrh	r3, [r1, #12]
 8007e1e:	4605      	mov	r5, r0
 8007e20:	05db      	lsls	r3, r3, #23
 8007e22:	460c      	mov	r4, r1
 8007e24:	4616      	mov	r6, r2
 8007e26:	d505      	bpl.n	8007e34 <__swrite+0x1e>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e30:	f000 f85a 	bl	8007ee8 <_lseek_r>
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	4632      	mov	r2, r6
 8007e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	4628      	mov	r0, r5
 8007e40:	463b      	mov	r3, r7
 8007e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4a:	f000 b871 	b.w	8007f30 <_write_r>

08007e4e <__sseek>:
 8007e4e:	b510      	push	{r4, lr}
 8007e50:	460c      	mov	r4, r1
 8007e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e56:	f000 f847 	bl	8007ee8 <_lseek_r>
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	bf15      	itete	ne
 8007e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e6a:	81a3      	strheq	r3, [r4, #12]
 8007e6c:	bf18      	it	ne
 8007e6e:	81a3      	strhne	r3, [r4, #12]
 8007e70:	bd10      	pop	{r4, pc}

08007e72 <__sclose>:
 8007e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e76:	f000 b827 	b.w	8007ec8 <_close_r>

08007e7a <memmove>:
 8007e7a:	4288      	cmp	r0, r1
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	eb01 0402 	add.w	r4, r1, r2
 8007e82:	d902      	bls.n	8007e8a <memmove+0x10>
 8007e84:	4284      	cmp	r4, r0
 8007e86:	4623      	mov	r3, r4
 8007e88:	d807      	bhi.n	8007e9a <memmove+0x20>
 8007e8a:	1e43      	subs	r3, r0, #1
 8007e8c:	42a1      	cmp	r1, r4
 8007e8e:	d008      	beq.n	8007ea2 <memmove+0x28>
 8007e90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e94:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e98:	e7f8      	b.n	8007e8c <memmove+0x12>
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	4402      	add	r2, r0
 8007e9e:	428a      	cmp	r2, r1
 8007ea0:	d100      	bne.n	8007ea4 <memmove+0x2a>
 8007ea2:	bd10      	pop	{r4, pc}
 8007ea4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ea8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007eac:	e7f7      	b.n	8007e9e <memmove+0x24>

08007eae <memset>:
 8007eae:	4603      	mov	r3, r0
 8007eb0:	4402      	add	r2, r0
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d100      	bne.n	8007eb8 <memset+0xa>
 8007eb6:	4770      	bx	lr
 8007eb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007ebc:	e7f9      	b.n	8007eb2 <memset+0x4>
	...

08007ec0 <_localeconv_r>:
 8007ec0:	4800      	ldr	r0, [pc, #0]	; (8007ec4 <_localeconv_r+0x4>)
 8007ec2:	4770      	bx	lr
 8007ec4:	20000170 	.word	0x20000170

08007ec8 <_close_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	2300      	movs	r3, #0
 8007ecc:	4d05      	ldr	r5, [pc, #20]	; (8007ee4 <_close_r+0x1c>)
 8007ece:	4604      	mov	r4, r0
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	602b      	str	r3, [r5, #0]
 8007ed4:	f7fa f956 	bl	8002184 <_close>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d102      	bne.n	8007ee2 <_close_r+0x1a>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	b103      	cbz	r3, 8007ee2 <_close_r+0x1a>
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	20000938 	.word	0x20000938

08007ee8 <_lseek_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4604      	mov	r4, r0
 8007eec:	4608      	mov	r0, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4d05      	ldr	r5, [pc, #20]	; (8007f08 <_lseek_r+0x20>)
 8007ef4:	602a      	str	r2, [r5, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f7fa f968 	bl	80021cc <_lseek>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d102      	bne.n	8007f06 <_lseek_r+0x1e>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	b103      	cbz	r3, 8007f06 <_lseek_r+0x1e>
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	20000938 	.word	0x20000938

08007f0c <_read_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	4604      	mov	r4, r0
 8007f10:	4608      	mov	r0, r1
 8007f12:	4611      	mov	r1, r2
 8007f14:	2200      	movs	r2, #0
 8007f16:	4d05      	ldr	r5, [pc, #20]	; (8007f2c <_read_r+0x20>)
 8007f18:	602a      	str	r2, [r5, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f7fa f8f9 	bl	8002112 <_read>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d102      	bne.n	8007f2a <_read_r+0x1e>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	b103      	cbz	r3, 8007f2a <_read_r+0x1e>
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	20000938 	.word	0x20000938

08007f30 <_write_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	2200      	movs	r2, #0
 8007f3a:	4d05      	ldr	r5, [pc, #20]	; (8007f50 <_write_r+0x20>)
 8007f3c:	602a      	str	r2, [r5, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f7fa f904 	bl	800214c <_write>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_write_r+0x1e>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_write_r+0x1e>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	20000938 	.word	0x20000938

08007f54 <__errno>:
 8007f54:	4b01      	ldr	r3, [pc, #4]	; (8007f5c <__errno+0x8>)
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	2000007c 	.word	0x2000007c

08007f60 <__libc_init_array>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	2600      	movs	r6, #0
 8007f64:	4d0c      	ldr	r5, [pc, #48]	; (8007f98 <__libc_init_array+0x38>)
 8007f66:	4c0d      	ldr	r4, [pc, #52]	; (8007f9c <__libc_init_array+0x3c>)
 8007f68:	1b64      	subs	r4, r4, r5
 8007f6a:	10a4      	asrs	r4, r4, #2
 8007f6c:	42a6      	cmp	r6, r4
 8007f6e:	d109      	bne.n	8007f84 <__libc_init_array+0x24>
 8007f70:	f003 fba8 	bl	800b6c4 <_init>
 8007f74:	2600      	movs	r6, #0
 8007f76:	4d0a      	ldr	r5, [pc, #40]	; (8007fa0 <__libc_init_array+0x40>)
 8007f78:	4c0a      	ldr	r4, [pc, #40]	; (8007fa4 <__libc_init_array+0x44>)
 8007f7a:	1b64      	subs	r4, r4, r5
 8007f7c:	10a4      	asrs	r4, r4, #2
 8007f7e:	42a6      	cmp	r6, r4
 8007f80:	d105      	bne.n	8007f8e <__libc_init_array+0x2e>
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f88:	4798      	blx	r3
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7ee      	b.n	8007f6c <__libc_init_array+0xc>
 8007f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f92:	4798      	blx	r3
 8007f94:	3601      	adds	r6, #1
 8007f96:	e7f2      	b.n	8007f7e <__libc_init_array+0x1e>
 8007f98:	0800c2d0 	.word	0x0800c2d0
 8007f9c:	0800c2d0 	.word	0x0800c2d0
 8007fa0:	0800c2d0 	.word	0x0800c2d0
 8007fa4:	0800c2d4 	.word	0x0800c2d4

08007fa8 <__retarget_lock_init_recursive>:
 8007fa8:	4770      	bx	lr

08007faa <__retarget_lock_acquire_recursive>:
 8007faa:	4770      	bx	lr

08007fac <__retarget_lock_release_recursive>:
 8007fac:	4770      	bx	lr

08007fae <memchr>:
 8007fae:	4603      	mov	r3, r0
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	b2c9      	uxtb	r1, r1
 8007fb4:	4402      	add	r2, r0
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	d101      	bne.n	8007fc0 <memchr+0x12>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	e003      	b.n	8007fc8 <memchr+0x1a>
 8007fc0:	7804      	ldrb	r4, [r0, #0]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	428c      	cmp	r4, r1
 8007fc6:	d1f6      	bne.n	8007fb6 <memchr+0x8>
 8007fc8:	bd10      	pop	{r4, pc}

08007fca <memcpy>:
 8007fca:	440a      	add	r2, r1
 8007fcc:	4291      	cmp	r1, r2
 8007fce:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fd2:	d100      	bne.n	8007fd6 <memcpy+0xc>
 8007fd4:	4770      	bx	lr
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fdc:	4291      	cmp	r1, r2
 8007fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fe2:	d1f9      	bne.n	8007fd8 <memcpy+0xe>
 8007fe4:	bd10      	pop	{r4, pc}
	...

08007fe8 <nanf>:
 8007fe8:	4800      	ldr	r0, [pc, #0]	; (8007fec <nanf+0x4>)
 8007fea:	4770      	bx	lr
 8007fec:	7fc00000 	.word	0x7fc00000

08007ff0 <quorem>:
 8007ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	6903      	ldr	r3, [r0, #16]
 8007ff6:	690c      	ldr	r4, [r1, #16]
 8007ff8:	4607      	mov	r7, r0
 8007ffa:	42a3      	cmp	r3, r4
 8007ffc:	db7f      	blt.n	80080fe <quorem+0x10e>
 8007ffe:	3c01      	subs	r4, #1
 8008000:	f100 0514 	add.w	r5, r0, #20
 8008004:	f101 0814 	add.w	r8, r1, #20
 8008008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008016:	3301      	adds	r3, #1
 8008018:	429a      	cmp	r2, r3
 800801a:	fbb2 f6f3 	udiv	r6, r2, r3
 800801e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008022:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008026:	d331      	bcc.n	800808c <quorem+0x9c>
 8008028:	f04f 0e00 	mov.w	lr, #0
 800802c:	4640      	mov	r0, r8
 800802e:	46ac      	mov	ip, r5
 8008030:	46f2      	mov	sl, lr
 8008032:	f850 2b04 	ldr.w	r2, [r0], #4
 8008036:	b293      	uxth	r3, r2
 8008038:	fb06 e303 	mla	r3, r6, r3, lr
 800803c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008040:	0c1a      	lsrs	r2, r3, #16
 8008042:	b29b      	uxth	r3, r3
 8008044:	fb06 220e 	mla	r2, r6, lr, r2
 8008048:	ebaa 0303 	sub.w	r3, sl, r3
 800804c:	f8dc a000 	ldr.w	sl, [ip]
 8008050:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008054:	fa1f fa8a 	uxth.w	sl, sl
 8008058:	4453      	add	r3, sl
 800805a:	f8dc a000 	ldr.w	sl, [ip]
 800805e:	b292      	uxth	r2, r2
 8008060:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008068:	b29b      	uxth	r3, r3
 800806a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800806e:	4581      	cmp	r9, r0
 8008070:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008074:	f84c 3b04 	str.w	r3, [ip], #4
 8008078:	d2db      	bcs.n	8008032 <quorem+0x42>
 800807a:	f855 300b 	ldr.w	r3, [r5, fp]
 800807e:	b92b      	cbnz	r3, 800808c <quorem+0x9c>
 8008080:	9b01      	ldr	r3, [sp, #4]
 8008082:	3b04      	subs	r3, #4
 8008084:	429d      	cmp	r5, r3
 8008086:	461a      	mov	r2, r3
 8008088:	d32d      	bcc.n	80080e6 <quorem+0xf6>
 800808a:	613c      	str	r4, [r7, #16]
 800808c:	4638      	mov	r0, r7
 800808e:	f001 f9df 	bl	8009450 <__mcmp>
 8008092:	2800      	cmp	r0, #0
 8008094:	db23      	blt.n	80080de <quorem+0xee>
 8008096:	4629      	mov	r1, r5
 8008098:	2000      	movs	r0, #0
 800809a:	3601      	adds	r6, #1
 800809c:	f858 2b04 	ldr.w	r2, [r8], #4
 80080a0:	f8d1 c000 	ldr.w	ip, [r1]
 80080a4:	b293      	uxth	r3, r2
 80080a6:	1ac3      	subs	r3, r0, r3
 80080a8:	0c12      	lsrs	r2, r2, #16
 80080aa:	fa1f f08c 	uxth.w	r0, ip
 80080ae:	4403      	add	r3, r0
 80080b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80080b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080be:	45c1      	cmp	r9, r8
 80080c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080c4:	f841 3b04 	str.w	r3, [r1], #4
 80080c8:	d2e8      	bcs.n	800809c <quorem+0xac>
 80080ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080d2:	b922      	cbnz	r2, 80080de <quorem+0xee>
 80080d4:	3b04      	subs	r3, #4
 80080d6:	429d      	cmp	r5, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	d30a      	bcc.n	80080f2 <quorem+0x102>
 80080dc:	613c      	str	r4, [r7, #16]
 80080de:	4630      	mov	r0, r6
 80080e0:	b003      	add	sp, #12
 80080e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	3b04      	subs	r3, #4
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	d1cd      	bne.n	800808a <quorem+0x9a>
 80080ee:	3c01      	subs	r4, #1
 80080f0:	e7c8      	b.n	8008084 <quorem+0x94>
 80080f2:	6812      	ldr	r2, [r2, #0]
 80080f4:	3b04      	subs	r3, #4
 80080f6:	2a00      	cmp	r2, #0
 80080f8:	d1f0      	bne.n	80080dc <quorem+0xec>
 80080fa:	3c01      	subs	r4, #1
 80080fc:	e7eb      	b.n	80080d6 <quorem+0xe6>
 80080fe:	2000      	movs	r0, #0
 8008100:	e7ee      	b.n	80080e0 <quorem+0xf0>
 8008102:	0000      	movs	r0, r0
 8008104:	0000      	movs	r0, r0
	...

08008108 <_dtoa_r>:
 8008108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	4616      	mov	r6, r2
 800810e:	461f      	mov	r7, r3
 8008110:	69c4      	ldr	r4, [r0, #28]
 8008112:	b099      	sub	sp, #100	; 0x64
 8008114:	4605      	mov	r5, r0
 8008116:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800811a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800811e:	b974      	cbnz	r4, 800813e <_dtoa_r+0x36>
 8008120:	2010      	movs	r0, #16
 8008122:	f000 fe1d 	bl	8008d60 <malloc>
 8008126:	4602      	mov	r2, r0
 8008128:	61e8      	str	r0, [r5, #28]
 800812a:	b920      	cbnz	r0, 8008136 <_dtoa_r+0x2e>
 800812c:	21ef      	movs	r1, #239	; 0xef
 800812e:	4bac      	ldr	r3, [pc, #688]	; (80083e0 <_dtoa_r+0x2d8>)
 8008130:	48ac      	ldr	r0, [pc, #688]	; (80083e4 <_dtoa_r+0x2dc>)
 8008132:	f002 fc2d 	bl	800a990 <__assert_func>
 8008136:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800813a:	6004      	str	r4, [r0, #0]
 800813c:	60c4      	str	r4, [r0, #12]
 800813e:	69eb      	ldr	r3, [r5, #28]
 8008140:	6819      	ldr	r1, [r3, #0]
 8008142:	b151      	cbz	r1, 800815a <_dtoa_r+0x52>
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	2301      	movs	r3, #1
 8008148:	4093      	lsls	r3, r2
 800814a:	604a      	str	r2, [r1, #4]
 800814c:	608b      	str	r3, [r1, #8]
 800814e:	4628      	mov	r0, r5
 8008150:	f000 fefa 	bl	8008f48 <_Bfree>
 8008154:	2200      	movs	r2, #0
 8008156:	69eb      	ldr	r3, [r5, #28]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	1e3b      	subs	r3, r7, #0
 800815c:	bfaf      	iteee	ge
 800815e:	2300      	movge	r3, #0
 8008160:	2201      	movlt	r2, #1
 8008162:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008166:	9305      	strlt	r3, [sp, #20]
 8008168:	bfa8      	it	ge
 800816a:	f8c8 3000 	strge.w	r3, [r8]
 800816e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008172:	4b9d      	ldr	r3, [pc, #628]	; (80083e8 <_dtoa_r+0x2e0>)
 8008174:	bfb8      	it	lt
 8008176:	f8c8 2000 	strlt.w	r2, [r8]
 800817a:	ea33 0309 	bics.w	r3, r3, r9
 800817e:	d119      	bne.n	80081b4 <_dtoa_r+0xac>
 8008180:	f242 730f 	movw	r3, #9999	; 0x270f
 8008184:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008186:	6013      	str	r3, [r2, #0]
 8008188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800818c:	4333      	orrs	r3, r6
 800818e:	f000 8589 	beq.w	8008ca4 <_dtoa_r+0xb9c>
 8008192:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008194:	b953      	cbnz	r3, 80081ac <_dtoa_r+0xa4>
 8008196:	4b95      	ldr	r3, [pc, #596]	; (80083ec <_dtoa_r+0x2e4>)
 8008198:	e023      	b.n	80081e2 <_dtoa_r+0xda>
 800819a:	4b95      	ldr	r3, [pc, #596]	; (80083f0 <_dtoa_r+0x2e8>)
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	3308      	adds	r3, #8
 80081a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	9803      	ldr	r0, [sp, #12]
 80081a6:	b019      	add	sp, #100	; 0x64
 80081a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ac:	4b8f      	ldr	r3, [pc, #572]	; (80083ec <_dtoa_r+0x2e4>)
 80081ae:	9303      	str	r3, [sp, #12]
 80081b0:	3303      	adds	r3, #3
 80081b2:	e7f5      	b.n	80081a0 <_dtoa_r+0x98>
 80081b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80081b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80081bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081c0:	2200      	movs	r2, #0
 80081c2:	2300      	movs	r3, #0
 80081c4:	f7f8 fbf0 	bl	80009a8 <__aeabi_dcmpeq>
 80081c8:	4680      	mov	r8, r0
 80081ca:	b160      	cbz	r0, 80081e6 <_dtoa_r+0xde>
 80081cc:	2301      	movs	r3, #1
 80081ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8562 	beq.w	8008c9e <_dtoa_r+0xb96>
 80081da:	4b86      	ldr	r3, [pc, #536]	; (80083f4 <_dtoa_r+0x2ec>)
 80081dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	9303      	str	r3, [sp, #12]
 80081e4:	e7de      	b.n	80081a4 <_dtoa_r+0x9c>
 80081e6:	ab16      	add	r3, sp, #88	; 0x58
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	ab17      	add	r3, sp, #92	; 0x5c
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	4628      	mov	r0, r5
 80081f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80081f4:	f001 fa3c 	bl	8009670 <__d2b>
 80081f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80081fc:	4682      	mov	sl, r0
 80081fe:	2c00      	cmp	r4, #0
 8008200:	d07e      	beq.n	8008300 <_dtoa_r+0x1f8>
 8008202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008208:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800820c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008210:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008214:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008218:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800821c:	4619      	mov	r1, r3
 800821e:	2200      	movs	r2, #0
 8008220:	4b75      	ldr	r3, [pc, #468]	; (80083f8 <_dtoa_r+0x2f0>)
 8008222:	f7f7 ffa1 	bl	8000168 <__aeabi_dsub>
 8008226:	a368      	add	r3, pc, #416	; (adr r3, 80083c8 <_dtoa_r+0x2c0>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f7f8 f954 	bl	80004d8 <__aeabi_dmul>
 8008230:	a367      	add	r3, pc, #412	; (adr r3, 80083d0 <_dtoa_r+0x2c8>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f7f7 ff99 	bl	800016c <__adddf3>
 800823a:	4606      	mov	r6, r0
 800823c:	4620      	mov	r0, r4
 800823e:	460f      	mov	r7, r1
 8008240:	f7f8 f8e0 	bl	8000404 <__aeabi_i2d>
 8008244:	a364      	add	r3, pc, #400	; (adr r3, 80083d8 <_dtoa_r+0x2d0>)
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f7f8 f945 	bl	80004d8 <__aeabi_dmul>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4630      	mov	r0, r6
 8008254:	4639      	mov	r1, r7
 8008256:	f7f7 ff89 	bl	800016c <__adddf3>
 800825a:	4606      	mov	r6, r0
 800825c:	460f      	mov	r7, r1
 800825e:	f7f8 fbeb 	bl	8000a38 <__aeabi_d2iz>
 8008262:	2200      	movs	r2, #0
 8008264:	4683      	mov	fp, r0
 8008266:	2300      	movs	r3, #0
 8008268:	4630      	mov	r0, r6
 800826a:	4639      	mov	r1, r7
 800826c:	f7f8 fba6 	bl	80009bc <__aeabi_dcmplt>
 8008270:	b148      	cbz	r0, 8008286 <_dtoa_r+0x17e>
 8008272:	4658      	mov	r0, fp
 8008274:	f7f8 f8c6 	bl	8000404 <__aeabi_i2d>
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	f7f8 fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8008280:	b908      	cbnz	r0, 8008286 <_dtoa_r+0x17e>
 8008282:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008286:	f1bb 0f16 	cmp.w	fp, #22
 800828a:	d857      	bhi.n	800833c <_dtoa_r+0x234>
 800828c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008290:	4b5a      	ldr	r3, [pc, #360]	; (80083fc <_dtoa_r+0x2f4>)
 8008292:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f8 fb8f 	bl	80009bc <__aeabi_dcmplt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d04e      	beq.n	8008340 <_dtoa_r+0x238>
 80082a2:	2300      	movs	r3, #0
 80082a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80082aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082ac:	1b1b      	subs	r3, r3, r4
 80082ae:	1e5a      	subs	r2, r3, #1
 80082b0:	bf46      	itte	mi
 80082b2:	f1c3 0901 	rsbmi	r9, r3, #1
 80082b6:	2300      	movmi	r3, #0
 80082b8:	f04f 0900 	movpl.w	r9, #0
 80082bc:	9209      	str	r2, [sp, #36]	; 0x24
 80082be:	bf48      	it	mi
 80082c0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80082c2:	f1bb 0f00 	cmp.w	fp, #0
 80082c6:	db3d      	blt.n	8008344 <_dtoa_r+0x23c>
 80082c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80082ce:	445b      	add	r3, fp
 80082d0:	9309      	str	r3, [sp, #36]	; 0x24
 80082d2:	2300      	movs	r3, #0
 80082d4:	930a      	str	r3, [sp, #40]	; 0x28
 80082d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082d8:	2b09      	cmp	r3, #9
 80082da:	d867      	bhi.n	80083ac <_dtoa_r+0x2a4>
 80082dc:	2b05      	cmp	r3, #5
 80082de:	bfc4      	itt	gt
 80082e0:	3b04      	subgt	r3, #4
 80082e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80082e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082e6:	bfc8      	it	gt
 80082e8:	2400      	movgt	r4, #0
 80082ea:	f1a3 0302 	sub.w	r3, r3, #2
 80082ee:	bfd8      	it	le
 80082f0:	2401      	movle	r4, #1
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	f200 8086 	bhi.w	8008404 <_dtoa_r+0x2fc>
 80082f8:	e8df f003 	tbb	[pc, r3]
 80082fc:	5637392c 	.word	0x5637392c
 8008300:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008304:	441c      	add	r4, r3
 8008306:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800830a:	2b20      	cmp	r3, #32
 800830c:	bfc1      	itttt	gt
 800830e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008312:	fa09 f903 	lslgt.w	r9, r9, r3
 8008316:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800831a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800831e:	bfd6      	itet	le
 8008320:	f1c3 0320 	rsble	r3, r3, #32
 8008324:	ea49 0003 	orrgt.w	r0, r9, r3
 8008328:	fa06 f003 	lslle.w	r0, r6, r3
 800832c:	f7f8 f85a 	bl	80003e4 <__aeabi_ui2d>
 8008330:	2201      	movs	r2, #1
 8008332:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008336:	3c01      	subs	r4, #1
 8008338:	9213      	str	r2, [sp, #76]	; 0x4c
 800833a:	e76f      	b.n	800821c <_dtoa_r+0x114>
 800833c:	2301      	movs	r3, #1
 800833e:	e7b3      	b.n	80082a8 <_dtoa_r+0x1a0>
 8008340:	900f      	str	r0, [sp, #60]	; 0x3c
 8008342:	e7b2      	b.n	80082aa <_dtoa_r+0x1a2>
 8008344:	f1cb 0300 	rsb	r3, fp, #0
 8008348:	930a      	str	r3, [sp, #40]	; 0x28
 800834a:	2300      	movs	r3, #0
 800834c:	eba9 090b 	sub.w	r9, r9, fp
 8008350:	930e      	str	r3, [sp, #56]	; 0x38
 8008352:	e7c0      	b.n	80082d6 <_dtoa_r+0x1ce>
 8008354:	2300      	movs	r3, #0
 8008356:	930b      	str	r3, [sp, #44]	; 0x2c
 8008358:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800835a:	2b00      	cmp	r3, #0
 800835c:	dc55      	bgt.n	800840a <_dtoa_r+0x302>
 800835e:	2301      	movs	r3, #1
 8008360:	461a      	mov	r2, r3
 8008362:	9306      	str	r3, [sp, #24]
 8008364:	9308      	str	r3, [sp, #32]
 8008366:	9223      	str	r2, [sp, #140]	; 0x8c
 8008368:	e00b      	b.n	8008382 <_dtoa_r+0x27a>
 800836a:	2301      	movs	r3, #1
 800836c:	e7f3      	b.n	8008356 <_dtoa_r+0x24e>
 800836e:	2300      	movs	r3, #0
 8008370:	930b      	str	r3, [sp, #44]	; 0x2c
 8008372:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008374:	445b      	add	r3, fp
 8008376:	9306      	str	r3, [sp, #24]
 8008378:	3301      	adds	r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	9308      	str	r3, [sp, #32]
 800837e:	bfb8      	it	lt
 8008380:	2301      	movlt	r3, #1
 8008382:	2100      	movs	r1, #0
 8008384:	2204      	movs	r2, #4
 8008386:	69e8      	ldr	r0, [r5, #28]
 8008388:	f102 0614 	add.w	r6, r2, #20
 800838c:	429e      	cmp	r6, r3
 800838e:	d940      	bls.n	8008412 <_dtoa_r+0x30a>
 8008390:	6041      	str	r1, [r0, #4]
 8008392:	4628      	mov	r0, r5
 8008394:	f000 fd98 	bl	8008ec8 <_Balloc>
 8008398:	9003      	str	r0, [sp, #12]
 800839a:	2800      	cmp	r0, #0
 800839c:	d13c      	bne.n	8008418 <_dtoa_r+0x310>
 800839e:	4602      	mov	r2, r0
 80083a0:	f240 11af 	movw	r1, #431	; 0x1af
 80083a4:	4b16      	ldr	r3, [pc, #88]	; (8008400 <_dtoa_r+0x2f8>)
 80083a6:	e6c3      	b.n	8008130 <_dtoa_r+0x28>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e7e1      	b.n	8008370 <_dtoa_r+0x268>
 80083ac:	2401      	movs	r4, #1
 80083ae:	2300      	movs	r3, #0
 80083b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80083b2:	9322      	str	r3, [sp, #136]	; 0x88
 80083b4:	f04f 33ff 	mov.w	r3, #4294967295
 80083b8:	2200      	movs	r2, #0
 80083ba:	9306      	str	r3, [sp, #24]
 80083bc:	9308      	str	r3, [sp, #32]
 80083be:	2312      	movs	r3, #18
 80083c0:	e7d1      	b.n	8008366 <_dtoa_r+0x25e>
 80083c2:	bf00      	nop
 80083c4:	f3af 8000 	nop.w
 80083c8:	636f4361 	.word	0x636f4361
 80083cc:	3fd287a7 	.word	0x3fd287a7
 80083d0:	8b60c8b3 	.word	0x8b60c8b3
 80083d4:	3fc68a28 	.word	0x3fc68a28
 80083d8:	509f79fb 	.word	0x509f79fb
 80083dc:	3fd34413 	.word	0x3fd34413
 80083e0:	0800bee8 	.word	0x0800bee8
 80083e4:	0800beff 	.word	0x0800beff
 80083e8:	7ff00000 	.word	0x7ff00000
 80083ec:	0800bee4 	.word	0x0800bee4
 80083f0:	0800bedb 	.word	0x0800bedb
 80083f4:	0800beb3 	.word	0x0800beb3
 80083f8:	3ff80000 	.word	0x3ff80000
 80083fc:	0800bff0 	.word	0x0800bff0
 8008400:	0800bf57 	.word	0x0800bf57
 8008404:	2301      	movs	r3, #1
 8008406:	930b      	str	r3, [sp, #44]	; 0x2c
 8008408:	e7d4      	b.n	80083b4 <_dtoa_r+0x2ac>
 800840a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800840c:	9306      	str	r3, [sp, #24]
 800840e:	9308      	str	r3, [sp, #32]
 8008410:	e7b7      	b.n	8008382 <_dtoa_r+0x27a>
 8008412:	3101      	adds	r1, #1
 8008414:	0052      	lsls	r2, r2, #1
 8008416:	e7b7      	b.n	8008388 <_dtoa_r+0x280>
 8008418:	69eb      	ldr	r3, [r5, #28]
 800841a:	9a03      	ldr	r2, [sp, #12]
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	9b08      	ldr	r3, [sp, #32]
 8008420:	2b0e      	cmp	r3, #14
 8008422:	f200 80a8 	bhi.w	8008576 <_dtoa_r+0x46e>
 8008426:	2c00      	cmp	r4, #0
 8008428:	f000 80a5 	beq.w	8008576 <_dtoa_r+0x46e>
 800842c:	f1bb 0f00 	cmp.w	fp, #0
 8008430:	dd34      	ble.n	800849c <_dtoa_r+0x394>
 8008432:	4b9a      	ldr	r3, [pc, #616]	; (800869c <_dtoa_r+0x594>)
 8008434:	f00b 020f 	and.w	r2, fp, #15
 8008438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800843c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008440:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008444:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008448:	ea4f 142b 	mov.w	r4, fp, asr #4
 800844c:	d016      	beq.n	800847c <_dtoa_r+0x374>
 800844e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008452:	4b93      	ldr	r3, [pc, #588]	; (80086a0 <_dtoa_r+0x598>)
 8008454:	2703      	movs	r7, #3
 8008456:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800845a:	f7f8 f967 	bl	800072c <__aeabi_ddiv>
 800845e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008462:	f004 040f 	and.w	r4, r4, #15
 8008466:	4e8e      	ldr	r6, [pc, #568]	; (80086a0 <_dtoa_r+0x598>)
 8008468:	b954      	cbnz	r4, 8008480 <_dtoa_r+0x378>
 800846a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800846e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008472:	f7f8 f95b 	bl	800072c <__aeabi_ddiv>
 8008476:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800847a:	e029      	b.n	80084d0 <_dtoa_r+0x3c8>
 800847c:	2702      	movs	r7, #2
 800847e:	e7f2      	b.n	8008466 <_dtoa_r+0x35e>
 8008480:	07e1      	lsls	r1, r4, #31
 8008482:	d508      	bpl.n	8008496 <_dtoa_r+0x38e>
 8008484:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008488:	e9d6 2300 	ldrd	r2, r3, [r6]
 800848c:	f7f8 f824 	bl	80004d8 <__aeabi_dmul>
 8008490:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008494:	3701      	adds	r7, #1
 8008496:	1064      	asrs	r4, r4, #1
 8008498:	3608      	adds	r6, #8
 800849a:	e7e5      	b.n	8008468 <_dtoa_r+0x360>
 800849c:	f000 80a5 	beq.w	80085ea <_dtoa_r+0x4e2>
 80084a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084a4:	f1cb 0400 	rsb	r4, fp, #0
 80084a8:	4b7c      	ldr	r3, [pc, #496]	; (800869c <_dtoa_r+0x594>)
 80084aa:	f004 020f 	and.w	r2, r4, #15
 80084ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f8 f80f 	bl	80004d8 <__aeabi_dmul>
 80084ba:	2702      	movs	r7, #2
 80084bc:	2300      	movs	r3, #0
 80084be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084c2:	4e77      	ldr	r6, [pc, #476]	; (80086a0 <_dtoa_r+0x598>)
 80084c4:	1124      	asrs	r4, r4, #4
 80084c6:	2c00      	cmp	r4, #0
 80084c8:	f040 8084 	bne.w	80085d4 <_dtoa_r+0x4cc>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1d2      	bne.n	8008476 <_dtoa_r+0x36e>
 80084d0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80084d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80084d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 8087 	beq.w	80085ee <_dtoa_r+0x4e6>
 80084e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084e4:	2200      	movs	r2, #0
 80084e6:	4b6f      	ldr	r3, [pc, #444]	; (80086a4 <_dtoa_r+0x59c>)
 80084e8:	f7f8 fa68 	bl	80009bc <__aeabi_dcmplt>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d07e      	beq.n	80085ee <_dtoa_r+0x4e6>
 80084f0:	9b08      	ldr	r3, [sp, #32]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d07b      	beq.n	80085ee <_dtoa_r+0x4e6>
 80084f6:	9b06      	ldr	r3, [sp, #24]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	dd38      	ble.n	800856e <_dtoa_r+0x466>
 80084fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008500:	2200      	movs	r2, #0
 8008502:	4b69      	ldr	r3, [pc, #420]	; (80086a8 <_dtoa_r+0x5a0>)
 8008504:	f7f7 ffe8 	bl	80004d8 <__aeabi_dmul>
 8008508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800850c:	9c06      	ldr	r4, [sp, #24]
 800850e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008512:	3701      	adds	r7, #1
 8008514:	4638      	mov	r0, r7
 8008516:	f7f7 ff75 	bl	8000404 <__aeabi_i2d>
 800851a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800851e:	f7f7 ffdb 	bl	80004d8 <__aeabi_dmul>
 8008522:	2200      	movs	r2, #0
 8008524:	4b61      	ldr	r3, [pc, #388]	; (80086ac <_dtoa_r+0x5a4>)
 8008526:	f7f7 fe21 	bl	800016c <__adddf3>
 800852a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800852e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008532:	9611      	str	r6, [sp, #68]	; 0x44
 8008534:	2c00      	cmp	r4, #0
 8008536:	d15d      	bne.n	80085f4 <_dtoa_r+0x4ec>
 8008538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800853c:	2200      	movs	r2, #0
 800853e:	4b5c      	ldr	r3, [pc, #368]	; (80086b0 <_dtoa_r+0x5a8>)
 8008540:	f7f7 fe12 	bl	8000168 <__aeabi_dsub>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800854c:	4633      	mov	r3, r6
 800854e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008550:	f7f8 fa52 	bl	80009f8 <__aeabi_dcmpgt>
 8008554:	2800      	cmp	r0, #0
 8008556:	f040 8295 	bne.w	8008a84 <_dtoa_r+0x97c>
 800855a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800855e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008560:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008564:	f7f8 fa2a 	bl	80009bc <__aeabi_dcmplt>
 8008568:	2800      	cmp	r0, #0
 800856a:	f040 8289 	bne.w	8008a80 <_dtoa_r+0x978>
 800856e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008572:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008578:	2b00      	cmp	r3, #0
 800857a:	f2c0 8151 	blt.w	8008820 <_dtoa_r+0x718>
 800857e:	f1bb 0f0e 	cmp.w	fp, #14
 8008582:	f300 814d 	bgt.w	8008820 <_dtoa_r+0x718>
 8008586:	4b45      	ldr	r3, [pc, #276]	; (800869c <_dtoa_r+0x594>)
 8008588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800858c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008590:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008594:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008596:	2b00      	cmp	r3, #0
 8008598:	f280 80da 	bge.w	8008750 <_dtoa_r+0x648>
 800859c:	9b08      	ldr	r3, [sp, #32]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f300 80d6 	bgt.w	8008750 <_dtoa_r+0x648>
 80085a4:	f040 826b 	bne.w	8008a7e <_dtoa_r+0x976>
 80085a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085ac:	2200      	movs	r2, #0
 80085ae:	4b40      	ldr	r3, [pc, #256]	; (80086b0 <_dtoa_r+0x5a8>)
 80085b0:	f7f7 ff92 	bl	80004d8 <__aeabi_dmul>
 80085b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b8:	f7f8 fa14 	bl	80009e4 <__aeabi_dcmpge>
 80085bc:	9c08      	ldr	r4, [sp, #32]
 80085be:	4626      	mov	r6, r4
 80085c0:	2800      	cmp	r0, #0
 80085c2:	f040 8241 	bne.w	8008a48 <_dtoa_r+0x940>
 80085c6:	2331      	movs	r3, #49	; 0x31
 80085c8:	9f03      	ldr	r7, [sp, #12]
 80085ca:	f10b 0b01 	add.w	fp, fp, #1
 80085ce:	f807 3b01 	strb.w	r3, [r7], #1
 80085d2:	e23d      	b.n	8008a50 <_dtoa_r+0x948>
 80085d4:	07e2      	lsls	r2, r4, #31
 80085d6:	d505      	bpl.n	80085e4 <_dtoa_r+0x4dc>
 80085d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085dc:	f7f7 ff7c 	bl	80004d8 <__aeabi_dmul>
 80085e0:	2301      	movs	r3, #1
 80085e2:	3701      	adds	r7, #1
 80085e4:	1064      	asrs	r4, r4, #1
 80085e6:	3608      	adds	r6, #8
 80085e8:	e76d      	b.n	80084c6 <_dtoa_r+0x3be>
 80085ea:	2702      	movs	r7, #2
 80085ec:	e770      	b.n	80084d0 <_dtoa_r+0x3c8>
 80085ee:	46d8      	mov	r8, fp
 80085f0:	9c08      	ldr	r4, [sp, #32]
 80085f2:	e78f      	b.n	8008514 <_dtoa_r+0x40c>
 80085f4:	9903      	ldr	r1, [sp, #12]
 80085f6:	4b29      	ldr	r3, [pc, #164]	; (800869c <_dtoa_r+0x594>)
 80085f8:	4421      	add	r1, r4
 80085fa:	9112      	str	r1, [sp, #72]	; 0x48
 80085fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008602:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008606:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800860a:	2900      	cmp	r1, #0
 800860c:	d054      	beq.n	80086b8 <_dtoa_r+0x5b0>
 800860e:	2000      	movs	r0, #0
 8008610:	4928      	ldr	r1, [pc, #160]	; (80086b4 <_dtoa_r+0x5ac>)
 8008612:	f7f8 f88b 	bl	800072c <__aeabi_ddiv>
 8008616:	463b      	mov	r3, r7
 8008618:	4632      	mov	r2, r6
 800861a:	f7f7 fda5 	bl	8000168 <__aeabi_dsub>
 800861e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008622:	9f03      	ldr	r7, [sp, #12]
 8008624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008628:	f7f8 fa06 	bl	8000a38 <__aeabi_d2iz>
 800862c:	4604      	mov	r4, r0
 800862e:	f7f7 fee9 	bl	8000404 <__aeabi_i2d>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800863a:	f7f7 fd95 	bl	8000168 <__aeabi_dsub>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	3430      	adds	r4, #48	; 0x30
 8008644:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008648:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800864c:	f807 4b01 	strb.w	r4, [r7], #1
 8008650:	f7f8 f9b4 	bl	80009bc <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	d173      	bne.n	8008740 <_dtoa_r+0x638>
 8008658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800865c:	2000      	movs	r0, #0
 800865e:	4911      	ldr	r1, [pc, #68]	; (80086a4 <_dtoa_r+0x59c>)
 8008660:	f7f7 fd82 	bl	8000168 <__aeabi_dsub>
 8008664:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008668:	f7f8 f9a8 	bl	80009bc <__aeabi_dcmplt>
 800866c:	2800      	cmp	r0, #0
 800866e:	f040 80b6 	bne.w	80087de <_dtoa_r+0x6d6>
 8008672:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008674:	429f      	cmp	r7, r3
 8008676:	f43f af7a 	beq.w	800856e <_dtoa_r+0x466>
 800867a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800867e:	2200      	movs	r2, #0
 8008680:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <_dtoa_r+0x5a0>)
 8008682:	f7f7 ff29 	bl	80004d8 <__aeabi_dmul>
 8008686:	2200      	movs	r2, #0
 8008688:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800868c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <_dtoa_r+0x5a0>)
 8008692:	f7f7 ff21 	bl	80004d8 <__aeabi_dmul>
 8008696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800869a:	e7c3      	b.n	8008624 <_dtoa_r+0x51c>
 800869c:	0800bff0 	.word	0x0800bff0
 80086a0:	0800bfc8 	.word	0x0800bfc8
 80086a4:	3ff00000 	.word	0x3ff00000
 80086a8:	40240000 	.word	0x40240000
 80086ac:	401c0000 	.word	0x401c0000
 80086b0:	40140000 	.word	0x40140000
 80086b4:	3fe00000 	.word	0x3fe00000
 80086b8:	4630      	mov	r0, r6
 80086ba:	4639      	mov	r1, r7
 80086bc:	f7f7 ff0c 	bl	80004d8 <__aeabi_dmul>
 80086c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086c6:	9c03      	ldr	r4, [sp, #12]
 80086c8:	9314      	str	r3, [sp, #80]	; 0x50
 80086ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ce:	f7f8 f9b3 	bl	8000a38 <__aeabi_d2iz>
 80086d2:	9015      	str	r0, [sp, #84]	; 0x54
 80086d4:	f7f7 fe96 	bl	8000404 <__aeabi_i2d>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e0:	f7f7 fd42 	bl	8000168 <__aeabi_dsub>
 80086e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086e6:	4606      	mov	r6, r0
 80086e8:	3330      	adds	r3, #48	; 0x30
 80086ea:	f804 3b01 	strb.w	r3, [r4], #1
 80086ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086f0:	460f      	mov	r7, r1
 80086f2:	429c      	cmp	r4, r3
 80086f4:	f04f 0200 	mov.w	r2, #0
 80086f8:	d124      	bne.n	8008744 <_dtoa_r+0x63c>
 80086fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80086fe:	4baf      	ldr	r3, [pc, #700]	; (80089bc <_dtoa_r+0x8b4>)
 8008700:	f7f7 fd34 	bl	800016c <__adddf3>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4630      	mov	r0, r6
 800870a:	4639      	mov	r1, r7
 800870c:	f7f8 f974 	bl	80009f8 <__aeabi_dcmpgt>
 8008710:	2800      	cmp	r0, #0
 8008712:	d163      	bne.n	80087dc <_dtoa_r+0x6d4>
 8008714:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008718:	2000      	movs	r0, #0
 800871a:	49a8      	ldr	r1, [pc, #672]	; (80089bc <_dtoa_r+0x8b4>)
 800871c:	f7f7 fd24 	bl	8000168 <__aeabi_dsub>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	f7f8 f948 	bl	80009bc <__aeabi_dcmplt>
 800872c:	2800      	cmp	r0, #0
 800872e:	f43f af1e 	beq.w	800856e <_dtoa_r+0x466>
 8008732:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008734:	1e7b      	subs	r3, r7, #1
 8008736:	9314      	str	r3, [sp, #80]	; 0x50
 8008738:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800873c:	2b30      	cmp	r3, #48	; 0x30
 800873e:	d0f8      	beq.n	8008732 <_dtoa_r+0x62a>
 8008740:	46c3      	mov	fp, r8
 8008742:	e03b      	b.n	80087bc <_dtoa_r+0x6b4>
 8008744:	4b9e      	ldr	r3, [pc, #632]	; (80089c0 <_dtoa_r+0x8b8>)
 8008746:	f7f7 fec7 	bl	80004d8 <__aeabi_dmul>
 800874a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800874e:	e7bc      	b.n	80086ca <_dtoa_r+0x5c2>
 8008750:	9f03      	ldr	r7, [sp, #12]
 8008752:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	f7f7 ffe5 	bl	800072c <__aeabi_ddiv>
 8008762:	f7f8 f969 	bl	8000a38 <__aeabi_d2iz>
 8008766:	4604      	mov	r4, r0
 8008768:	f7f7 fe4c 	bl	8000404 <__aeabi_i2d>
 800876c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008770:	f7f7 feb2 	bl	80004d8 <__aeabi_dmul>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4640      	mov	r0, r8
 800877a:	4649      	mov	r1, r9
 800877c:	f7f7 fcf4 	bl	8000168 <__aeabi_dsub>
 8008780:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008784:	f807 6b01 	strb.w	r6, [r7], #1
 8008788:	9e03      	ldr	r6, [sp, #12]
 800878a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800878e:	1bbe      	subs	r6, r7, r6
 8008790:	45b4      	cmp	ip, r6
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	d136      	bne.n	8008806 <_dtoa_r+0x6fe>
 8008798:	f7f7 fce8 	bl	800016c <__adddf3>
 800879c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087a0:	4680      	mov	r8, r0
 80087a2:	4689      	mov	r9, r1
 80087a4:	f7f8 f928 	bl	80009f8 <__aeabi_dcmpgt>
 80087a8:	bb58      	cbnz	r0, 8008802 <_dtoa_r+0x6fa>
 80087aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f8 f8f9 	bl	80009a8 <__aeabi_dcmpeq>
 80087b6:	b108      	cbz	r0, 80087bc <_dtoa_r+0x6b4>
 80087b8:	07e3      	lsls	r3, r4, #31
 80087ba:	d422      	bmi.n	8008802 <_dtoa_r+0x6fa>
 80087bc:	4651      	mov	r1, sl
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 fbc2 	bl	8008f48 <_Bfree>
 80087c4:	2300      	movs	r3, #0
 80087c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087c8:	703b      	strb	r3, [r7, #0]
 80087ca:	f10b 0301 	add.w	r3, fp, #1
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f43f ace6 	beq.w	80081a4 <_dtoa_r+0x9c>
 80087d8:	601f      	str	r7, [r3, #0]
 80087da:	e4e3      	b.n	80081a4 <_dtoa_r+0x9c>
 80087dc:	4627      	mov	r7, r4
 80087de:	463b      	mov	r3, r7
 80087e0:	461f      	mov	r7, r3
 80087e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087e6:	2a39      	cmp	r2, #57	; 0x39
 80087e8:	d107      	bne.n	80087fa <_dtoa_r+0x6f2>
 80087ea:	9a03      	ldr	r2, [sp, #12]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d1f7      	bne.n	80087e0 <_dtoa_r+0x6d8>
 80087f0:	2230      	movs	r2, #48	; 0x30
 80087f2:	9903      	ldr	r1, [sp, #12]
 80087f4:	f108 0801 	add.w	r8, r8, #1
 80087f8:	700a      	strb	r2, [r1, #0]
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	3201      	adds	r2, #1
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	e79e      	b.n	8008740 <_dtoa_r+0x638>
 8008802:	46d8      	mov	r8, fp
 8008804:	e7eb      	b.n	80087de <_dtoa_r+0x6d6>
 8008806:	2200      	movs	r2, #0
 8008808:	4b6d      	ldr	r3, [pc, #436]	; (80089c0 <_dtoa_r+0x8b8>)
 800880a:	f7f7 fe65 	bl	80004d8 <__aeabi_dmul>
 800880e:	2200      	movs	r2, #0
 8008810:	2300      	movs	r3, #0
 8008812:	4680      	mov	r8, r0
 8008814:	4689      	mov	r9, r1
 8008816:	f7f8 f8c7 	bl	80009a8 <__aeabi_dcmpeq>
 800881a:	2800      	cmp	r0, #0
 800881c:	d09b      	beq.n	8008756 <_dtoa_r+0x64e>
 800881e:	e7cd      	b.n	80087bc <_dtoa_r+0x6b4>
 8008820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008822:	2a00      	cmp	r2, #0
 8008824:	f000 80c4 	beq.w	80089b0 <_dtoa_r+0x8a8>
 8008828:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800882a:	2a01      	cmp	r2, #1
 800882c:	f300 80a8 	bgt.w	8008980 <_dtoa_r+0x878>
 8008830:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008832:	2a00      	cmp	r2, #0
 8008834:	f000 80a0 	beq.w	8008978 <_dtoa_r+0x870>
 8008838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800883c:	464f      	mov	r7, r9
 800883e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008842:	2101      	movs	r1, #1
 8008844:	441a      	add	r2, r3
 8008846:	4628      	mov	r0, r5
 8008848:	4499      	add	r9, r3
 800884a:	9209      	str	r2, [sp, #36]	; 0x24
 800884c:	f000 fc7c 	bl	8009148 <__i2b>
 8008850:	4606      	mov	r6, r0
 8008852:	b15f      	cbz	r7, 800886c <_dtoa_r+0x764>
 8008854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008856:	2b00      	cmp	r3, #0
 8008858:	dd08      	ble.n	800886c <_dtoa_r+0x764>
 800885a:	42bb      	cmp	r3, r7
 800885c:	bfa8      	it	ge
 800885e:	463b      	movge	r3, r7
 8008860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008862:	eba9 0903 	sub.w	r9, r9, r3
 8008866:	1aff      	subs	r7, r7, r3
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	9309      	str	r3, [sp, #36]	; 0x24
 800886c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886e:	b1f3      	cbz	r3, 80088ae <_dtoa_r+0x7a6>
 8008870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 80a0 	beq.w	80089b8 <_dtoa_r+0x8b0>
 8008878:	2c00      	cmp	r4, #0
 800887a:	dd10      	ble.n	800889e <_dtoa_r+0x796>
 800887c:	4631      	mov	r1, r6
 800887e:	4622      	mov	r2, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 fd1f 	bl	80092c4 <__pow5mult>
 8008886:	4652      	mov	r2, sl
 8008888:	4601      	mov	r1, r0
 800888a:	4606      	mov	r6, r0
 800888c:	4628      	mov	r0, r5
 800888e:	f000 fc71 	bl	8009174 <__multiply>
 8008892:	4680      	mov	r8, r0
 8008894:	4651      	mov	r1, sl
 8008896:	4628      	mov	r0, r5
 8008898:	f000 fb56 	bl	8008f48 <_Bfree>
 800889c:	46c2      	mov	sl, r8
 800889e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a0:	1b1a      	subs	r2, r3, r4
 80088a2:	d004      	beq.n	80088ae <_dtoa_r+0x7a6>
 80088a4:	4651      	mov	r1, sl
 80088a6:	4628      	mov	r0, r5
 80088a8:	f000 fd0c 	bl	80092c4 <__pow5mult>
 80088ac:	4682      	mov	sl, r0
 80088ae:	2101      	movs	r1, #1
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 fc49 	bl	8009148 <__i2b>
 80088b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088b8:	4604      	mov	r4, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f340 8082 	ble.w	80089c4 <_dtoa_r+0x8bc>
 80088c0:	461a      	mov	r2, r3
 80088c2:	4601      	mov	r1, r0
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 fcfd 	bl	80092c4 <__pow5mult>
 80088ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088cc:	4604      	mov	r4, r0
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	dd7b      	ble.n	80089ca <_dtoa_r+0x8c2>
 80088d2:	f04f 0800 	mov.w	r8, #0
 80088d6:	6923      	ldr	r3, [r4, #16]
 80088d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088dc:	6918      	ldr	r0, [r3, #16]
 80088de:	f000 fbe5 	bl	80090ac <__hi0bits>
 80088e2:	f1c0 0020 	rsb	r0, r0, #32
 80088e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e8:	4418      	add	r0, r3
 80088ea:	f010 001f 	ands.w	r0, r0, #31
 80088ee:	f000 8092 	beq.w	8008a16 <_dtoa_r+0x90e>
 80088f2:	f1c0 0320 	rsb	r3, r0, #32
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	f340 8085 	ble.w	8008a06 <_dtoa_r+0x8fe>
 80088fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fe:	f1c0 001c 	rsb	r0, r0, #28
 8008902:	4403      	add	r3, r0
 8008904:	4481      	add	r9, r0
 8008906:	4407      	add	r7, r0
 8008908:	9309      	str	r3, [sp, #36]	; 0x24
 800890a:	f1b9 0f00 	cmp.w	r9, #0
 800890e:	dd05      	ble.n	800891c <_dtoa_r+0x814>
 8008910:	4651      	mov	r1, sl
 8008912:	464a      	mov	r2, r9
 8008914:	4628      	mov	r0, r5
 8008916:	f000 fd2f 	bl	8009378 <__lshift>
 800891a:	4682      	mov	sl, r0
 800891c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891e:	2b00      	cmp	r3, #0
 8008920:	dd05      	ble.n	800892e <_dtoa_r+0x826>
 8008922:	4621      	mov	r1, r4
 8008924:	461a      	mov	r2, r3
 8008926:	4628      	mov	r0, r5
 8008928:	f000 fd26 	bl	8009378 <__lshift>
 800892c:	4604      	mov	r4, r0
 800892e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d072      	beq.n	8008a1a <_dtoa_r+0x912>
 8008934:	4621      	mov	r1, r4
 8008936:	4650      	mov	r0, sl
 8008938:	f000 fd8a 	bl	8009450 <__mcmp>
 800893c:	2800      	cmp	r0, #0
 800893e:	da6c      	bge.n	8008a1a <_dtoa_r+0x912>
 8008940:	2300      	movs	r3, #0
 8008942:	4651      	mov	r1, sl
 8008944:	220a      	movs	r2, #10
 8008946:	4628      	mov	r0, r5
 8008948:	f000 fb20 	bl	8008f8c <__multadd>
 800894c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800894e:	4682      	mov	sl, r0
 8008950:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 81ac 	beq.w	8008cb2 <_dtoa_r+0xbaa>
 800895a:	2300      	movs	r3, #0
 800895c:	4631      	mov	r1, r6
 800895e:	220a      	movs	r2, #10
 8008960:	4628      	mov	r0, r5
 8008962:	f000 fb13 	bl	8008f8c <__multadd>
 8008966:	9b06      	ldr	r3, [sp, #24]
 8008968:	4606      	mov	r6, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	f300 8093 	bgt.w	8008a96 <_dtoa_r+0x98e>
 8008970:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008972:	2b02      	cmp	r3, #2
 8008974:	dc59      	bgt.n	8008a2a <_dtoa_r+0x922>
 8008976:	e08e      	b.n	8008a96 <_dtoa_r+0x98e>
 8008978:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800897a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800897e:	e75d      	b.n	800883c <_dtoa_r+0x734>
 8008980:	9b08      	ldr	r3, [sp, #32]
 8008982:	1e5c      	subs	r4, r3, #1
 8008984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008986:	42a3      	cmp	r3, r4
 8008988:	bfbf      	itttt	lt
 800898a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800898c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800898e:	1ae3      	sublt	r3, r4, r3
 8008990:	18d2      	addlt	r2, r2, r3
 8008992:	bfa8      	it	ge
 8008994:	1b1c      	subge	r4, r3, r4
 8008996:	9b08      	ldr	r3, [sp, #32]
 8008998:	bfbe      	ittt	lt
 800899a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800899c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800899e:	2400      	movlt	r4, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bfb5      	itete	lt
 80089a4:	eba9 0703 	sublt.w	r7, r9, r3
 80089a8:	464f      	movge	r7, r9
 80089aa:	2300      	movlt	r3, #0
 80089ac:	9b08      	ldrge	r3, [sp, #32]
 80089ae:	e747      	b.n	8008840 <_dtoa_r+0x738>
 80089b0:	464f      	mov	r7, r9
 80089b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80089b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80089b6:	e74c      	b.n	8008852 <_dtoa_r+0x74a>
 80089b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ba:	e773      	b.n	80088a4 <_dtoa_r+0x79c>
 80089bc:	3fe00000 	.word	0x3fe00000
 80089c0:	40240000 	.word	0x40240000
 80089c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	dc18      	bgt.n	80089fc <_dtoa_r+0x8f4>
 80089ca:	9b04      	ldr	r3, [sp, #16]
 80089cc:	b9b3      	cbnz	r3, 80089fc <_dtoa_r+0x8f4>
 80089ce:	9b05      	ldr	r3, [sp, #20]
 80089d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089d4:	b993      	cbnz	r3, 80089fc <_dtoa_r+0x8f4>
 80089d6:	9b05      	ldr	r3, [sp, #20]
 80089d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089dc:	0d1b      	lsrs	r3, r3, #20
 80089de:	051b      	lsls	r3, r3, #20
 80089e0:	b17b      	cbz	r3, 8008a02 <_dtoa_r+0x8fa>
 80089e2:	f04f 0801 	mov.w	r8, #1
 80089e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e8:	f109 0901 	add.w	r9, r9, #1
 80089ec:	3301      	adds	r3, #1
 80089ee:	9309      	str	r3, [sp, #36]	; 0x24
 80089f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f47f af6f 	bne.w	80088d6 <_dtoa_r+0x7ce>
 80089f8:	2001      	movs	r0, #1
 80089fa:	e774      	b.n	80088e6 <_dtoa_r+0x7de>
 80089fc:	f04f 0800 	mov.w	r8, #0
 8008a00:	e7f6      	b.n	80089f0 <_dtoa_r+0x8e8>
 8008a02:	4698      	mov	r8, r3
 8008a04:	e7f4      	b.n	80089f0 <_dtoa_r+0x8e8>
 8008a06:	d080      	beq.n	800890a <_dtoa_r+0x802>
 8008a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a0a:	331c      	adds	r3, #28
 8008a0c:	441a      	add	r2, r3
 8008a0e:	4499      	add	r9, r3
 8008a10:	441f      	add	r7, r3
 8008a12:	9209      	str	r2, [sp, #36]	; 0x24
 8008a14:	e779      	b.n	800890a <_dtoa_r+0x802>
 8008a16:	4603      	mov	r3, r0
 8008a18:	e7f6      	b.n	8008a08 <_dtoa_r+0x900>
 8008a1a:	9b08      	ldr	r3, [sp, #32]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dc34      	bgt.n	8008a8a <_dtoa_r+0x982>
 8008a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	dd31      	ble.n	8008a8a <_dtoa_r+0x982>
 8008a26:	9b08      	ldr	r3, [sp, #32]
 8008a28:	9306      	str	r3, [sp, #24]
 8008a2a:	9b06      	ldr	r3, [sp, #24]
 8008a2c:	b963      	cbnz	r3, 8008a48 <_dtoa_r+0x940>
 8008a2e:	4621      	mov	r1, r4
 8008a30:	2205      	movs	r2, #5
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 faaa 	bl	8008f8c <__multadd>
 8008a38:	4601      	mov	r1, r0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4650      	mov	r0, sl
 8008a3e:	f000 fd07 	bl	8009450 <__mcmp>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	f73f adbf 	bgt.w	80085c6 <_dtoa_r+0x4be>
 8008a48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a4a:	9f03      	ldr	r7, [sp, #12]
 8008a4c:	ea6f 0b03 	mvn.w	fp, r3
 8008a50:	f04f 0800 	mov.w	r8, #0
 8008a54:	4621      	mov	r1, r4
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 fa76 	bl	8008f48 <_Bfree>
 8008a5c:	2e00      	cmp	r6, #0
 8008a5e:	f43f aead 	beq.w	80087bc <_dtoa_r+0x6b4>
 8008a62:	f1b8 0f00 	cmp.w	r8, #0
 8008a66:	d005      	beq.n	8008a74 <_dtoa_r+0x96c>
 8008a68:	45b0      	cmp	r8, r6
 8008a6a:	d003      	beq.n	8008a74 <_dtoa_r+0x96c>
 8008a6c:	4641      	mov	r1, r8
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f000 fa6a 	bl	8008f48 <_Bfree>
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	f000 fa66 	bl	8008f48 <_Bfree>
 8008a7c:	e69e      	b.n	80087bc <_dtoa_r+0x6b4>
 8008a7e:	2400      	movs	r4, #0
 8008a80:	4626      	mov	r6, r4
 8008a82:	e7e1      	b.n	8008a48 <_dtoa_r+0x940>
 8008a84:	46c3      	mov	fp, r8
 8008a86:	4626      	mov	r6, r4
 8008a88:	e59d      	b.n	80085c6 <_dtoa_r+0x4be>
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 80c8 	beq.w	8008c22 <_dtoa_r+0xb1a>
 8008a92:	9b08      	ldr	r3, [sp, #32]
 8008a94:	9306      	str	r3, [sp, #24]
 8008a96:	2f00      	cmp	r7, #0
 8008a98:	dd05      	ble.n	8008aa6 <_dtoa_r+0x99e>
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	463a      	mov	r2, r7
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f000 fc6a 	bl	8009378 <__lshift>
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	f1b8 0f00 	cmp.w	r8, #0
 8008aaa:	d05b      	beq.n	8008b64 <_dtoa_r+0xa5c>
 8008aac:	4628      	mov	r0, r5
 8008aae:	6871      	ldr	r1, [r6, #4]
 8008ab0:	f000 fa0a 	bl	8008ec8 <_Balloc>
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	b928      	cbnz	r0, 8008ac4 <_dtoa_r+0x9bc>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008abe:	4b81      	ldr	r3, [pc, #516]	; (8008cc4 <_dtoa_r+0xbbc>)
 8008ac0:	f7ff bb36 	b.w	8008130 <_dtoa_r+0x28>
 8008ac4:	6932      	ldr	r2, [r6, #16]
 8008ac6:	f106 010c 	add.w	r1, r6, #12
 8008aca:	3202      	adds	r2, #2
 8008acc:	0092      	lsls	r2, r2, #2
 8008ace:	300c      	adds	r0, #12
 8008ad0:	f7ff fa7b 	bl	8007fca <memcpy>
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f000 fc4d 	bl	8009378 <__lshift>
 8008ade:	46b0      	mov	r8, r6
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	9a03      	ldr	r2, [sp, #12]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	9308      	str	r3, [sp, #32]
 8008aea:	9b06      	ldr	r3, [sp, #24]
 8008aec:	4413      	add	r3, r2
 8008aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af0:	9b04      	ldr	r3, [sp, #16]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	930a      	str	r3, [sp, #40]	; 0x28
 8008af8:	9b08      	ldr	r3, [sp, #32]
 8008afa:	4621      	mov	r1, r4
 8008afc:	3b01      	subs	r3, #1
 8008afe:	4650      	mov	r0, sl
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	f7ff fa75 	bl	8007ff0 <quorem>
 8008b06:	4641      	mov	r1, r8
 8008b08:	9006      	str	r0, [sp, #24]
 8008b0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b0e:	4650      	mov	r0, sl
 8008b10:	f000 fc9e 	bl	8009450 <__mcmp>
 8008b14:	4632      	mov	r2, r6
 8008b16:	9009      	str	r0, [sp, #36]	; 0x24
 8008b18:	4621      	mov	r1, r4
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f000 fcb4 	bl	8009488 <__mdiff>
 8008b20:	68c2      	ldr	r2, [r0, #12]
 8008b22:	4607      	mov	r7, r0
 8008b24:	bb02      	cbnz	r2, 8008b68 <_dtoa_r+0xa60>
 8008b26:	4601      	mov	r1, r0
 8008b28:	4650      	mov	r0, sl
 8008b2a:	f000 fc91 	bl	8009450 <__mcmp>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	4639      	mov	r1, r7
 8008b32:	4628      	mov	r0, r5
 8008b34:	920c      	str	r2, [sp, #48]	; 0x30
 8008b36:	f000 fa07 	bl	8008f48 <_Bfree>
 8008b3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b3e:	9f08      	ldr	r7, [sp, #32]
 8008b40:	ea43 0102 	orr.w	r1, r3, r2
 8008b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b46:	4319      	orrs	r1, r3
 8008b48:	d110      	bne.n	8008b6c <_dtoa_r+0xa64>
 8008b4a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b4e:	d029      	beq.n	8008ba4 <_dtoa_r+0xa9c>
 8008b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dd02      	ble.n	8008b5c <_dtoa_r+0xa54>
 8008b56:	9b06      	ldr	r3, [sp, #24]
 8008b58:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008b5c:	9b04      	ldr	r3, [sp, #16]
 8008b5e:	f883 9000 	strb.w	r9, [r3]
 8008b62:	e777      	b.n	8008a54 <_dtoa_r+0x94c>
 8008b64:	4630      	mov	r0, r6
 8008b66:	e7ba      	b.n	8008ade <_dtoa_r+0x9d6>
 8008b68:	2201      	movs	r2, #1
 8008b6a:	e7e1      	b.n	8008b30 <_dtoa_r+0xa28>
 8008b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	db04      	blt.n	8008b7c <_dtoa_r+0xa74>
 8008b72:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008b74:	430b      	orrs	r3, r1
 8008b76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	d120      	bne.n	8008bbe <_dtoa_r+0xab6>
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	dded      	ble.n	8008b5c <_dtoa_r+0xa54>
 8008b80:	4651      	mov	r1, sl
 8008b82:	2201      	movs	r2, #1
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 fbf7 	bl	8009378 <__lshift>
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	f000 fc5f 	bl	8009450 <__mcmp>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	dc03      	bgt.n	8008b9e <_dtoa_r+0xa96>
 8008b96:	d1e1      	bne.n	8008b5c <_dtoa_r+0xa54>
 8008b98:	f019 0f01 	tst.w	r9, #1
 8008b9c:	d0de      	beq.n	8008b5c <_dtoa_r+0xa54>
 8008b9e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ba2:	d1d8      	bne.n	8008b56 <_dtoa_r+0xa4e>
 8008ba4:	2339      	movs	r3, #57	; 0x39
 8008ba6:	9a04      	ldr	r2, [sp, #16]
 8008ba8:	7013      	strb	r3, [r2, #0]
 8008baa:	463b      	mov	r3, r7
 8008bac:	461f      	mov	r7, r3
 8008bae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	2a39      	cmp	r2, #57	; 0x39
 8008bb6:	d06b      	beq.n	8008c90 <_dtoa_r+0xb88>
 8008bb8:	3201      	adds	r2, #1
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	e74a      	b.n	8008a54 <_dtoa_r+0x94c>
 8008bbe:	2a00      	cmp	r2, #0
 8008bc0:	dd07      	ble.n	8008bd2 <_dtoa_r+0xaca>
 8008bc2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008bc6:	d0ed      	beq.n	8008ba4 <_dtoa_r+0xa9c>
 8008bc8:	9a04      	ldr	r2, [sp, #16]
 8008bca:	f109 0301 	add.w	r3, r9, #1
 8008bce:	7013      	strb	r3, [r2, #0]
 8008bd0:	e740      	b.n	8008a54 <_dtoa_r+0x94c>
 8008bd2:	9b08      	ldr	r3, [sp, #32]
 8008bd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bd6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d042      	beq.n	8008c64 <_dtoa_r+0xb5c>
 8008bde:	4651      	mov	r1, sl
 8008be0:	2300      	movs	r3, #0
 8008be2:	220a      	movs	r2, #10
 8008be4:	4628      	mov	r0, r5
 8008be6:	f000 f9d1 	bl	8008f8c <__multadd>
 8008bea:	45b0      	cmp	r8, r6
 8008bec:	4682      	mov	sl, r0
 8008bee:	f04f 0300 	mov.w	r3, #0
 8008bf2:	f04f 020a 	mov.w	r2, #10
 8008bf6:	4641      	mov	r1, r8
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	d107      	bne.n	8008c0c <_dtoa_r+0xb04>
 8008bfc:	f000 f9c6 	bl	8008f8c <__multadd>
 8008c00:	4680      	mov	r8, r0
 8008c02:	4606      	mov	r6, r0
 8008c04:	9b08      	ldr	r3, [sp, #32]
 8008c06:	3301      	adds	r3, #1
 8008c08:	9308      	str	r3, [sp, #32]
 8008c0a:	e775      	b.n	8008af8 <_dtoa_r+0x9f0>
 8008c0c:	f000 f9be 	bl	8008f8c <__multadd>
 8008c10:	4631      	mov	r1, r6
 8008c12:	4680      	mov	r8, r0
 8008c14:	2300      	movs	r3, #0
 8008c16:	220a      	movs	r2, #10
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f000 f9b7 	bl	8008f8c <__multadd>
 8008c1e:	4606      	mov	r6, r0
 8008c20:	e7f0      	b.n	8008c04 <_dtoa_r+0xafc>
 8008c22:	9b08      	ldr	r3, [sp, #32]
 8008c24:	9306      	str	r3, [sp, #24]
 8008c26:	9f03      	ldr	r7, [sp, #12]
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4650      	mov	r0, sl
 8008c2c:	f7ff f9e0 	bl	8007ff0 <quorem>
 8008c30:	9b03      	ldr	r3, [sp, #12]
 8008c32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c36:	f807 9b01 	strb.w	r9, [r7], #1
 8008c3a:	1afa      	subs	r2, r7, r3
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	dd07      	ble.n	8008c52 <_dtoa_r+0xb4a>
 8008c42:	4651      	mov	r1, sl
 8008c44:	2300      	movs	r3, #0
 8008c46:	220a      	movs	r2, #10
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f000 f99f 	bl	8008f8c <__multadd>
 8008c4e:	4682      	mov	sl, r0
 8008c50:	e7ea      	b.n	8008c28 <_dtoa_r+0xb20>
 8008c52:	9b06      	ldr	r3, [sp, #24]
 8008c54:	f04f 0800 	mov.w	r8, #0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bfcc      	ite	gt
 8008c5c:	461f      	movgt	r7, r3
 8008c5e:	2701      	movle	r7, #1
 8008c60:	9b03      	ldr	r3, [sp, #12]
 8008c62:	441f      	add	r7, r3
 8008c64:	4651      	mov	r1, sl
 8008c66:	2201      	movs	r2, #1
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f000 fb85 	bl	8009378 <__lshift>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4682      	mov	sl, r0
 8008c72:	f000 fbed 	bl	8009450 <__mcmp>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	dc97      	bgt.n	8008baa <_dtoa_r+0xaa2>
 8008c7a:	d102      	bne.n	8008c82 <_dtoa_r+0xb7a>
 8008c7c:	f019 0f01 	tst.w	r9, #1
 8008c80:	d193      	bne.n	8008baa <_dtoa_r+0xaa2>
 8008c82:	463b      	mov	r3, r7
 8008c84:	461f      	mov	r7, r3
 8008c86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c8a:	2a30      	cmp	r2, #48	; 0x30
 8008c8c:	d0fa      	beq.n	8008c84 <_dtoa_r+0xb7c>
 8008c8e:	e6e1      	b.n	8008a54 <_dtoa_r+0x94c>
 8008c90:	9a03      	ldr	r2, [sp, #12]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d18a      	bne.n	8008bac <_dtoa_r+0xaa4>
 8008c96:	2331      	movs	r3, #49	; 0x31
 8008c98:	f10b 0b01 	add.w	fp, fp, #1
 8008c9c:	e797      	b.n	8008bce <_dtoa_r+0xac6>
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <_dtoa_r+0xbc0>)
 8008ca0:	f7ff ba9f 	b.w	80081e2 <_dtoa_r+0xda>
 8008ca4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f47f aa77 	bne.w	800819a <_dtoa_r+0x92>
 8008cac:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <_dtoa_r+0xbc4>)
 8008cae:	f7ff ba98 	b.w	80081e2 <_dtoa_r+0xda>
 8008cb2:	9b06      	ldr	r3, [sp, #24]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dcb6      	bgt.n	8008c26 <_dtoa_r+0xb1e>
 8008cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	f73f aeb5 	bgt.w	8008a2a <_dtoa_r+0x922>
 8008cc0:	e7b1      	b.n	8008c26 <_dtoa_r+0xb1e>
 8008cc2:	bf00      	nop
 8008cc4:	0800bf57 	.word	0x0800bf57
 8008cc8:	0800beb2 	.word	0x0800beb2
 8008ccc:	0800bedb 	.word	0x0800bedb

08008cd0 <_free_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	d040      	beq.n	8008d5a <_free_r+0x8a>
 8008cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cdc:	1f0c      	subs	r4, r1, #4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bfb8      	it	lt
 8008ce2:	18e4      	addlt	r4, r4, r3
 8008ce4:	f000 f8e4 	bl	8008eb0 <__malloc_lock>
 8008ce8:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <_free_r+0x8c>)
 8008cea:	6813      	ldr	r3, [r2, #0]
 8008cec:	b933      	cbnz	r3, 8008cfc <_free_r+0x2c>
 8008cee:	6063      	str	r3, [r4, #4]
 8008cf0:	6014      	str	r4, [r2, #0]
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cf8:	f000 b8e0 	b.w	8008ebc <__malloc_unlock>
 8008cfc:	42a3      	cmp	r3, r4
 8008cfe:	d908      	bls.n	8008d12 <_free_r+0x42>
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	1821      	adds	r1, r4, r0
 8008d04:	428b      	cmp	r3, r1
 8008d06:	bf01      	itttt	eq
 8008d08:	6819      	ldreq	r1, [r3, #0]
 8008d0a:	685b      	ldreq	r3, [r3, #4]
 8008d0c:	1809      	addeq	r1, r1, r0
 8008d0e:	6021      	streq	r1, [r4, #0]
 8008d10:	e7ed      	b.n	8008cee <_free_r+0x1e>
 8008d12:	461a      	mov	r2, r3
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b10b      	cbz	r3, 8008d1c <_free_r+0x4c>
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	d9fa      	bls.n	8008d12 <_free_r+0x42>
 8008d1c:	6811      	ldr	r1, [r2, #0]
 8008d1e:	1850      	adds	r0, r2, r1
 8008d20:	42a0      	cmp	r0, r4
 8008d22:	d10b      	bne.n	8008d3c <_free_r+0x6c>
 8008d24:	6820      	ldr	r0, [r4, #0]
 8008d26:	4401      	add	r1, r0
 8008d28:	1850      	adds	r0, r2, r1
 8008d2a:	4283      	cmp	r3, r0
 8008d2c:	6011      	str	r1, [r2, #0]
 8008d2e:	d1e0      	bne.n	8008cf2 <_free_r+0x22>
 8008d30:	6818      	ldr	r0, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	4408      	add	r0, r1
 8008d36:	6010      	str	r0, [r2, #0]
 8008d38:	6053      	str	r3, [r2, #4]
 8008d3a:	e7da      	b.n	8008cf2 <_free_r+0x22>
 8008d3c:	d902      	bls.n	8008d44 <_free_r+0x74>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	e7d6      	b.n	8008cf2 <_free_r+0x22>
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	1821      	adds	r1, r4, r0
 8008d48:	428b      	cmp	r3, r1
 8008d4a:	bf01      	itttt	eq
 8008d4c:	6819      	ldreq	r1, [r3, #0]
 8008d4e:	685b      	ldreq	r3, [r3, #4]
 8008d50:	1809      	addeq	r1, r1, r0
 8008d52:	6021      	streq	r1, [r4, #0]
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	6054      	str	r4, [r2, #4]
 8008d58:	e7cb      	b.n	8008cf2 <_free_r+0x22>
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	20000940 	.word	0x20000940

08008d60 <malloc>:
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <malloc+0xc>)
 8008d62:	4601      	mov	r1, r0
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	f000 b823 	b.w	8008db0 <_malloc_r>
 8008d6a:	bf00      	nop
 8008d6c:	2000007c 	.word	0x2000007c

08008d70 <sbrk_aligned>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	4e0e      	ldr	r6, [pc, #56]	; (8008dac <sbrk_aligned+0x3c>)
 8008d74:	460c      	mov	r4, r1
 8008d76:	6831      	ldr	r1, [r6, #0]
 8008d78:	4605      	mov	r5, r0
 8008d7a:	b911      	cbnz	r1, 8008d82 <sbrk_aligned+0x12>
 8008d7c:	f001 fdf2 	bl	800a964 <_sbrk_r>
 8008d80:	6030      	str	r0, [r6, #0]
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f001 fded 	bl	800a964 <_sbrk_r>
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d00a      	beq.n	8008da4 <sbrk_aligned+0x34>
 8008d8e:	1cc4      	adds	r4, r0, #3
 8008d90:	f024 0403 	bic.w	r4, r4, #3
 8008d94:	42a0      	cmp	r0, r4
 8008d96:	d007      	beq.n	8008da8 <sbrk_aligned+0x38>
 8008d98:	1a21      	subs	r1, r4, r0
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f001 fde2 	bl	800a964 <_sbrk_r>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d101      	bne.n	8008da8 <sbrk_aligned+0x38>
 8008da4:	f04f 34ff 	mov.w	r4, #4294967295
 8008da8:	4620      	mov	r0, r4
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	20000944 	.word	0x20000944

08008db0 <_malloc_r>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	1ccd      	adds	r5, r1, #3
 8008db6:	f025 0503 	bic.w	r5, r5, #3
 8008dba:	3508      	adds	r5, #8
 8008dbc:	2d0c      	cmp	r5, #12
 8008dbe:	bf38      	it	cc
 8008dc0:	250c      	movcc	r5, #12
 8008dc2:	2d00      	cmp	r5, #0
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	db01      	blt.n	8008dcc <_malloc_r+0x1c>
 8008dc8:	42a9      	cmp	r1, r5
 8008dca:	d905      	bls.n	8008dd8 <_malloc_r+0x28>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	2600      	movs	r6, #0
 8008dd0:	603b      	str	r3, [r7, #0]
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008eac <_malloc_r+0xfc>
 8008ddc:	f000 f868 	bl	8008eb0 <__malloc_lock>
 8008de0:	f8d8 3000 	ldr.w	r3, [r8]
 8008de4:	461c      	mov	r4, r3
 8008de6:	bb5c      	cbnz	r4, 8008e40 <_malloc_r+0x90>
 8008de8:	4629      	mov	r1, r5
 8008dea:	4638      	mov	r0, r7
 8008dec:	f7ff ffc0 	bl	8008d70 <sbrk_aligned>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	4604      	mov	r4, r0
 8008df4:	d155      	bne.n	8008ea2 <_malloc_r+0xf2>
 8008df6:	f8d8 4000 	ldr.w	r4, [r8]
 8008dfa:	4626      	mov	r6, r4
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d145      	bne.n	8008e8c <_malloc_r+0xdc>
 8008e00:	2c00      	cmp	r4, #0
 8008e02:	d048      	beq.n	8008e96 <_malloc_r+0xe6>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	4631      	mov	r1, r6
 8008e08:	4638      	mov	r0, r7
 8008e0a:	eb04 0903 	add.w	r9, r4, r3
 8008e0e:	f001 fda9 	bl	800a964 <_sbrk_r>
 8008e12:	4581      	cmp	r9, r0
 8008e14:	d13f      	bne.n	8008e96 <_malloc_r+0xe6>
 8008e16:	6821      	ldr	r1, [r4, #0]
 8008e18:	4638      	mov	r0, r7
 8008e1a:	1a6d      	subs	r5, r5, r1
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7ff ffa7 	bl	8008d70 <sbrk_aligned>
 8008e22:	3001      	adds	r0, #1
 8008e24:	d037      	beq.n	8008e96 <_malloc_r+0xe6>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	442b      	add	r3, r5
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d038      	beq.n	8008ea6 <_malloc_r+0xf6>
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	42a2      	cmp	r2, r4
 8008e38:	d12b      	bne.n	8008e92 <_malloc_r+0xe2>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	605a      	str	r2, [r3, #4]
 8008e3e:	e00f      	b.n	8008e60 <_malloc_r+0xb0>
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	1b52      	subs	r2, r2, r5
 8008e44:	d41f      	bmi.n	8008e86 <_malloc_r+0xd6>
 8008e46:	2a0b      	cmp	r2, #11
 8008e48:	d917      	bls.n	8008e7a <_malloc_r+0xca>
 8008e4a:	1961      	adds	r1, r4, r5
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	6025      	str	r5, [r4, #0]
 8008e50:	bf18      	it	ne
 8008e52:	6059      	strne	r1, [r3, #4]
 8008e54:	6863      	ldr	r3, [r4, #4]
 8008e56:	bf08      	it	eq
 8008e58:	f8c8 1000 	streq.w	r1, [r8]
 8008e5c:	5162      	str	r2, [r4, r5]
 8008e5e:	604b      	str	r3, [r1, #4]
 8008e60:	4638      	mov	r0, r7
 8008e62:	f104 060b 	add.w	r6, r4, #11
 8008e66:	f000 f829 	bl	8008ebc <__malloc_unlock>
 8008e6a:	f026 0607 	bic.w	r6, r6, #7
 8008e6e:	1d23      	adds	r3, r4, #4
 8008e70:	1af2      	subs	r2, r6, r3
 8008e72:	d0ae      	beq.n	8008dd2 <_malloc_r+0x22>
 8008e74:	1b9b      	subs	r3, r3, r6
 8008e76:	50a3      	str	r3, [r4, r2]
 8008e78:	e7ab      	b.n	8008dd2 <_malloc_r+0x22>
 8008e7a:	42a3      	cmp	r3, r4
 8008e7c:	6862      	ldr	r2, [r4, #4]
 8008e7e:	d1dd      	bne.n	8008e3c <_malloc_r+0x8c>
 8008e80:	f8c8 2000 	str.w	r2, [r8]
 8008e84:	e7ec      	b.n	8008e60 <_malloc_r+0xb0>
 8008e86:	4623      	mov	r3, r4
 8008e88:	6864      	ldr	r4, [r4, #4]
 8008e8a:	e7ac      	b.n	8008de6 <_malloc_r+0x36>
 8008e8c:	4634      	mov	r4, r6
 8008e8e:	6876      	ldr	r6, [r6, #4]
 8008e90:	e7b4      	b.n	8008dfc <_malloc_r+0x4c>
 8008e92:	4613      	mov	r3, r2
 8008e94:	e7cc      	b.n	8008e30 <_malloc_r+0x80>
 8008e96:	230c      	movs	r3, #12
 8008e98:	4638      	mov	r0, r7
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	f000 f80e 	bl	8008ebc <__malloc_unlock>
 8008ea0:	e797      	b.n	8008dd2 <_malloc_r+0x22>
 8008ea2:	6025      	str	r5, [r4, #0]
 8008ea4:	e7dc      	b.n	8008e60 <_malloc_r+0xb0>
 8008ea6:	605b      	str	r3, [r3, #4]
 8008ea8:	deff      	udf	#255	; 0xff
 8008eaa:	bf00      	nop
 8008eac:	20000940 	.word	0x20000940

08008eb0 <__malloc_lock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__malloc_lock+0x8>)
 8008eb2:	f7ff b87a 	b.w	8007faa <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	2000093c 	.word	0x2000093c

08008ebc <__malloc_unlock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__malloc_unlock+0x8>)
 8008ebe:	f7ff b875 	b.w	8007fac <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	2000093c 	.word	0x2000093c

08008ec8 <_Balloc>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	69c6      	ldr	r6, [r0, #28]
 8008ecc:	4604      	mov	r4, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	b976      	cbnz	r6, 8008ef0 <_Balloc+0x28>
 8008ed2:	2010      	movs	r0, #16
 8008ed4:	f7ff ff44 	bl	8008d60 <malloc>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	61e0      	str	r0, [r4, #28]
 8008edc:	b920      	cbnz	r0, 8008ee8 <_Balloc+0x20>
 8008ede:	216b      	movs	r1, #107	; 0x6b
 8008ee0:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <_Balloc+0x78>)
 8008ee2:	4818      	ldr	r0, [pc, #96]	; (8008f44 <_Balloc+0x7c>)
 8008ee4:	f001 fd54 	bl	800a990 <__assert_func>
 8008ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eec:	6006      	str	r6, [r0, #0]
 8008eee:	60c6      	str	r6, [r0, #12]
 8008ef0:	69e6      	ldr	r6, [r4, #28]
 8008ef2:	68f3      	ldr	r3, [r6, #12]
 8008ef4:	b183      	cbz	r3, 8008f18 <_Balloc+0x50>
 8008ef6:	69e3      	ldr	r3, [r4, #28]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008efe:	b9b8      	cbnz	r0, 8008f30 <_Balloc+0x68>
 8008f00:	2101      	movs	r1, #1
 8008f02:	fa01 f605 	lsl.w	r6, r1, r5
 8008f06:	1d72      	adds	r2, r6, #5
 8008f08:	4620      	mov	r0, r4
 8008f0a:	0092      	lsls	r2, r2, #2
 8008f0c:	f001 fd5e 	bl	800a9cc <_calloc_r>
 8008f10:	b160      	cbz	r0, 8008f2c <_Balloc+0x64>
 8008f12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f16:	e00e      	b.n	8008f36 <_Balloc+0x6e>
 8008f18:	2221      	movs	r2, #33	; 0x21
 8008f1a:	2104      	movs	r1, #4
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f001 fd55 	bl	800a9cc <_calloc_r>
 8008f22:	69e3      	ldr	r3, [r4, #28]
 8008f24:	60f0      	str	r0, [r6, #12]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e4      	bne.n	8008ef6 <_Balloc+0x2e>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	6802      	ldr	r2, [r0, #0]
 8008f32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f36:	2300      	movs	r3, #0
 8008f38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f3c:	e7f7      	b.n	8008f2e <_Balloc+0x66>
 8008f3e:	bf00      	nop
 8008f40:	0800bee8 	.word	0x0800bee8
 8008f44:	0800bf68 	.word	0x0800bf68

08008f48 <_Bfree>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	69c6      	ldr	r6, [r0, #28]
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	b976      	cbnz	r6, 8008f70 <_Bfree+0x28>
 8008f52:	2010      	movs	r0, #16
 8008f54:	f7ff ff04 	bl	8008d60 <malloc>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	61e8      	str	r0, [r5, #28]
 8008f5c:	b920      	cbnz	r0, 8008f68 <_Bfree+0x20>
 8008f5e:	218f      	movs	r1, #143	; 0x8f
 8008f60:	4b08      	ldr	r3, [pc, #32]	; (8008f84 <_Bfree+0x3c>)
 8008f62:	4809      	ldr	r0, [pc, #36]	; (8008f88 <_Bfree+0x40>)
 8008f64:	f001 fd14 	bl	800a990 <__assert_func>
 8008f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f6c:	6006      	str	r6, [r0, #0]
 8008f6e:	60c6      	str	r6, [r0, #12]
 8008f70:	b13c      	cbz	r4, 8008f82 <_Bfree+0x3a>
 8008f72:	69eb      	ldr	r3, [r5, #28]
 8008f74:	6862      	ldr	r2, [r4, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f7c:	6021      	str	r1, [r4, #0]
 8008f7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	0800bee8 	.word	0x0800bee8
 8008f88:	0800bf68 	.word	0x0800bf68

08008f8c <__multadd>:
 8008f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	4607      	mov	r7, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	461e      	mov	r6, r3
 8008f96:	2000      	movs	r0, #0
 8008f98:	690d      	ldr	r5, [r1, #16]
 8008f9a:	f101 0c14 	add.w	ip, r1, #20
 8008f9e:	f8dc 3000 	ldr.w	r3, [ip]
 8008fa2:	3001      	adds	r0, #1
 8008fa4:	b299      	uxth	r1, r3
 8008fa6:	fb02 6101 	mla	r1, r2, r1, r6
 8008faa:	0c1e      	lsrs	r6, r3, #16
 8008fac:	0c0b      	lsrs	r3, r1, #16
 8008fae:	fb02 3306 	mla	r3, r2, r6, r3
 8008fb2:	b289      	uxth	r1, r1
 8008fb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fb8:	4285      	cmp	r5, r0
 8008fba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8008fc2:	dcec      	bgt.n	8008f9e <__multadd+0x12>
 8008fc4:	b30e      	cbz	r6, 800900a <__multadd+0x7e>
 8008fc6:	68a3      	ldr	r3, [r4, #8]
 8008fc8:	42ab      	cmp	r3, r5
 8008fca:	dc19      	bgt.n	8009000 <__multadd+0x74>
 8008fcc:	6861      	ldr	r1, [r4, #4]
 8008fce:	4638      	mov	r0, r7
 8008fd0:	3101      	adds	r1, #1
 8008fd2:	f7ff ff79 	bl	8008ec8 <_Balloc>
 8008fd6:	4680      	mov	r8, r0
 8008fd8:	b928      	cbnz	r0, 8008fe6 <__multadd+0x5a>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	21ba      	movs	r1, #186	; 0xba
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <__multadd+0x84>)
 8008fe0:	480c      	ldr	r0, [pc, #48]	; (8009014 <__multadd+0x88>)
 8008fe2:	f001 fcd5 	bl	800a990 <__assert_func>
 8008fe6:	6922      	ldr	r2, [r4, #16]
 8008fe8:	f104 010c 	add.w	r1, r4, #12
 8008fec:	3202      	adds	r2, #2
 8008fee:	0092      	lsls	r2, r2, #2
 8008ff0:	300c      	adds	r0, #12
 8008ff2:	f7fe ffea 	bl	8007fca <memcpy>
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff ffa5 	bl	8008f48 <_Bfree>
 8008ffe:	4644      	mov	r4, r8
 8009000:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009004:	3501      	adds	r5, #1
 8009006:	615e      	str	r6, [r3, #20]
 8009008:	6125      	str	r5, [r4, #16]
 800900a:	4620      	mov	r0, r4
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009010:	0800bf57 	.word	0x0800bf57
 8009014:	0800bf68 	.word	0x0800bf68

08009018 <__s2b>:
 8009018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800901c:	4615      	mov	r5, r2
 800901e:	2209      	movs	r2, #9
 8009020:	461f      	mov	r7, r3
 8009022:	3308      	adds	r3, #8
 8009024:	460c      	mov	r4, r1
 8009026:	fb93 f3f2 	sdiv	r3, r3, r2
 800902a:	4606      	mov	r6, r0
 800902c:	2201      	movs	r2, #1
 800902e:	2100      	movs	r1, #0
 8009030:	429a      	cmp	r2, r3
 8009032:	db09      	blt.n	8009048 <__s2b+0x30>
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff ff47 	bl	8008ec8 <_Balloc>
 800903a:	b940      	cbnz	r0, 800904e <__s2b+0x36>
 800903c:	4602      	mov	r2, r0
 800903e:	21d3      	movs	r1, #211	; 0xd3
 8009040:	4b18      	ldr	r3, [pc, #96]	; (80090a4 <__s2b+0x8c>)
 8009042:	4819      	ldr	r0, [pc, #100]	; (80090a8 <__s2b+0x90>)
 8009044:	f001 fca4 	bl	800a990 <__assert_func>
 8009048:	0052      	lsls	r2, r2, #1
 800904a:	3101      	adds	r1, #1
 800904c:	e7f0      	b.n	8009030 <__s2b+0x18>
 800904e:	9b08      	ldr	r3, [sp, #32]
 8009050:	2d09      	cmp	r5, #9
 8009052:	6143      	str	r3, [r0, #20]
 8009054:	f04f 0301 	mov.w	r3, #1
 8009058:	6103      	str	r3, [r0, #16]
 800905a:	dd16      	ble.n	800908a <__s2b+0x72>
 800905c:	f104 0909 	add.w	r9, r4, #9
 8009060:	46c8      	mov	r8, r9
 8009062:	442c      	add	r4, r5
 8009064:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009068:	4601      	mov	r1, r0
 800906a:	220a      	movs	r2, #10
 800906c:	4630      	mov	r0, r6
 800906e:	3b30      	subs	r3, #48	; 0x30
 8009070:	f7ff ff8c 	bl	8008f8c <__multadd>
 8009074:	45a0      	cmp	r8, r4
 8009076:	d1f5      	bne.n	8009064 <__s2b+0x4c>
 8009078:	f1a5 0408 	sub.w	r4, r5, #8
 800907c:	444c      	add	r4, r9
 800907e:	1b2d      	subs	r5, r5, r4
 8009080:	1963      	adds	r3, r4, r5
 8009082:	42bb      	cmp	r3, r7
 8009084:	db04      	blt.n	8009090 <__s2b+0x78>
 8009086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800908a:	2509      	movs	r5, #9
 800908c:	340a      	adds	r4, #10
 800908e:	e7f6      	b.n	800907e <__s2b+0x66>
 8009090:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009094:	4601      	mov	r1, r0
 8009096:	220a      	movs	r2, #10
 8009098:	4630      	mov	r0, r6
 800909a:	3b30      	subs	r3, #48	; 0x30
 800909c:	f7ff ff76 	bl	8008f8c <__multadd>
 80090a0:	e7ee      	b.n	8009080 <__s2b+0x68>
 80090a2:	bf00      	nop
 80090a4:	0800bf57 	.word	0x0800bf57
 80090a8:	0800bf68 	.word	0x0800bf68

080090ac <__hi0bits>:
 80090ac:	0c02      	lsrs	r2, r0, #16
 80090ae:	0412      	lsls	r2, r2, #16
 80090b0:	4603      	mov	r3, r0
 80090b2:	b9ca      	cbnz	r2, 80090e8 <__hi0bits+0x3c>
 80090b4:	0403      	lsls	r3, r0, #16
 80090b6:	2010      	movs	r0, #16
 80090b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80090bc:	bf04      	itt	eq
 80090be:	021b      	lsleq	r3, r3, #8
 80090c0:	3008      	addeq	r0, #8
 80090c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80090c6:	bf04      	itt	eq
 80090c8:	011b      	lsleq	r3, r3, #4
 80090ca:	3004      	addeq	r0, #4
 80090cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80090d0:	bf04      	itt	eq
 80090d2:	009b      	lsleq	r3, r3, #2
 80090d4:	3002      	addeq	r0, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	db05      	blt.n	80090e6 <__hi0bits+0x3a>
 80090da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80090de:	f100 0001 	add.w	r0, r0, #1
 80090e2:	bf08      	it	eq
 80090e4:	2020      	moveq	r0, #32
 80090e6:	4770      	bx	lr
 80090e8:	2000      	movs	r0, #0
 80090ea:	e7e5      	b.n	80090b8 <__hi0bits+0xc>

080090ec <__lo0bits>:
 80090ec:	6803      	ldr	r3, [r0, #0]
 80090ee:	4602      	mov	r2, r0
 80090f0:	f013 0007 	ands.w	r0, r3, #7
 80090f4:	d00b      	beq.n	800910e <__lo0bits+0x22>
 80090f6:	07d9      	lsls	r1, r3, #31
 80090f8:	d421      	bmi.n	800913e <__lo0bits+0x52>
 80090fa:	0798      	lsls	r0, r3, #30
 80090fc:	bf49      	itett	mi
 80090fe:	085b      	lsrmi	r3, r3, #1
 8009100:	089b      	lsrpl	r3, r3, #2
 8009102:	2001      	movmi	r0, #1
 8009104:	6013      	strmi	r3, [r2, #0]
 8009106:	bf5c      	itt	pl
 8009108:	2002      	movpl	r0, #2
 800910a:	6013      	strpl	r3, [r2, #0]
 800910c:	4770      	bx	lr
 800910e:	b299      	uxth	r1, r3
 8009110:	b909      	cbnz	r1, 8009116 <__lo0bits+0x2a>
 8009112:	2010      	movs	r0, #16
 8009114:	0c1b      	lsrs	r3, r3, #16
 8009116:	b2d9      	uxtb	r1, r3
 8009118:	b909      	cbnz	r1, 800911e <__lo0bits+0x32>
 800911a:	3008      	adds	r0, #8
 800911c:	0a1b      	lsrs	r3, r3, #8
 800911e:	0719      	lsls	r1, r3, #28
 8009120:	bf04      	itt	eq
 8009122:	091b      	lsreq	r3, r3, #4
 8009124:	3004      	addeq	r0, #4
 8009126:	0799      	lsls	r1, r3, #30
 8009128:	bf04      	itt	eq
 800912a:	089b      	lsreq	r3, r3, #2
 800912c:	3002      	addeq	r0, #2
 800912e:	07d9      	lsls	r1, r3, #31
 8009130:	d403      	bmi.n	800913a <__lo0bits+0x4e>
 8009132:	085b      	lsrs	r3, r3, #1
 8009134:	f100 0001 	add.w	r0, r0, #1
 8009138:	d003      	beq.n	8009142 <__lo0bits+0x56>
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	4770      	bx	lr
 800913e:	2000      	movs	r0, #0
 8009140:	4770      	bx	lr
 8009142:	2020      	movs	r0, #32
 8009144:	4770      	bx	lr
	...

08009148 <__i2b>:
 8009148:	b510      	push	{r4, lr}
 800914a:	460c      	mov	r4, r1
 800914c:	2101      	movs	r1, #1
 800914e:	f7ff febb 	bl	8008ec8 <_Balloc>
 8009152:	4602      	mov	r2, r0
 8009154:	b928      	cbnz	r0, 8009162 <__i2b+0x1a>
 8009156:	f240 1145 	movw	r1, #325	; 0x145
 800915a:	4b04      	ldr	r3, [pc, #16]	; (800916c <__i2b+0x24>)
 800915c:	4804      	ldr	r0, [pc, #16]	; (8009170 <__i2b+0x28>)
 800915e:	f001 fc17 	bl	800a990 <__assert_func>
 8009162:	2301      	movs	r3, #1
 8009164:	6144      	str	r4, [r0, #20]
 8009166:	6103      	str	r3, [r0, #16]
 8009168:	bd10      	pop	{r4, pc}
 800916a:	bf00      	nop
 800916c:	0800bf57 	.word	0x0800bf57
 8009170:	0800bf68 	.word	0x0800bf68

08009174 <__multiply>:
 8009174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009178:	4691      	mov	r9, r2
 800917a:	690a      	ldr	r2, [r1, #16]
 800917c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009180:	460c      	mov	r4, r1
 8009182:	429a      	cmp	r2, r3
 8009184:	bfbe      	ittt	lt
 8009186:	460b      	movlt	r3, r1
 8009188:	464c      	movlt	r4, r9
 800918a:	4699      	movlt	r9, r3
 800918c:	6927      	ldr	r7, [r4, #16]
 800918e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009192:	68a3      	ldr	r3, [r4, #8]
 8009194:	6861      	ldr	r1, [r4, #4]
 8009196:	eb07 060a 	add.w	r6, r7, sl
 800919a:	42b3      	cmp	r3, r6
 800919c:	b085      	sub	sp, #20
 800919e:	bfb8      	it	lt
 80091a0:	3101      	addlt	r1, #1
 80091a2:	f7ff fe91 	bl	8008ec8 <_Balloc>
 80091a6:	b930      	cbnz	r0, 80091b6 <__multiply+0x42>
 80091a8:	4602      	mov	r2, r0
 80091aa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80091ae:	4b43      	ldr	r3, [pc, #268]	; (80092bc <__multiply+0x148>)
 80091b0:	4843      	ldr	r0, [pc, #268]	; (80092c0 <__multiply+0x14c>)
 80091b2:	f001 fbed 	bl	800a990 <__assert_func>
 80091b6:	f100 0514 	add.w	r5, r0, #20
 80091ba:	462b      	mov	r3, r5
 80091bc:	2200      	movs	r2, #0
 80091be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091c2:	4543      	cmp	r3, r8
 80091c4:	d321      	bcc.n	800920a <__multiply+0x96>
 80091c6:	f104 0314 	add.w	r3, r4, #20
 80091ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091ce:	f109 0314 	add.w	r3, r9, #20
 80091d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091d6:	9202      	str	r2, [sp, #8]
 80091d8:	1b3a      	subs	r2, r7, r4
 80091da:	3a15      	subs	r2, #21
 80091dc:	f022 0203 	bic.w	r2, r2, #3
 80091e0:	3204      	adds	r2, #4
 80091e2:	f104 0115 	add.w	r1, r4, #21
 80091e6:	428f      	cmp	r7, r1
 80091e8:	bf38      	it	cc
 80091ea:	2204      	movcc	r2, #4
 80091ec:	9201      	str	r2, [sp, #4]
 80091ee:	9a02      	ldr	r2, [sp, #8]
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d80c      	bhi.n	8009210 <__multiply+0x9c>
 80091f6:	2e00      	cmp	r6, #0
 80091f8:	dd03      	ble.n	8009202 <__multiply+0x8e>
 80091fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d05a      	beq.n	80092b8 <__multiply+0x144>
 8009202:	6106      	str	r6, [r0, #16]
 8009204:	b005      	add	sp, #20
 8009206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920a:	f843 2b04 	str.w	r2, [r3], #4
 800920e:	e7d8      	b.n	80091c2 <__multiply+0x4e>
 8009210:	f8b3 a000 	ldrh.w	sl, [r3]
 8009214:	f1ba 0f00 	cmp.w	sl, #0
 8009218:	d023      	beq.n	8009262 <__multiply+0xee>
 800921a:	46a9      	mov	r9, r5
 800921c:	f04f 0c00 	mov.w	ip, #0
 8009220:	f104 0e14 	add.w	lr, r4, #20
 8009224:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009228:	f8d9 1000 	ldr.w	r1, [r9]
 800922c:	fa1f fb82 	uxth.w	fp, r2
 8009230:	b289      	uxth	r1, r1
 8009232:	fb0a 110b 	mla	r1, sl, fp, r1
 8009236:	4461      	add	r1, ip
 8009238:	f8d9 c000 	ldr.w	ip, [r9]
 800923c:	0c12      	lsrs	r2, r2, #16
 800923e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009242:	fb0a c202 	mla	r2, sl, r2, ip
 8009246:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800924a:	b289      	uxth	r1, r1
 800924c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009250:	4577      	cmp	r7, lr
 8009252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009256:	f849 1b04 	str.w	r1, [r9], #4
 800925a:	d8e3      	bhi.n	8009224 <__multiply+0xb0>
 800925c:	9a01      	ldr	r2, [sp, #4]
 800925e:	f845 c002 	str.w	ip, [r5, r2]
 8009262:	9a03      	ldr	r2, [sp, #12]
 8009264:	3304      	adds	r3, #4
 8009266:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800926a:	f1b9 0f00 	cmp.w	r9, #0
 800926e:	d021      	beq.n	80092b4 <__multiply+0x140>
 8009270:	46ae      	mov	lr, r5
 8009272:	f04f 0a00 	mov.w	sl, #0
 8009276:	6829      	ldr	r1, [r5, #0]
 8009278:	f104 0c14 	add.w	ip, r4, #20
 800927c:	f8bc b000 	ldrh.w	fp, [ip]
 8009280:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009284:	b289      	uxth	r1, r1
 8009286:	fb09 220b 	mla	r2, r9, fp, r2
 800928a:	4452      	add	r2, sl
 800928c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009290:	f84e 1b04 	str.w	r1, [lr], #4
 8009294:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009298:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800929c:	f8be 1000 	ldrh.w	r1, [lr]
 80092a0:	4567      	cmp	r7, ip
 80092a2:	fb09 110a 	mla	r1, r9, sl, r1
 80092a6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80092aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092ae:	d8e5      	bhi.n	800927c <__multiply+0x108>
 80092b0:	9a01      	ldr	r2, [sp, #4]
 80092b2:	50a9      	str	r1, [r5, r2]
 80092b4:	3504      	adds	r5, #4
 80092b6:	e79a      	b.n	80091ee <__multiply+0x7a>
 80092b8:	3e01      	subs	r6, #1
 80092ba:	e79c      	b.n	80091f6 <__multiply+0x82>
 80092bc:	0800bf57 	.word	0x0800bf57
 80092c0:	0800bf68 	.word	0x0800bf68

080092c4 <__pow5mult>:
 80092c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c8:	4615      	mov	r5, r2
 80092ca:	f012 0203 	ands.w	r2, r2, #3
 80092ce:	4606      	mov	r6, r0
 80092d0:	460f      	mov	r7, r1
 80092d2:	d007      	beq.n	80092e4 <__pow5mult+0x20>
 80092d4:	4c25      	ldr	r4, [pc, #148]	; (800936c <__pow5mult+0xa8>)
 80092d6:	3a01      	subs	r2, #1
 80092d8:	2300      	movs	r3, #0
 80092da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092de:	f7ff fe55 	bl	8008f8c <__multadd>
 80092e2:	4607      	mov	r7, r0
 80092e4:	10ad      	asrs	r5, r5, #2
 80092e6:	d03d      	beq.n	8009364 <__pow5mult+0xa0>
 80092e8:	69f4      	ldr	r4, [r6, #28]
 80092ea:	b97c      	cbnz	r4, 800930c <__pow5mult+0x48>
 80092ec:	2010      	movs	r0, #16
 80092ee:	f7ff fd37 	bl	8008d60 <malloc>
 80092f2:	4602      	mov	r2, r0
 80092f4:	61f0      	str	r0, [r6, #28]
 80092f6:	b928      	cbnz	r0, 8009304 <__pow5mult+0x40>
 80092f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80092fc:	4b1c      	ldr	r3, [pc, #112]	; (8009370 <__pow5mult+0xac>)
 80092fe:	481d      	ldr	r0, [pc, #116]	; (8009374 <__pow5mult+0xb0>)
 8009300:	f001 fb46 	bl	800a990 <__assert_func>
 8009304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009308:	6004      	str	r4, [r0, #0]
 800930a:	60c4      	str	r4, [r0, #12]
 800930c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009314:	b94c      	cbnz	r4, 800932a <__pow5mult+0x66>
 8009316:	f240 2171 	movw	r1, #625	; 0x271
 800931a:	4630      	mov	r0, r6
 800931c:	f7ff ff14 	bl	8009148 <__i2b>
 8009320:	2300      	movs	r3, #0
 8009322:	4604      	mov	r4, r0
 8009324:	f8c8 0008 	str.w	r0, [r8, #8]
 8009328:	6003      	str	r3, [r0, #0]
 800932a:	f04f 0900 	mov.w	r9, #0
 800932e:	07eb      	lsls	r3, r5, #31
 8009330:	d50a      	bpl.n	8009348 <__pow5mult+0x84>
 8009332:	4639      	mov	r1, r7
 8009334:	4622      	mov	r2, r4
 8009336:	4630      	mov	r0, r6
 8009338:	f7ff ff1c 	bl	8009174 <__multiply>
 800933c:	4680      	mov	r8, r0
 800933e:	4639      	mov	r1, r7
 8009340:	4630      	mov	r0, r6
 8009342:	f7ff fe01 	bl	8008f48 <_Bfree>
 8009346:	4647      	mov	r7, r8
 8009348:	106d      	asrs	r5, r5, #1
 800934a:	d00b      	beq.n	8009364 <__pow5mult+0xa0>
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	b938      	cbnz	r0, 8009360 <__pow5mult+0x9c>
 8009350:	4622      	mov	r2, r4
 8009352:	4621      	mov	r1, r4
 8009354:	4630      	mov	r0, r6
 8009356:	f7ff ff0d 	bl	8009174 <__multiply>
 800935a:	6020      	str	r0, [r4, #0]
 800935c:	f8c0 9000 	str.w	r9, [r0]
 8009360:	4604      	mov	r4, r0
 8009362:	e7e4      	b.n	800932e <__pow5mult+0x6a>
 8009364:	4638      	mov	r0, r7
 8009366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936a:	bf00      	nop
 800936c:	0800c0b8 	.word	0x0800c0b8
 8009370:	0800bee8 	.word	0x0800bee8
 8009374:	0800bf68 	.word	0x0800bf68

08009378 <__lshift>:
 8009378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800937c:	460c      	mov	r4, r1
 800937e:	4607      	mov	r7, r0
 8009380:	4691      	mov	r9, r2
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	6849      	ldr	r1, [r1, #4]
 8009386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009390:	f108 0601 	add.w	r6, r8, #1
 8009394:	42b3      	cmp	r3, r6
 8009396:	db0b      	blt.n	80093b0 <__lshift+0x38>
 8009398:	4638      	mov	r0, r7
 800939a:	f7ff fd95 	bl	8008ec8 <_Balloc>
 800939e:	4605      	mov	r5, r0
 80093a0:	b948      	cbnz	r0, 80093b6 <__lshift+0x3e>
 80093a2:	4602      	mov	r2, r0
 80093a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80093a8:	4b27      	ldr	r3, [pc, #156]	; (8009448 <__lshift+0xd0>)
 80093aa:	4828      	ldr	r0, [pc, #160]	; (800944c <__lshift+0xd4>)
 80093ac:	f001 faf0 	bl	800a990 <__assert_func>
 80093b0:	3101      	adds	r1, #1
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	e7ee      	b.n	8009394 <__lshift+0x1c>
 80093b6:	2300      	movs	r3, #0
 80093b8:	f100 0114 	add.w	r1, r0, #20
 80093bc:	f100 0210 	add.w	r2, r0, #16
 80093c0:	4618      	mov	r0, r3
 80093c2:	4553      	cmp	r3, sl
 80093c4:	db33      	blt.n	800942e <__lshift+0xb6>
 80093c6:	6920      	ldr	r0, [r4, #16]
 80093c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093cc:	f104 0314 	add.w	r3, r4, #20
 80093d0:	f019 091f 	ands.w	r9, r9, #31
 80093d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093dc:	d02b      	beq.n	8009436 <__lshift+0xbe>
 80093de:	468a      	mov	sl, r1
 80093e0:	2200      	movs	r2, #0
 80093e2:	f1c9 0e20 	rsb	lr, r9, #32
 80093e6:	6818      	ldr	r0, [r3, #0]
 80093e8:	fa00 f009 	lsl.w	r0, r0, r9
 80093ec:	4310      	orrs	r0, r2
 80093ee:	f84a 0b04 	str.w	r0, [sl], #4
 80093f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093f6:	459c      	cmp	ip, r3
 80093f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80093fc:	d8f3      	bhi.n	80093e6 <__lshift+0x6e>
 80093fe:	ebac 0304 	sub.w	r3, ip, r4
 8009402:	3b15      	subs	r3, #21
 8009404:	f023 0303 	bic.w	r3, r3, #3
 8009408:	3304      	adds	r3, #4
 800940a:	f104 0015 	add.w	r0, r4, #21
 800940e:	4584      	cmp	ip, r0
 8009410:	bf38      	it	cc
 8009412:	2304      	movcc	r3, #4
 8009414:	50ca      	str	r2, [r1, r3]
 8009416:	b10a      	cbz	r2, 800941c <__lshift+0xa4>
 8009418:	f108 0602 	add.w	r6, r8, #2
 800941c:	3e01      	subs	r6, #1
 800941e:	4638      	mov	r0, r7
 8009420:	4621      	mov	r1, r4
 8009422:	612e      	str	r6, [r5, #16]
 8009424:	f7ff fd90 	bl	8008f48 <_Bfree>
 8009428:	4628      	mov	r0, r5
 800942a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009432:	3301      	adds	r3, #1
 8009434:	e7c5      	b.n	80093c2 <__lshift+0x4a>
 8009436:	3904      	subs	r1, #4
 8009438:	f853 2b04 	ldr.w	r2, [r3], #4
 800943c:	459c      	cmp	ip, r3
 800943e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009442:	d8f9      	bhi.n	8009438 <__lshift+0xc0>
 8009444:	e7ea      	b.n	800941c <__lshift+0xa4>
 8009446:	bf00      	nop
 8009448:	0800bf57 	.word	0x0800bf57
 800944c:	0800bf68 	.word	0x0800bf68

08009450 <__mcmp>:
 8009450:	4603      	mov	r3, r0
 8009452:	690a      	ldr	r2, [r1, #16]
 8009454:	6900      	ldr	r0, [r0, #16]
 8009456:	b530      	push	{r4, r5, lr}
 8009458:	1a80      	subs	r0, r0, r2
 800945a:	d10d      	bne.n	8009478 <__mcmp+0x28>
 800945c:	3314      	adds	r3, #20
 800945e:	3114      	adds	r1, #20
 8009460:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009464:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009468:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800946c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009470:	4295      	cmp	r5, r2
 8009472:	d002      	beq.n	800947a <__mcmp+0x2a>
 8009474:	d304      	bcc.n	8009480 <__mcmp+0x30>
 8009476:	2001      	movs	r0, #1
 8009478:	bd30      	pop	{r4, r5, pc}
 800947a:	42a3      	cmp	r3, r4
 800947c:	d3f4      	bcc.n	8009468 <__mcmp+0x18>
 800947e:	e7fb      	b.n	8009478 <__mcmp+0x28>
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	e7f8      	b.n	8009478 <__mcmp+0x28>
	...

08009488 <__mdiff>:
 8009488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	460d      	mov	r5, r1
 800948e:	4607      	mov	r7, r0
 8009490:	4611      	mov	r1, r2
 8009492:	4628      	mov	r0, r5
 8009494:	4614      	mov	r4, r2
 8009496:	f7ff ffdb 	bl	8009450 <__mcmp>
 800949a:	1e06      	subs	r6, r0, #0
 800949c:	d111      	bne.n	80094c2 <__mdiff+0x3a>
 800949e:	4631      	mov	r1, r6
 80094a0:	4638      	mov	r0, r7
 80094a2:	f7ff fd11 	bl	8008ec8 <_Balloc>
 80094a6:	4602      	mov	r2, r0
 80094a8:	b928      	cbnz	r0, 80094b6 <__mdiff+0x2e>
 80094aa:	f240 2137 	movw	r1, #567	; 0x237
 80094ae:	4b3a      	ldr	r3, [pc, #232]	; (8009598 <__mdiff+0x110>)
 80094b0:	483a      	ldr	r0, [pc, #232]	; (800959c <__mdiff+0x114>)
 80094b2:	f001 fa6d 	bl	800a990 <__assert_func>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80094bc:	4610      	mov	r0, r2
 80094be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	bfa4      	itt	ge
 80094c4:	4623      	movge	r3, r4
 80094c6:	462c      	movge	r4, r5
 80094c8:	4638      	mov	r0, r7
 80094ca:	6861      	ldr	r1, [r4, #4]
 80094cc:	bfa6      	itte	ge
 80094ce:	461d      	movge	r5, r3
 80094d0:	2600      	movge	r6, #0
 80094d2:	2601      	movlt	r6, #1
 80094d4:	f7ff fcf8 	bl	8008ec8 <_Balloc>
 80094d8:	4602      	mov	r2, r0
 80094da:	b918      	cbnz	r0, 80094e4 <__mdiff+0x5c>
 80094dc:	f240 2145 	movw	r1, #581	; 0x245
 80094e0:	4b2d      	ldr	r3, [pc, #180]	; (8009598 <__mdiff+0x110>)
 80094e2:	e7e5      	b.n	80094b0 <__mdiff+0x28>
 80094e4:	f102 0814 	add.w	r8, r2, #20
 80094e8:	46c2      	mov	sl, r8
 80094ea:	f04f 0c00 	mov.w	ip, #0
 80094ee:	6927      	ldr	r7, [r4, #16]
 80094f0:	60c6      	str	r6, [r0, #12]
 80094f2:	692e      	ldr	r6, [r5, #16]
 80094f4:	f104 0014 	add.w	r0, r4, #20
 80094f8:	f105 0914 	add.w	r9, r5, #20
 80094fc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009500:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009504:	3410      	adds	r4, #16
 8009506:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800950a:	f859 3b04 	ldr.w	r3, [r9], #4
 800950e:	fa1f f18b 	uxth.w	r1, fp
 8009512:	4461      	add	r1, ip
 8009514:	fa1f fc83 	uxth.w	ip, r3
 8009518:	0c1b      	lsrs	r3, r3, #16
 800951a:	eba1 010c 	sub.w	r1, r1, ip
 800951e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009522:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009526:	b289      	uxth	r1, r1
 8009528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800952c:	454e      	cmp	r6, r9
 800952e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009532:	f84a 1b04 	str.w	r1, [sl], #4
 8009536:	d8e6      	bhi.n	8009506 <__mdiff+0x7e>
 8009538:	1b73      	subs	r3, r6, r5
 800953a:	3b15      	subs	r3, #21
 800953c:	f023 0303 	bic.w	r3, r3, #3
 8009540:	3515      	adds	r5, #21
 8009542:	3304      	adds	r3, #4
 8009544:	42ae      	cmp	r6, r5
 8009546:	bf38      	it	cc
 8009548:	2304      	movcc	r3, #4
 800954a:	4418      	add	r0, r3
 800954c:	4443      	add	r3, r8
 800954e:	461e      	mov	r6, r3
 8009550:	4605      	mov	r5, r0
 8009552:	4575      	cmp	r5, lr
 8009554:	d30e      	bcc.n	8009574 <__mdiff+0xec>
 8009556:	f10e 0103 	add.w	r1, lr, #3
 800955a:	1a09      	subs	r1, r1, r0
 800955c:	f021 0103 	bic.w	r1, r1, #3
 8009560:	3803      	subs	r0, #3
 8009562:	4586      	cmp	lr, r0
 8009564:	bf38      	it	cc
 8009566:	2100      	movcc	r1, #0
 8009568:	440b      	add	r3, r1
 800956a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800956e:	b189      	cbz	r1, 8009594 <__mdiff+0x10c>
 8009570:	6117      	str	r7, [r2, #16]
 8009572:	e7a3      	b.n	80094bc <__mdiff+0x34>
 8009574:	f855 8b04 	ldr.w	r8, [r5], #4
 8009578:	fa1f f188 	uxth.w	r1, r8
 800957c:	4461      	add	r1, ip
 800957e:	140c      	asrs	r4, r1, #16
 8009580:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009584:	b289      	uxth	r1, r1
 8009586:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800958a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800958e:	f846 1b04 	str.w	r1, [r6], #4
 8009592:	e7de      	b.n	8009552 <__mdiff+0xca>
 8009594:	3f01      	subs	r7, #1
 8009596:	e7e8      	b.n	800956a <__mdiff+0xe2>
 8009598:	0800bf57 	.word	0x0800bf57
 800959c:	0800bf68 	.word	0x0800bf68

080095a0 <__ulp>:
 80095a0:	4b0e      	ldr	r3, [pc, #56]	; (80095dc <__ulp+0x3c>)
 80095a2:	400b      	ands	r3, r1
 80095a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	dc08      	bgt.n	80095be <__ulp+0x1e>
 80095ac:	425b      	negs	r3, r3
 80095ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80095b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80095b6:	da04      	bge.n	80095c2 <__ulp+0x22>
 80095b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80095bc:	4113      	asrs	r3, r2
 80095be:	2200      	movs	r2, #0
 80095c0:	e008      	b.n	80095d4 <__ulp+0x34>
 80095c2:	f1a2 0314 	sub.w	r3, r2, #20
 80095c6:	2b1e      	cmp	r3, #30
 80095c8:	bfd6      	itet	le
 80095ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80095ce:	2201      	movgt	r2, #1
 80095d0:	40da      	lsrle	r2, r3
 80095d2:	2300      	movs	r3, #0
 80095d4:	4619      	mov	r1, r3
 80095d6:	4610      	mov	r0, r2
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	7ff00000 	.word	0x7ff00000

080095e0 <__b2d>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	6905      	ldr	r5, [r0, #16]
 80095e4:	f100 0714 	add.w	r7, r0, #20
 80095e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80095ec:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80095f0:	1f2e      	subs	r6, r5, #4
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7ff fd5a 	bl	80090ac <__hi0bits>
 80095f8:	f1c0 0220 	rsb	r2, r0, #32
 80095fc:	280a      	cmp	r0, #10
 80095fe:	4603      	mov	r3, r0
 8009600:	f8df c068 	ldr.w	ip, [pc, #104]	; 800966c <__b2d+0x8c>
 8009604:	600a      	str	r2, [r1, #0]
 8009606:	dc12      	bgt.n	800962e <__b2d+0x4e>
 8009608:	f1c0 0e0b 	rsb	lr, r0, #11
 800960c:	fa24 f20e 	lsr.w	r2, r4, lr
 8009610:	42b7      	cmp	r7, r6
 8009612:	ea42 010c 	orr.w	r1, r2, ip
 8009616:	bf2c      	ite	cs
 8009618:	2200      	movcs	r2, #0
 800961a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800961e:	3315      	adds	r3, #21
 8009620:	fa04 f303 	lsl.w	r3, r4, r3
 8009624:	fa22 f20e 	lsr.w	r2, r2, lr
 8009628:	431a      	orrs	r2, r3
 800962a:	4610      	mov	r0, r2
 800962c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800962e:	42b7      	cmp	r7, r6
 8009630:	bf2e      	itee	cs
 8009632:	2200      	movcs	r2, #0
 8009634:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009638:	f1a5 0608 	subcc.w	r6, r5, #8
 800963c:	3b0b      	subs	r3, #11
 800963e:	d012      	beq.n	8009666 <__b2d+0x86>
 8009640:	f1c3 0520 	rsb	r5, r3, #32
 8009644:	fa22 f105 	lsr.w	r1, r2, r5
 8009648:	409c      	lsls	r4, r3
 800964a:	430c      	orrs	r4, r1
 800964c:	42be      	cmp	r6, r7
 800964e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8009652:	bf94      	ite	ls
 8009654:	2400      	movls	r4, #0
 8009656:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800965a:	409a      	lsls	r2, r3
 800965c:	40ec      	lsrs	r4, r5
 800965e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009662:	4322      	orrs	r2, r4
 8009664:	e7e1      	b.n	800962a <__b2d+0x4a>
 8009666:	ea44 010c 	orr.w	r1, r4, ip
 800966a:	e7de      	b.n	800962a <__b2d+0x4a>
 800966c:	3ff00000 	.word	0x3ff00000

08009670 <__d2b>:
 8009670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009672:	2101      	movs	r1, #1
 8009674:	4617      	mov	r7, r2
 8009676:	461c      	mov	r4, r3
 8009678:	9e08      	ldr	r6, [sp, #32]
 800967a:	f7ff fc25 	bl	8008ec8 <_Balloc>
 800967e:	4605      	mov	r5, r0
 8009680:	b930      	cbnz	r0, 8009690 <__d2b+0x20>
 8009682:	4602      	mov	r2, r0
 8009684:	f240 310f 	movw	r1, #783	; 0x30f
 8009688:	4b22      	ldr	r3, [pc, #136]	; (8009714 <__d2b+0xa4>)
 800968a:	4823      	ldr	r0, [pc, #140]	; (8009718 <__d2b+0xa8>)
 800968c:	f001 f980 	bl	800a990 <__assert_func>
 8009690:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009694:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009698:	bb24      	cbnz	r4, 80096e4 <__d2b+0x74>
 800969a:	2f00      	cmp	r7, #0
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	d026      	beq.n	80096ee <__d2b+0x7e>
 80096a0:	4668      	mov	r0, sp
 80096a2:	9700      	str	r7, [sp, #0]
 80096a4:	f7ff fd22 	bl	80090ec <__lo0bits>
 80096a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096ac:	b1e8      	cbz	r0, 80096ea <__d2b+0x7a>
 80096ae:	f1c0 0320 	rsb	r3, r0, #32
 80096b2:	fa02 f303 	lsl.w	r3, r2, r3
 80096b6:	430b      	orrs	r3, r1
 80096b8:	40c2      	lsrs	r2, r0
 80096ba:	616b      	str	r3, [r5, #20]
 80096bc:	9201      	str	r2, [sp, #4]
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bf14      	ite	ne
 80096c4:	2102      	movne	r1, #2
 80096c6:	2101      	moveq	r1, #1
 80096c8:	61ab      	str	r3, [r5, #24]
 80096ca:	6129      	str	r1, [r5, #16]
 80096cc:	b1bc      	cbz	r4, 80096fe <__d2b+0x8e>
 80096ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80096d2:	4404      	add	r4, r0
 80096d4:	6034      	str	r4, [r6, #0]
 80096d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096dc:	6018      	str	r0, [r3, #0]
 80096de:	4628      	mov	r0, r5
 80096e0:	b003      	add	sp, #12
 80096e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096e8:	e7d7      	b.n	800969a <__d2b+0x2a>
 80096ea:	6169      	str	r1, [r5, #20]
 80096ec:	e7e7      	b.n	80096be <__d2b+0x4e>
 80096ee:	a801      	add	r0, sp, #4
 80096f0:	f7ff fcfc 	bl	80090ec <__lo0bits>
 80096f4:	9b01      	ldr	r3, [sp, #4]
 80096f6:	2101      	movs	r1, #1
 80096f8:	616b      	str	r3, [r5, #20]
 80096fa:	3020      	adds	r0, #32
 80096fc:	e7e5      	b.n	80096ca <__d2b+0x5a>
 80096fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009702:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009706:	6030      	str	r0, [r6, #0]
 8009708:	6918      	ldr	r0, [r3, #16]
 800970a:	f7ff fccf 	bl	80090ac <__hi0bits>
 800970e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009712:	e7e2      	b.n	80096da <__d2b+0x6a>
 8009714:	0800bf57 	.word	0x0800bf57
 8009718:	0800bf68 	.word	0x0800bf68

0800971c <__ratio>:
 800971c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009720:	4688      	mov	r8, r1
 8009722:	4669      	mov	r1, sp
 8009724:	4681      	mov	r9, r0
 8009726:	f7ff ff5b 	bl	80095e0 <__b2d>
 800972a:	460f      	mov	r7, r1
 800972c:	4604      	mov	r4, r0
 800972e:	460d      	mov	r5, r1
 8009730:	4640      	mov	r0, r8
 8009732:	a901      	add	r1, sp, #4
 8009734:	f7ff ff54 	bl	80095e0 <__b2d>
 8009738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800973c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009740:	468b      	mov	fp, r1
 8009742:	eba3 0c02 	sub.w	ip, r3, r2
 8009746:	e9dd 3200 	ldrd	r3, r2, [sp]
 800974a:	1a9b      	subs	r3, r3, r2
 800974c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfd5      	itete	le
 8009754:	460a      	movle	r2, r1
 8009756:	462a      	movgt	r2, r5
 8009758:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800975c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009760:	bfd8      	it	le
 8009762:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009766:	465b      	mov	r3, fp
 8009768:	4602      	mov	r2, r0
 800976a:	4639      	mov	r1, r7
 800976c:	4620      	mov	r0, r4
 800976e:	f7f6 ffdd 	bl	800072c <__aeabi_ddiv>
 8009772:	b003      	add	sp, #12
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009778 <__copybits>:
 8009778:	3901      	subs	r1, #1
 800977a:	b570      	push	{r4, r5, r6, lr}
 800977c:	1149      	asrs	r1, r1, #5
 800977e:	6914      	ldr	r4, [r2, #16]
 8009780:	3101      	adds	r1, #1
 8009782:	f102 0314 	add.w	r3, r2, #20
 8009786:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800978a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800978e:	1f05      	subs	r5, r0, #4
 8009790:	42a3      	cmp	r3, r4
 8009792:	d30c      	bcc.n	80097ae <__copybits+0x36>
 8009794:	1aa3      	subs	r3, r4, r2
 8009796:	3b11      	subs	r3, #17
 8009798:	f023 0303 	bic.w	r3, r3, #3
 800979c:	3211      	adds	r2, #17
 800979e:	42a2      	cmp	r2, r4
 80097a0:	bf88      	it	hi
 80097a2:	2300      	movhi	r3, #0
 80097a4:	4418      	add	r0, r3
 80097a6:	2300      	movs	r3, #0
 80097a8:	4288      	cmp	r0, r1
 80097aa:	d305      	bcc.n	80097b8 <__copybits+0x40>
 80097ac:	bd70      	pop	{r4, r5, r6, pc}
 80097ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80097b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80097b6:	e7eb      	b.n	8009790 <__copybits+0x18>
 80097b8:	f840 3b04 	str.w	r3, [r0], #4
 80097bc:	e7f4      	b.n	80097a8 <__copybits+0x30>

080097be <__any_on>:
 80097be:	f100 0214 	add.w	r2, r0, #20
 80097c2:	6900      	ldr	r0, [r0, #16]
 80097c4:	114b      	asrs	r3, r1, #5
 80097c6:	4298      	cmp	r0, r3
 80097c8:	b510      	push	{r4, lr}
 80097ca:	db11      	blt.n	80097f0 <__any_on+0x32>
 80097cc:	dd0a      	ble.n	80097e4 <__any_on+0x26>
 80097ce:	f011 011f 	ands.w	r1, r1, #31
 80097d2:	d007      	beq.n	80097e4 <__any_on+0x26>
 80097d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097d8:	fa24 f001 	lsr.w	r0, r4, r1
 80097dc:	fa00 f101 	lsl.w	r1, r0, r1
 80097e0:	428c      	cmp	r4, r1
 80097e2:	d10b      	bne.n	80097fc <__any_on+0x3e>
 80097e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d803      	bhi.n	80097f4 <__any_on+0x36>
 80097ec:	2000      	movs	r0, #0
 80097ee:	bd10      	pop	{r4, pc}
 80097f0:	4603      	mov	r3, r0
 80097f2:	e7f7      	b.n	80097e4 <__any_on+0x26>
 80097f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097f8:	2900      	cmp	r1, #0
 80097fa:	d0f5      	beq.n	80097e8 <__any_on+0x2a>
 80097fc:	2001      	movs	r0, #1
 80097fe:	e7f6      	b.n	80097ee <__any_on+0x30>

08009800 <sulp>:
 8009800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009804:	460f      	mov	r7, r1
 8009806:	4690      	mov	r8, r2
 8009808:	f7ff feca 	bl	80095a0 <__ulp>
 800980c:	4604      	mov	r4, r0
 800980e:	460d      	mov	r5, r1
 8009810:	f1b8 0f00 	cmp.w	r8, #0
 8009814:	d011      	beq.n	800983a <sulp+0x3a>
 8009816:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800981a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800981e:	2b00      	cmp	r3, #0
 8009820:	dd0b      	ble.n	800983a <sulp+0x3a>
 8009822:	2400      	movs	r4, #0
 8009824:	051b      	lsls	r3, r3, #20
 8009826:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800982a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800982e:	4622      	mov	r2, r4
 8009830:	462b      	mov	r3, r5
 8009832:	f7f6 fe51 	bl	80004d8 <__aeabi_dmul>
 8009836:	4604      	mov	r4, r0
 8009838:	460d      	mov	r5, r1
 800983a:	4620      	mov	r0, r4
 800983c:	4629      	mov	r1, r5
 800983e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009842:	0000      	movs	r0, r0
 8009844:	0000      	movs	r0, r0
	...

08009848 <_strtod_l>:
 8009848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	b09f      	sub	sp, #124	; 0x7c
 800984e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009850:	2200      	movs	r2, #0
 8009852:	4604      	mov	r4, r0
 8009854:	921a      	str	r2, [sp, #104]	; 0x68
 8009856:	460d      	mov	r5, r1
 8009858:	f04f 0800 	mov.w	r8, #0
 800985c:	f04f 0900 	mov.w	r9, #0
 8009860:	460a      	mov	r2, r1
 8009862:	9219      	str	r2, [sp, #100]	; 0x64
 8009864:	7811      	ldrb	r1, [r2, #0]
 8009866:	292b      	cmp	r1, #43	; 0x2b
 8009868:	d04a      	beq.n	8009900 <_strtod_l+0xb8>
 800986a:	d838      	bhi.n	80098de <_strtod_l+0x96>
 800986c:	290d      	cmp	r1, #13
 800986e:	d832      	bhi.n	80098d6 <_strtod_l+0x8e>
 8009870:	2908      	cmp	r1, #8
 8009872:	d832      	bhi.n	80098da <_strtod_l+0x92>
 8009874:	2900      	cmp	r1, #0
 8009876:	d03b      	beq.n	80098f0 <_strtod_l+0xa8>
 8009878:	2200      	movs	r2, #0
 800987a:	920e      	str	r2, [sp, #56]	; 0x38
 800987c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800987e:	7832      	ldrb	r2, [r6, #0]
 8009880:	2a30      	cmp	r2, #48	; 0x30
 8009882:	f040 80b2 	bne.w	80099ea <_strtod_l+0x1a2>
 8009886:	7872      	ldrb	r2, [r6, #1]
 8009888:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800988c:	2a58      	cmp	r2, #88	; 0x58
 800988e:	d16e      	bne.n	800996e <_strtod_l+0x126>
 8009890:	9302      	str	r3, [sp, #8]
 8009892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009894:	4620      	mov	r0, r4
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	ab1a      	add	r3, sp, #104	; 0x68
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4a8c      	ldr	r2, [pc, #560]	; (8009ad0 <_strtod_l+0x288>)
 800989e:	ab1b      	add	r3, sp, #108	; 0x6c
 80098a0:	a919      	add	r1, sp, #100	; 0x64
 80098a2:	f001 f90f 	bl	800aac4 <__gethex>
 80098a6:	f010 070f 	ands.w	r7, r0, #15
 80098aa:	4605      	mov	r5, r0
 80098ac:	d005      	beq.n	80098ba <_strtod_l+0x72>
 80098ae:	2f06      	cmp	r7, #6
 80098b0:	d128      	bne.n	8009904 <_strtod_l+0xbc>
 80098b2:	2300      	movs	r3, #0
 80098b4:	3601      	adds	r6, #1
 80098b6:	9619      	str	r6, [sp, #100]	; 0x64
 80098b8:	930e      	str	r3, [sp, #56]	; 0x38
 80098ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f040 85a0 	bne.w	800a402 <_strtod_l+0xbba>
 80098c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098c4:	b1cb      	cbz	r3, 80098fa <_strtod_l+0xb2>
 80098c6:	4642      	mov	r2, r8
 80098c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80098cc:	4610      	mov	r0, r2
 80098ce:	4619      	mov	r1, r3
 80098d0:	b01f      	add	sp, #124	; 0x7c
 80098d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d6:	2920      	cmp	r1, #32
 80098d8:	d1ce      	bne.n	8009878 <_strtod_l+0x30>
 80098da:	3201      	adds	r2, #1
 80098dc:	e7c1      	b.n	8009862 <_strtod_l+0x1a>
 80098de:	292d      	cmp	r1, #45	; 0x2d
 80098e0:	d1ca      	bne.n	8009878 <_strtod_l+0x30>
 80098e2:	2101      	movs	r1, #1
 80098e4:	910e      	str	r1, [sp, #56]	; 0x38
 80098e6:	1c51      	adds	r1, r2, #1
 80098e8:	9119      	str	r1, [sp, #100]	; 0x64
 80098ea:	7852      	ldrb	r2, [r2, #1]
 80098ec:	2a00      	cmp	r2, #0
 80098ee:	d1c5      	bne.n	800987c <_strtod_l+0x34>
 80098f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098f2:	9519      	str	r5, [sp, #100]	; 0x64
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f040 8582 	bne.w	800a3fe <_strtod_l+0xbb6>
 80098fa:	4642      	mov	r2, r8
 80098fc:	464b      	mov	r3, r9
 80098fe:	e7e5      	b.n	80098cc <_strtod_l+0x84>
 8009900:	2100      	movs	r1, #0
 8009902:	e7ef      	b.n	80098e4 <_strtod_l+0x9c>
 8009904:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009906:	b13a      	cbz	r2, 8009918 <_strtod_l+0xd0>
 8009908:	2135      	movs	r1, #53	; 0x35
 800990a:	a81c      	add	r0, sp, #112	; 0x70
 800990c:	f7ff ff34 	bl	8009778 <__copybits>
 8009910:	4620      	mov	r0, r4
 8009912:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009914:	f7ff fb18 	bl	8008f48 <_Bfree>
 8009918:	3f01      	subs	r7, #1
 800991a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800991c:	2f04      	cmp	r7, #4
 800991e:	d806      	bhi.n	800992e <_strtod_l+0xe6>
 8009920:	e8df f007 	tbb	[pc, r7]
 8009924:	201d0314 	.word	0x201d0314
 8009928:	14          	.byte	0x14
 8009929:	00          	.byte	0x00
 800992a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800992e:	05e9      	lsls	r1, r5, #23
 8009930:	bf48      	it	mi
 8009932:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800993a:	0d1b      	lsrs	r3, r3, #20
 800993c:	051b      	lsls	r3, r3, #20
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1bb      	bne.n	80098ba <_strtod_l+0x72>
 8009942:	f7fe fb07 	bl	8007f54 <__errno>
 8009946:	2322      	movs	r3, #34	; 0x22
 8009948:	6003      	str	r3, [r0, #0]
 800994a:	e7b6      	b.n	80098ba <_strtod_l+0x72>
 800994c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009950:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009954:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009958:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800995c:	e7e7      	b.n	800992e <_strtod_l+0xe6>
 800995e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009ad4 <_strtod_l+0x28c>
 8009962:	e7e4      	b.n	800992e <_strtod_l+0xe6>
 8009964:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009968:	f04f 38ff 	mov.w	r8, #4294967295
 800996c:	e7df      	b.n	800992e <_strtod_l+0xe6>
 800996e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009970:	1c5a      	adds	r2, r3, #1
 8009972:	9219      	str	r2, [sp, #100]	; 0x64
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	2b30      	cmp	r3, #48	; 0x30
 8009978:	d0f9      	beq.n	800996e <_strtod_l+0x126>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d09d      	beq.n	80098ba <_strtod_l+0x72>
 800997e:	2301      	movs	r3, #1
 8009980:	f04f 0a00 	mov.w	sl, #0
 8009984:	220a      	movs	r2, #10
 8009986:	46d3      	mov	fp, sl
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800998c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009990:	930b      	str	r3, [sp, #44]	; 0x2c
 8009992:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009994:	7806      	ldrb	r6, [r0, #0]
 8009996:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800999a:	b2d9      	uxtb	r1, r3
 800999c:	2909      	cmp	r1, #9
 800999e:	d926      	bls.n	80099ee <_strtod_l+0x1a6>
 80099a0:	2201      	movs	r2, #1
 80099a2:	494d      	ldr	r1, [pc, #308]	; (8009ad8 <_strtod_l+0x290>)
 80099a4:	f000 ffcc 	bl	800a940 <strncmp>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d030      	beq.n	8009a0e <_strtod_l+0x1c6>
 80099ac:	2000      	movs	r0, #0
 80099ae:	4632      	mov	r2, r6
 80099b0:	4603      	mov	r3, r0
 80099b2:	465e      	mov	r6, fp
 80099b4:	9008      	str	r0, [sp, #32]
 80099b6:	2a65      	cmp	r2, #101	; 0x65
 80099b8:	d001      	beq.n	80099be <_strtod_l+0x176>
 80099ba:	2a45      	cmp	r2, #69	; 0x45
 80099bc:	d113      	bne.n	80099e6 <_strtod_l+0x19e>
 80099be:	b91e      	cbnz	r6, 80099c8 <_strtod_l+0x180>
 80099c0:	9a05      	ldr	r2, [sp, #20]
 80099c2:	4302      	orrs	r2, r0
 80099c4:	d094      	beq.n	80098f0 <_strtod_l+0xa8>
 80099c6:	2600      	movs	r6, #0
 80099c8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80099ca:	1c6a      	adds	r2, r5, #1
 80099cc:	9219      	str	r2, [sp, #100]	; 0x64
 80099ce:	786a      	ldrb	r2, [r5, #1]
 80099d0:	2a2b      	cmp	r2, #43	; 0x2b
 80099d2:	d074      	beq.n	8009abe <_strtod_l+0x276>
 80099d4:	2a2d      	cmp	r2, #45	; 0x2d
 80099d6:	d078      	beq.n	8009aca <_strtod_l+0x282>
 80099d8:	f04f 0c00 	mov.w	ip, #0
 80099dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80099e0:	2909      	cmp	r1, #9
 80099e2:	d97f      	bls.n	8009ae4 <_strtod_l+0x29c>
 80099e4:	9519      	str	r5, [sp, #100]	; 0x64
 80099e6:	2700      	movs	r7, #0
 80099e8:	e09e      	b.n	8009b28 <_strtod_l+0x2e0>
 80099ea:	2300      	movs	r3, #0
 80099ec:	e7c8      	b.n	8009980 <_strtod_l+0x138>
 80099ee:	f1bb 0f08 	cmp.w	fp, #8
 80099f2:	bfd8      	it	le
 80099f4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80099f6:	f100 0001 	add.w	r0, r0, #1
 80099fa:	bfd6      	itet	le
 80099fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8009a00:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009a04:	930a      	strle	r3, [sp, #40]	; 0x28
 8009a06:	f10b 0b01 	add.w	fp, fp, #1
 8009a0a:	9019      	str	r0, [sp, #100]	; 0x64
 8009a0c:	e7c1      	b.n	8009992 <_strtod_l+0x14a>
 8009a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	9219      	str	r2, [sp, #100]	; 0x64
 8009a14:	785a      	ldrb	r2, [r3, #1]
 8009a16:	f1bb 0f00 	cmp.w	fp, #0
 8009a1a:	d037      	beq.n	8009a8c <_strtod_l+0x244>
 8009a1c:	465e      	mov	r6, fp
 8009a1e:	9008      	str	r0, [sp, #32]
 8009a20:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009a24:	2b09      	cmp	r3, #9
 8009a26:	d912      	bls.n	8009a4e <_strtod_l+0x206>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e7c4      	b.n	80099b6 <_strtod_l+0x16e>
 8009a2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a2e:	3001      	adds	r0, #1
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	9219      	str	r2, [sp, #100]	; 0x64
 8009a34:	785a      	ldrb	r2, [r3, #1]
 8009a36:	2a30      	cmp	r2, #48	; 0x30
 8009a38:	d0f8      	beq.n	8009a2c <_strtod_l+0x1e4>
 8009a3a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009a3e:	2b08      	cmp	r3, #8
 8009a40:	f200 84e4 	bhi.w	800a40c <_strtod_l+0xbc4>
 8009a44:	9008      	str	r0, [sp, #32]
 8009a46:	2000      	movs	r0, #0
 8009a48:	4606      	mov	r6, r0
 8009a4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a4e:	3a30      	subs	r2, #48	; 0x30
 8009a50:	f100 0301 	add.w	r3, r0, #1
 8009a54:	d014      	beq.n	8009a80 <_strtod_l+0x238>
 8009a56:	9908      	ldr	r1, [sp, #32]
 8009a58:	eb00 0c06 	add.w	ip, r0, r6
 8009a5c:	4419      	add	r1, r3
 8009a5e:	9108      	str	r1, [sp, #32]
 8009a60:	4633      	mov	r3, r6
 8009a62:	210a      	movs	r1, #10
 8009a64:	4563      	cmp	r3, ip
 8009a66:	d113      	bne.n	8009a90 <_strtod_l+0x248>
 8009a68:	1833      	adds	r3, r6, r0
 8009a6a:	2b08      	cmp	r3, #8
 8009a6c:	f106 0601 	add.w	r6, r6, #1
 8009a70:	4406      	add	r6, r0
 8009a72:	dc1a      	bgt.n	8009aaa <_strtod_l+0x262>
 8009a74:	230a      	movs	r3, #10
 8009a76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a78:	fb03 2301 	mla	r3, r3, r1, r2
 8009a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8009a7e:	2300      	movs	r3, #0
 8009a80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a82:	4618      	mov	r0, r3
 8009a84:	1c51      	adds	r1, r2, #1
 8009a86:	9119      	str	r1, [sp, #100]	; 0x64
 8009a88:	7852      	ldrb	r2, [r2, #1]
 8009a8a:	e7c9      	b.n	8009a20 <_strtod_l+0x1d8>
 8009a8c:	4658      	mov	r0, fp
 8009a8e:	e7d2      	b.n	8009a36 <_strtod_l+0x1ee>
 8009a90:	2b08      	cmp	r3, #8
 8009a92:	f103 0301 	add.w	r3, r3, #1
 8009a96:	dc03      	bgt.n	8009aa0 <_strtod_l+0x258>
 8009a98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009a9a:	434f      	muls	r7, r1
 8009a9c:	970a      	str	r7, [sp, #40]	; 0x28
 8009a9e:	e7e1      	b.n	8009a64 <_strtod_l+0x21c>
 8009aa0:	2b10      	cmp	r3, #16
 8009aa2:	bfd8      	it	le
 8009aa4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009aa8:	e7dc      	b.n	8009a64 <_strtod_l+0x21c>
 8009aaa:	2e10      	cmp	r6, #16
 8009aac:	bfdc      	itt	le
 8009aae:	230a      	movle	r3, #10
 8009ab0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009ab4:	e7e3      	b.n	8009a7e <_strtod_l+0x236>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9308      	str	r3, [sp, #32]
 8009aba:	2301      	movs	r3, #1
 8009abc:	e780      	b.n	80099c0 <_strtod_l+0x178>
 8009abe:	f04f 0c00 	mov.w	ip, #0
 8009ac2:	1caa      	adds	r2, r5, #2
 8009ac4:	9219      	str	r2, [sp, #100]	; 0x64
 8009ac6:	78aa      	ldrb	r2, [r5, #2]
 8009ac8:	e788      	b.n	80099dc <_strtod_l+0x194>
 8009aca:	f04f 0c01 	mov.w	ip, #1
 8009ace:	e7f8      	b.n	8009ac2 <_strtod_l+0x27a>
 8009ad0:	0800c0c8 	.word	0x0800c0c8
 8009ad4:	7ff00000 	.word	0x7ff00000
 8009ad8:	0800c0c4 	.word	0x0800c0c4
 8009adc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ade:	1c51      	adds	r1, r2, #1
 8009ae0:	9119      	str	r1, [sp, #100]	; 0x64
 8009ae2:	7852      	ldrb	r2, [r2, #1]
 8009ae4:	2a30      	cmp	r2, #48	; 0x30
 8009ae6:	d0f9      	beq.n	8009adc <_strtod_l+0x294>
 8009ae8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009aec:	2908      	cmp	r1, #8
 8009aee:	f63f af7a 	bhi.w	80099e6 <_strtod_l+0x19e>
 8009af2:	3a30      	subs	r2, #48	; 0x30
 8009af4:	9209      	str	r2, [sp, #36]	; 0x24
 8009af6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009af8:	920c      	str	r2, [sp, #48]	; 0x30
 8009afa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009afc:	1c57      	adds	r7, r2, #1
 8009afe:	9719      	str	r7, [sp, #100]	; 0x64
 8009b00:	7852      	ldrb	r2, [r2, #1]
 8009b02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009b06:	f1be 0f09 	cmp.w	lr, #9
 8009b0a:	d938      	bls.n	8009b7e <_strtod_l+0x336>
 8009b0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b0e:	1a7f      	subs	r7, r7, r1
 8009b10:	2f08      	cmp	r7, #8
 8009b12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009b16:	dc03      	bgt.n	8009b20 <_strtod_l+0x2d8>
 8009b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b1a:	428f      	cmp	r7, r1
 8009b1c:	bfa8      	it	ge
 8009b1e:	460f      	movge	r7, r1
 8009b20:	f1bc 0f00 	cmp.w	ip, #0
 8009b24:	d000      	beq.n	8009b28 <_strtod_l+0x2e0>
 8009b26:	427f      	negs	r7, r7
 8009b28:	2e00      	cmp	r6, #0
 8009b2a:	d14f      	bne.n	8009bcc <_strtod_l+0x384>
 8009b2c:	9905      	ldr	r1, [sp, #20]
 8009b2e:	4301      	orrs	r1, r0
 8009b30:	f47f aec3 	bne.w	80098ba <_strtod_l+0x72>
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f47f aedb 	bne.w	80098f0 <_strtod_l+0xa8>
 8009b3a:	2a69      	cmp	r2, #105	; 0x69
 8009b3c:	d029      	beq.n	8009b92 <_strtod_l+0x34a>
 8009b3e:	dc26      	bgt.n	8009b8e <_strtod_l+0x346>
 8009b40:	2a49      	cmp	r2, #73	; 0x49
 8009b42:	d026      	beq.n	8009b92 <_strtod_l+0x34a>
 8009b44:	2a4e      	cmp	r2, #78	; 0x4e
 8009b46:	f47f aed3 	bne.w	80098f0 <_strtod_l+0xa8>
 8009b4a:	499a      	ldr	r1, [pc, #616]	; (8009db4 <_strtod_l+0x56c>)
 8009b4c:	a819      	add	r0, sp, #100	; 0x64
 8009b4e:	f001 f9fb 	bl	800af48 <__match>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	f43f aecc 	beq.w	80098f0 <_strtod_l+0xa8>
 8009b58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b28      	cmp	r3, #40	; 0x28
 8009b5e:	d12f      	bne.n	8009bc0 <_strtod_l+0x378>
 8009b60:	4995      	ldr	r1, [pc, #596]	; (8009db8 <_strtod_l+0x570>)
 8009b62:	aa1c      	add	r2, sp, #112	; 0x70
 8009b64:	a819      	add	r0, sp, #100	; 0x64
 8009b66:	f001 fa03 	bl	800af70 <__hexnan>
 8009b6a:	2805      	cmp	r0, #5
 8009b6c:	d128      	bne.n	8009bc0 <_strtod_l+0x378>
 8009b6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b70:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009b74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009b78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009b7c:	e69d      	b.n	80098ba <_strtod_l+0x72>
 8009b7e:	210a      	movs	r1, #10
 8009b80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b82:	fb01 2107 	mla	r1, r1, r7, r2
 8009b86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b8c:	e7b5      	b.n	8009afa <_strtod_l+0x2b2>
 8009b8e:	2a6e      	cmp	r2, #110	; 0x6e
 8009b90:	e7d9      	b.n	8009b46 <_strtod_l+0x2fe>
 8009b92:	498a      	ldr	r1, [pc, #552]	; (8009dbc <_strtod_l+0x574>)
 8009b94:	a819      	add	r0, sp, #100	; 0x64
 8009b96:	f001 f9d7 	bl	800af48 <__match>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	f43f aea8 	beq.w	80098f0 <_strtod_l+0xa8>
 8009ba0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ba2:	4987      	ldr	r1, [pc, #540]	; (8009dc0 <_strtod_l+0x578>)
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	a819      	add	r0, sp, #100	; 0x64
 8009ba8:	9319      	str	r3, [sp, #100]	; 0x64
 8009baa:	f001 f9cd 	bl	800af48 <__match>
 8009bae:	b910      	cbnz	r0, 8009bb6 <_strtod_l+0x36e>
 8009bb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	9319      	str	r3, [sp, #100]	; 0x64
 8009bb6:	f04f 0800 	mov.w	r8, #0
 8009bba:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8009dc4 <_strtod_l+0x57c>
 8009bbe:	e67c      	b.n	80098ba <_strtod_l+0x72>
 8009bc0:	4881      	ldr	r0, [pc, #516]	; (8009dc8 <_strtod_l+0x580>)
 8009bc2:	f000 fedf 	bl	800a984 <nan>
 8009bc6:	4680      	mov	r8, r0
 8009bc8:	4689      	mov	r9, r1
 8009bca:	e676      	b.n	80098ba <_strtod_l+0x72>
 8009bcc:	9b08      	ldr	r3, [sp, #32]
 8009bce:	f1bb 0f00 	cmp.w	fp, #0
 8009bd2:	bf08      	it	eq
 8009bd4:	46b3      	moveq	fp, r6
 8009bd6:	1afb      	subs	r3, r7, r3
 8009bd8:	2e10      	cmp	r6, #16
 8009bda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009bdc:	4635      	mov	r5, r6
 8009bde:	9309      	str	r3, [sp, #36]	; 0x24
 8009be0:	bfa8      	it	ge
 8009be2:	2510      	movge	r5, #16
 8009be4:	f7f6 fbfe 	bl	80003e4 <__aeabi_ui2d>
 8009be8:	2e09      	cmp	r6, #9
 8009bea:	4680      	mov	r8, r0
 8009bec:	4689      	mov	r9, r1
 8009bee:	dd13      	ble.n	8009c18 <_strtod_l+0x3d0>
 8009bf0:	4b76      	ldr	r3, [pc, #472]	; (8009dcc <_strtod_l+0x584>)
 8009bf2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009bf6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009bfa:	f7f6 fc6d 	bl	80004d8 <__aeabi_dmul>
 8009bfe:	4680      	mov	r8, r0
 8009c00:	4650      	mov	r0, sl
 8009c02:	4689      	mov	r9, r1
 8009c04:	f7f6 fbee 	bl	80003e4 <__aeabi_ui2d>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4649      	mov	r1, r9
 8009c10:	f7f6 faac 	bl	800016c <__adddf3>
 8009c14:	4680      	mov	r8, r0
 8009c16:	4689      	mov	r9, r1
 8009c18:	2e0f      	cmp	r6, #15
 8009c1a:	dc36      	bgt.n	8009c8a <_strtod_l+0x442>
 8009c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f43f ae4b 	beq.w	80098ba <_strtod_l+0x72>
 8009c24:	dd22      	ble.n	8009c6c <_strtod_l+0x424>
 8009c26:	2b16      	cmp	r3, #22
 8009c28:	dc09      	bgt.n	8009c3e <_strtod_l+0x3f6>
 8009c2a:	4968      	ldr	r1, [pc, #416]	; (8009dcc <_strtod_l+0x584>)
 8009c2c:	4642      	mov	r2, r8
 8009c2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c32:	464b      	mov	r3, r9
 8009c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c38:	f7f6 fc4e 	bl	80004d8 <__aeabi_dmul>
 8009c3c:	e7c3      	b.n	8009bc6 <_strtod_l+0x37e>
 8009c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c40:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009c44:	4293      	cmp	r3, r2
 8009c46:	db20      	blt.n	8009c8a <_strtod_l+0x442>
 8009c48:	4c60      	ldr	r4, [pc, #384]	; (8009dcc <_strtod_l+0x584>)
 8009c4a:	f1c6 060f 	rsb	r6, r6, #15
 8009c4e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009c52:	4642      	mov	r2, r8
 8009c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c58:	464b      	mov	r3, r9
 8009c5a:	f7f6 fc3d 	bl	80004d8 <__aeabi_dmul>
 8009c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c60:	1b9e      	subs	r6, r3, r6
 8009c62:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009c66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c6a:	e7e5      	b.n	8009c38 <_strtod_l+0x3f0>
 8009c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6e:	3316      	adds	r3, #22
 8009c70:	db0b      	blt.n	8009c8a <_strtod_l+0x442>
 8009c72:	9b08      	ldr	r3, [sp, #32]
 8009c74:	4640      	mov	r0, r8
 8009c76:	1bdf      	subs	r7, r3, r7
 8009c78:	4b54      	ldr	r3, [pc, #336]	; (8009dcc <_strtod_l+0x584>)
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c84:	f7f6 fd52 	bl	800072c <__aeabi_ddiv>
 8009c88:	e79d      	b.n	8009bc6 <_strtod_l+0x37e>
 8009c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8c:	1b75      	subs	r5, r6, r5
 8009c8e:	441d      	add	r5, r3
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	dd70      	ble.n	8009d76 <_strtod_l+0x52e>
 8009c94:	f015 030f 	ands.w	r3, r5, #15
 8009c98:	d00a      	beq.n	8009cb0 <_strtod_l+0x468>
 8009c9a:	494c      	ldr	r1, [pc, #304]	; (8009dcc <_strtod_l+0x584>)
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ca6:	464b      	mov	r3, r9
 8009ca8:	f7f6 fc16 	bl	80004d8 <__aeabi_dmul>
 8009cac:	4680      	mov	r8, r0
 8009cae:	4689      	mov	r9, r1
 8009cb0:	f035 050f 	bics.w	r5, r5, #15
 8009cb4:	d04d      	beq.n	8009d52 <_strtod_l+0x50a>
 8009cb6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009cba:	dd22      	ble.n	8009d02 <_strtod_l+0x4ba>
 8009cbc:	2600      	movs	r6, #0
 8009cbe:	46b3      	mov	fp, r6
 8009cc0:	960b      	str	r6, [sp, #44]	; 0x2c
 8009cc2:	9608      	str	r6, [sp, #32]
 8009cc4:	2322      	movs	r3, #34	; 0x22
 8009cc6:	f04f 0800 	mov.w	r8, #0
 8009cca:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009dc4 <_strtod_l+0x57c>
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f43f adf1 	beq.w	80098ba <_strtod_l+0x72>
 8009cd8:	4620      	mov	r0, r4
 8009cda:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009cdc:	f7ff f934 	bl	8008f48 <_Bfree>
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	9908      	ldr	r1, [sp, #32]
 8009ce4:	f7ff f930 	bl	8008f48 <_Bfree>
 8009ce8:	4659      	mov	r1, fp
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff f92c 	bl	8008f48 <_Bfree>
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cf4:	f7ff f928 	bl	8008f48 <_Bfree>
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f7ff f924 	bl	8008f48 <_Bfree>
 8009d00:	e5db      	b.n	80098ba <_strtod_l+0x72>
 8009d02:	4b33      	ldr	r3, [pc, #204]	; (8009dd0 <_strtod_l+0x588>)
 8009d04:	4640      	mov	r0, r8
 8009d06:	9305      	str	r3, [sp, #20]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	469a      	mov	sl, r3
 8009d0e:	112d      	asrs	r5, r5, #4
 8009d10:	2d01      	cmp	r5, #1
 8009d12:	dc21      	bgt.n	8009d58 <_strtod_l+0x510>
 8009d14:	b10b      	cbz	r3, 8009d1a <_strtod_l+0x4d2>
 8009d16:	4680      	mov	r8, r0
 8009d18:	4689      	mov	r9, r1
 8009d1a:	492d      	ldr	r1, [pc, #180]	; (8009dd0 <_strtod_l+0x588>)
 8009d1c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009d20:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009d24:	4642      	mov	r2, r8
 8009d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d2a:	464b      	mov	r3, r9
 8009d2c:	f7f6 fbd4 	bl	80004d8 <__aeabi_dmul>
 8009d30:	4b24      	ldr	r3, [pc, #144]	; (8009dc4 <_strtod_l+0x57c>)
 8009d32:	460a      	mov	r2, r1
 8009d34:	400b      	ands	r3, r1
 8009d36:	4927      	ldr	r1, [pc, #156]	; (8009dd4 <_strtod_l+0x58c>)
 8009d38:	4680      	mov	r8, r0
 8009d3a:	428b      	cmp	r3, r1
 8009d3c:	d8be      	bhi.n	8009cbc <_strtod_l+0x474>
 8009d3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009d42:	428b      	cmp	r3, r1
 8009d44:	bf86      	itte	hi
 8009d46:	f04f 38ff 	movhi.w	r8, #4294967295
 8009d4a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009dd8 <_strtod_l+0x590>
 8009d4e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009d52:	2300      	movs	r3, #0
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	e07b      	b.n	8009e50 <_strtod_l+0x608>
 8009d58:	07ea      	lsls	r2, r5, #31
 8009d5a:	d505      	bpl.n	8009d68 <_strtod_l+0x520>
 8009d5c:	9b05      	ldr	r3, [sp, #20]
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fbb9 	bl	80004d8 <__aeabi_dmul>
 8009d66:	2301      	movs	r3, #1
 8009d68:	9a05      	ldr	r2, [sp, #20]
 8009d6a:	f10a 0a01 	add.w	sl, sl, #1
 8009d6e:	3208      	adds	r2, #8
 8009d70:	106d      	asrs	r5, r5, #1
 8009d72:	9205      	str	r2, [sp, #20]
 8009d74:	e7cc      	b.n	8009d10 <_strtod_l+0x4c8>
 8009d76:	d0ec      	beq.n	8009d52 <_strtod_l+0x50a>
 8009d78:	426d      	negs	r5, r5
 8009d7a:	f015 020f 	ands.w	r2, r5, #15
 8009d7e:	d00a      	beq.n	8009d96 <_strtod_l+0x54e>
 8009d80:	4b12      	ldr	r3, [pc, #72]	; (8009dcc <_strtod_l+0x584>)
 8009d82:	4640      	mov	r0, r8
 8009d84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d88:	4649      	mov	r1, r9
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f7f6 fccd 	bl	800072c <__aeabi_ddiv>
 8009d92:	4680      	mov	r8, r0
 8009d94:	4689      	mov	r9, r1
 8009d96:	112d      	asrs	r5, r5, #4
 8009d98:	d0db      	beq.n	8009d52 <_strtod_l+0x50a>
 8009d9a:	2d1f      	cmp	r5, #31
 8009d9c:	dd1e      	ble.n	8009ddc <_strtod_l+0x594>
 8009d9e:	2600      	movs	r6, #0
 8009da0:	46b3      	mov	fp, r6
 8009da2:	960b      	str	r6, [sp, #44]	; 0x2c
 8009da4:	9608      	str	r6, [sp, #32]
 8009da6:	2322      	movs	r3, #34	; 0x22
 8009da8:	f04f 0800 	mov.w	r8, #0
 8009dac:	f04f 0900 	mov.w	r9, #0
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	e78d      	b.n	8009cd0 <_strtod_l+0x488>
 8009db4:	0800beaf 	.word	0x0800beaf
 8009db8:	0800c0dc 	.word	0x0800c0dc
 8009dbc:	0800bea7 	.word	0x0800bea7
 8009dc0:	0800bede 	.word	0x0800bede
 8009dc4:	7ff00000 	.word	0x7ff00000
 8009dc8:	0800c26d 	.word	0x0800c26d
 8009dcc:	0800bff0 	.word	0x0800bff0
 8009dd0:	0800bfc8 	.word	0x0800bfc8
 8009dd4:	7ca00000 	.word	0x7ca00000
 8009dd8:	7fefffff 	.word	0x7fefffff
 8009ddc:	f015 0310 	ands.w	r3, r5, #16
 8009de0:	bf18      	it	ne
 8009de2:	236a      	movne	r3, #106	; 0x6a
 8009de4:	4640      	mov	r0, r8
 8009de6:	9305      	str	r3, [sp, #20]
 8009de8:	4649      	mov	r1, r9
 8009dea:	2300      	movs	r3, #0
 8009dec:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a0b8 <_strtod_l+0x870>
 8009df0:	07ea      	lsls	r2, r5, #31
 8009df2:	d504      	bpl.n	8009dfe <_strtod_l+0x5b6>
 8009df4:	e9da 2300 	ldrd	r2, r3, [sl]
 8009df8:	f7f6 fb6e 	bl	80004d8 <__aeabi_dmul>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	106d      	asrs	r5, r5, #1
 8009e00:	f10a 0a08 	add.w	sl, sl, #8
 8009e04:	d1f4      	bne.n	8009df0 <_strtod_l+0x5a8>
 8009e06:	b10b      	cbz	r3, 8009e0c <_strtod_l+0x5c4>
 8009e08:	4680      	mov	r8, r0
 8009e0a:	4689      	mov	r9, r1
 8009e0c:	9b05      	ldr	r3, [sp, #20]
 8009e0e:	b1bb      	cbz	r3, 8009e40 <_strtod_l+0x5f8>
 8009e10:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009e14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	dd10      	ble.n	8009e40 <_strtod_l+0x5f8>
 8009e1e:	2b1f      	cmp	r3, #31
 8009e20:	f340 8128 	ble.w	800a074 <_strtod_l+0x82c>
 8009e24:	2b34      	cmp	r3, #52	; 0x34
 8009e26:	bfd8      	it	le
 8009e28:	f04f 33ff 	movle.w	r3, #4294967295
 8009e2c:	f04f 0800 	mov.w	r8, #0
 8009e30:	bfcf      	iteee	gt
 8009e32:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009e36:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009e3a:	4093      	lslle	r3, r2
 8009e3c:	ea03 0901 	andle.w	r9, r3, r1
 8009e40:	2200      	movs	r2, #0
 8009e42:	2300      	movs	r3, #0
 8009e44:	4640      	mov	r0, r8
 8009e46:	4649      	mov	r1, r9
 8009e48:	f7f6 fdae 	bl	80009a8 <__aeabi_dcmpeq>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d1a6      	bne.n	8009d9e <_strtod_l+0x556>
 8009e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e52:	465a      	mov	r2, fp
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	4620      	mov	r0, r4
 8009e58:	4633      	mov	r3, r6
 8009e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e5c:	f7ff f8dc 	bl	8009018 <__s2b>
 8009e60:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f af2a 	beq.w	8009cbc <_strtod_l+0x474>
 8009e68:	2600      	movs	r6, #0
 8009e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e6c:	9b08      	ldr	r3, [sp, #32]
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	eba3 0307 	sub.w	r3, r3, r7
 8009e74:	bfa8      	it	ge
 8009e76:	2300      	movge	r3, #0
 8009e78:	46b3      	mov	fp, r6
 8009e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8009e7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e80:	9316      	str	r3, [sp, #88]	; 0x58
 8009e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e84:	4620      	mov	r0, r4
 8009e86:	6859      	ldr	r1, [r3, #4]
 8009e88:	f7ff f81e 	bl	8008ec8 <_Balloc>
 8009e8c:	9008      	str	r0, [sp, #32]
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	f43f af18 	beq.w	8009cc4 <_strtod_l+0x47c>
 8009e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e96:	300c      	adds	r0, #12
 8009e98:	691a      	ldr	r2, [r3, #16]
 8009e9a:	f103 010c 	add.w	r1, r3, #12
 8009e9e:	3202      	adds	r2, #2
 8009ea0:	0092      	lsls	r2, r2, #2
 8009ea2:	f7fe f892 	bl	8007fca <memcpy>
 8009ea6:	ab1c      	add	r3, sp, #112	; 0x70
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	ab1b      	add	r3, sp, #108	; 0x6c
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	4642      	mov	r2, r8
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009eb8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8009ebc:	f7ff fbd8 	bl	8009670 <__d2b>
 8009ec0:	901a      	str	r0, [sp, #104]	; 0x68
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	f43f aefe 	beq.w	8009cc4 <_strtod_l+0x47c>
 8009ec8:	2101      	movs	r1, #1
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f7ff f93c 	bl	8009148 <__i2b>
 8009ed0:	4683      	mov	fp, r0
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f43f aef6 	beq.w	8009cc4 <_strtod_l+0x47c>
 8009ed8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009eda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009edc:	2f00      	cmp	r7, #0
 8009ede:	bfab      	itete	ge
 8009ee0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009ee2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009ee4:	eb07 0a03 	addge.w	sl, r7, r3
 8009ee8:	1bdd      	sublt	r5, r3, r7
 8009eea:	9b05      	ldr	r3, [sp, #20]
 8009eec:	bfa8      	it	ge
 8009eee:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009ef0:	eba7 0703 	sub.w	r7, r7, r3
 8009ef4:	4417      	add	r7, r2
 8009ef6:	4b71      	ldr	r3, [pc, #452]	; (800a0bc <_strtod_l+0x874>)
 8009ef8:	f107 37ff 	add.w	r7, r7, #4294967295
 8009efc:	bfb8      	it	lt
 8009efe:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009f02:	429f      	cmp	r7, r3
 8009f04:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f08:	f280 80c7 	bge.w	800a09a <_strtod_l+0x852>
 8009f0c:	1bdb      	subs	r3, r3, r7
 8009f0e:	2b1f      	cmp	r3, #31
 8009f10:	f04f 0101 	mov.w	r1, #1
 8009f14:	eba2 0203 	sub.w	r2, r2, r3
 8009f18:	f300 80b3 	bgt.w	800a082 <_strtod_l+0x83a>
 8009f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f20:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f22:	2300      	movs	r3, #0
 8009f24:	9310      	str	r3, [sp, #64]	; 0x40
 8009f26:	eb0a 0702 	add.w	r7, sl, r2
 8009f2a:	9b05      	ldr	r3, [sp, #20]
 8009f2c:	45ba      	cmp	sl, r7
 8009f2e:	4415      	add	r5, r2
 8009f30:	441d      	add	r5, r3
 8009f32:	4653      	mov	r3, sl
 8009f34:	bfa8      	it	ge
 8009f36:	463b      	movge	r3, r7
 8009f38:	42ab      	cmp	r3, r5
 8009f3a:	bfa8      	it	ge
 8009f3c:	462b      	movge	r3, r5
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	bfc2      	ittt	gt
 8009f42:	1aff      	subgt	r7, r7, r3
 8009f44:	1aed      	subgt	r5, r5, r3
 8009f46:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009f4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dd17      	ble.n	8009f80 <_strtod_l+0x738>
 8009f50:	4659      	mov	r1, fp
 8009f52:	461a      	mov	r2, r3
 8009f54:	4620      	mov	r0, r4
 8009f56:	f7ff f9b5 	bl	80092c4 <__pow5mult>
 8009f5a:	4683      	mov	fp, r0
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	f43f aeb1 	beq.w	8009cc4 <_strtod_l+0x47c>
 8009f62:	4601      	mov	r1, r0
 8009f64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f66:	4620      	mov	r0, r4
 8009f68:	f7ff f904 	bl	8009174 <__multiply>
 8009f6c:	900a      	str	r0, [sp, #40]	; 0x28
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	f43f aea8 	beq.w	8009cc4 <_strtod_l+0x47c>
 8009f74:	4620      	mov	r0, r4
 8009f76:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f78:	f7fe ffe6 	bl	8008f48 <_Bfree>
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f80:	2f00      	cmp	r7, #0
 8009f82:	f300 808f 	bgt.w	800a0a4 <_strtod_l+0x85c>
 8009f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	dd08      	ble.n	8009f9e <_strtod_l+0x756>
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f90:	9908      	ldr	r1, [sp, #32]
 8009f92:	f7ff f997 	bl	80092c4 <__pow5mult>
 8009f96:	9008      	str	r0, [sp, #32]
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f43f ae93 	beq.w	8009cc4 <_strtod_l+0x47c>
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	dd08      	ble.n	8009fb4 <_strtod_l+0x76c>
 8009fa2:	462a      	mov	r2, r5
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	9908      	ldr	r1, [sp, #32]
 8009fa8:	f7ff f9e6 	bl	8009378 <__lshift>
 8009fac:	9008      	str	r0, [sp, #32]
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f43f ae88 	beq.w	8009cc4 <_strtod_l+0x47c>
 8009fb4:	f1ba 0f00 	cmp.w	sl, #0
 8009fb8:	dd08      	ble.n	8009fcc <_strtod_l+0x784>
 8009fba:	4659      	mov	r1, fp
 8009fbc:	4652      	mov	r2, sl
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f7ff f9da 	bl	8009378 <__lshift>
 8009fc4:	4683      	mov	fp, r0
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	f43f ae7c 	beq.w	8009cc4 <_strtod_l+0x47c>
 8009fcc:	4620      	mov	r0, r4
 8009fce:	9a08      	ldr	r2, [sp, #32]
 8009fd0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fd2:	f7ff fa59 	bl	8009488 <__mdiff>
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f43f ae73 	beq.w	8009cc4 <_strtod_l+0x47c>
 8009fde:	2500      	movs	r5, #0
 8009fe0:	68c3      	ldr	r3, [r0, #12]
 8009fe2:	4659      	mov	r1, fp
 8009fe4:	60c5      	str	r5, [r0, #12]
 8009fe6:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe8:	f7ff fa32 	bl	8009450 <__mcmp>
 8009fec:	42a8      	cmp	r0, r5
 8009fee:	da6b      	bge.n	800a0c8 <_strtod_l+0x880>
 8009ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff2:	ea53 0308 	orrs.w	r3, r3, r8
 8009ff6:	f040 808f 	bne.w	800a118 <_strtod_l+0x8d0>
 8009ffa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f040 808a 	bne.w	800a118 <_strtod_l+0x8d0>
 800a004:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a008:	0d1b      	lsrs	r3, r3, #20
 800a00a:	051b      	lsls	r3, r3, #20
 800a00c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a010:	f240 8082 	bls.w	800a118 <_strtod_l+0x8d0>
 800a014:	6973      	ldr	r3, [r6, #20]
 800a016:	b913      	cbnz	r3, 800a01e <_strtod_l+0x7d6>
 800a018:	6933      	ldr	r3, [r6, #16]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	dd7c      	ble.n	800a118 <_strtod_l+0x8d0>
 800a01e:	4631      	mov	r1, r6
 800a020:	2201      	movs	r2, #1
 800a022:	4620      	mov	r0, r4
 800a024:	f7ff f9a8 	bl	8009378 <__lshift>
 800a028:	4659      	mov	r1, fp
 800a02a:	4606      	mov	r6, r0
 800a02c:	f7ff fa10 	bl	8009450 <__mcmp>
 800a030:	2800      	cmp	r0, #0
 800a032:	dd71      	ble.n	800a118 <_strtod_l+0x8d0>
 800a034:	9905      	ldr	r1, [sp, #20]
 800a036:	464b      	mov	r3, r9
 800a038:	4a21      	ldr	r2, [pc, #132]	; (800a0c0 <_strtod_l+0x878>)
 800a03a:	2900      	cmp	r1, #0
 800a03c:	f000 808d 	beq.w	800a15a <_strtod_l+0x912>
 800a040:	ea02 0109 	and.w	r1, r2, r9
 800a044:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a048:	f300 8087 	bgt.w	800a15a <_strtod_l+0x912>
 800a04c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a050:	f77f aea9 	ble.w	8009da6 <_strtod_l+0x55e>
 800a054:	4640      	mov	r0, r8
 800a056:	4649      	mov	r1, r9
 800a058:	4b1a      	ldr	r3, [pc, #104]	; (800a0c4 <_strtod_l+0x87c>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	f7f6 fa3c 	bl	80004d8 <__aeabi_dmul>
 800a060:	4b17      	ldr	r3, [pc, #92]	; (800a0c0 <_strtod_l+0x878>)
 800a062:	4680      	mov	r8, r0
 800a064:	400b      	ands	r3, r1
 800a066:	4689      	mov	r9, r1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f47f ae35 	bne.w	8009cd8 <_strtod_l+0x490>
 800a06e:	2322      	movs	r3, #34	; 0x22
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	e631      	b.n	8009cd8 <_strtod_l+0x490>
 800a074:	f04f 32ff 	mov.w	r2, #4294967295
 800a078:	fa02 f303 	lsl.w	r3, r2, r3
 800a07c:	ea03 0808 	and.w	r8, r3, r8
 800a080:	e6de      	b.n	8009e40 <_strtod_l+0x5f8>
 800a082:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800a086:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800a08a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800a08e:	37e2      	adds	r7, #226	; 0xe2
 800a090:	fa01 f307 	lsl.w	r3, r1, r7
 800a094:	9310      	str	r3, [sp, #64]	; 0x40
 800a096:	9113      	str	r1, [sp, #76]	; 0x4c
 800a098:	e745      	b.n	8009f26 <_strtod_l+0x6de>
 800a09a:	2300      	movs	r3, #0
 800a09c:	9310      	str	r3, [sp, #64]	; 0x40
 800a09e:	2301      	movs	r3, #1
 800a0a0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a0a2:	e740      	b.n	8009f26 <_strtod_l+0x6de>
 800a0a4:	463a      	mov	r2, r7
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0aa:	f7ff f965 	bl	8009378 <__lshift>
 800a0ae:	901a      	str	r0, [sp, #104]	; 0x68
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f47f af68 	bne.w	8009f86 <_strtod_l+0x73e>
 800a0b6:	e605      	b.n	8009cc4 <_strtod_l+0x47c>
 800a0b8:	0800c0f0 	.word	0x0800c0f0
 800a0bc:	fffffc02 	.word	0xfffffc02
 800a0c0:	7ff00000 	.word	0x7ff00000
 800a0c4:	39500000 	.word	0x39500000
 800a0c8:	46ca      	mov	sl, r9
 800a0ca:	d165      	bne.n	800a198 <_strtod_l+0x950>
 800a0cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0d2:	b352      	cbz	r2, 800a12a <_strtod_l+0x8e2>
 800a0d4:	4a9e      	ldr	r2, [pc, #632]	; (800a350 <_strtod_l+0xb08>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d12a      	bne.n	800a130 <_strtod_l+0x8e8>
 800a0da:	9b05      	ldr	r3, [sp, #20]
 800a0dc:	4641      	mov	r1, r8
 800a0de:	b1fb      	cbz	r3, 800a120 <_strtod_l+0x8d8>
 800a0e0:	4b9c      	ldr	r3, [pc, #624]	; (800a354 <_strtod_l+0xb0c>)
 800a0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e6:	ea09 0303 	and.w	r3, r9, r3
 800a0ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0ee:	d81a      	bhi.n	800a126 <_strtod_l+0x8de>
 800a0f0:	0d1b      	lsrs	r3, r3, #20
 800a0f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	d118      	bne.n	800a130 <_strtod_l+0x8e8>
 800a0fe:	4b96      	ldr	r3, [pc, #600]	; (800a358 <_strtod_l+0xb10>)
 800a100:	459a      	cmp	sl, r3
 800a102:	d102      	bne.n	800a10a <_strtod_l+0x8c2>
 800a104:	3101      	adds	r1, #1
 800a106:	f43f addd 	beq.w	8009cc4 <_strtod_l+0x47c>
 800a10a:	f04f 0800 	mov.w	r8, #0
 800a10e:	4b91      	ldr	r3, [pc, #580]	; (800a354 <_strtod_l+0xb0c>)
 800a110:	ea0a 0303 	and.w	r3, sl, r3
 800a114:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a118:	9b05      	ldr	r3, [sp, #20]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d19a      	bne.n	800a054 <_strtod_l+0x80c>
 800a11e:	e5db      	b.n	8009cd8 <_strtod_l+0x490>
 800a120:	f04f 33ff 	mov.w	r3, #4294967295
 800a124:	e7e9      	b.n	800a0fa <_strtod_l+0x8b2>
 800a126:	4613      	mov	r3, r2
 800a128:	e7e7      	b.n	800a0fa <_strtod_l+0x8b2>
 800a12a:	ea53 0308 	orrs.w	r3, r3, r8
 800a12e:	d081      	beq.n	800a034 <_strtod_l+0x7ec>
 800a130:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a132:	b1e3      	cbz	r3, 800a16e <_strtod_l+0x926>
 800a134:	ea13 0f0a 	tst.w	r3, sl
 800a138:	d0ee      	beq.n	800a118 <_strtod_l+0x8d0>
 800a13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a13c:	4640      	mov	r0, r8
 800a13e:	4649      	mov	r1, r9
 800a140:	9a05      	ldr	r2, [sp, #20]
 800a142:	b1c3      	cbz	r3, 800a176 <_strtod_l+0x92e>
 800a144:	f7ff fb5c 	bl	8009800 <sulp>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a14e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a150:	f7f6 f80c 	bl	800016c <__adddf3>
 800a154:	4680      	mov	r8, r0
 800a156:	4689      	mov	r9, r1
 800a158:	e7de      	b.n	800a118 <_strtod_l+0x8d0>
 800a15a:	4013      	ands	r3, r2
 800a15c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a160:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a164:	f04f 38ff 	mov.w	r8, #4294967295
 800a168:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a16c:	e7d4      	b.n	800a118 <_strtod_l+0x8d0>
 800a16e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a170:	ea13 0f08 	tst.w	r3, r8
 800a174:	e7e0      	b.n	800a138 <_strtod_l+0x8f0>
 800a176:	f7ff fb43 	bl	8009800 <sulp>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a180:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a182:	f7f5 fff1 	bl	8000168 <__aeabi_dsub>
 800a186:	2200      	movs	r2, #0
 800a188:	2300      	movs	r3, #0
 800a18a:	4680      	mov	r8, r0
 800a18c:	4689      	mov	r9, r1
 800a18e:	f7f6 fc0b 	bl	80009a8 <__aeabi_dcmpeq>
 800a192:	2800      	cmp	r0, #0
 800a194:	d0c0      	beq.n	800a118 <_strtod_l+0x8d0>
 800a196:	e606      	b.n	8009da6 <_strtod_l+0x55e>
 800a198:	4659      	mov	r1, fp
 800a19a:	4630      	mov	r0, r6
 800a19c:	f7ff fabe 	bl	800971c <__ratio>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1ae:	f7f6 fc0f 	bl	80009d0 <__aeabi_dcmple>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d06f      	beq.n	800a296 <_strtod_l+0xa4e>
 800a1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d17c      	bne.n	800a2b6 <_strtod_l+0xa6e>
 800a1bc:	f1b8 0f00 	cmp.w	r8, #0
 800a1c0:	d159      	bne.n	800a276 <_strtod_l+0xa2e>
 800a1c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d17b      	bne.n	800a2c2 <_strtod_l+0xa7a>
 800a1ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4b62      	ldr	r3, [pc, #392]	; (800a35c <_strtod_l+0xb14>)
 800a1d2:	f7f6 fbf3 	bl	80009bc <__aeabi_dcmplt>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d15a      	bne.n	800a290 <_strtod_l+0xa48>
 800a1da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1de:	2200      	movs	r2, #0
 800a1e0:	4b5f      	ldr	r3, [pc, #380]	; (800a360 <_strtod_l+0xb18>)
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	460f      	mov	r7, r1
 800a1ea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a1ee:	9506      	str	r5, [sp, #24]
 800a1f0:	9307      	str	r3, [sp, #28]
 800a1f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1f6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a1fa:	4b56      	ldr	r3, [pc, #344]	; (800a354 <_strtod_l+0xb0c>)
 800a1fc:	4a55      	ldr	r2, [pc, #340]	; (800a354 <_strtod_l+0xb0c>)
 800a1fe:	ea0a 0303 	and.w	r3, sl, r3
 800a202:	9313      	str	r3, [sp, #76]	; 0x4c
 800a204:	4b57      	ldr	r3, [pc, #348]	; (800a364 <_strtod_l+0xb1c>)
 800a206:	ea0a 0202 	and.w	r2, sl, r2
 800a20a:	429a      	cmp	r2, r3
 800a20c:	f040 80b0 	bne.w	800a370 <_strtod_l+0xb28>
 800a210:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a214:	4640      	mov	r0, r8
 800a216:	4649      	mov	r1, r9
 800a218:	f7ff f9c2 	bl	80095a0 <__ulp>
 800a21c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a220:	f7f6 f95a 	bl	80004d8 <__aeabi_dmul>
 800a224:	4642      	mov	r2, r8
 800a226:	464b      	mov	r3, r9
 800a228:	f7f5 ffa0 	bl	800016c <__adddf3>
 800a22c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a354 <_strtod_l+0xb0c>
 800a230:	4a4d      	ldr	r2, [pc, #308]	; (800a368 <_strtod_l+0xb20>)
 800a232:	ea01 0a0a 	and.w	sl, r1, sl
 800a236:	4592      	cmp	sl, r2
 800a238:	4680      	mov	r8, r0
 800a23a:	d948      	bls.n	800a2ce <_strtod_l+0xa86>
 800a23c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a23e:	4b46      	ldr	r3, [pc, #280]	; (800a358 <_strtod_l+0xb10>)
 800a240:	429a      	cmp	r2, r3
 800a242:	d103      	bne.n	800a24c <_strtod_l+0xa04>
 800a244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a246:	3301      	adds	r3, #1
 800a248:	f43f ad3c 	beq.w	8009cc4 <_strtod_l+0x47c>
 800a24c:	f04f 38ff 	mov.w	r8, #4294967295
 800a250:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a358 <_strtod_l+0xb10>
 800a254:	4620      	mov	r0, r4
 800a256:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a258:	f7fe fe76 	bl	8008f48 <_Bfree>
 800a25c:	4620      	mov	r0, r4
 800a25e:	9908      	ldr	r1, [sp, #32]
 800a260:	f7fe fe72 	bl	8008f48 <_Bfree>
 800a264:	4659      	mov	r1, fp
 800a266:	4620      	mov	r0, r4
 800a268:	f7fe fe6e 	bl	8008f48 <_Bfree>
 800a26c:	4631      	mov	r1, r6
 800a26e:	4620      	mov	r0, r4
 800a270:	f7fe fe6a 	bl	8008f48 <_Bfree>
 800a274:	e605      	b.n	8009e82 <_strtod_l+0x63a>
 800a276:	f1b8 0f01 	cmp.w	r8, #1
 800a27a:	d103      	bne.n	800a284 <_strtod_l+0xa3c>
 800a27c:	f1b9 0f00 	cmp.w	r9, #0
 800a280:	f43f ad91 	beq.w	8009da6 <_strtod_l+0x55e>
 800a284:	2200      	movs	r2, #0
 800a286:	4b39      	ldr	r3, [pc, #228]	; (800a36c <_strtod_l+0xb24>)
 800a288:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a28a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a28e:	e016      	b.n	800a2be <_strtod_l+0xa76>
 800a290:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a292:	4f33      	ldr	r7, [pc, #204]	; (800a360 <_strtod_l+0xb18>)
 800a294:	e7a9      	b.n	800a1ea <_strtod_l+0x9a2>
 800a296:	4b32      	ldr	r3, [pc, #200]	; (800a360 <_strtod_l+0xb18>)
 800a298:	2200      	movs	r2, #0
 800a29a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a29e:	f7f6 f91b 	bl	80004d8 <__aeabi_dmul>
 800a2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d09e      	beq.n	800a1ea <_strtod_l+0x9a2>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a2b4:	e79d      	b.n	800a1f2 <_strtod_l+0x9aa>
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	4b28      	ldr	r3, [pc, #160]	; (800a35c <_strtod_l+0xb14>)
 800a2ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a2be:	4f27      	ldr	r7, [pc, #156]	; (800a35c <_strtod_l+0xb14>)
 800a2c0:	e797      	b.n	800a1f2 <_strtod_l+0x9aa>
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4b29      	ldr	r3, [pc, #164]	; (800a36c <_strtod_l+0xb24>)
 800a2c6:	4645      	mov	r5, r8
 800a2c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a2cc:	e7f7      	b.n	800a2be <_strtod_l+0xa76>
 800a2ce:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800a2d2:	9b05      	ldr	r3, [sp, #20]
 800a2d4:	46ca      	mov	sl, r9
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1bc      	bne.n	800a254 <_strtod_l+0xa0c>
 800a2da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2e0:	0d1b      	lsrs	r3, r3, #20
 800a2e2:	051b      	lsls	r3, r3, #20
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d1b5      	bne.n	800a254 <_strtod_l+0xa0c>
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f6 feba 	bl	8001064 <__aeabi_d2lz>
 800a2f0:	f7f6 f8c4 	bl	800047c <__aeabi_l2d>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	4639      	mov	r1, r7
 800a2fc:	f7f5 ff34 	bl	8000168 <__aeabi_dsub>
 800a300:	460b      	mov	r3, r1
 800a302:	4602      	mov	r2, r0
 800a304:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800a308:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a30e:	ea4a 0a08 	orr.w	sl, sl, r8
 800a312:	ea5a 0a03 	orrs.w	sl, sl, r3
 800a316:	d06c      	beq.n	800a3f2 <_strtod_l+0xbaa>
 800a318:	a309      	add	r3, pc, #36	; (adr r3, 800a340 <_strtod_l+0xaf8>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f6 fb4d 	bl	80009bc <__aeabi_dcmplt>
 800a322:	2800      	cmp	r0, #0
 800a324:	f47f acd8 	bne.w	8009cd8 <_strtod_l+0x490>
 800a328:	a307      	add	r3, pc, #28	; (adr r3, 800a348 <_strtod_l+0xb00>)
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a332:	f7f6 fb61 	bl	80009f8 <__aeabi_dcmpgt>
 800a336:	2800      	cmp	r0, #0
 800a338:	d08c      	beq.n	800a254 <_strtod_l+0xa0c>
 800a33a:	e4cd      	b.n	8009cd8 <_strtod_l+0x490>
 800a33c:	f3af 8000 	nop.w
 800a340:	94a03595 	.word	0x94a03595
 800a344:	3fdfffff 	.word	0x3fdfffff
 800a348:	35afe535 	.word	0x35afe535
 800a34c:	3fe00000 	.word	0x3fe00000
 800a350:	000fffff 	.word	0x000fffff
 800a354:	7ff00000 	.word	0x7ff00000
 800a358:	7fefffff 	.word	0x7fefffff
 800a35c:	3ff00000 	.word	0x3ff00000
 800a360:	3fe00000 	.word	0x3fe00000
 800a364:	7fe00000 	.word	0x7fe00000
 800a368:	7c9fffff 	.word	0x7c9fffff
 800a36c:	bff00000 	.word	0xbff00000
 800a370:	9b05      	ldr	r3, [sp, #20]
 800a372:	b333      	cbz	r3, 800a3c2 <_strtod_l+0xb7a>
 800a374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a376:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a37a:	d822      	bhi.n	800a3c2 <_strtod_l+0xb7a>
 800a37c:	a328      	add	r3, pc, #160	; (adr r3, 800a420 <_strtod_l+0xbd8>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	4628      	mov	r0, r5
 800a384:	4639      	mov	r1, r7
 800a386:	f7f6 fb23 	bl	80009d0 <__aeabi_dcmple>
 800a38a:	b1a0      	cbz	r0, 800a3b6 <_strtod_l+0xb6e>
 800a38c:	4639      	mov	r1, r7
 800a38e:	4628      	mov	r0, r5
 800a390:	f7f6 fb7a 	bl	8000a88 <__aeabi_d2uiz>
 800a394:	2801      	cmp	r0, #1
 800a396:	bf38      	it	cc
 800a398:	2001      	movcc	r0, #1
 800a39a:	f7f6 f823 	bl	80003e4 <__aeabi_ui2d>
 800a39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	460f      	mov	r7, r1
 800a3a4:	bb03      	cbnz	r3, 800a3e8 <_strtod_l+0xba0>
 800a3a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3aa:	9014      	str	r0, [sp, #80]	; 0x50
 800a3ac:	9315      	str	r3, [sp, #84]	; 0x54
 800a3ae:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a3b2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a3b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3ba:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a3be:	1a9b      	subs	r3, r3, r2
 800a3c0:	9311      	str	r3, [sp, #68]	; 0x44
 800a3c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a3c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a3c6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800a3ca:	f7ff f8e9 	bl	80095a0 <__ulp>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	f7f6 f87f 	bl	80004d8 <__aeabi_dmul>
 800a3da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3de:	f7f5 fec5 	bl	800016c <__adddf3>
 800a3e2:	4680      	mov	r8, r0
 800a3e4:	4689      	mov	r9, r1
 800a3e6:	e774      	b.n	800a2d2 <_strtod_l+0xa8a>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a3f0:	e7dd      	b.n	800a3ae <_strtod_l+0xb66>
 800a3f2:	a30d      	add	r3, pc, #52	; (adr r3, 800a428 <_strtod_l+0xbe0>)
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	f7f6 fae0 	bl	80009bc <__aeabi_dcmplt>
 800a3fc:	e79b      	b.n	800a336 <_strtod_l+0xaee>
 800a3fe:	2300      	movs	r3, #0
 800a400:	930e      	str	r3, [sp, #56]	; 0x38
 800a402:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a404:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	f7ff ba5b 	b.w	80098c2 <_strtod_l+0x7a>
 800a40c:	2a65      	cmp	r2, #101	; 0x65
 800a40e:	f43f ab52 	beq.w	8009ab6 <_strtod_l+0x26e>
 800a412:	2a45      	cmp	r2, #69	; 0x45
 800a414:	f43f ab4f 	beq.w	8009ab6 <_strtod_l+0x26e>
 800a418:	2301      	movs	r3, #1
 800a41a:	f7ff bb87 	b.w	8009b2c <_strtod_l+0x2e4>
 800a41e:	bf00      	nop
 800a420:	ffc00000 	.word	0xffc00000
 800a424:	41dfffff 	.word	0x41dfffff
 800a428:	94a03595 	.word	0x94a03595
 800a42c:	3fcfffff 	.word	0x3fcfffff

0800a430 <_strtod_r>:
 800a430:	4b01      	ldr	r3, [pc, #4]	; (800a438 <_strtod_r+0x8>)
 800a432:	f7ff ba09 	b.w	8009848 <_strtod_l>
 800a436:	bf00      	nop
 800a438:	20000080 	.word	0x20000080

0800a43c <_strtol_l.constprop.0>:
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a442:	4686      	mov	lr, r0
 800a444:	4690      	mov	r8, r2
 800a446:	d001      	beq.n	800a44c <_strtol_l.constprop.0+0x10>
 800a448:	2b24      	cmp	r3, #36	; 0x24
 800a44a:	d906      	bls.n	800a45a <_strtol_l.constprop.0+0x1e>
 800a44c:	f7fd fd82 	bl	8007f54 <__errno>
 800a450:	2316      	movs	r3, #22
 800a452:	6003      	str	r3, [r0, #0]
 800a454:	2000      	movs	r0, #0
 800a456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45a:	460d      	mov	r5, r1
 800a45c:	4835      	ldr	r0, [pc, #212]	; (800a534 <_strtol_l.constprop.0+0xf8>)
 800a45e:	462a      	mov	r2, r5
 800a460:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a464:	5d06      	ldrb	r6, [r0, r4]
 800a466:	f016 0608 	ands.w	r6, r6, #8
 800a46a:	d1f8      	bne.n	800a45e <_strtol_l.constprop.0+0x22>
 800a46c:	2c2d      	cmp	r4, #45	; 0x2d
 800a46e:	d12e      	bne.n	800a4ce <_strtol_l.constprop.0+0x92>
 800a470:	2601      	movs	r6, #1
 800a472:	782c      	ldrb	r4, [r5, #0]
 800a474:	1c95      	adds	r5, r2, #2
 800a476:	2b00      	cmp	r3, #0
 800a478:	d057      	beq.n	800a52a <_strtol_l.constprop.0+0xee>
 800a47a:	2b10      	cmp	r3, #16
 800a47c:	d109      	bne.n	800a492 <_strtol_l.constprop.0+0x56>
 800a47e:	2c30      	cmp	r4, #48	; 0x30
 800a480:	d107      	bne.n	800a492 <_strtol_l.constprop.0+0x56>
 800a482:	782a      	ldrb	r2, [r5, #0]
 800a484:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a488:	2a58      	cmp	r2, #88	; 0x58
 800a48a:	d149      	bne.n	800a520 <_strtol_l.constprop.0+0xe4>
 800a48c:	2310      	movs	r3, #16
 800a48e:	786c      	ldrb	r4, [r5, #1]
 800a490:	3502      	adds	r5, #2
 800a492:	2200      	movs	r2, #0
 800a494:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a498:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a49c:	fbbc f9f3 	udiv	r9, ip, r3
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	fb03 ca19 	mls	sl, r3, r9, ip
 800a4a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a4aa:	2f09      	cmp	r7, #9
 800a4ac:	d814      	bhi.n	800a4d8 <_strtol_l.constprop.0+0x9c>
 800a4ae:	463c      	mov	r4, r7
 800a4b0:	42a3      	cmp	r3, r4
 800a4b2:	dd20      	ble.n	800a4f6 <_strtol_l.constprop.0+0xba>
 800a4b4:	1c57      	adds	r7, r2, #1
 800a4b6:	d007      	beq.n	800a4c8 <_strtol_l.constprop.0+0x8c>
 800a4b8:	4581      	cmp	r9, r0
 800a4ba:	d319      	bcc.n	800a4f0 <_strtol_l.constprop.0+0xb4>
 800a4bc:	d101      	bne.n	800a4c2 <_strtol_l.constprop.0+0x86>
 800a4be:	45a2      	cmp	sl, r4
 800a4c0:	db16      	blt.n	800a4f0 <_strtol_l.constprop.0+0xb4>
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	fb00 4003 	mla	r0, r0, r3, r4
 800a4c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4cc:	e7eb      	b.n	800a4a6 <_strtol_l.constprop.0+0x6a>
 800a4ce:	2c2b      	cmp	r4, #43	; 0x2b
 800a4d0:	bf04      	itt	eq
 800a4d2:	782c      	ldrbeq	r4, [r5, #0]
 800a4d4:	1c95      	addeq	r5, r2, #2
 800a4d6:	e7ce      	b.n	800a476 <_strtol_l.constprop.0+0x3a>
 800a4d8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a4dc:	2f19      	cmp	r7, #25
 800a4de:	d801      	bhi.n	800a4e4 <_strtol_l.constprop.0+0xa8>
 800a4e0:	3c37      	subs	r4, #55	; 0x37
 800a4e2:	e7e5      	b.n	800a4b0 <_strtol_l.constprop.0+0x74>
 800a4e4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a4e8:	2f19      	cmp	r7, #25
 800a4ea:	d804      	bhi.n	800a4f6 <_strtol_l.constprop.0+0xba>
 800a4ec:	3c57      	subs	r4, #87	; 0x57
 800a4ee:	e7df      	b.n	800a4b0 <_strtol_l.constprop.0+0x74>
 800a4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f4:	e7e8      	b.n	800a4c8 <_strtol_l.constprop.0+0x8c>
 800a4f6:	1c53      	adds	r3, r2, #1
 800a4f8:	d108      	bne.n	800a50c <_strtol_l.constprop.0+0xd0>
 800a4fa:	2322      	movs	r3, #34	; 0x22
 800a4fc:	4660      	mov	r0, ip
 800a4fe:	f8ce 3000 	str.w	r3, [lr]
 800a502:	f1b8 0f00 	cmp.w	r8, #0
 800a506:	d0a6      	beq.n	800a456 <_strtol_l.constprop.0+0x1a>
 800a508:	1e69      	subs	r1, r5, #1
 800a50a:	e006      	b.n	800a51a <_strtol_l.constprop.0+0xde>
 800a50c:	b106      	cbz	r6, 800a510 <_strtol_l.constprop.0+0xd4>
 800a50e:	4240      	negs	r0, r0
 800a510:	f1b8 0f00 	cmp.w	r8, #0
 800a514:	d09f      	beq.n	800a456 <_strtol_l.constprop.0+0x1a>
 800a516:	2a00      	cmp	r2, #0
 800a518:	d1f6      	bne.n	800a508 <_strtol_l.constprop.0+0xcc>
 800a51a:	f8c8 1000 	str.w	r1, [r8]
 800a51e:	e79a      	b.n	800a456 <_strtol_l.constprop.0+0x1a>
 800a520:	2430      	movs	r4, #48	; 0x30
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1b5      	bne.n	800a492 <_strtol_l.constprop.0+0x56>
 800a526:	2308      	movs	r3, #8
 800a528:	e7b3      	b.n	800a492 <_strtol_l.constprop.0+0x56>
 800a52a:	2c30      	cmp	r4, #48	; 0x30
 800a52c:	d0a9      	beq.n	800a482 <_strtol_l.constprop.0+0x46>
 800a52e:	230a      	movs	r3, #10
 800a530:	e7af      	b.n	800a492 <_strtol_l.constprop.0+0x56>
 800a532:	bf00      	nop
 800a534:	0800c119 	.word	0x0800c119

0800a538 <_strtol_r>:
 800a538:	f7ff bf80 	b.w	800a43c <_strtol_l.constprop.0>

0800a53c <__ssputs_r>:
 800a53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a540:	461f      	mov	r7, r3
 800a542:	688e      	ldr	r6, [r1, #8]
 800a544:	4682      	mov	sl, r0
 800a546:	42be      	cmp	r6, r7
 800a548:	460c      	mov	r4, r1
 800a54a:	4690      	mov	r8, r2
 800a54c:	680b      	ldr	r3, [r1, #0]
 800a54e:	d82c      	bhi.n	800a5aa <__ssputs_r+0x6e>
 800a550:	898a      	ldrh	r2, [r1, #12]
 800a552:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a556:	d026      	beq.n	800a5a6 <__ssputs_r+0x6a>
 800a558:	6965      	ldr	r5, [r4, #20]
 800a55a:	6909      	ldr	r1, [r1, #16]
 800a55c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a560:	eba3 0901 	sub.w	r9, r3, r1
 800a564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a568:	1c7b      	adds	r3, r7, #1
 800a56a:	444b      	add	r3, r9
 800a56c:	106d      	asrs	r5, r5, #1
 800a56e:	429d      	cmp	r5, r3
 800a570:	bf38      	it	cc
 800a572:	461d      	movcc	r5, r3
 800a574:	0553      	lsls	r3, r2, #21
 800a576:	d527      	bpl.n	800a5c8 <__ssputs_r+0x8c>
 800a578:	4629      	mov	r1, r5
 800a57a:	f7fe fc19 	bl	8008db0 <_malloc_r>
 800a57e:	4606      	mov	r6, r0
 800a580:	b360      	cbz	r0, 800a5dc <__ssputs_r+0xa0>
 800a582:	464a      	mov	r2, r9
 800a584:	6921      	ldr	r1, [r4, #16]
 800a586:	f7fd fd20 	bl	8007fca <memcpy>
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a594:	81a3      	strh	r3, [r4, #12]
 800a596:	6126      	str	r6, [r4, #16]
 800a598:	444e      	add	r6, r9
 800a59a:	6026      	str	r6, [r4, #0]
 800a59c:	463e      	mov	r6, r7
 800a59e:	6165      	str	r5, [r4, #20]
 800a5a0:	eba5 0509 	sub.w	r5, r5, r9
 800a5a4:	60a5      	str	r5, [r4, #8]
 800a5a6:	42be      	cmp	r6, r7
 800a5a8:	d900      	bls.n	800a5ac <__ssputs_r+0x70>
 800a5aa:	463e      	mov	r6, r7
 800a5ac:	4632      	mov	r2, r6
 800a5ae:	4641      	mov	r1, r8
 800a5b0:	6820      	ldr	r0, [r4, #0]
 800a5b2:	f7fd fc62 	bl	8007e7a <memmove>
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	68a3      	ldr	r3, [r4, #8]
 800a5ba:	1b9b      	subs	r3, r3, r6
 800a5bc:	60a3      	str	r3, [r4, #8]
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	4433      	add	r3, r6
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	f000 fd7e 	bl	800b0ca <_realloc_r>
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d1e0      	bne.n	800a596 <__ssputs_r+0x5a>
 800a5d4:	4650      	mov	r0, sl
 800a5d6:	6921      	ldr	r1, [r4, #16]
 800a5d8:	f7fe fb7a 	bl	8008cd0 <_free_r>
 800a5dc:	230c      	movs	r3, #12
 800a5de:	f8ca 3000 	str.w	r3, [sl]
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ec:	81a3      	strh	r3, [r4, #12]
 800a5ee:	e7e9      	b.n	800a5c4 <__ssputs_r+0x88>

0800a5f0 <_svfiprintf_r>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	4698      	mov	r8, r3
 800a5f6:	898b      	ldrh	r3, [r1, #12]
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	061b      	lsls	r3, r3, #24
 800a5fc:	460d      	mov	r5, r1
 800a5fe:	4614      	mov	r4, r2
 800a600:	b09d      	sub	sp, #116	; 0x74
 800a602:	d50e      	bpl.n	800a622 <_svfiprintf_r+0x32>
 800a604:	690b      	ldr	r3, [r1, #16]
 800a606:	b963      	cbnz	r3, 800a622 <_svfiprintf_r+0x32>
 800a608:	2140      	movs	r1, #64	; 0x40
 800a60a:	f7fe fbd1 	bl	8008db0 <_malloc_r>
 800a60e:	6028      	str	r0, [r5, #0]
 800a610:	6128      	str	r0, [r5, #16]
 800a612:	b920      	cbnz	r0, 800a61e <_svfiprintf_r+0x2e>
 800a614:	230c      	movs	r3, #12
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	f04f 30ff 	mov.w	r0, #4294967295
 800a61c:	e0d0      	b.n	800a7c0 <_svfiprintf_r+0x1d0>
 800a61e:	2340      	movs	r3, #64	; 0x40
 800a620:	616b      	str	r3, [r5, #20]
 800a622:	2300      	movs	r3, #0
 800a624:	9309      	str	r3, [sp, #36]	; 0x24
 800a626:	2320      	movs	r3, #32
 800a628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a62c:	2330      	movs	r3, #48	; 0x30
 800a62e:	f04f 0901 	mov.w	r9, #1
 800a632:	f8cd 800c 	str.w	r8, [sp, #12]
 800a636:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a7d8 <_svfiprintf_r+0x1e8>
 800a63a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a63e:	4623      	mov	r3, r4
 800a640:	469a      	mov	sl, r3
 800a642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a646:	b10a      	cbz	r2, 800a64c <_svfiprintf_r+0x5c>
 800a648:	2a25      	cmp	r2, #37	; 0x25
 800a64a:	d1f9      	bne.n	800a640 <_svfiprintf_r+0x50>
 800a64c:	ebba 0b04 	subs.w	fp, sl, r4
 800a650:	d00b      	beq.n	800a66a <_svfiprintf_r+0x7a>
 800a652:	465b      	mov	r3, fp
 800a654:	4622      	mov	r2, r4
 800a656:	4629      	mov	r1, r5
 800a658:	4638      	mov	r0, r7
 800a65a:	f7ff ff6f 	bl	800a53c <__ssputs_r>
 800a65e:	3001      	adds	r0, #1
 800a660:	f000 80a9 	beq.w	800a7b6 <_svfiprintf_r+0x1c6>
 800a664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a666:	445a      	add	r2, fp
 800a668:	9209      	str	r2, [sp, #36]	; 0x24
 800a66a:	f89a 3000 	ldrb.w	r3, [sl]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 80a1 	beq.w	800a7b6 <_svfiprintf_r+0x1c6>
 800a674:	2300      	movs	r3, #0
 800a676:	f04f 32ff 	mov.w	r2, #4294967295
 800a67a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a67e:	f10a 0a01 	add.w	sl, sl, #1
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	9307      	str	r3, [sp, #28]
 800a686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a68a:	931a      	str	r3, [sp, #104]	; 0x68
 800a68c:	4654      	mov	r4, sl
 800a68e:	2205      	movs	r2, #5
 800a690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a694:	4850      	ldr	r0, [pc, #320]	; (800a7d8 <_svfiprintf_r+0x1e8>)
 800a696:	f7fd fc8a 	bl	8007fae <memchr>
 800a69a:	9a04      	ldr	r2, [sp, #16]
 800a69c:	b9d8      	cbnz	r0, 800a6d6 <_svfiprintf_r+0xe6>
 800a69e:	06d0      	lsls	r0, r2, #27
 800a6a0:	bf44      	itt	mi
 800a6a2:	2320      	movmi	r3, #32
 800a6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a8:	0711      	lsls	r1, r2, #28
 800a6aa:	bf44      	itt	mi
 800a6ac:	232b      	movmi	r3, #43	; 0x2b
 800a6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b8:	d015      	beq.n	800a6e6 <_svfiprintf_r+0xf6>
 800a6ba:	4654      	mov	r4, sl
 800a6bc:	2000      	movs	r0, #0
 800a6be:	f04f 0c0a 	mov.w	ip, #10
 800a6c2:	9a07      	ldr	r2, [sp, #28]
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ca:	3b30      	subs	r3, #48	; 0x30
 800a6cc:	2b09      	cmp	r3, #9
 800a6ce:	d94d      	bls.n	800a76c <_svfiprintf_r+0x17c>
 800a6d0:	b1b0      	cbz	r0, 800a700 <_svfiprintf_r+0x110>
 800a6d2:	9207      	str	r2, [sp, #28]
 800a6d4:	e014      	b.n	800a700 <_svfiprintf_r+0x110>
 800a6d6:	eba0 0308 	sub.w	r3, r0, r8
 800a6da:	fa09 f303 	lsl.w	r3, r9, r3
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	46a2      	mov	sl, r4
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	e7d2      	b.n	800a68c <_svfiprintf_r+0x9c>
 800a6e6:	9b03      	ldr	r3, [sp, #12]
 800a6e8:	1d19      	adds	r1, r3, #4
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	9103      	str	r1, [sp, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bfbb      	ittet	lt
 800a6f2:	425b      	neglt	r3, r3
 800a6f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f8:	9307      	strge	r3, [sp, #28]
 800a6fa:	9307      	strlt	r3, [sp, #28]
 800a6fc:	bfb8      	it	lt
 800a6fe:	9204      	strlt	r2, [sp, #16]
 800a700:	7823      	ldrb	r3, [r4, #0]
 800a702:	2b2e      	cmp	r3, #46	; 0x2e
 800a704:	d10c      	bne.n	800a720 <_svfiprintf_r+0x130>
 800a706:	7863      	ldrb	r3, [r4, #1]
 800a708:	2b2a      	cmp	r3, #42	; 0x2a
 800a70a:	d134      	bne.n	800a776 <_svfiprintf_r+0x186>
 800a70c:	9b03      	ldr	r3, [sp, #12]
 800a70e:	3402      	adds	r4, #2
 800a710:	1d1a      	adds	r2, r3, #4
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	9203      	str	r2, [sp, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	bfb8      	it	lt
 800a71a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a71e:	9305      	str	r3, [sp, #20]
 800a720:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a7dc <_svfiprintf_r+0x1ec>
 800a724:	2203      	movs	r2, #3
 800a726:	4650      	mov	r0, sl
 800a728:	7821      	ldrb	r1, [r4, #0]
 800a72a:	f7fd fc40 	bl	8007fae <memchr>
 800a72e:	b138      	cbz	r0, 800a740 <_svfiprintf_r+0x150>
 800a730:	2240      	movs	r2, #64	; 0x40
 800a732:	9b04      	ldr	r3, [sp, #16]
 800a734:	eba0 000a 	sub.w	r0, r0, sl
 800a738:	4082      	lsls	r2, r0
 800a73a:	4313      	orrs	r3, r2
 800a73c:	3401      	adds	r4, #1
 800a73e:	9304      	str	r3, [sp, #16]
 800a740:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a744:	2206      	movs	r2, #6
 800a746:	4826      	ldr	r0, [pc, #152]	; (800a7e0 <_svfiprintf_r+0x1f0>)
 800a748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a74c:	f7fd fc2f 	bl	8007fae <memchr>
 800a750:	2800      	cmp	r0, #0
 800a752:	d038      	beq.n	800a7c6 <_svfiprintf_r+0x1d6>
 800a754:	4b23      	ldr	r3, [pc, #140]	; (800a7e4 <_svfiprintf_r+0x1f4>)
 800a756:	bb1b      	cbnz	r3, 800a7a0 <_svfiprintf_r+0x1b0>
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	3307      	adds	r3, #7
 800a75c:	f023 0307 	bic.w	r3, r3, #7
 800a760:	3308      	adds	r3, #8
 800a762:	9303      	str	r3, [sp, #12]
 800a764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a766:	4433      	add	r3, r6
 800a768:	9309      	str	r3, [sp, #36]	; 0x24
 800a76a:	e768      	b.n	800a63e <_svfiprintf_r+0x4e>
 800a76c:	460c      	mov	r4, r1
 800a76e:	2001      	movs	r0, #1
 800a770:	fb0c 3202 	mla	r2, ip, r2, r3
 800a774:	e7a6      	b.n	800a6c4 <_svfiprintf_r+0xd4>
 800a776:	2300      	movs	r3, #0
 800a778:	f04f 0c0a 	mov.w	ip, #10
 800a77c:	4619      	mov	r1, r3
 800a77e:	3401      	adds	r4, #1
 800a780:	9305      	str	r3, [sp, #20]
 800a782:	4620      	mov	r0, r4
 800a784:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a788:	3a30      	subs	r2, #48	; 0x30
 800a78a:	2a09      	cmp	r2, #9
 800a78c:	d903      	bls.n	800a796 <_svfiprintf_r+0x1a6>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0c6      	beq.n	800a720 <_svfiprintf_r+0x130>
 800a792:	9105      	str	r1, [sp, #20]
 800a794:	e7c4      	b.n	800a720 <_svfiprintf_r+0x130>
 800a796:	4604      	mov	r4, r0
 800a798:	2301      	movs	r3, #1
 800a79a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a79e:	e7f0      	b.n	800a782 <_svfiprintf_r+0x192>
 800a7a0:	ab03      	add	r3, sp, #12
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	462a      	mov	r2, r5
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <_svfiprintf_r+0x1f8>)
 800a7aa:	a904      	add	r1, sp, #16
 800a7ac:	f7fc fc70 	bl	8007090 <_printf_float>
 800a7b0:	1c42      	adds	r2, r0, #1
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	d1d6      	bne.n	800a764 <_svfiprintf_r+0x174>
 800a7b6:	89ab      	ldrh	r3, [r5, #12]
 800a7b8:	065b      	lsls	r3, r3, #25
 800a7ba:	f53f af2d 	bmi.w	800a618 <_svfiprintf_r+0x28>
 800a7be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7c0:	b01d      	add	sp, #116	; 0x74
 800a7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c6:	ab03      	add	r3, sp, #12
 800a7c8:	9300      	str	r3, [sp, #0]
 800a7ca:	462a      	mov	r2, r5
 800a7cc:	4638      	mov	r0, r7
 800a7ce:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <_svfiprintf_r+0x1f8>)
 800a7d0:	a904      	add	r1, sp, #16
 800a7d2:	f7fc fefd 	bl	80075d0 <_printf_i>
 800a7d6:	e7eb      	b.n	800a7b0 <_svfiprintf_r+0x1c0>
 800a7d8:	0800c219 	.word	0x0800c219
 800a7dc:	0800c21f 	.word	0x0800c21f
 800a7e0:	0800c223 	.word	0x0800c223
 800a7e4:	08007091 	.word	0x08007091
 800a7e8:	0800a53d 	.word	0x0800a53d

0800a7ec <__sflush_r>:
 800a7ec:	898a      	ldrh	r2, [r1, #12]
 800a7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	0710      	lsls	r0, r2, #28
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	d457      	bmi.n	800a8a8 <__sflush_r+0xbc>
 800a7f8:	684b      	ldr	r3, [r1, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	dc04      	bgt.n	800a808 <__sflush_r+0x1c>
 800a7fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a800:	2b00      	cmp	r3, #0
 800a802:	dc01      	bgt.n	800a808 <__sflush_r+0x1c>
 800a804:	2000      	movs	r0, #0
 800a806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a80a:	2e00      	cmp	r6, #0
 800a80c:	d0fa      	beq.n	800a804 <__sflush_r+0x18>
 800a80e:	2300      	movs	r3, #0
 800a810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a814:	682f      	ldr	r7, [r5, #0]
 800a816:	6a21      	ldr	r1, [r4, #32]
 800a818:	602b      	str	r3, [r5, #0]
 800a81a:	d032      	beq.n	800a882 <__sflush_r+0x96>
 800a81c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	075a      	lsls	r2, r3, #29
 800a822:	d505      	bpl.n	800a830 <__sflush_r+0x44>
 800a824:	6863      	ldr	r3, [r4, #4]
 800a826:	1ac0      	subs	r0, r0, r3
 800a828:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a82a:	b10b      	cbz	r3, 800a830 <__sflush_r+0x44>
 800a82c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a82e:	1ac0      	subs	r0, r0, r3
 800a830:	2300      	movs	r3, #0
 800a832:	4602      	mov	r2, r0
 800a834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a836:	4628      	mov	r0, r5
 800a838:	6a21      	ldr	r1, [r4, #32]
 800a83a:	47b0      	blx	r6
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	d106      	bne.n	800a850 <__sflush_r+0x64>
 800a842:	6829      	ldr	r1, [r5, #0]
 800a844:	291d      	cmp	r1, #29
 800a846:	d82b      	bhi.n	800a8a0 <__sflush_r+0xb4>
 800a848:	4a28      	ldr	r2, [pc, #160]	; (800a8ec <__sflush_r+0x100>)
 800a84a:	410a      	asrs	r2, r1
 800a84c:	07d6      	lsls	r6, r2, #31
 800a84e:	d427      	bmi.n	800a8a0 <__sflush_r+0xb4>
 800a850:	2200      	movs	r2, #0
 800a852:	6062      	str	r2, [r4, #4]
 800a854:	6922      	ldr	r2, [r4, #16]
 800a856:	04d9      	lsls	r1, r3, #19
 800a858:	6022      	str	r2, [r4, #0]
 800a85a:	d504      	bpl.n	800a866 <__sflush_r+0x7a>
 800a85c:	1c42      	adds	r2, r0, #1
 800a85e:	d101      	bne.n	800a864 <__sflush_r+0x78>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	b903      	cbnz	r3, 800a866 <__sflush_r+0x7a>
 800a864:	6560      	str	r0, [r4, #84]	; 0x54
 800a866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a868:	602f      	str	r7, [r5, #0]
 800a86a:	2900      	cmp	r1, #0
 800a86c:	d0ca      	beq.n	800a804 <__sflush_r+0x18>
 800a86e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a872:	4299      	cmp	r1, r3
 800a874:	d002      	beq.n	800a87c <__sflush_r+0x90>
 800a876:	4628      	mov	r0, r5
 800a878:	f7fe fa2a 	bl	8008cd0 <_free_r>
 800a87c:	2000      	movs	r0, #0
 800a87e:	6360      	str	r0, [r4, #52]	; 0x34
 800a880:	e7c1      	b.n	800a806 <__sflush_r+0x1a>
 800a882:	2301      	movs	r3, #1
 800a884:	4628      	mov	r0, r5
 800a886:	47b0      	blx	r6
 800a888:	1c41      	adds	r1, r0, #1
 800a88a:	d1c8      	bne.n	800a81e <__sflush_r+0x32>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0c5      	beq.n	800a81e <__sflush_r+0x32>
 800a892:	2b1d      	cmp	r3, #29
 800a894:	d001      	beq.n	800a89a <__sflush_r+0xae>
 800a896:	2b16      	cmp	r3, #22
 800a898:	d101      	bne.n	800a89e <__sflush_r+0xb2>
 800a89a:	602f      	str	r7, [r5, #0]
 800a89c:	e7b2      	b.n	800a804 <__sflush_r+0x18>
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	e7ae      	b.n	800a806 <__sflush_r+0x1a>
 800a8a8:	690f      	ldr	r7, [r1, #16]
 800a8aa:	2f00      	cmp	r7, #0
 800a8ac:	d0aa      	beq.n	800a804 <__sflush_r+0x18>
 800a8ae:	0793      	lsls	r3, r2, #30
 800a8b0:	bf18      	it	ne
 800a8b2:	2300      	movne	r3, #0
 800a8b4:	680e      	ldr	r6, [r1, #0]
 800a8b6:	bf08      	it	eq
 800a8b8:	694b      	ldreq	r3, [r1, #20]
 800a8ba:	1bf6      	subs	r6, r6, r7
 800a8bc:	600f      	str	r7, [r1, #0]
 800a8be:	608b      	str	r3, [r1, #8]
 800a8c0:	2e00      	cmp	r6, #0
 800a8c2:	dd9f      	ble.n	800a804 <__sflush_r+0x18>
 800a8c4:	4633      	mov	r3, r6
 800a8c6:	463a      	mov	r2, r7
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	6a21      	ldr	r1, [r4, #32]
 800a8cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a8d0:	47e0      	blx	ip
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	dc06      	bgt.n	800a8e4 <__sflush_r+0xf8>
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e0:	81a3      	strh	r3, [r4, #12]
 800a8e2:	e790      	b.n	800a806 <__sflush_r+0x1a>
 800a8e4:	4407      	add	r7, r0
 800a8e6:	1a36      	subs	r6, r6, r0
 800a8e8:	e7ea      	b.n	800a8c0 <__sflush_r+0xd4>
 800a8ea:	bf00      	nop
 800a8ec:	dfbffffe 	.word	0xdfbffffe

0800a8f0 <_fflush_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	690b      	ldr	r3, [r1, #16]
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	b913      	cbnz	r3, 800a900 <_fflush_r+0x10>
 800a8fa:	2500      	movs	r5, #0
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	bd38      	pop	{r3, r4, r5, pc}
 800a900:	b118      	cbz	r0, 800a90a <_fflush_r+0x1a>
 800a902:	6a03      	ldr	r3, [r0, #32]
 800a904:	b90b      	cbnz	r3, 800a90a <_fflush_r+0x1a>
 800a906:	f7fd fa1f 	bl	8007d48 <__sinit>
 800a90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0f3      	beq.n	800a8fa <_fflush_r+0xa>
 800a912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a914:	07d0      	lsls	r0, r2, #31
 800a916:	d404      	bmi.n	800a922 <_fflush_r+0x32>
 800a918:	0599      	lsls	r1, r3, #22
 800a91a:	d402      	bmi.n	800a922 <_fflush_r+0x32>
 800a91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a91e:	f7fd fb44 	bl	8007faa <__retarget_lock_acquire_recursive>
 800a922:	4628      	mov	r0, r5
 800a924:	4621      	mov	r1, r4
 800a926:	f7ff ff61 	bl	800a7ec <__sflush_r>
 800a92a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a92c:	4605      	mov	r5, r0
 800a92e:	07da      	lsls	r2, r3, #31
 800a930:	d4e4      	bmi.n	800a8fc <_fflush_r+0xc>
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	059b      	lsls	r3, r3, #22
 800a936:	d4e1      	bmi.n	800a8fc <_fflush_r+0xc>
 800a938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a93a:	f7fd fb37 	bl	8007fac <__retarget_lock_release_recursive>
 800a93e:	e7dd      	b.n	800a8fc <_fflush_r+0xc>

0800a940 <strncmp>:
 800a940:	b510      	push	{r4, lr}
 800a942:	b16a      	cbz	r2, 800a960 <strncmp+0x20>
 800a944:	3901      	subs	r1, #1
 800a946:	1884      	adds	r4, r0, r2
 800a948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a94c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a950:	429a      	cmp	r2, r3
 800a952:	d103      	bne.n	800a95c <strncmp+0x1c>
 800a954:	42a0      	cmp	r0, r4
 800a956:	d001      	beq.n	800a95c <strncmp+0x1c>
 800a958:	2a00      	cmp	r2, #0
 800a95a:	d1f5      	bne.n	800a948 <strncmp+0x8>
 800a95c:	1ad0      	subs	r0, r2, r3
 800a95e:	bd10      	pop	{r4, pc}
 800a960:	4610      	mov	r0, r2
 800a962:	e7fc      	b.n	800a95e <strncmp+0x1e>

0800a964 <_sbrk_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	2300      	movs	r3, #0
 800a968:	4d05      	ldr	r5, [pc, #20]	; (800a980 <_sbrk_r+0x1c>)
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	602b      	str	r3, [r5, #0]
 800a970:	f7f7 fc38 	bl	80021e4 <_sbrk>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_sbrk_r+0x1a>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_sbrk_r+0x1a>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20000938 	.word	0x20000938

0800a984 <nan>:
 800a984:	2000      	movs	r0, #0
 800a986:	4901      	ldr	r1, [pc, #4]	; (800a98c <nan+0x8>)
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	7ff80000 	.word	0x7ff80000

0800a990 <__assert_func>:
 800a990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a992:	4614      	mov	r4, r2
 800a994:	461a      	mov	r2, r3
 800a996:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <__assert_func+0x2c>)
 800a998:	4605      	mov	r5, r0
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68d8      	ldr	r0, [r3, #12]
 800a99e:	b14c      	cbz	r4, 800a9b4 <__assert_func+0x24>
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <__assert_func+0x30>)
 800a9a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9a6:	9100      	str	r1, [sp, #0]
 800a9a8:	462b      	mov	r3, r5
 800a9aa:	4906      	ldr	r1, [pc, #24]	; (800a9c4 <__assert_func+0x34>)
 800a9ac:	f000 fbca 	bl	800b144 <fiprintf>
 800a9b0:	f000 fbda 	bl	800b168 <abort>
 800a9b4:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <__assert_func+0x38>)
 800a9b6:	461c      	mov	r4, r3
 800a9b8:	e7f3      	b.n	800a9a2 <__assert_func+0x12>
 800a9ba:	bf00      	nop
 800a9bc:	2000007c 	.word	0x2000007c
 800a9c0:	0800c232 	.word	0x0800c232
 800a9c4:	0800c23f 	.word	0x0800c23f
 800a9c8:	0800c26d 	.word	0x0800c26d

0800a9cc <_calloc_r>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	fba1 5402 	umull	r5, r4, r1, r2
 800a9d2:	b934      	cbnz	r4, 800a9e2 <_calloc_r+0x16>
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	f7fe f9eb 	bl	8008db0 <_malloc_r>
 800a9da:	4606      	mov	r6, r0
 800a9dc:	b928      	cbnz	r0, 800a9ea <_calloc_r+0x1e>
 800a9de:	4630      	mov	r0, r6
 800a9e0:	bd70      	pop	{r4, r5, r6, pc}
 800a9e2:	220c      	movs	r2, #12
 800a9e4:	2600      	movs	r6, #0
 800a9e6:	6002      	str	r2, [r0, #0]
 800a9e8:	e7f9      	b.n	800a9de <_calloc_r+0x12>
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	f7fd fa5e 	bl	8007eae <memset>
 800a9f2:	e7f4      	b.n	800a9de <_calloc_r+0x12>

0800a9f4 <rshift>:
 800a9f4:	6903      	ldr	r3, [r0, #16]
 800a9f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9fe:	f100 0414 	add.w	r4, r0, #20
 800aa02:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa06:	dd46      	ble.n	800aa96 <rshift+0xa2>
 800aa08:	f011 011f 	ands.w	r1, r1, #31
 800aa0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa14:	d10c      	bne.n	800aa30 <rshift+0x3c>
 800aa16:	4629      	mov	r1, r5
 800aa18:	f100 0710 	add.w	r7, r0, #16
 800aa1c:	42b1      	cmp	r1, r6
 800aa1e:	d335      	bcc.n	800aa8c <rshift+0x98>
 800aa20:	1a9b      	subs	r3, r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	1eea      	subs	r2, r5, #3
 800aa26:	4296      	cmp	r6, r2
 800aa28:	bf38      	it	cc
 800aa2a:	2300      	movcc	r3, #0
 800aa2c:	4423      	add	r3, r4
 800aa2e:	e015      	b.n	800aa5c <rshift+0x68>
 800aa30:	46a1      	mov	r9, r4
 800aa32:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa36:	f1c1 0820 	rsb	r8, r1, #32
 800aa3a:	40cf      	lsrs	r7, r1
 800aa3c:	f105 0e04 	add.w	lr, r5, #4
 800aa40:	4576      	cmp	r6, lr
 800aa42:	46f4      	mov	ip, lr
 800aa44:	d816      	bhi.n	800aa74 <rshift+0x80>
 800aa46:	1a9a      	subs	r2, r3, r2
 800aa48:	0092      	lsls	r2, r2, #2
 800aa4a:	3a04      	subs	r2, #4
 800aa4c:	3501      	adds	r5, #1
 800aa4e:	42ae      	cmp	r6, r5
 800aa50:	bf38      	it	cc
 800aa52:	2200      	movcc	r2, #0
 800aa54:	18a3      	adds	r3, r4, r2
 800aa56:	50a7      	str	r7, [r4, r2]
 800aa58:	b107      	cbz	r7, 800aa5c <rshift+0x68>
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	eba3 0204 	sub.w	r2, r3, r4
 800aa62:	bf08      	it	eq
 800aa64:	2300      	moveq	r3, #0
 800aa66:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa6a:	6102      	str	r2, [r0, #16]
 800aa6c:	bf08      	it	eq
 800aa6e:	6143      	streq	r3, [r0, #20]
 800aa70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa74:	f8dc c000 	ldr.w	ip, [ip]
 800aa78:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa7c:	ea4c 0707 	orr.w	r7, ip, r7
 800aa80:	f849 7b04 	str.w	r7, [r9], #4
 800aa84:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa88:	40cf      	lsrs	r7, r1
 800aa8a:	e7d9      	b.n	800aa40 <rshift+0x4c>
 800aa8c:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa90:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa94:	e7c2      	b.n	800aa1c <rshift+0x28>
 800aa96:	4623      	mov	r3, r4
 800aa98:	e7e0      	b.n	800aa5c <rshift+0x68>

0800aa9a <__hexdig_fun>:
 800aa9a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa9e:	2b09      	cmp	r3, #9
 800aaa0:	d802      	bhi.n	800aaa8 <__hexdig_fun+0xe>
 800aaa2:	3820      	subs	r0, #32
 800aaa4:	b2c0      	uxtb	r0, r0
 800aaa6:	4770      	bx	lr
 800aaa8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aaac:	2b05      	cmp	r3, #5
 800aaae:	d801      	bhi.n	800aab4 <__hexdig_fun+0x1a>
 800aab0:	3847      	subs	r0, #71	; 0x47
 800aab2:	e7f7      	b.n	800aaa4 <__hexdig_fun+0xa>
 800aab4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aab8:	2b05      	cmp	r3, #5
 800aaba:	d801      	bhi.n	800aac0 <__hexdig_fun+0x26>
 800aabc:	3827      	subs	r0, #39	; 0x27
 800aabe:	e7f1      	b.n	800aaa4 <__hexdig_fun+0xa>
 800aac0:	2000      	movs	r0, #0
 800aac2:	4770      	bx	lr

0800aac4 <__gethex>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	4681      	mov	r9, r0
 800aaca:	468a      	mov	sl, r1
 800aacc:	4617      	mov	r7, r2
 800aace:	680a      	ldr	r2, [r1, #0]
 800aad0:	b085      	sub	sp, #20
 800aad2:	f102 0b02 	add.w	fp, r2, #2
 800aad6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aada:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aade:	9302      	str	r3, [sp, #8]
 800aae0:	32fe      	adds	r2, #254	; 0xfe
 800aae2:	eb02 030b 	add.w	r3, r2, fp
 800aae6:	46d8      	mov	r8, fp
 800aae8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	2830      	cmp	r0, #48	; 0x30
 800aaf0:	d0f7      	beq.n	800aae2 <__gethex+0x1e>
 800aaf2:	f7ff ffd2 	bl	800aa9a <__hexdig_fun>
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d138      	bne.n	800ab6e <__gethex+0xaa>
 800aafc:	2201      	movs	r2, #1
 800aafe:	4640      	mov	r0, r8
 800ab00:	49a7      	ldr	r1, [pc, #668]	; (800ada0 <__gethex+0x2dc>)
 800ab02:	f7ff ff1d 	bl	800a940 <strncmp>
 800ab06:	4606      	mov	r6, r0
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d169      	bne.n	800abe0 <__gethex+0x11c>
 800ab0c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ab10:	465d      	mov	r5, fp
 800ab12:	f7ff ffc2 	bl	800aa9a <__hexdig_fun>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d064      	beq.n	800abe4 <__gethex+0x120>
 800ab1a:	465a      	mov	r2, fp
 800ab1c:	7810      	ldrb	r0, [r2, #0]
 800ab1e:	4690      	mov	r8, r2
 800ab20:	2830      	cmp	r0, #48	; 0x30
 800ab22:	f102 0201 	add.w	r2, r2, #1
 800ab26:	d0f9      	beq.n	800ab1c <__gethex+0x58>
 800ab28:	f7ff ffb7 	bl	800aa9a <__hexdig_fun>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	fab0 f480 	clz	r4, r0
 800ab32:	465e      	mov	r6, fp
 800ab34:	0964      	lsrs	r4, r4, #5
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	4642      	mov	r2, r8
 800ab3a:	4615      	mov	r5, r2
 800ab3c:	7828      	ldrb	r0, [r5, #0]
 800ab3e:	3201      	adds	r2, #1
 800ab40:	f7ff ffab 	bl	800aa9a <__hexdig_fun>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d1f8      	bne.n	800ab3a <__gethex+0x76>
 800ab48:	2201      	movs	r2, #1
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	4994      	ldr	r1, [pc, #592]	; (800ada0 <__gethex+0x2dc>)
 800ab4e:	f7ff fef7 	bl	800a940 <strncmp>
 800ab52:	b978      	cbnz	r0, 800ab74 <__gethex+0xb0>
 800ab54:	b946      	cbnz	r6, 800ab68 <__gethex+0xa4>
 800ab56:	1c6e      	adds	r6, r5, #1
 800ab58:	4632      	mov	r2, r6
 800ab5a:	4615      	mov	r5, r2
 800ab5c:	7828      	ldrb	r0, [r5, #0]
 800ab5e:	3201      	adds	r2, #1
 800ab60:	f7ff ff9b 	bl	800aa9a <__hexdig_fun>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d1f8      	bne.n	800ab5a <__gethex+0x96>
 800ab68:	1b73      	subs	r3, r6, r5
 800ab6a:	009e      	lsls	r6, r3, #2
 800ab6c:	e004      	b.n	800ab78 <__gethex+0xb4>
 800ab6e:	2400      	movs	r4, #0
 800ab70:	4626      	mov	r6, r4
 800ab72:	e7e1      	b.n	800ab38 <__gethex+0x74>
 800ab74:	2e00      	cmp	r6, #0
 800ab76:	d1f7      	bne.n	800ab68 <__gethex+0xa4>
 800ab78:	782b      	ldrb	r3, [r5, #0]
 800ab7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab7e:	2b50      	cmp	r3, #80	; 0x50
 800ab80:	d13d      	bne.n	800abfe <__gethex+0x13a>
 800ab82:	786b      	ldrb	r3, [r5, #1]
 800ab84:	2b2b      	cmp	r3, #43	; 0x2b
 800ab86:	d02f      	beq.n	800abe8 <__gethex+0x124>
 800ab88:	2b2d      	cmp	r3, #45	; 0x2d
 800ab8a:	d031      	beq.n	800abf0 <__gethex+0x12c>
 800ab8c:	f04f 0b00 	mov.w	fp, #0
 800ab90:	1c69      	adds	r1, r5, #1
 800ab92:	7808      	ldrb	r0, [r1, #0]
 800ab94:	f7ff ff81 	bl	800aa9a <__hexdig_fun>
 800ab98:	1e42      	subs	r2, r0, #1
 800ab9a:	b2d2      	uxtb	r2, r2
 800ab9c:	2a18      	cmp	r2, #24
 800ab9e:	d82e      	bhi.n	800abfe <__gethex+0x13a>
 800aba0:	f1a0 0210 	sub.w	r2, r0, #16
 800aba4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aba8:	f7ff ff77 	bl	800aa9a <__hexdig_fun>
 800abac:	f100 3cff 	add.w	ip, r0, #4294967295
 800abb0:	fa5f fc8c 	uxtb.w	ip, ip
 800abb4:	f1bc 0f18 	cmp.w	ip, #24
 800abb8:	d91d      	bls.n	800abf6 <__gethex+0x132>
 800abba:	f1bb 0f00 	cmp.w	fp, #0
 800abbe:	d000      	beq.n	800abc2 <__gethex+0xfe>
 800abc0:	4252      	negs	r2, r2
 800abc2:	4416      	add	r6, r2
 800abc4:	f8ca 1000 	str.w	r1, [sl]
 800abc8:	b1dc      	cbz	r4, 800ac02 <__gethex+0x13e>
 800abca:	9b01      	ldr	r3, [sp, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	bf14      	ite	ne
 800abd0:	f04f 0800 	movne.w	r8, #0
 800abd4:	f04f 0806 	moveq.w	r8, #6
 800abd8:	4640      	mov	r0, r8
 800abda:	b005      	add	sp, #20
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe0:	4645      	mov	r5, r8
 800abe2:	4626      	mov	r6, r4
 800abe4:	2401      	movs	r4, #1
 800abe6:	e7c7      	b.n	800ab78 <__gethex+0xb4>
 800abe8:	f04f 0b00 	mov.w	fp, #0
 800abec:	1ca9      	adds	r1, r5, #2
 800abee:	e7d0      	b.n	800ab92 <__gethex+0xce>
 800abf0:	f04f 0b01 	mov.w	fp, #1
 800abf4:	e7fa      	b.n	800abec <__gethex+0x128>
 800abf6:	230a      	movs	r3, #10
 800abf8:	fb03 0002 	mla	r0, r3, r2, r0
 800abfc:	e7d0      	b.n	800aba0 <__gethex+0xdc>
 800abfe:	4629      	mov	r1, r5
 800ac00:	e7e0      	b.n	800abc4 <__gethex+0x100>
 800ac02:	4621      	mov	r1, r4
 800ac04:	eba5 0308 	sub.w	r3, r5, r8
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	2b07      	cmp	r3, #7
 800ac0c:	dc0a      	bgt.n	800ac24 <__gethex+0x160>
 800ac0e:	4648      	mov	r0, r9
 800ac10:	f7fe f95a 	bl	8008ec8 <_Balloc>
 800ac14:	4604      	mov	r4, r0
 800ac16:	b940      	cbnz	r0, 800ac2a <__gethex+0x166>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	21e4      	movs	r1, #228	; 0xe4
 800ac1c:	4b61      	ldr	r3, [pc, #388]	; (800ada4 <__gethex+0x2e0>)
 800ac1e:	4862      	ldr	r0, [pc, #392]	; (800ada8 <__gethex+0x2e4>)
 800ac20:	f7ff feb6 	bl	800a990 <__assert_func>
 800ac24:	3101      	adds	r1, #1
 800ac26:	105b      	asrs	r3, r3, #1
 800ac28:	e7ef      	b.n	800ac0a <__gethex+0x146>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	469b      	mov	fp, r3
 800ac2e:	f100 0a14 	add.w	sl, r0, #20
 800ac32:	f8cd a004 	str.w	sl, [sp, #4]
 800ac36:	45a8      	cmp	r8, r5
 800ac38:	d344      	bcc.n	800acc4 <__gethex+0x200>
 800ac3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac3e:	4658      	mov	r0, fp
 800ac40:	f848 bb04 	str.w	fp, [r8], #4
 800ac44:	eba8 080a 	sub.w	r8, r8, sl
 800ac48:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800ac4c:	6122      	str	r2, [r4, #16]
 800ac4e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800ac52:	f7fe fa2b 	bl	80090ac <__hi0bits>
 800ac56:	683d      	ldr	r5, [r7, #0]
 800ac58:	eba8 0800 	sub.w	r8, r8, r0
 800ac5c:	45a8      	cmp	r8, r5
 800ac5e:	dd59      	ble.n	800ad14 <__gethex+0x250>
 800ac60:	eba8 0805 	sub.w	r8, r8, r5
 800ac64:	4641      	mov	r1, r8
 800ac66:	4620      	mov	r0, r4
 800ac68:	f7fe fda9 	bl	80097be <__any_on>
 800ac6c:	4683      	mov	fp, r0
 800ac6e:	b1b8      	cbz	r0, 800aca0 <__gethex+0x1dc>
 800ac70:	f04f 0b01 	mov.w	fp, #1
 800ac74:	f108 33ff 	add.w	r3, r8, #4294967295
 800ac78:	1159      	asrs	r1, r3, #5
 800ac7a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac7e:	f003 021f 	and.w	r2, r3, #31
 800ac82:	fa0b f202 	lsl.w	r2, fp, r2
 800ac86:	420a      	tst	r2, r1
 800ac88:	d00a      	beq.n	800aca0 <__gethex+0x1dc>
 800ac8a:	455b      	cmp	r3, fp
 800ac8c:	dd06      	ble.n	800ac9c <__gethex+0x1d8>
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f1a8 0102 	sub.w	r1, r8, #2
 800ac94:	f7fe fd93 	bl	80097be <__any_on>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d138      	bne.n	800ad0e <__gethex+0x24a>
 800ac9c:	f04f 0b02 	mov.w	fp, #2
 800aca0:	4641      	mov	r1, r8
 800aca2:	4620      	mov	r0, r4
 800aca4:	f7ff fea6 	bl	800a9f4 <rshift>
 800aca8:	4446      	add	r6, r8
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	42b3      	cmp	r3, r6
 800acae:	da41      	bge.n	800ad34 <__gethex+0x270>
 800acb0:	4621      	mov	r1, r4
 800acb2:	4648      	mov	r0, r9
 800acb4:	f7fe f948 	bl	8008f48 <_Bfree>
 800acb8:	2300      	movs	r3, #0
 800acba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acbc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	e789      	b.n	800abd8 <__gethex+0x114>
 800acc4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800acc8:	2a2e      	cmp	r2, #46	; 0x2e
 800acca:	d014      	beq.n	800acf6 <__gethex+0x232>
 800accc:	2b20      	cmp	r3, #32
 800acce:	d106      	bne.n	800acde <__gethex+0x21a>
 800acd0:	9b01      	ldr	r3, [sp, #4]
 800acd2:	f843 bb04 	str.w	fp, [r3], #4
 800acd6:	f04f 0b00 	mov.w	fp, #0
 800acda:	9301      	str	r3, [sp, #4]
 800acdc:	465b      	mov	r3, fp
 800acde:	7828      	ldrb	r0, [r5, #0]
 800ace0:	9303      	str	r3, [sp, #12]
 800ace2:	f7ff feda 	bl	800aa9a <__hexdig_fun>
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	f000 000f 	and.w	r0, r0, #15
 800acec:	4098      	lsls	r0, r3
 800acee:	ea4b 0b00 	orr.w	fp, fp, r0
 800acf2:	3304      	adds	r3, #4
 800acf4:	e79f      	b.n	800ac36 <__gethex+0x172>
 800acf6:	45a8      	cmp	r8, r5
 800acf8:	d8e8      	bhi.n	800accc <__gethex+0x208>
 800acfa:	2201      	movs	r2, #1
 800acfc:	4628      	mov	r0, r5
 800acfe:	4928      	ldr	r1, [pc, #160]	; (800ada0 <__gethex+0x2dc>)
 800ad00:	9303      	str	r3, [sp, #12]
 800ad02:	f7ff fe1d 	bl	800a940 <strncmp>
 800ad06:	9b03      	ldr	r3, [sp, #12]
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d1df      	bne.n	800accc <__gethex+0x208>
 800ad0c:	e793      	b.n	800ac36 <__gethex+0x172>
 800ad0e:	f04f 0b03 	mov.w	fp, #3
 800ad12:	e7c5      	b.n	800aca0 <__gethex+0x1dc>
 800ad14:	da0b      	bge.n	800ad2e <__gethex+0x26a>
 800ad16:	eba5 0808 	sub.w	r8, r5, r8
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4642      	mov	r2, r8
 800ad1e:	4648      	mov	r0, r9
 800ad20:	f7fe fb2a 	bl	8009378 <__lshift>
 800ad24:	4604      	mov	r4, r0
 800ad26:	eba6 0608 	sub.w	r6, r6, r8
 800ad2a:	f100 0a14 	add.w	sl, r0, #20
 800ad2e:	f04f 0b00 	mov.w	fp, #0
 800ad32:	e7ba      	b.n	800acaa <__gethex+0x1e6>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	42b3      	cmp	r3, r6
 800ad38:	dd74      	ble.n	800ae24 <__gethex+0x360>
 800ad3a:	1b9e      	subs	r6, r3, r6
 800ad3c:	42b5      	cmp	r5, r6
 800ad3e:	dc35      	bgt.n	800adac <__gethex+0x2e8>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d023      	beq.n	800ad8e <__gethex+0x2ca>
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	d025      	beq.n	800ad96 <__gethex+0x2d2>
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d115      	bne.n	800ad7a <__gethex+0x2b6>
 800ad4e:	42b5      	cmp	r5, r6
 800ad50:	d113      	bne.n	800ad7a <__gethex+0x2b6>
 800ad52:	2d01      	cmp	r5, #1
 800ad54:	d10b      	bne.n	800ad6e <__gethex+0x2aa>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	9a02      	ldr	r2, [sp, #8]
 800ad5a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	2301      	movs	r3, #1
 800ad62:	6123      	str	r3, [r4, #16]
 800ad64:	f8ca 3000 	str.w	r3, [sl]
 800ad68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad6a:	601c      	str	r4, [r3, #0]
 800ad6c:	e734      	b.n	800abd8 <__gethex+0x114>
 800ad6e:	4620      	mov	r0, r4
 800ad70:	1e69      	subs	r1, r5, #1
 800ad72:	f7fe fd24 	bl	80097be <__any_on>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d1ed      	bne.n	800ad56 <__gethex+0x292>
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	4648      	mov	r0, r9
 800ad7e:	f7fe f8e3 	bl	8008f48 <_Bfree>
 800ad82:	2300      	movs	r3, #0
 800ad84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad86:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	e724      	b.n	800abd8 <__gethex+0x114>
 800ad8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1f2      	bne.n	800ad7a <__gethex+0x2b6>
 800ad94:	e7df      	b.n	800ad56 <__gethex+0x292>
 800ad96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1dc      	bne.n	800ad56 <__gethex+0x292>
 800ad9c:	e7ed      	b.n	800ad7a <__gethex+0x2b6>
 800ad9e:	bf00      	nop
 800ada0:	0800c0c4 	.word	0x0800c0c4
 800ada4:	0800bf57 	.word	0x0800bf57
 800ada8:	0800c26e 	.word	0x0800c26e
 800adac:	f106 38ff 	add.w	r8, r6, #4294967295
 800adb0:	f1bb 0f00 	cmp.w	fp, #0
 800adb4:	d133      	bne.n	800ae1e <__gethex+0x35a>
 800adb6:	f1b8 0f00 	cmp.w	r8, #0
 800adba:	d004      	beq.n	800adc6 <__gethex+0x302>
 800adbc:	4641      	mov	r1, r8
 800adbe:	4620      	mov	r0, r4
 800adc0:	f7fe fcfd 	bl	80097be <__any_on>
 800adc4:	4683      	mov	fp, r0
 800adc6:	2301      	movs	r3, #1
 800adc8:	ea4f 1268 	mov.w	r2, r8, asr #5
 800adcc:	f008 081f 	and.w	r8, r8, #31
 800add0:	fa03 f308 	lsl.w	r3, r3, r8
 800add4:	f04f 0802 	mov.w	r8, #2
 800add8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800addc:	4631      	mov	r1, r6
 800adde:	4213      	tst	r3, r2
 800ade0:	4620      	mov	r0, r4
 800ade2:	bf18      	it	ne
 800ade4:	f04b 0b02 	orrne.w	fp, fp, #2
 800ade8:	1bad      	subs	r5, r5, r6
 800adea:	f7ff fe03 	bl	800a9f4 <rshift>
 800adee:	687e      	ldr	r6, [r7, #4]
 800adf0:	f1bb 0f00 	cmp.w	fp, #0
 800adf4:	d04a      	beq.n	800ae8c <__gethex+0x3c8>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d016      	beq.n	800ae2a <__gethex+0x366>
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d018      	beq.n	800ae32 <__gethex+0x36e>
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d109      	bne.n	800ae18 <__gethex+0x354>
 800ae04:	f01b 0f02 	tst.w	fp, #2
 800ae08:	d006      	beq.n	800ae18 <__gethex+0x354>
 800ae0a:	f8da 3000 	ldr.w	r3, [sl]
 800ae0e:	ea4b 0b03 	orr.w	fp, fp, r3
 800ae12:	f01b 0f01 	tst.w	fp, #1
 800ae16:	d10f      	bne.n	800ae38 <__gethex+0x374>
 800ae18:	f048 0810 	orr.w	r8, r8, #16
 800ae1c:	e036      	b.n	800ae8c <__gethex+0x3c8>
 800ae1e:	f04f 0b01 	mov.w	fp, #1
 800ae22:	e7d0      	b.n	800adc6 <__gethex+0x302>
 800ae24:	f04f 0801 	mov.w	r8, #1
 800ae28:	e7e2      	b.n	800adf0 <__gethex+0x32c>
 800ae2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae2c:	f1c3 0301 	rsb	r3, r3, #1
 800ae30:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d0ef      	beq.n	800ae18 <__gethex+0x354>
 800ae38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae3c:	f104 0214 	add.w	r2, r4, #20
 800ae40:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ae44:	9301      	str	r3, [sp, #4]
 800ae46:	2300      	movs	r3, #0
 800ae48:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ae4c:	4694      	mov	ip, r2
 800ae4e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ae52:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ae56:	d01e      	beq.n	800ae96 <__gethex+0x3d2>
 800ae58:	3101      	adds	r1, #1
 800ae5a:	f8cc 1000 	str.w	r1, [ip]
 800ae5e:	f1b8 0f02 	cmp.w	r8, #2
 800ae62:	f104 0214 	add.w	r2, r4, #20
 800ae66:	d13d      	bne.n	800aee4 <__gethex+0x420>
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	42ab      	cmp	r3, r5
 800ae6e:	d10b      	bne.n	800ae88 <__gethex+0x3c4>
 800ae70:	2301      	movs	r3, #1
 800ae72:	1169      	asrs	r1, r5, #5
 800ae74:	f005 051f 	and.w	r5, r5, #31
 800ae78:	fa03 f505 	lsl.w	r5, r3, r5
 800ae7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae80:	421d      	tst	r5, r3
 800ae82:	bf18      	it	ne
 800ae84:	f04f 0801 	movne.w	r8, #1
 800ae88:	f048 0820 	orr.w	r8, r8, #32
 800ae8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae8e:	601c      	str	r4, [r3, #0]
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	601e      	str	r6, [r3, #0]
 800ae94:	e6a0      	b.n	800abd8 <__gethex+0x114>
 800ae96:	4290      	cmp	r0, r2
 800ae98:	f842 3c04 	str.w	r3, [r2, #-4]
 800ae9c:	d8d6      	bhi.n	800ae4c <__gethex+0x388>
 800ae9e:	68a2      	ldr	r2, [r4, #8]
 800aea0:	4593      	cmp	fp, r2
 800aea2:	db17      	blt.n	800aed4 <__gethex+0x410>
 800aea4:	6861      	ldr	r1, [r4, #4]
 800aea6:	4648      	mov	r0, r9
 800aea8:	3101      	adds	r1, #1
 800aeaa:	f7fe f80d 	bl	8008ec8 <_Balloc>
 800aeae:	4682      	mov	sl, r0
 800aeb0:	b918      	cbnz	r0, 800aeba <__gethex+0x3f6>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	2184      	movs	r1, #132	; 0x84
 800aeb6:	4b1a      	ldr	r3, [pc, #104]	; (800af20 <__gethex+0x45c>)
 800aeb8:	e6b1      	b.n	800ac1e <__gethex+0x15a>
 800aeba:	6922      	ldr	r2, [r4, #16]
 800aebc:	f104 010c 	add.w	r1, r4, #12
 800aec0:	3202      	adds	r2, #2
 800aec2:	0092      	lsls	r2, r2, #2
 800aec4:	300c      	adds	r0, #12
 800aec6:	f7fd f880 	bl	8007fca <memcpy>
 800aeca:	4621      	mov	r1, r4
 800aecc:	4648      	mov	r0, r9
 800aece:	f7fe f83b 	bl	8008f48 <_Bfree>
 800aed2:	4654      	mov	r4, sl
 800aed4:	6922      	ldr	r2, [r4, #16]
 800aed6:	1c51      	adds	r1, r2, #1
 800aed8:	6121      	str	r1, [r4, #16]
 800aeda:	2101      	movs	r1, #1
 800aedc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aee0:	6151      	str	r1, [r2, #20]
 800aee2:	e7bc      	b.n	800ae5e <__gethex+0x39a>
 800aee4:	6921      	ldr	r1, [r4, #16]
 800aee6:	4559      	cmp	r1, fp
 800aee8:	dd0b      	ble.n	800af02 <__gethex+0x43e>
 800aeea:	2101      	movs	r1, #1
 800aeec:	4620      	mov	r0, r4
 800aeee:	f7ff fd81 	bl	800a9f4 <rshift>
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	3601      	adds	r6, #1
 800aef6:	42b3      	cmp	r3, r6
 800aef8:	f6ff aeda 	blt.w	800acb0 <__gethex+0x1ec>
 800aefc:	f04f 0801 	mov.w	r8, #1
 800af00:	e7c2      	b.n	800ae88 <__gethex+0x3c4>
 800af02:	f015 051f 	ands.w	r5, r5, #31
 800af06:	d0f9      	beq.n	800aefc <__gethex+0x438>
 800af08:	9b01      	ldr	r3, [sp, #4]
 800af0a:	f1c5 0520 	rsb	r5, r5, #32
 800af0e:	441a      	add	r2, r3
 800af10:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800af14:	f7fe f8ca 	bl	80090ac <__hi0bits>
 800af18:	42a8      	cmp	r0, r5
 800af1a:	dbe6      	blt.n	800aeea <__gethex+0x426>
 800af1c:	e7ee      	b.n	800aefc <__gethex+0x438>
 800af1e:	bf00      	nop
 800af20:	0800bf57 	.word	0x0800bf57

0800af24 <L_shift>:
 800af24:	f1c2 0208 	rsb	r2, r2, #8
 800af28:	0092      	lsls	r2, r2, #2
 800af2a:	b570      	push	{r4, r5, r6, lr}
 800af2c:	f1c2 0620 	rsb	r6, r2, #32
 800af30:	6843      	ldr	r3, [r0, #4]
 800af32:	6804      	ldr	r4, [r0, #0]
 800af34:	fa03 f506 	lsl.w	r5, r3, r6
 800af38:	432c      	orrs	r4, r5
 800af3a:	40d3      	lsrs	r3, r2
 800af3c:	6004      	str	r4, [r0, #0]
 800af3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800af42:	4288      	cmp	r0, r1
 800af44:	d3f4      	bcc.n	800af30 <L_shift+0xc>
 800af46:	bd70      	pop	{r4, r5, r6, pc}

0800af48 <__match>:
 800af48:	b530      	push	{r4, r5, lr}
 800af4a:	6803      	ldr	r3, [r0, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af52:	b914      	cbnz	r4, 800af5a <__match+0x12>
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	2001      	movs	r0, #1
 800af58:	bd30      	pop	{r4, r5, pc}
 800af5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af62:	2d19      	cmp	r5, #25
 800af64:	bf98      	it	ls
 800af66:	3220      	addls	r2, #32
 800af68:	42a2      	cmp	r2, r4
 800af6a:	d0f0      	beq.n	800af4e <__match+0x6>
 800af6c:	2000      	movs	r0, #0
 800af6e:	e7f3      	b.n	800af58 <__match+0x10>

0800af70 <__hexnan>:
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	2500      	movs	r5, #0
 800af76:	680b      	ldr	r3, [r1, #0]
 800af78:	4682      	mov	sl, r0
 800af7a:	115e      	asrs	r6, r3, #5
 800af7c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af80:	f013 031f 	ands.w	r3, r3, #31
 800af84:	bf18      	it	ne
 800af86:	3604      	addne	r6, #4
 800af88:	1f37      	subs	r7, r6, #4
 800af8a:	4690      	mov	r8, r2
 800af8c:	46b9      	mov	r9, r7
 800af8e:	463c      	mov	r4, r7
 800af90:	46ab      	mov	fp, r5
 800af92:	b087      	sub	sp, #28
 800af94:	6801      	ldr	r1, [r0, #0]
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	f846 5c04 	str.w	r5, [r6, #-4]
 800af9c:	9502      	str	r5, [sp, #8]
 800af9e:	784a      	ldrb	r2, [r1, #1]
 800afa0:	1c4b      	adds	r3, r1, #1
 800afa2:	9303      	str	r3, [sp, #12]
 800afa4:	b342      	cbz	r2, 800aff8 <__hexnan+0x88>
 800afa6:	4610      	mov	r0, r2
 800afa8:	9105      	str	r1, [sp, #20]
 800afaa:	9204      	str	r2, [sp, #16]
 800afac:	f7ff fd75 	bl	800aa9a <__hexdig_fun>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d14f      	bne.n	800b054 <__hexnan+0xe4>
 800afb4:	9a04      	ldr	r2, [sp, #16]
 800afb6:	9905      	ldr	r1, [sp, #20]
 800afb8:	2a20      	cmp	r2, #32
 800afba:	d818      	bhi.n	800afee <__hexnan+0x7e>
 800afbc:	9b02      	ldr	r3, [sp, #8]
 800afbe:	459b      	cmp	fp, r3
 800afc0:	dd13      	ble.n	800afea <__hexnan+0x7a>
 800afc2:	454c      	cmp	r4, r9
 800afc4:	d206      	bcs.n	800afd4 <__hexnan+0x64>
 800afc6:	2d07      	cmp	r5, #7
 800afc8:	dc04      	bgt.n	800afd4 <__hexnan+0x64>
 800afca:	462a      	mov	r2, r5
 800afcc:	4649      	mov	r1, r9
 800afce:	4620      	mov	r0, r4
 800afd0:	f7ff ffa8 	bl	800af24 <L_shift>
 800afd4:	4544      	cmp	r4, r8
 800afd6:	d950      	bls.n	800b07a <__hexnan+0x10a>
 800afd8:	2300      	movs	r3, #0
 800afda:	f1a4 0904 	sub.w	r9, r4, #4
 800afde:	f844 3c04 	str.w	r3, [r4, #-4]
 800afe2:	461d      	mov	r5, r3
 800afe4:	464c      	mov	r4, r9
 800afe6:	f8cd b008 	str.w	fp, [sp, #8]
 800afea:	9903      	ldr	r1, [sp, #12]
 800afec:	e7d7      	b.n	800af9e <__hexnan+0x2e>
 800afee:	2a29      	cmp	r2, #41	; 0x29
 800aff0:	d155      	bne.n	800b09e <__hexnan+0x12e>
 800aff2:	3102      	adds	r1, #2
 800aff4:	f8ca 1000 	str.w	r1, [sl]
 800aff8:	f1bb 0f00 	cmp.w	fp, #0
 800affc:	d04f      	beq.n	800b09e <__hexnan+0x12e>
 800affe:	454c      	cmp	r4, r9
 800b000:	d206      	bcs.n	800b010 <__hexnan+0xa0>
 800b002:	2d07      	cmp	r5, #7
 800b004:	dc04      	bgt.n	800b010 <__hexnan+0xa0>
 800b006:	462a      	mov	r2, r5
 800b008:	4649      	mov	r1, r9
 800b00a:	4620      	mov	r0, r4
 800b00c:	f7ff ff8a 	bl	800af24 <L_shift>
 800b010:	4544      	cmp	r4, r8
 800b012:	d934      	bls.n	800b07e <__hexnan+0x10e>
 800b014:	4623      	mov	r3, r4
 800b016:	f1a8 0204 	sub.w	r2, r8, #4
 800b01a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b01e:	429f      	cmp	r7, r3
 800b020:	f842 1f04 	str.w	r1, [r2, #4]!
 800b024:	d2f9      	bcs.n	800b01a <__hexnan+0xaa>
 800b026:	1b3b      	subs	r3, r7, r4
 800b028:	f023 0303 	bic.w	r3, r3, #3
 800b02c:	3304      	adds	r3, #4
 800b02e:	3e03      	subs	r6, #3
 800b030:	3401      	adds	r4, #1
 800b032:	42a6      	cmp	r6, r4
 800b034:	bf38      	it	cc
 800b036:	2304      	movcc	r3, #4
 800b038:	2200      	movs	r2, #0
 800b03a:	4443      	add	r3, r8
 800b03c:	f843 2b04 	str.w	r2, [r3], #4
 800b040:	429f      	cmp	r7, r3
 800b042:	d2fb      	bcs.n	800b03c <__hexnan+0xcc>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	b91b      	cbnz	r3, 800b050 <__hexnan+0xe0>
 800b048:	4547      	cmp	r7, r8
 800b04a:	d126      	bne.n	800b09a <__hexnan+0x12a>
 800b04c:	2301      	movs	r3, #1
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	2005      	movs	r0, #5
 800b052:	e025      	b.n	800b0a0 <__hexnan+0x130>
 800b054:	3501      	adds	r5, #1
 800b056:	2d08      	cmp	r5, #8
 800b058:	f10b 0b01 	add.w	fp, fp, #1
 800b05c:	dd06      	ble.n	800b06c <__hexnan+0xfc>
 800b05e:	4544      	cmp	r4, r8
 800b060:	d9c3      	bls.n	800afea <__hexnan+0x7a>
 800b062:	2300      	movs	r3, #0
 800b064:	2501      	movs	r5, #1
 800b066:	f844 3c04 	str.w	r3, [r4, #-4]
 800b06a:	3c04      	subs	r4, #4
 800b06c:	6822      	ldr	r2, [r4, #0]
 800b06e:	f000 000f 	and.w	r0, r0, #15
 800b072:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b076:	6020      	str	r0, [r4, #0]
 800b078:	e7b7      	b.n	800afea <__hexnan+0x7a>
 800b07a:	2508      	movs	r5, #8
 800b07c:	e7b5      	b.n	800afea <__hexnan+0x7a>
 800b07e:	9b01      	ldr	r3, [sp, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d0df      	beq.n	800b044 <__hexnan+0xd4>
 800b084:	f04f 32ff 	mov.w	r2, #4294967295
 800b088:	f1c3 0320 	rsb	r3, r3, #32
 800b08c:	40da      	lsrs	r2, r3
 800b08e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b092:	4013      	ands	r3, r2
 800b094:	f846 3c04 	str.w	r3, [r6, #-4]
 800b098:	e7d4      	b.n	800b044 <__hexnan+0xd4>
 800b09a:	3f04      	subs	r7, #4
 800b09c:	e7d2      	b.n	800b044 <__hexnan+0xd4>
 800b09e:	2004      	movs	r0, #4
 800b0a0:	b007      	add	sp, #28
 800b0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0a6 <__ascii_mbtowc>:
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	b901      	cbnz	r1, 800b0ac <__ascii_mbtowc+0x6>
 800b0aa:	a901      	add	r1, sp, #4
 800b0ac:	b142      	cbz	r2, 800b0c0 <__ascii_mbtowc+0x1a>
 800b0ae:	b14b      	cbz	r3, 800b0c4 <__ascii_mbtowc+0x1e>
 800b0b0:	7813      	ldrb	r3, [r2, #0]
 800b0b2:	600b      	str	r3, [r1, #0]
 800b0b4:	7812      	ldrb	r2, [r2, #0]
 800b0b6:	1e10      	subs	r0, r2, #0
 800b0b8:	bf18      	it	ne
 800b0ba:	2001      	movne	r0, #1
 800b0bc:	b002      	add	sp, #8
 800b0be:	4770      	bx	lr
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	e7fb      	b.n	800b0bc <__ascii_mbtowc+0x16>
 800b0c4:	f06f 0001 	mvn.w	r0, #1
 800b0c8:	e7f8      	b.n	800b0bc <__ascii_mbtowc+0x16>

0800b0ca <_realloc_r>:
 800b0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ce:	4680      	mov	r8, r0
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	460e      	mov	r6, r1
 800b0d4:	b921      	cbnz	r1, 800b0e0 <_realloc_r+0x16>
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0dc:	f7fd be68 	b.w	8008db0 <_malloc_r>
 800b0e0:	b92a      	cbnz	r2, 800b0ee <_realloc_r+0x24>
 800b0e2:	f7fd fdf5 	bl	8008cd0 <_free_r>
 800b0e6:	4625      	mov	r5, r4
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ee:	f000 f842 	bl	800b176 <_malloc_usable_size_r>
 800b0f2:	4284      	cmp	r4, r0
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	d802      	bhi.n	800b0fe <_realloc_r+0x34>
 800b0f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0fc:	d812      	bhi.n	800b124 <_realloc_r+0x5a>
 800b0fe:	4621      	mov	r1, r4
 800b100:	4640      	mov	r0, r8
 800b102:	f7fd fe55 	bl	8008db0 <_malloc_r>
 800b106:	4605      	mov	r5, r0
 800b108:	2800      	cmp	r0, #0
 800b10a:	d0ed      	beq.n	800b0e8 <_realloc_r+0x1e>
 800b10c:	42bc      	cmp	r4, r7
 800b10e:	4622      	mov	r2, r4
 800b110:	4631      	mov	r1, r6
 800b112:	bf28      	it	cs
 800b114:	463a      	movcs	r2, r7
 800b116:	f7fc ff58 	bl	8007fca <memcpy>
 800b11a:	4631      	mov	r1, r6
 800b11c:	4640      	mov	r0, r8
 800b11e:	f7fd fdd7 	bl	8008cd0 <_free_r>
 800b122:	e7e1      	b.n	800b0e8 <_realloc_r+0x1e>
 800b124:	4635      	mov	r5, r6
 800b126:	e7df      	b.n	800b0e8 <_realloc_r+0x1e>

0800b128 <__ascii_wctomb>:
 800b128:	4603      	mov	r3, r0
 800b12a:	4608      	mov	r0, r1
 800b12c:	b141      	cbz	r1, 800b140 <__ascii_wctomb+0x18>
 800b12e:	2aff      	cmp	r2, #255	; 0xff
 800b130:	d904      	bls.n	800b13c <__ascii_wctomb+0x14>
 800b132:	228a      	movs	r2, #138	; 0x8a
 800b134:	f04f 30ff 	mov.w	r0, #4294967295
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	4770      	bx	lr
 800b13c:	2001      	movs	r0, #1
 800b13e:	700a      	strb	r2, [r1, #0]
 800b140:	4770      	bx	lr
	...

0800b144 <fiprintf>:
 800b144:	b40e      	push	{r1, r2, r3}
 800b146:	b503      	push	{r0, r1, lr}
 800b148:	4601      	mov	r1, r0
 800b14a:	ab03      	add	r3, sp, #12
 800b14c:	4805      	ldr	r0, [pc, #20]	; (800b164 <fiprintf+0x20>)
 800b14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b152:	6800      	ldr	r0, [r0, #0]
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	f000 f83d 	bl	800b1d4 <_vfiprintf_r>
 800b15a:	b002      	add	sp, #8
 800b15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b160:	b003      	add	sp, #12
 800b162:	4770      	bx	lr
 800b164:	2000007c 	.word	0x2000007c

0800b168 <abort>:
 800b168:	2006      	movs	r0, #6
 800b16a:	b508      	push	{r3, lr}
 800b16c:	f000 fa0a 	bl	800b584 <raise>
 800b170:	2001      	movs	r0, #1
 800b172:	f7f6 ffc4 	bl	80020fe <_exit>

0800b176 <_malloc_usable_size_r>:
 800b176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b17a:	1f18      	subs	r0, r3, #4
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	bfbc      	itt	lt
 800b180:	580b      	ldrlt	r3, [r1, r0]
 800b182:	18c0      	addlt	r0, r0, r3
 800b184:	4770      	bx	lr

0800b186 <__sfputc_r>:
 800b186:	6893      	ldr	r3, [r2, #8]
 800b188:	b410      	push	{r4}
 800b18a:	3b01      	subs	r3, #1
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	6093      	str	r3, [r2, #8]
 800b190:	da07      	bge.n	800b1a2 <__sfputc_r+0x1c>
 800b192:	6994      	ldr	r4, [r2, #24]
 800b194:	42a3      	cmp	r3, r4
 800b196:	db01      	blt.n	800b19c <__sfputc_r+0x16>
 800b198:	290a      	cmp	r1, #10
 800b19a:	d102      	bne.n	800b1a2 <__sfputc_r+0x1c>
 800b19c:	bc10      	pop	{r4}
 800b19e:	f000 b933 	b.w	800b408 <__swbuf_r>
 800b1a2:	6813      	ldr	r3, [r2, #0]
 800b1a4:	1c58      	adds	r0, r3, #1
 800b1a6:	6010      	str	r0, [r2, #0]
 800b1a8:	7019      	strb	r1, [r3, #0]
 800b1aa:	4608      	mov	r0, r1
 800b1ac:	bc10      	pop	{r4}
 800b1ae:	4770      	bx	lr

0800b1b0 <__sfputs_r>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	460f      	mov	r7, r1
 800b1b6:	4614      	mov	r4, r2
 800b1b8:	18d5      	adds	r5, r2, r3
 800b1ba:	42ac      	cmp	r4, r5
 800b1bc:	d101      	bne.n	800b1c2 <__sfputs_r+0x12>
 800b1be:	2000      	movs	r0, #0
 800b1c0:	e007      	b.n	800b1d2 <__sfputs_r+0x22>
 800b1c2:	463a      	mov	r2, r7
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ca:	f7ff ffdc 	bl	800b186 <__sfputc_r>
 800b1ce:	1c43      	adds	r3, r0, #1
 800b1d0:	d1f3      	bne.n	800b1ba <__sfputs_r+0xa>
 800b1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1d4 <_vfiprintf_r>:
 800b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	460d      	mov	r5, r1
 800b1da:	4614      	mov	r4, r2
 800b1dc:	4698      	mov	r8, r3
 800b1de:	4606      	mov	r6, r0
 800b1e0:	b09d      	sub	sp, #116	; 0x74
 800b1e2:	b118      	cbz	r0, 800b1ec <_vfiprintf_r+0x18>
 800b1e4:	6a03      	ldr	r3, [r0, #32]
 800b1e6:	b90b      	cbnz	r3, 800b1ec <_vfiprintf_r+0x18>
 800b1e8:	f7fc fdae 	bl	8007d48 <__sinit>
 800b1ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ee:	07d9      	lsls	r1, r3, #31
 800b1f0:	d405      	bmi.n	800b1fe <_vfiprintf_r+0x2a>
 800b1f2:	89ab      	ldrh	r3, [r5, #12]
 800b1f4:	059a      	lsls	r2, r3, #22
 800b1f6:	d402      	bmi.n	800b1fe <_vfiprintf_r+0x2a>
 800b1f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1fa:	f7fc fed6 	bl	8007faa <__retarget_lock_acquire_recursive>
 800b1fe:	89ab      	ldrh	r3, [r5, #12]
 800b200:	071b      	lsls	r3, r3, #28
 800b202:	d501      	bpl.n	800b208 <_vfiprintf_r+0x34>
 800b204:	692b      	ldr	r3, [r5, #16]
 800b206:	b99b      	cbnz	r3, 800b230 <_vfiprintf_r+0x5c>
 800b208:	4629      	mov	r1, r5
 800b20a:	4630      	mov	r0, r6
 800b20c:	f000 f93a 	bl	800b484 <__swsetup_r>
 800b210:	b170      	cbz	r0, 800b230 <_vfiprintf_r+0x5c>
 800b212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b214:	07dc      	lsls	r4, r3, #31
 800b216:	d504      	bpl.n	800b222 <_vfiprintf_r+0x4e>
 800b218:	f04f 30ff 	mov.w	r0, #4294967295
 800b21c:	b01d      	add	sp, #116	; 0x74
 800b21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b222:	89ab      	ldrh	r3, [r5, #12]
 800b224:	0598      	lsls	r0, r3, #22
 800b226:	d4f7      	bmi.n	800b218 <_vfiprintf_r+0x44>
 800b228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b22a:	f7fc febf 	bl	8007fac <__retarget_lock_release_recursive>
 800b22e:	e7f3      	b.n	800b218 <_vfiprintf_r+0x44>
 800b230:	2300      	movs	r3, #0
 800b232:	9309      	str	r3, [sp, #36]	; 0x24
 800b234:	2320      	movs	r3, #32
 800b236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b23a:	2330      	movs	r3, #48	; 0x30
 800b23c:	f04f 0901 	mov.w	r9, #1
 800b240:	f8cd 800c 	str.w	r8, [sp, #12]
 800b244:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b3f4 <_vfiprintf_r+0x220>
 800b248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b24c:	4623      	mov	r3, r4
 800b24e:	469a      	mov	sl, r3
 800b250:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b254:	b10a      	cbz	r2, 800b25a <_vfiprintf_r+0x86>
 800b256:	2a25      	cmp	r2, #37	; 0x25
 800b258:	d1f9      	bne.n	800b24e <_vfiprintf_r+0x7a>
 800b25a:	ebba 0b04 	subs.w	fp, sl, r4
 800b25e:	d00b      	beq.n	800b278 <_vfiprintf_r+0xa4>
 800b260:	465b      	mov	r3, fp
 800b262:	4622      	mov	r2, r4
 800b264:	4629      	mov	r1, r5
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ffa2 	bl	800b1b0 <__sfputs_r>
 800b26c:	3001      	adds	r0, #1
 800b26e:	f000 80a9 	beq.w	800b3c4 <_vfiprintf_r+0x1f0>
 800b272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b274:	445a      	add	r2, fp
 800b276:	9209      	str	r2, [sp, #36]	; 0x24
 800b278:	f89a 3000 	ldrb.w	r3, [sl]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 80a1 	beq.w	800b3c4 <_vfiprintf_r+0x1f0>
 800b282:	2300      	movs	r3, #0
 800b284:	f04f 32ff 	mov.w	r2, #4294967295
 800b288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b28c:	f10a 0a01 	add.w	sl, sl, #1
 800b290:	9304      	str	r3, [sp, #16]
 800b292:	9307      	str	r3, [sp, #28]
 800b294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b298:	931a      	str	r3, [sp, #104]	; 0x68
 800b29a:	4654      	mov	r4, sl
 800b29c:	2205      	movs	r2, #5
 800b29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a2:	4854      	ldr	r0, [pc, #336]	; (800b3f4 <_vfiprintf_r+0x220>)
 800b2a4:	f7fc fe83 	bl	8007fae <memchr>
 800b2a8:	9a04      	ldr	r2, [sp, #16]
 800b2aa:	b9d8      	cbnz	r0, 800b2e4 <_vfiprintf_r+0x110>
 800b2ac:	06d1      	lsls	r1, r2, #27
 800b2ae:	bf44      	itt	mi
 800b2b0:	2320      	movmi	r3, #32
 800b2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2b6:	0713      	lsls	r3, r2, #28
 800b2b8:	bf44      	itt	mi
 800b2ba:	232b      	movmi	r3, #43	; 0x2b
 800b2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c6:	d015      	beq.n	800b2f4 <_vfiprintf_r+0x120>
 800b2c8:	4654      	mov	r4, sl
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	f04f 0c0a 	mov.w	ip, #10
 800b2d0:	9a07      	ldr	r2, [sp, #28]
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2d8:	3b30      	subs	r3, #48	; 0x30
 800b2da:	2b09      	cmp	r3, #9
 800b2dc:	d94d      	bls.n	800b37a <_vfiprintf_r+0x1a6>
 800b2de:	b1b0      	cbz	r0, 800b30e <_vfiprintf_r+0x13a>
 800b2e0:	9207      	str	r2, [sp, #28]
 800b2e2:	e014      	b.n	800b30e <_vfiprintf_r+0x13a>
 800b2e4:	eba0 0308 	sub.w	r3, r0, r8
 800b2e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	46a2      	mov	sl, r4
 800b2f0:	9304      	str	r3, [sp, #16]
 800b2f2:	e7d2      	b.n	800b29a <_vfiprintf_r+0xc6>
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	1d19      	adds	r1, r3, #4
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	9103      	str	r1, [sp, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bfbb      	ittet	lt
 800b300:	425b      	neglt	r3, r3
 800b302:	f042 0202 	orrlt.w	r2, r2, #2
 800b306:	9307      	strge	r3, [sp, #28]
 800b308:	9307      	strlt	r3, [sp, #28]
 800b30a:	bfb8      	it	lt
 800b30c:	9204      	strlt	r2, [sp, #16]
 800b30e:	7823      	ldrb	r3, [r4, #0]
 800b310:	2b2e      	cmp	r3, #46	; 0x2e
 800b312:	d10c      	bne.n	800b32e <_vfiprintf_r+0x15a>
 800b314:	7863      	ldrb	r3, [r4, #1]
 800b316:	2b2a      	cmp	r3, #42	; 0x2a
 800b318:	d134      	bne.n	800b384 <_vfiprintf_r+0x1b0>
 800b31a:	9b03      	ldr	r3, [sp, #12]
 800b31c:	3402      	adds	r4, #2
 800b31e:	1d1a      	adds	r2, r3, #4
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	9203      	str	r2, [sp, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	bfb8      	it	lt
 800b328:	f04f 33ff 	movlt.w	r3, #4294967295
 800b32c:	9305      	str	r3, [sp, #20]
 800b32e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3f8 <_vfiprintf_r+0x224>
 800b332:	2203      	movs	r2, #3
 800b334:	4650      	mov	r0, sl
 800b336:	7821      	ldrb	r1, [r4, #0]
 800b338:	f7fc fe39 	bl	8007fae <memchr>
 800b33c:	b138      	cbz	r0, 800b34e <_vfiprintf_r+0x17a>
 800b33e:	2240      	movs	r2, #64	; 0x40
 800b340:	9b04      	ldr	r3, [sp, #16]
 800b342:	eba0 000a 	sub.w	r0, r0, sl
 800b346:	4082      	lsls	r2, r0
 800b348:	4313      	orrs	r3, r2
 800b34a:	3401      	adds	r4, #1
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b352:	2206      	movs	r2, #6
 800b354:	4829      	ldr	r0, [pc, #164]	; (800b3fc <_vfiprintf_r+0x228>)
 800b356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b35a:	f7fc fe28 	bl	8007fae <memchr>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d03f      	beq.n	800b3e2 <_vfiprintf_r+0x20e>
 800b362:	4b27      	ldr	r3, [pc, #156]	; (800b400 <_vfiprintf_r+0x22c>)
 800b364:	bb1b      	cbnz	r3, 800b3ae <_vfiprintf_r+0x1da>
 800b366:	9b03      	ldr	r3, [sp, #12]
 800b368:	3307      	adds	r3, #7
 800b36a:	f023 0307 	bic.w	r3, r3, #7
 800b36e:	3308      	adds	r3, #8
 800b370:	9303      	str	r3, [sp, #12]
 800b372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b374:	443b      	add	r3, r7
 800b376:	9309      	str	r3, [sp, #36]	; 0x24
 800b378:	e768      	b.n	800b24c <_vfiprintf_r+0x78>
 800b37a:	460c      	mov	r4, r1
 800b37c:	2001      	movs	r0, #1
 800b37e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b382:	e7a6      	b.n	800b2d2 <_vfiprintf_r+0xfe>
 800b384:	2300      	movs	r3, #0
 800b386:	f04f 0c0a 	mov.w	ip, #10
 800b38a:	4619      	mov	r1, r3
 800b38c:	3401      	adds	r4, #1
 800b38e:	9305      	str	r3, [sp, #20]
 800b390:	4620      	mov	r0, r4
 800b392:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b396:	3a30      	subs	r2, #48	; 0x30
 800b398:	2a09      	cmp	r2, #9
 800b39a:	d903      	bls.n	800b3a4 <_vfiprintf_r+0x1d0>
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0c6      	beq.n	800b32e <_vfiprintf_r+0x15a>
 800b3a0:	9105      	str	r1, [sp, #20]
 800b3a2:	e7c4      	b.n	800b32e <_vfiprintf_r+0x15a>
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ac:	e7f0      	b.n	800b390 <_vfiprintf_r+0x1bc>
 800b3ae:	ab03      	add	r3, sp, #12
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	462a      	mov	r2, r5
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	4b13      	ldr	r3, [pc, #76]	; (800b404 <_vfiprintf_r+0x230>)
 800b3b8:	a904      	add	r1, sp, #16
 800b3ba:	f7fb fe69 	bl	8007090 <_printf_float>
 800b3be:	4607      	mov	r7, r0
 800b3c0:	1c78      	adds	r0, r7, #1
 800b3c2:	d1d6      	bne.n	800b372 <_vfiprintf_r+0x19e>
 800b3c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3c6:	07d9      	lsls	r1, r3, #31
 800b3c8:	d405      	bmi.n	800b3d6 <_vfiprintf_r+0x202>
 800b3ca:	89ab      	ldrh	r3, [r5, #12]
 800b3cc:	059a      	lsls	r2, r3, #22
 800b3ce:	d402      	bmi.n	800b3d6 <_vfiprintf_r+0x202>
 800b3d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3d2:	f7fc fdeb 	bl	8007fac <__retarget_lock_release_recursive>
 800b3d6:	89ab      	ldrh	r3, [r5, #12]
 800b3d8:	065b      	lsls	r3, r3, #25
 800b3da:	f53f af1d 	bmi.w	800b218 <_vfiprintf_r+0x44>
 800b3de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3e0:	e71c      	b.n	800b21c <_vfiprintf_r+0x48>
 800b3e2:	ab03      	add	r3, sp, #12
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	462a      	mov	r2, r5
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	4b06      	ldr	r3, [pc, #24]	; (800b404 <_vfiprintf_r+0x230>)
 800b3ec:	a904      	add	r1, sp, #16
 800b3ee:	f7fc f8ef 	bl	80075d0 <_printf_i>
 800b3f2:	e7e4      	b.n	800b3be <_vfiprintf_r+0x1ea>
 800b3f4:	0800c219 	.word	0x0800c219
 800b3f8:	0800c21f 	.word	0x0800c21f
 800b3fc:	0800c223 	.word	0x0800c223
 800b400:	08007091 	.word	0x08007091
 800b404:	0800b1b1 	.word	0x0800b1b1

0800b408 <__swbuf_r>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	460e      	mov	r6, r1
 800b40c:	4614      	mov	r4, r2
 800b40e:	4605      	mov	r5, r0
 800b410:	b118      	cbz	r0, 800b41a <__swbuf_r+0x12>
 800b412:	6a03      	ldr	r3, [r0, #32]
 800b414:	b90b      	cbnz	r3, 800b41a <__swbuf_r+0x12>
 800b416:	f7fc fc97 	bl	8007d48 <__sinit>
 800b41a:	69a3      	ldr	r3, [r4, #24]
 800b41c:	60a3      	str	r3, [r4, #8]
 800b41e:	89a3      	ldrh	r3, [r4, #12]
 800b420:	071a      	lsls	r2, r3, #28
 800b422:	d525      	bpl.n	800b470 <__swbuf_r+0x68>
 800b424:	6923      	ldr	r3, [r4, #16]
 800b426:	b31b      	cbz	r3, 800b470 <__swbuf_r+0x68>
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	6922      	ldr	r2, [r4, #16]
 800b42c:	b2f6      	uxtb	r6, r6
 800b42e:	1a98      	subs	r0, r3, r2
 800b430:	6963      	ldr	r3, [r4, #20]
 800b432:	4637      	mov	r7, r6
 800b434:	4283      	cmp	r3, r0
 800b436:	dc04      	bgt.n	800b442 <__swbuf_r+0x3a>
 800b438:	4621      	mov	r1, r4
 800b43a:	4628      	mov	r0, r5
 800b43c:	f7ff fa58 	bl	800a8f0 <_fflush_r>
 800b440:	b9e0      	cbnz	r0, 800b47c <__swbuf_r+0x74>
 800b442:	68a3      	ldr	r3, [r4, #8]
 800b444:	3b01      	subs	r3, #1
 800b446:	60a3      	str	r3, [r4, #8]
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	6022      	str	r2, [r4, #0]
 800b44e:	701e      	strb	r6, [r3, #0]
 800b450:	6962      	ldr	r2, [r4, #20]
 800b452:	1c43      	adds	r3, r0, #1
 800b454:	429a      	cmp	r2, r3
 800b456:	d004      	beq.n	800b462 <__swbuf_r+0x5a>
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	07db      	lsls	r3, r3, #31
 800b45c:	d506      	bpl.n	800b46c <__swbuf_r+0x64>
 800b45e:	2e0a      	cmp	r6, #10
 800b460:	d104      	bne.n	800b46c <__swbuf_r+0x64>
 800b462:	4621      	mov	r1, r4
 800b464:	4628      	mov	r0, r5
 800b466:	f7ff fa43 	bl	800a8f0 <_fflush_r>
 800b46a:	b938      	cbnz	r0, 800b47c <__swbuf_r+0x74>
 800b46c:	4638      	mov	r0, r7
 800b46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b470:	4621      	mov	r1, r4
 800b472:	4628      	mov	r0, r5
 800b474:	f000 f806 	bl	800b484 <__swsetup_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d0d5      	beq.n	800b428 <__swbuf_r+0x20>
 800b47c:	f04f 37ff 	mov.w	r7, #4294967295
 800b480:	e7f4      	b.n	800b46c <__swbuf_r+0x64>
	...

0800b484 <__swsetup_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4b2a      	ldr	r3, [pc, #168]	; (800b530 <__swsetup_r+0xac>)
 800b488:	4605      	mov	r5, r0
 800b48a:	6818      	ldr	r0, [r3, #0]
 800b48c:	460c      	mov	r4, r1
 800b48e:	b118      	cbz	r0, 800b498 <__swsetup_r+0x14>
 800b490:	6a03      	ldr	r3, [r0, #32]
 800b492:	b90b      	cbnz	r3, 800b498 <__swsetup_r+0x14>
 800b494:	f7fc fc58 	bl	8007d48 <__sinit>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b49e:	0718      	lsls	r0, r3, #28
 800b4a0:	d422      	bmi.n	800b4e8 <__swsetup_r+0x64>
 800b4a2:	06d9      	lsls	r1, r3, #27
 800b4a4:	d407      	bmi.n	800b4b6 <__swsetup_r+0x32>
 800b4a6:	2309      	movs	r3, #9
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	e034      	b.n	800b520 <__swsetup_r+0x9c>
 800b4b6:	0758      	lsls	r0, r3, #29
 800b4b8:	d512      	bpl.n	800b4e0 <__swsetup_r+0x5c>
 800b4ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4bc:	b141      	cbz	r1, 800b4d0 <__swsetup_r+0x4c>
 800b4be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4c2:	4299      	cmp	r1, r3
 800b4c4:	d002      	beq.n	800b4cc <__swsetup_r+0x48>
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f7fd fc02 	bl	8008cd0 <_free_r>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	6363      	str	r3, [r4, #52]	; 0x34
 800b4d0:	89a3      	ldrh	r3, [r4, #12]
 800b4d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4d6:	81a3      	strh	r3, [r4, #12]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	6063      	str	r3, [r4, #4]
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	6023      	str	r3, [r4, #0]
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	f043 0308 	orr.w	r3, r3, #8
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	6923      	ldr	r3, [r4, #16]
 800b4ea:	b94b      	cbnz	r3, 800b500 <__swsetup_r+0x7c>
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4f6:	d003      	beq.n	800b500 <__swsetup_r+0x7c>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f000 f883 	bl	800b606 <__smakebuf_r>
 800b500:	89a0      	ldrh	r0, [r4, #12]
 800b502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b506:	f010 0301 	ands.w	r3, r0, #1
 800b50a:	d00a      	beq.n	800b522 <__swsetup_r+0x9e>
 800b50c:	2300      	movs	r3, #0
 800b50e:	60a3      	str	r3, [r4, #8]
 800b510:	6963      	ldr	r3, [r4, #20]
 800b512:	425b      	negs	r3, r3
 800b514:	61a3      	str	r3, [r4, #24]
 800b516:	6923      	ldr	r3, [r4, #16]
 800b518:	b943      	cbnz	r3, 800b52c <__swsetup_r+0xa8>
 800b51a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b51e:	d1c4      	bne.n	800b4aa <__swsetup_r+0x26>
 800b520:	bd38      	pop	{r3, r4, r5, pc}
 800b522:	0781      	lsls	r1, r0, #30
 800b524:	bf58      	it	pl
 800b526:	6963      	ldrpl	r3, [r4, #20]
 800b528:	60a3      	str	r3, [r4, #8]
 800b52a:	e7f4      	b.n	800b516 <__swsetup_r+0x92>
 800b52c:	2000      	movs	r0, #0
 800b52e:	e7f7      	b.n	800b520 <__swsetup_r+0x9c>
 800b530:	2000007c 	.word	0x2000007c

0800b534 <_raise_r>:
 800b534:	291f      	cmp	r1, #31
 800b536:	b538      	push	{r3, r4, r5, lr}
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	d904      	bls.n	800b548 <_raise_r+0x14>
 800b53e:	2316      	movs	r3, #22
 800b540:	6003      	str	r3, [r0, #0]
 800b542:	f04f 30ff 	mov.w	r0, #4294967295
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b54a:	b112      	cbz	r2, 800b552 <_raise_r+0x1e>
 800b54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b550:	b94b      	cbnz	r3, 800b566 <_raise_r+0x32>
 800b552:	4620      	mov	r0, r4
 800b554:	f000 f830 	bl	800b5b8 <_getpid_r>
 800b558:	462a      	mov	r2, r5
 800b55a:	4601      	mov	r1, r0
 800b55c:	4620      	mov	r0, r4
 800b55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b562:	f000 b817 	b.w	800b594 <_kill_r>
 800b566:	2b01      	cmp	r3, #1
 800b568:	d00a      	beq.n	800b580 <_raise_r+0x4c>
 800b56a:	1c59      	adds	r1, r3, #1
 800b56c:	d103      	bne.n	800b576 <_raise_r+0x42>
 800b56e:	2316      	movs	r3, #22
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	2001      	movs	r0, #1
 800b574:	e7e7      	b.n	800b546 <_raise_r+0x12>
 800b576:	2400      	movs	r4, #0
 800b578:	4628      	mov	r0, r5
 800b57a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b57e:	4798      	blx	r3
 800b580:	2000      	movs	r0, #0
 800b582:	e7e0      	b.n	800b546 <_raise_r+0x12>

0800b584 <raise>:
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <raise+0xc>)
 800b586:	4601      	mov	r1, r0
 800b588:	6818      	ldr	r0, [r3, #0]
 800b58a:	f7ff bfd3 	b.w	800b534 <_raise_r>
 800b58e:	bf00      	nop
 800b590:	2000007c 	.word	0x2000007c

0800b594 <_kill_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	2300      	movs	r3, #0
 800b598:	4d06      	ldr	r5, [pc, #24]	; (800b5b4 <_kill_r+0x20>)
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	4611      	mov	r1, r2
 800b5a0:	602b      	str	r3, [r5, #0]
 800b5a2:	f7f6 fd9c 	bl	80020de <_kill>
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	d102      	bne.n	800b5b0 <_kill_r+0x1c>
 800b5aa:	682b      	ldr	r3, [r5, #0]
 800b5ac:	b103      	cbz	r3, 800b5b0 <_kill_r+0x1c>
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	bd38      	pop	{r3, r4, r5, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20000938 	.word	0x20000938

0800b5b8 <_getpid_r>:
 800b5b8:	f7f6 bd8a 	b.w	80020d0 <_getpid>

0800b5bc <__swhatbuf_r>:
 800b5bc:	b570      	push	{r4, r5, r6, lr}
 800b5be:	460c      	mov	r4, r1
 800b5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c4:	4615      	mov	r5, r2
 800b5c6:	2900      	cmp	r1, #0
 800b5c8:	461e      	mov	r6, r3
 800b5ca:	b096      	sub	sp, #88	; 0x58
 800b5cc:	da0c      	bge.n	800b5e8 <__swhatbuf_r+0x2c>
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b5d6:	bf0c      	ite	eq
 800b5d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b5dc:	2340      	movne	r3, #64	; 0x40
 800b5de:	2000      	movs	r0, #0
 800b5e0:	6031      	str	r1, [r6, #0]
 800b5e2:	602b      	str	r3, [r5, #0]
 800b5e4:	b016      	add	sp, #88	; 0x58
 800b5e6:	bd70      	pop	{r4, r5, r6, pc}
 800b5e8:	466a      	mov	r2, sp
 800b5ea:	f000 f849 	bl	800b680 <_fstat_r>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	dbed      	blt.n	800b5ce <__swhatbuf_r+0x12>
 800b5f2:	9901      	ldr	r1, [sp, #4]
 800b5f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b5f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b5fc:	4259      	negs	r1, r3
 800b5fe:	4159      	adcs	r1, r3
 800b600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b604:	e7eb      	b.n	800b5de <__swhatbuf_r+0x22>

0800b606 <__smakebuf_r>:
 800b606:	898b      	ldrh	r3, [r1, #12]
 800b608:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b60a:	079d      	lsls	r5, r3, #30
 800b60c:	4606      	mov	r6, r0
 800b60e:	460c      	mov	r4, r1
 800b610:	d507      	bpl.n	800b622 <__smakebuf_r+0x1c>
 800b612:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b616:	6023      	str	r3, [r4, #0]
 800b618:	6123      	str	r3, [r4, #16]
 800b61a:	2301      	movs	r3, #1
 800b61c:	6163      	str	r3, [r4, #20]
 800b61e:	b002      	add	sp, #8
 800b620:	bd70      	pop	{r4, r5, r6, pc}
 800b622:	466a      	mov	r2, sp
 800b624:	ab01      	add	r3, sp, #4
 800b626:	f7ff ffc9 	bl	800b5bc <__swhatbuf_r>
 800b62a:	9900      	ldr	r1, [sp, #0]
 800b62c:	4605      	mov	r5, r0
 800b62e:	4630      	mov	r0, r6
 800b630:	f7fd fbbe 	bl	8008db0 <_malloc_r>
 800b634:	b948      	cbnz	r0, 800b64a <__smakebuf_r+0x44>
 800b636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b63a:	059a      	lsls	r2, r3, #22
 800b63c:	d4ef      	bmi.n	800b61e <__smakebuf_r+0x18>
 800b63e:	f023 0303 	bic.w	r3, r3, #3
 800b642:	f043 0302 	orr.w	r3, r3, #2
 800b646:	81a3      	strh	r3, [r4, #12]
 800b648:	e7e3      	b.n	800b612 <__smakebuf_r+0xc>
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	6020      	str	r0, [r4, #0]
 800b64e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b652:	81a3      	strh	r3, [r4, #12]
 800b654:	9b00      	ldr	r3, [sp, #0]
 800b656:	6120      	str	r0, [r4, #16]
 800b658:	6163      	str	r3, [r4, #20]
 800b65a:	9b01      	ldr	r3, [sp, #4]
 800b65c:	b15b      	cbz	r3, 800b676 <__smakebuf_r+0x70>
 800b65e:	4630      	mov	r0, r6
 800b660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b664:	f000 f81e 	bl	800b6a4 <_isatty_r>
 800b668:	b128      	cbz	r0, 800b676 <__smakebuf_r+0x70>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	f023 0303 	bic.w	r3, r3, #3
 800b670:	f043 0301 	orr.w	r3, r3, #1
 800b674:	81a3      	strh	r3, [r4, #12]
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	431d      	orrs	r5, r3
 800b67a:	81a5      	strh	r5, [r4, #12]
 800b67c:	e7cf      	b.n	800b61e <__smakebuf_r+0x18>
	...

0800b680 <_fstat_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	2300      	movs	r3, #0
 800b684:	4d06      	ldr	r5, [pc, #24]	; (800b6a0 <_fstat_r+0x20>)
 800b686:	4604      	mov	r4, r0
 800b688:	4608      	mov	r0, r1
 800b68a:	4611      	mov	r1, r2
 800b68c:	602b      	str	r3, [r5, #0]
 800b68e:	f7f6 fd84 	bl	800219a <_fstat>
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	d102      	bne.n	800b69c <_fstat_r+0x1c>
 800b696:	682b      	ldr	r3, [r5, #0]
 800b698:	b103      	cbz	r3, 800b69c <_fstat_r+0x1c>
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	bd38      	pop	{r3, r4, r5, pc}
 800b69e:	bf00      	nop
 800b6a0:	20000938 	.word	0x20000938

0800b6a4 <_isatty_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	4d05      	ldr	r5, [pc, #20]	; (800b6c0 <_isatty_r+0x1c>)
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	4608      	mov	r0, r1
 800b6ae:	602b      	str	r3, [r5, #0]
 800b6b0:	f7f6 fd82 	bl	80021b8 <_isatty>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d102      	bne.n	800b6be <_isatty_r+0x1a>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	b103      	cbz	r3, 800b6be <_isatty_r+0x1a>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	bd38      	pop	{r3, r4, r5, pc}
 800b6c0:	20000938 	.word	0x20000938

0800b6c4 <_init>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	bf00      	nop
 800b6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ca:	bc08      	pop	{r3}
 800b6cc:	469e      	mov	lr, r3
 800b6ce:	4770      	bx	lr

0800b6d0 <_fini>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	bf00      	nop
 800b6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d6:	bc08      	pop	{r3}
 800b6d8:	469e      	mov	lr, r3
 800b6da:	4770      	bx	lr
